import{_ as a,c as r,al as o,j as i,a as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"Boards Support","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/boards.md","filePath":"en/components/boards.md"}'),c={name:"en/components/boards.md"};function d(s,e,l,h,u,f){return n(),r("div",null,e[0]||(e[0]=[o(`<h1 id="boards-support" tabindex="-1">Boards Support <a class="header-anchor" href="#boards-support" aria-label="Permalink to &quot;Boards Support&quot;">​</a></h1><p>This page discusses the board support logic for NuttX.</p><p>The <code>nuttx/boards</code> directory is a part of the internal OS. It should contain only OS bring-up logic and driver initialization logic.</p><p><strong>THERE SHOULD BE NO APPLICATION CALLABLE LOGIC IN THIS DIRECTORY.</strong></p><p>If you have board-specific, application callable logic, that logic should not go here. Please consider using a sub-directory under <code>apps/platform</code> instead.</p><h2 id="board-specific-configurations" tabindex="-1">Board-Specific Configurations <a class="header-anchor" href="#board-specific-configurations" aria-label="Permalink to &quot;Board-Specific Configurations&quot;">​</a></h2><p>The NuttX configuration consists of:</p><ul><li><p>Processor architecture specific files. These are the files contained in the <code>arch/&lt;arch&gt;/</code> directory.</p></li><li><p>Chip/SoC specific files. Each processor architecture is embedded in a chip or System-on-a-Chip (SoC) architecture. The full chip architecture includes the processor architecture plus chip-specific interrupt logic, general purpose I/O (GIO) logic, and specialized, internal peripherals (such as UARTs, USB, etc.).</p><p>These chip-specific files are contained within chip-specific sub-directories in the <code>arch/&lt;arch&gt;/</code> directory and are selected via the <code>CONFIG_ARCH_name</code> selection</p></li><li><p>Board specific files. In order to be usable, the chip must be contained in a board environment. The board configuration defines additional properties of the board including such things as peripheral LEDs, external peripherals (such as network, USB, etc.).</p><p>These board-specific configuration files can be found in the <code>boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/</code> sub-directories. Additional configuration information may be available in board-specific documentation pages at <code>Documentation/platforms/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;</code>.</p></li></ul><p>The <code>boards/</code> subdirectory contains configuration data for each board. These board-specific configurations plus the architecture-specific configurations in the <code>arch/</code> subdirectory completely define a customized port of NuttX.</p><h2 id="boards-directory-structure" tabindex="-1"><code>boards/</code> Directory Structure <a class="header-anchor" href="#boards-directory-structure" aria-label="Permalink to &quot;\`boards/\` Directory Structure&quot;">​</a></h2><p>The <code>boards/</code> directory contains board specific configuration logic. Each board must provide a subdirectory <code>&lt;board&gt;</code> under <code>boards/</code> with the following characteristics:</p><pre><code>&lt;board&gt;
|-- include/
|   \`-- (board-specific header files)
|-- src/
|   |-- Makefile
|   \`-- (board-specific source files)
|-- &lt;config1-dir&gt;
|   |-- Make.defs
|   \`-- defconfig
|-- &lt;config2-dir&gt;
|   |-- Make.defs
|   \`-- defconfig
...
</code></pre><h2 id="summary-of-files" tabindex="-1">Summary of Files <a class="header-anchor" href="#summary-of-files" aria-label="Permalink to &quot;Summary of Files&quot;">​</a></h2><ul><li><code>include/</code> -- This directory contains board specific header files. This directory will be linked as include/arch/board at configuration time and can be included via #include &lt;arch/board/header.h&gt;<code>. These header file can only be included by files in</code>arch/&lt;arch&gt;include/<code>and</code>arch/&lt;arch&gt;/src\`\`</li><li><code>src/</code> -- This directory contains board specific drivers. This directory will be linked as <code>arch/&lt;arch&gt;/src/board</code> at configuration time and will be integrated into the build system.</li><li><code>src/Makefile</code> -- This makefile will be invoked to build the board specific drivers. It must support the following targets: <code>libext(LIBEXT)</code>, <code>clean</code>, and <code>distclean</code>.</li></ul><p>A board may have various different configurations using these common source files. Each board configuration is described by two files: Make.defs and defconfig. Typically, each set of configuration files is retained in a separate configuration sub-directory (<code>&lt;config1-dir&gt;</code>, <code>&lt;config2-dir&gt;</code>, .. in the above diagram).</p><ul><li><p><code>Make.defs</code> -- This makefile fragment provides architecture and tool-specific build options. It will be included by all other makefiles in the build (once it is installed). This make fragment should define:</p><pre><code>Tools: CC, LD, AR, NM, OBJCOPY, OBJDUMP
Tool options: CFLAGS, LDFLAGS
</code></pre><p>When this makefile fragment runs, it will be passed TOPDIR which is the path to the root directory of the build. This makefile fragment should include:</p><pre><code>(TOPDIR)/.config          : NuttX configuration
(TOPDIR)/tools/Config.mk  : Common definitions
</code></pre><p>Definitions in the <code>Make.defs</code> file probably depend on some of the settings in the <code>.config</code> file. For example, the <code>CFLAGS</code> will most likely be different if <code>CONFIG_DEBUG_FEATURES=y</code>.</p><p>The included <code>tools/Config.mk</code> file contains additional definitions that may be overridden in the architecture-specific <code>Make.defs</code> file as necessary:</p><pre><code>COMPILE, ASSEMBLE, ARCHIVE, CLEAN, and MKDEP macros
</code></pre></li><li><p><code>defconfig</code> -- This is a configuration file similar to the Linux configuration file. In contains variable/value pairs like:</p><pre><code>CONFIG_VARIABLE=value
</code></pre><p>This configuration file will be used at build time:</p><blockquote><p>(1) as a makefile fragment included in other makefiles, and (2) to generate include/nuttx/config.h which is included by most C files in the system.</p></blockquote></li></ul><h2 id="configuration-variables" tabindex="-1">Configuration Variables <a class="header-anchor" href="#configuration-variables" aria-label="Permalink to &quot;Configuration Variables&quot;">​</a></h2><p>At one time, this section provided a list of all NuttX configuration variables. However, NuttX has since converted to use the kconfig-frontends tools (See <a href="https://bitbucket.org/nuttx/tools/src/master/kconfig-frontends/" target="_blank" rel="noreferrer">https://bitbucket.org/nuttx/tools/src/master/kconfig-frontends/</a>.) Now, the NuttX configuration is determined by a self-documenting set of Kconfig files.</p><p>The current NuttX configuration variables are also documented in separate, auto-generated configuration variable document. That configuration variable document is generated using the kconfig2html tool that can be found in the nuttx/tools directory. That tool analyzes the NuttX Kconfig files and generates an excruciatingly boring HTML document.</p><p>The latest boring configuration variable documentation can be regenerated at any time using that tool or, more appropriately, the wrapper script at nuttx/tools/mkconfigvars.sh. That script will generate the file nuttx/Documentation/NuttXConfigVariables.html.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2>`,21),i("p",null,[t("The list of supported boards can be found in "),i("code",{class:"interpreted-text",role:"ref"},"Supported Platforms <platforms>"),t(".")],-1),o(`<h2 id="configuring-nuttx" tabindex="-1">Configuring NuttX <a class="header-anchor" href="#configuring-nuttx" aria-label="Permalink to &quot;Configuring NuttX&quot;">​</a></h2><p>Configuring NuttX requires only copying:</p><pre><code>boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/&lt;config-dir&gt;/Make.def to {TOPDIR}/Make.defs
boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/&lt;config-dir&gt;/defconfig to {TOPDIR}/.config
</code></pre><ul><li><p><code>tools/configure.sh</code></p><p>There is a script that automates these steps. The following steps will accomplish the same configuration:</p><pre><code>tools/configure.sh &lt;board&gt;:&lt;config-dir&gt;
</code></pre><p>There is an alternative Windows batch file that can be used in the windows native environment like:</p><pre><code>tools\\configure.bat &lt;board&gt;:&lt;config-dir&gt;
</code></pre><p>See [[tool](\`tool.md)s/index]{.title-ref} for more information about these scripts.</p><p>And if your application directory is not in the standard location (<code>../apps</code> or <code>../apps-&lt;version&gt;</code>), then you should also specify the location of the application directory on the command line like:</p><pre><code>cd tools
./configure.sh -a &lt;app-dir&gt; &lt;board&gt;:&lt;config-dir&gt;
</code></pre></li></ul><h2 id="adding-a-new-board-configuration" tabindex="-1">Adding a New Board Configuration <a class="header-anchor" href="#adding-a-new-board-configuration" aria-label="Permalink to &quot;Adding a New Board Configuration&quot;">​</a></h2><p>Okay, so you have created a new board configuration directory. Now, how do you hook this board into the configuration system so that you can select with <code>make menuconfig</code>?</p><p>You will need modify the file <code>boards/Kconfig</code>. Let&#39;s look at the STM32F4-Discovery configuration in the <code>Kconfig</code> file and see how we would add a new board directory to the configuration. For this configuration let&#39;s say that you new board resides in the directory <code>boards/myarch/mychip/myboard</code>; It uses an MCU selected with <code>CONFIG_ARCH_CHIP_MYMCU</code>; and you want the board to be selected with <code>CONFIG_ARCH_BOARD_MYBOARD</code>. Then here is how you can clone the STM32F4-Discovery configuration in <code>boards/Kconfig</code> to support your new board configuration.</p><p>In <code>boards/Kconfig</code> for the stm32f4-discovery, you will see a configuration definition like this:</p><p>The above selects the STM32F4-Discovery board. The <code>select</code> lines say that the board has both LEDs and buttons and that the board can generate interrupts from the button presses. You can just copy the above configuration definition to a new location (notice that they the configurations are in alphabetical order). Then you should edit the configuration to support your board. The final configuration definition might look something like:</p><p>Later in the <code>boards/Kconfig</code> file, you will see a long, long string configuration with lots of defaults like this:</p><p>This logic will assign string value to a configuration variable called <code>CONFIG_ARCH_BOARD</code> that will name the directory where the board-specific files reside. In our case, these files reside in <code>boards/myarch/mychip/myboard</code> and we add the following to the long list of defaults (again in alphabetical order):</p><p>Now the build system knows where to find your board configuration!</p><p>And finally, add something like this near the bottom of <code>boards/myarch/mychip/myboard</code>:</p><p>This includes additional, board-specific configuration variable definitions in <code>boards/myarch/mychip/myboard/Kconfig</code>.</p><h2 id="building-symbol-tables" tabindex="-1">Building Symbol Tables <a class="header-anchor" href="#building-symbol-tables" aria-label="Permalink to &quot;Building Symbol Tables&quot;">​</a></h2><p>Symbol tables are needed at several of the binfmt interfaces in order to bind a module to the base code. These symbol tables can be tricky to create and will probably have to be tailored for any specific application, balancing the number of symbols and the size of the symbol table against the symbols required by the applications.</p><p>The top-level System.map file is one good source of symbol information (which, or course, was just generated from the top-level nuttx file using the GNU &#39;nm&#39; tool).</p><p>There are also common-separated value (CSV) values in the source try that provide information about symbols. In particular:</p><pre><code>nuttx/syscall/syscall.csv - Describes the NuttX RTOS interface, and
nuttx/lib/libc.csv        - Describes the NuttX C library interface.
</code></pre><p>There is a tool at nuttx/tools/mksymtab that will use these CSV files as input to generate a generic symbol table. See <code>nuttx/tools/README.txt</code> for more information about using the mksymtab tool.</p>`,20)]))}const g=a(c,[["render",d]]);export{b as __pageData,g as default};
