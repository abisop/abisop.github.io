import{_ as r,c as n,al as a,j as e,a as t,o}from"./chunks/framework.NFAqBSgQ.js";const C=JSON.parse('{"title":"ST STM32F3","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f3/index.md","filePath":"en/platforms/arm/stm32f3/index.md"}'),l={name:"en/platforms/arm/stm32f3/index.md"};function s(u,i,d,p,h,c){return o(),n("div",null,i[0]||(i[0]=[a(`<h1 id="st-stm32f3" tabindex="-1">ST STM32F3 <a class="header-anchor" href="#st-stm32f3" aria-label="Permalink to &quot;ST STM32F3&quot;">​</a></h1><h2 id="supported-mcus" tabindex="-1">Supported MCUs <a class="header-anchor" href="#supported-mcus" aria-label="Permalink to &quot;Supported MCUs&quot;">​</a></h2><p>TODO</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates peripherals supported in NuttX:</p><p>Peripheral Support Notes</p><hr><p>FLASH CRC PM RCC GPIO SYSCFG DMA EXTI ADC SDADC DAC COMP OPAMP TSC TIM HRTIM IRTIM IWDG WWDG RTC I2C USART SPI I2S CAN USB HDMI-CEC Yes Yes ? Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes No Yes Yes No ? ? Yes Yes Yes Yes ? Yes Yes No</p><h3 id="memory" tabindex="-1">Memory <a class="header-anchor" href="#memory" aria-label="Permalink to &quot;Memory&quot;">​</a></h3><ul><li>CONFIG_RAM_SIZE - Describes the installed DRAM (SRAM in this case)</li><li>CONFIG_RAM_START - The start address of installed DRAM</li><li>CONFIG_STM32_CCMEXCLUDE - Exclude CCM SRAM from the HEAP</li><li>CONFIG_ARCH_INTERRUPTSTACK - This architecture supports an interrupt stack. If defined, this symbol is the size of the interrupt stack in bytes. If not defined, the user task stacks will be used during interrupt handling.</li><li>CONFIG_ARCH_STACKDUMP - Do stack dumps after assertions</li></ul><h3 id="clock" tabindex="-1">Clock <a class="header-anchor" href="#clock" aria-label="Permalink to &quot;Clock&quot;">​</a></h3><ul><li><p>CONFIG_ARCH_BOARD_STM32_CUSTOM_CLOCKCONFIG - Enables special STM32 clock configuration features.:</p><pre><code>CONFIG_ARCH_BOARD_STM32_CUSTOM_CLOCKCONFIG=n
</code></pre></li><li><p>CONFIG_ARCH_LOOPSPERMSEC - Must be calibrated for correct operation of delay loops</p></li></ul><h3 id="timers" tabindex="-1">Timers <a class="header-anchor" href="#timers" aria-label="Permalink to &quot;Timers&quot;">​</a></h3><p>Timer devices may be used for different purposes. One special purpose is to generate modulated outputs for such things as motor control. If CONFIG_STM32_TIMn is defined (as above) then the following may also be defined to indicate that the timer is intended to be used for pulsed output modulation, ADC conversion, or DAC conversion. Note that ADC/DAC require two definition: Not only do you have to assign the timer (n) for used by the ADC or DAC, but then you also have to configure which ADC or DAC (m) it is assigned to.</p><ul><li>CONFIG_STM32_TIMn_PWM Reserve timer n for use by PWM, n=1,..,14</li><li>CONFIG_STM32_TIMn_ADC Reserve timer n for use by ADC, n=1,..,14</li><li>CONFIG_STM32_TIMn_ADCm Reserve timer n to trigger ADCm, n=1,..,14, m=1,..,3</li><li>CONFIG_STM32_TIMn_DAC Reserve timer n for use by DAC, n=1,..,14</li><li>CONFIG_STM32_TIMn_DACm Reserve timer n to trigger DACm, n=1,..,14, m=1,..,2</li></ul><p>For each timer that is enabled for PWM usage, we need the following additional configuration settings:</p>`,16),e("ul",{"1,..,4":""},[e("li",null,"CONFIG_STM32_TIMx_CHANNEL - Specifies the timer output channel")],-1),a(`<p>NOTE: The STM32 timers are each capable of generating different signals on each of the four channels with different duty cycles. That capability is not supported by this driver: Only one output channel per timer.</p><h3 id="jtag" tabindex="-1">JTAG <a class="header-anchor" href="#jtag" aria-label="Permalink to &quot;JTAG&quot;">​</a></h3><p>JTAG Enable settings (by default JTAG-DP and SW-DP are disabled):</p><ul><li>CONFIG_STM32_JTAG_FULL_ENABLE - Enables full SWJ (JTAG-DP + SW-DP)</li><li>CONFIG_STM32_JTAG_NOJNTRST_ENABLE - Enables full SWJ (JTAG-DP + SW-DP) but without JNTRST.</li><li>CONFIG_STM32_JTAG_SW_ENABLE - Set JTAG-DP disabled and SW-DP enabled</li></ul><h3 id="usart" tabindex="-1">USART <a class="header-anchor" href="#usart" aria-label="Permalink to &quot;USART&quot;">​</a></h3><p>Options:</p><ul><li>CONFIG_U[S]ARTn_SERIAL_CONSOLE - selects the USARTn (n=1,2,3) or UARTm (m=4,5) for the console and ttys0 (default is the USART1).</li><li>CONFIG_U[S]ARTn_RXBUFSIZE - Characters are buffered as received. This specific the size of the receive buffer</li><li>CONFIG_U[S]ARTn_TXBUFSIZE - Characters are buffered before being sent. This specific the size of the transmit buffer</li><li>CONFIG_U[S]ARTn_BAUD - The configure BAUD of the UART. Must be</li><li>CONFIG_U[S]ARTn_BITS - The number of bits. Must be either 7 or 8.</li><li>CONFIG_U[S]ARTn_PARTIY - 0=no parity, 1=odd parity, 2=even parity</li><li>CONFIG_U[S]ARTn_2STOP - Two stop bits</li></ul><h3 id="can-character-device" tabindex="-1">CAN character device <a class="header-anchor" href="#can-character-device" aria-label="Permalink to &quot;CAN character device&quot;">​</a></h3><ul><li>CONFIG_CAN - Enables CAN support (one or both of CONFIG_STM32_CAN1 or CONFIG_STM32_CAN2 must also be defined)</li><li>CONFIG_CAN_EXTID - Enables support for the 29-bit extended ID. Default Standard 11-bit IDs.</li><li>CONFIG_CAN_TXFIFOSIZE - The size of the circular tx buffer of CAN messages. Default: 8</li><li>CONFIG_CAN_RXFIFOSIZE - The size of the circular rx buffer of CAN messages. Default: 8</li><li>CONFIG_CAN_NPENDINGRTR - The size of the list of pending RTR requests. Default: 4</li><li>CONFIG_CAN_LOOPBACK - A CAN driver may or may not support a loopback mode for testing. The STM32 CAN driver does support loopback mode.</li><li>CONFIG_STM32_CAN1_BAUD - CAN1 BAUD rate. Required if CONFIG_STM32_CAN1 is defined.</li><li>CONFIG_STM32_CAN2_BAUD - CAN1 BAUD rate. Required if CONFIG_STM32_CAN2 is defined.</li><li>CONFIG_STM32_CAN_TSEG1 - The number of CAN time quanta in segment <ol><li>Default: 6</li></ol></li><li>CONFIG_STM32_CAN_TSEG2 - the number of CAN time quanta in segment 2. Default: 7</li><li>CONFIG_STM32_CAN_REGDEBUG - If CONFIG_DEBUG_FEATURES is set, this will generate an dump of all CAN registers.</li></ul><h3 id="can-socketcan" tabindex="-1">CAN SocketCAN <a class="header-anchor" href="#can-socketcan" aria-label="Permalink to &quot;CAN SocketCAN&quot;">​</a></h3><p>TODO</p><h3 id="spi" tabindex="-1">SPI <a class="header-anchor" href="#spi" aria-label="Permalink to &quot;SPI&quot;">​</a></h3><ul><li>CONFIG_STM32_SPI_INTERRUPTS - Select to enable interrupt driven SPI support. Non-interrupt-driven, poll-waiting is recommended if the interrupt rate would be to high in the interrupt driven case.</li><li>CONFIG_STM32_SPIx_DMA - Use DMA to improve SPIx transfer performance. Cannot be used with CONFIG_STM32_SPI_INTERRUPT.</li></ul><h3 id="usb-fs" tabindex="-1">USB FS <a class="header-anchor" href="#usb-fs" aria-label="Permalink to &quot;USB FS&quot;">​</a></h3><p>TODO</p><h2 id="fpu" tabindex="-1">FPU <a class="header-anchor" href="#fpu" aria-label="Permalink to &quot;FPU&quot;">​</a></h2><h3 id="fpu-configuration-options" tabindex="-1">FPU Configuration Options <a class="header-anchor" href="#fpu-configuration-options" aria-label="Permalink to &quot;FPU Configuration Options&quot;">​</a></h3><p>There are two version of the FPU support built into the STM32 port.</p><ol><li><p>Non-Lazy Floating Point Register Save</p><p>In this configuration floating point register save and restore is implemented on interrupt entry and return, respectively. In this case, you may use floating point operations for interrupt handling logic if necessary. This FPU behavior logic is enabled by default with:</p><pre><code>CONFIG_ARCH_FPU=y
</code></pre></li><li><p>Lazy Floating Point Register Save.</p><p>An alternative mplementation only saves and restores FPU registers only on context switches. This means: (1) floating point registers are not stored on each context switch and, hence, possibly better interrupt performance. But, (2) since floating point registers are not saved, you cannot use floating point operations within interrupt handlers.</p><p>This logic can be enabled by simply adding the following to your .config file:</p><pre><code>CONFIG_ARCH_FPU=y
</code></pre></li></ol><h2 id="flashing-and-debugging" tabindex="-1">Flashing and Debugging <a class="header-anchor" href="#flashing-and-debugging" aria-label="Permalink to &quot;Flashing and Debugging&quot;">​</a></h2><p>NuttX firmware Flashing with STLink probe and OpenOCD:</p><pre><code>openocd -f  interface/stlink.cfg -f target/stm32f3x.cfg -c &#39;program nuttx.bin 0x08000000; reset run; exit&#39;
</code></pre><p>Remote target Reset with STLink probe and OpenOCD:</p><pre><code>openocd -f interface/stlink.cfg -f target/stm32f3x.cfg -c &#39;init; reset run; exit&#39;
</code></pre><p>Remote target Debug with STLink probe and OpenOCD:</p>`,25),e("blockquote",null,[e("ol",null,[e("li",null,[e("p",null,[t("You need to have NuttX built with debug symbols, see "),e("code",{class:"interpreted-text",role:"ref"},"debugging"),t(".")])]),e("li",null,[e("p",null,"Launch the OpenOCD GDB server:"),e("pre",null,[e("code",null,`openocd -f interface/stlink.cfg -f target/stm32f3x.cfg -c 'init; reset halt'
`)])]),e("li",null,[e("p",null,"You can now attach to remote OpenOCD GDB server with your favorite debugger, for instance gdb:"),e("pre",null,[e("code",null,`arm-none-eabi-gdb --tui nuttx -ex 'target extended-remote localhost:3333'
(gdb) monitor reset halt
(gdb) breakpoint nsh_main
(gdb) continue
`)])])])],-1),e("h2",{id:"supported-boards",tabindex:"-1"},[t("Supported Boards "),e("a",{class:"header-anchor",href:"#supported-boards","aria-label":'Permalink to "Supported Boards"'},"​")],-1),e("blockquote",null,[e("p",null,[t("boards/"),e("em",null,"/")])],-1)]))}const _=r(l,[["render",s]]);export{C as __pageData,_ as default};
