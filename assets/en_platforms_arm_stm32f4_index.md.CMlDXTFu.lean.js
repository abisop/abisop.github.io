import{_ as a,c as r,al as i,j as e,a as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"ST STM32F4","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f4/index.md","filePath":"en/platforms/arm/stm32f4/index.md"}'),l={name:"en/platforms/arm/stm32f4/index.md"};function s(d,o,u,h,c,p){return n(),r("div",null,o[0]||(o[0]=[i("",16),e("ul",{"1,..,4":""},[e("li",null,"CONFIG_STM32_TIMx_CHANNEL - Specifies the timer output channel")],-1),i("",72),e("blockquote",null,[e("ol",null,[e("li",null,[e("p",null,[t("You need to have NuttX built with debug symbols, see "),e("code",{class:"interpreted-text",role:"ref"},"debugging"),t(".")])]),e("li",null,[e("p",null,"Launch the OpenOCD GDB server:"),e("pre",null,[e("code",null,`openocd -f interface/stlink.cfg -f target/stm32f4x.cfg -c 'init; reset halt'
`)])]),e("li",null,[e("p",null,"You can now attach to remote OpenOCD GDB server with your favorite debugger, for instance gdb:"),e("pre",null,[e("code",null,`arm-none-eabi-gdb --tui nuttx -ex 'target extended-remote localhost:3333'
(gdb) monitor reset halt
(gdb) breakpoint nsh_main
(gdb) continue
`)])])])],-1),e("h2",{id:"supported-boards",tabindex:"-1"},[t("Supported Boards "),e("a",{class:"header-anchor",href:"#supported-boards","aria-label":'Permalink to "Supported Boards"'},"â€‹")],-1),e("blockquote",null,[e("p",null,[t("boards/"),e("em",null,"/")])],-1)]))}const m=a(l,[["render",s]]);export{b as __pageData,m as default};
