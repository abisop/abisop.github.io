import{_ as t,c as n,al as a,o}from"./chunks/framework.NFAqBSgQ.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/lpc17xx/boards/pnev5180b/README.md","filePath":"en/platforms/arm/lpc17xx/boards/pnev5180b/README.md"}'),i={name:"en/platforms/arm/lpc17xx/boards/pnev5180b/README.md"};function r(s,e,P,p,l,d){return o(),n("div",null,e[0]||(e[0]=[a(`<p>README ^^^^^^</p><p>README for NuttX port to NXP&#39;s PNEV5180B, which is a development board containing a NXP-LPC1769 MCU and a PN5180 NFC Frontend.</p><p>Contents ^^^^^^^^</p><p>NXP&#39;s PNEV5180B Board Configurations</p><p>NXP&#39;s PNEV5180B Board ^^^^^^^^^^^^^^^^^^^^^</p><p>Pin Description On Board Connector</p><hr><p>P0.2/TXD0/AD0.7 TX J201 P0.3/RXD0/AD0.6 RX<br> P0.22/RTS1/TD1 LD200 ORANGE LED P0.15/TXD1/SCK0/SCK PN5180-SCK<br> P0.16/RXD1/SSEL0/SSEL PN5180-SSEL PN5180 P0.17/CTS1/MISO0/MISO PN5180-MISO<br> P0.18/DCD1/M0SI0/MOSI PN5180-MOSI<br> P0.19/DSR1/SDA1 EEPROM (Not Assembled) P0.20/DTR1/SCL1 EEPROM<br> P0.21/RI1/RD1 PN5180-AUX2 PN5180 P0.29/USB_D+ USB-D+ USB P0.30/USB_D- USB-D-<br> P2.0/PWM1.1/TXD1 LD201 RED LED P2.5/PWM1.6/DTR1/TRACEDATA0 PN5180-nPN_RST<br> P2.9/USB_CONNECT/RXD2 USB_CONNECT USB P2.11/nEINT1/I2STX_CLK PN5180-BUSY PN5180 P2.12/nEINT2/I2STX_WS PN5180-IRQ<br> P3.25/MAT0.0/PWM1.2 LD203 GREEN LED P3.26/STCLK/MAT0.1/PWM1.3 LD202 BLUE LED</p><p>NXP&#39;s PNEV5180B Board ^^^^^^^^^^^^^^^^^^^^^</p><h2 id="uart" tabindex="-1">UART <a class="header-anchor" href="#uart" aria-label="Permalink to &quot;UART&quot;">​</a></h2><p>Board LPC1769 Signal Pin ----------------- ----------------- TX P0.2 TXD0 RX P0.3 RXD0</p><h2 id="usb" tabindex="-1">USB <a class="header-anchor" href="#usb" aria-label="Permalink to &quot;USB&quot;">​</a></h2><p>Board LPC1769 Signal Pin ----------------- ----------------- USB_CONNECT P2.9 USB_CONNECT USB_DM P0.29 USB_D- USB_DP P0.30 USB_D+</p><h2 id="pn5180" tabindex="-1">PN5180 <a class="header-anchor" href="#pn5180" aria-label="Permalink to &quot;PN5180&quot;">​</a></h2><p>Board LPC1769 Signal Pin ----------------- ----------------- PN5180_SCK P0.15 SCK PN5180_SSEL P0.16 SSEL PN5180_MISO P0.17 MISO PN5180_MOSI P0.18 MOSI PN5180_AUX2 P0.21 GPIO I PN5180_nPN_RST P2.5 GPIO O PN5180_BUSY P2.11 GPIO I PN5180_IRQ P2.12 GPIO I</p><p>Configurations ^^^^^^^^^^^^^^</p><p>Each PNEV5180B configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>cd tools
./configure.sh pnev5180b:&lt;subdir&gt;
cd -
</code></pre><p>Where <code>&lt;subdir&gt;</code> is one of the following:</p><p>nsh: Configures the NuttShell (nsh) located at apps/system/nsh. The Configuration enables the serial NSH interface.</p><pre><code>NOTES:

1. This configuration uses the mconf-based configuration tool.  To
   change this configurations using that tool, you should:

   a. Build and install the kconfig-mconf tool.  See nuttx/README.txt
      see additional README.txt files in the NuttX tools repository.

   b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the
      reconfiguration process.
</code></pre><p>usbnsh: Configures the NuttShell (nsh) located at apps/system/nsh. The Configuration enables the CDC/ACM based NSH interface on /dev/ttyACM0.</p><p>nsh-cdcecm: Configures the NuttShell (nsh) to provide a terminal on UART0. The Configuration also provides network interface eth0 via CDC/ECM.</p><p>usbnsh-cdcecm: This configuration includes a USB Composite Device with both CDC/ACM and CDC/ECM. NuttShell provides a terminal via CDC/ACM. A network interface (eth0) is also provided via CDC/ECM.</p><p>knsh: This is identical to the nsh configuratio above except that NuttX is built as a kernel-mode, monolithic module and the user applications are built separately.</p>`,25)]))}const h=t(i,[["render",r]]);export{S as __pageData,h as default};
