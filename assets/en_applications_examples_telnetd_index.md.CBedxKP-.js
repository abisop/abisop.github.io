import{_ as t,c as l,al as o,o as d}from"./chunks/framework.NFAqBSgQ.js";const T=JSON.parse('{"title":"telnetd Simple Telnet Shell","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/telnetd/index.md","filePath":"en/applications/examples/telnetd/index.md"}'),a={name:"en/applications/examples/telnetd/index.md"};function i(c,e,n,s,r,E){return d(),l("div",null,e[0]||(e[0]=[o('<h1 id="telnetd-simple-telnet-shell" tabindex="-1"><code>telnetd</code> Simple Telnet Shell <a class="header-anchor" href="#telnetd-simple-telnet-shell" aria-label="Permalink to &quot;`telnetd` Simple Telnet Shell&quot;">​</a></h1><p>This directory contains a functional port of the tiny uIP shell. In the NuttX environment, the NuttShell (at <code>apps/nshlib</code>) supersedes this tiny shell and also supports <code>telnetd</code>.</p><ul><li><code>CONFIG_EXAMPLES_TELNETD</code> – Enable the Telnetd example.</li><li><code>CONFIG_NETUTILS_NETLIB</code>, <code>CONFIG_NETUTILS_TELNETD</code> – Enable netutils libraries needed by the Telnetd example.</li><li><code>CONFIG_EXAMPLES_TELNETD_DAEMONPRIO</code> – Priority of the Telnet daemon. Default: <code>SCHED_PRIORITY_DEFAULT</code>.</li><li><code>CONFIG_EXAMPLES_TELNETD_DAEMONSTACKSIZE</code> – Stack size allocated for the Telnet daemon. Default: <code>2048</code>.</li><li><code>CONFIG_EXAMPLES_TELNETD_CLIENTPRIO</code> – Priority of the Telnet client. Default: <code>SCHED_PRIORITY_DEFAULT</code>.</li><li><code>CONFIG_EXAMPLES_TELNETD_CLIENTSTACKSIZE</code> – Stack size allocated for the Telnet client. Default: <code>2048</code>.</li><li><code>CONFIG_EXAMPLES_TELNETD_NOMAC</code> – If the hardware has no MAC address of its own, define this <code>=y</code> to provide a bogus address for testing.</li><li><code>CONFIG_EXAMPLES_TELNETD_IPADDR</code> – The target IP address. Default <code>10.0.0.2</code>.</li><li><code>CONFIG_EXAMPLES_TELNETD_DRIPADDR</code> – The default router address. Default <code>10.0.0.1</code>.</li><li><code>CONFIG_EXAMPLES_TELNETD_NETMASK</code> – The network mask. Default: <code>255.255.255.0</code>.</li></ul><p>Also, make sure that you have the following set in the NuttX configuration file or else the performance will be very bad (because there will be only one character per TCP transfer):</p><ul><li><code>CONFIG_STDIO_BUFFER_SIZE</code> – Some value <code>&gt;= 64</code></li><li><code>CONFIG_STDIO_LINEBUFFER=y</code></li></ul>',5)]))}const h=t(a,[["render",i]]);export{T as __pageData,h as default};
