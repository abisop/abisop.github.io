import{_ as o,c as t,al as a,o as s}from"./chunks/framework.NFAqBSgQ.js";const i="/assets/pm.CHyK0w1a.png",h=JSON.parse('{"title":"Power Management","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/power/pm/index.md","filePath":"en/components/drivers/special/power/pm/index.md"}'),r={name:"en/components/drivers/special/power/pm/index.md"};function n(l,e,p,d,c,m){return s(),t("div",null,e[0]||(e[0]=[a('<h1 id="power-management" tabindex="-1">Power Management <a class="header-anchor" href="#power-management" aria-label="Permalink to &quot;Power Management&quot;">​</a></h1><p>This needs to be updated to account for the different governors besides the activity-based one.</p><p>NuttX supports a simple power management (PM) sub-system which:</p><blockquote><ul><li>Monitors activity from drivers (and from other parts of the system), and</li><li>Provides hooks to place drivers (and the whole system) into reduce power modes of operation.</li></ul></blockquote><p><img src="'+i+'" alt="figure"></p><p>The PM sub-system integrates the MCU idle loop with a collection of device drivers to support:</p><blockquote><ul><li>Reports of relevant driver or other system activity.</li><li>Registration and callback mechanism to interface with individual device drivers.</li><li>IDLE time polling of overall driver activity.</li><li>Coordinated, global, system-wide transitions to lower power usage states.</li></ul></blockquote><p><strong>Low Power Consumption States</strong>. Various &quot;sleep&quot; and low power consumption states have various names and are sometimes used in conflicting ways. In the NuttX PM logic, we will use the following terminology:</p><blockquote><p><code>NORMAL</code></p><p>: The normal, full power operating mode.</p><p><code>IDLE</code></p><p>: This is still basically normal operational mode, the system is, however, <code>IDLE</code> and some simple simple steps to reduce power consumption provided that they do not interfere with normal Operation. Simply dimming the a backlight might be an example some that that would be done when the system is idle.</p><p><code>STANDBY</code></p><p>: Standby is a lower power consumption mode that may involve more extensive power management steps such has disabling clocking or setting the processor into reduced power consumption modes. In this state, the system should still be able to resume normal activity almost immediately.</p><p><code>SLEEP</code></p><p>: The lowest power consumption mode. The most drastic power reduction measures possible should be taken in this state. It may require some time to get back to normal operation from <code>SLEEP</code> (some MCUs may even require going through reset).</p></blockquote><p><strong>Power Management Domains</strong>. Each PM interfaces includes a integer <em>domain</em> number. By default, only a single power domain is supported (<code>CONFIG_PM_NDOMAINS=1</code>). But that is configurable; any number of PM domains can be supported. Multiple PM domains might be useful, for example, if you would want to control power states associated with a network separately from power states associated with a user interface.</p><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><p>All PM interfaces are declared in the file <code>include/nuttx/power/pm.h</code>.</p><h2 id="callbacks" tabindex="-1">Callbacks <a class="header-anchor" href="#callbacks" aria-label="Permalink to &quot;Callbacks&quot;">​</a></h2>',13)]))}const w=o(r,[["render",n]]);export{h as __pageData,w as default};
