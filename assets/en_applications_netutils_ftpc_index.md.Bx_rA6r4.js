import{_ as o,c as i,al as c,o as d}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"ftpc FTP client","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/netutils/ftpc/index.md","filePath":"en/applications/netutils/ftpc/index.md"}'),t={name:"en/applications/netutils/ftpc/index.md"};function l(n,e,a,r,s,p){return d(),i("div",null,e[0]||(e[0]=[c('<h1 id="ftpc-ftp-client" tabindex="-1"><code>ftpc</code> FTP client <a class="header-anchor" href="#ftpc-ftp-client" aria-label="Permalink to &quot;`ftpc` FTP client&quot;">​</a></h1><p>FTP client. See <code>apps/include/netutils/ftpc.h</code> for interface information.</p><h2 id="ftp-commands" tabindex="-1">FTP Commands <a class="header-anchor" href="#ftp-commands" aria-label="Permalink to &quot;FTP Commands&quot;">​</a></h2><ul><li><code>ABOR</code> – abort a file transfer</li><li><code>ACCT</code> – send account information</li><li><code>APPE</code> – append to a remote file</li><li><code>CDUP</code> – CWD to the parent of the current directory</li><li><code>CWD</code> – change working directory</li><li><code>DELE</code> – delete a remote file</li><li><code>HELP</code> – return help on using the server</li><li><code>LIST</code> – list remote files</li><li><code>MDTM</code> – return the modification time of a file</li><li><code>MKD</code> – make a remote directory</li><li><code>MLSD</code> – Standardized directory listing (instead of <code>LIST</code>)</li><li><code>MLST</code> – Standardized object listing (instead of <code>LIST</code>)</li><li><code>MODE</code> – set transfer mode</li><li><code>NLST</code> – name list of remote directory</li><li><code>NOOP</code> – do nothing</li><li><code>PASS</code> – send password</li><li><code>PASV</code> – enter passive mode</li><li><code>PORT</code> – open a data port</li><li><code>PWD</code> – print working directory</li><li><code>QUIT</code> – terminate the connection</li><li><code>REIN</code> – reinitialize the connection</li><li><code>RETR</code> – retrieve a remote file</li><li><code>REST</code> – Sets the point at which a file transfer should start</li><li><code>RMD</code> – remove a remote directory</li><li><code>RNFR</code> – rename from</li><li><code>RNTO</code> – rename to</li><li><code>SITE</code> – site-specific commands</li><li><code>SIZE</code> – return the size of a file</li><li><code>STOR</code> – store a file on the remote host</li><li><code>STOU</code> – store a file uniquely</li><li><code>STRU</code> – set file transfer structure</li><li><code>STAT</code> – return server status</li><li><code>SYST</code> – return system type</li><li><code>TYPE</code> – set transfer type</li><li><code>USER</code> – send username</li></ul><h2 id="ftp-replies" tabindex="-1">FTP Replies <a class="header-anchor" href="#ftp-replies" aria-label="Permalink to &quot;FTP Replies&quot;">​</a></h2><ul><li><code>110</code> – Restart marker reply.</li><li><code>120</code> – Service ready in nnn minutes.</li><li><code>125</code> – Data connection already open; transfer starting.</li><li><code>150</code> – File status okay; about to open data connection.</li><li><code>200</code> – Command okay.</li><li><code>202</code> – Command not implemented, superfluous at this site.</li><li><code>211</code> – System status, or system help reply.</li><li><code>212</code> – Directory status.</li><li><code>213</code> – File status.</li><li><code>214</code> – Help message.</li><li><code>215</code> – NAME system type.</li><li><code>220</code> – Service ready for new user.</li><li><code>221</code> – Service closing control connection.</li><li><code>225</code> – Data connection open; no transfer in progress.</li><li><code>226</code> – Closing data connection.</li><li><code>227</code> – Entering Passive Mode (<code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>p1</code>, <code>p2</code>).</li><li><code>230</code> – User logged in, proceed.</li><li><code>250</code> – Requested file action okay, completed.</li><li><code>257</code> – <code>PATHNAME</code> created.</li><li><code>331</code> – User name okay, need password.</li><li><code>332</code> – Need account for login.</li><li><code>350</code> – Requested file action pending further information.</li><li><code>421</code> – Service not available, closing control connection.</li><li><code>425</code> – Can&#39;t open data connection.</li><li><code>426</code> – Connection closed; transfer aborted.</li><li><code>450</code> – Requested file action not taken.</li><li><code>451</code> – Requested action aborted: local error in processing.</li><li><code>452</code> – Requested action not taken.</li><li><code>500</code> – Syntax error, command unrecognized.</li><li><code>501</code> – Syntax error in parameters or arguments.</li><li><code>502</code> – Command not implemented.</li><li><code>503</code> – Bad sequence of commands.</li><li><code>504</code> – Command not implemented for that parameter.</li><li><code>530</code> – Not logged in.</li><li><code>532</code> – Need account for storing files.</li><li><code>550</code> – Requested action not taken.</li><li><code>551</code> – Requested action aborted: page type unknown.</li><li><code>552</code> – Requested file action aborted.</li><li><code>553</code> – Requested action not taken.</li></ul>',6)]))}const u=o(t,[["render",l]]);export{f as __pageData,u as default};
