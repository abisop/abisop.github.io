import{_ as t,c as s,al as o,o as a}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Shell Login","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/nsh/login.md","filePath":"en/applications/nsh/login.md"}'),i={name:"en/applications/nsh/login.md"};function n(d,e,l,r,c,p){return a(),s("div",null,e[0]||(e[0]=[o(`<h1 id="shell-login" tabindex="-1">Shell Login <a class="header-anchor" href="#shell-login" aria-label="Permalink to &quot;Shell Login&quot;">​</a></h1><h2 id="enabling-shell-logins" tabindex="-1">Enabling Shell Logins <a class="header-anchor" href="#enabling-shell-logins" aria-label="Permalink to &quot;Enabling Shell Logins&quot;">​</a></h2><p>NuttShell sessions can be protected by requiring that the user supply username and password credentials at the beginning of the session. Logins can be enabled for standard USB or serial consoles with:</p><pre><code>CONFIG_NSH_CONSOLE_LOGIN=y
</code></pre><p>Logins for Telnet sessions can be enabled separately with:</p><pre><code>CONFIG_NSH_TELNET_LOGIN=y
</code></pre><p>Logins can be enabled for either or both session types. On a successful login, the user will have access to the NSH session:</p><pre><code>login: admin
password:
User Logged-in!

NuttShell (NSH)
nsh&gt;
</code></pre><p>After each failed login attempt, a delay can be set up. The purpose of this delay is to discourage attempts to crack the password by brute force. That delay is configured with:</p><pre><code>CONFIG_NSH_LOGIN_FAILDELAY=0
</code></pre><p>This setting provides the login failure delay in units of milliseconds. The system will pause this amount of time after each failed login attempt. After a certain number of failed login attempts, the session will be closed. That number is controlled by:</p><pre><code>CONFIG_NSH_LOGIN_FAILCOUNT=3
</code></pre><h2 id="verification-of-credentials" tabindex="-1">Verification of Credentials <a class="header-anchor" href="#verification-of-credentials" aria-label="Permalink to &quot;Verification of Credentials&quot;">​</a></h2><p>There are three ways that NSH can be configured to verify user credentials at login time:</p><blockquote><ol><li><p>The simplest implementation simply uses fixed login credentials and is selected with:</p><pre><code>CONFIG_NSH_LOGIN_FIXED=y
</code></pre><p>The fixed login credentials are selected via:</p><pre><code>CONFIG_NSH_LOGIN_USERNAME=admin
CONFIG_NSH_LOGIN_PASSWORD=&quot;Administrator&quot;
</code></pre><p>This is not very flexible since there can be only one user and the password is fixed in the FLASH image. This option is also not very secure because a malicious user could get the password by just looking at the <code>.text</code> strings in the flash image.</p></li><li><p>NSH can also be configured to defer the entire user credential verification to platform-specific logic with this setting:</p><pre><code>CONFIG_NSH_LOGIN_PLATFORM=y
</code></pre><p>In this case, NSH will call a platform-specific function to perform the verification of user credentials. The platform-specific logic must provide a function with the following prototype:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int platform_user_verify(FAR const char *username, FAR const char *password);</span></span></code></pre></div><p>which is prototyped an described in <code>apps/include/nsh.h</code> and which may be included like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;apps/nsh.h&gt;</span></span></code></pre></div><p>An appropriate place to implement this function might be in the directory <code>apps/platform/&lt;board&gt;</code>.</p></li><li><p>A final option is to use a password file contained encrypted password information. This final option is selected with the following and described in more detail in the following paragraph:</p><pre><code>CONFIG_NSH_LOGIN_PASSWD=y
</code></pre></li></ol></blockquote><h2 id="password-files" tabindex="-1">Password Files <a class="header-anchor" href="#password-files" aria-label="Permalink to &quot;Password Files&quot;">​</a></h2><p>NuttX can also be configured to support a password file, by default at <code>/etc/passwd</code>. This option enables support for a password file:</p><pre><code>CONFIG_NSH_LOGIN_PASSWD=y
</code></pre><p>This options requires that you have selected <code>CONFIG_FSUTILS_PASSWD=y</code> to enable the access methods of <code>apps/fsutils/passwd</code>:</p><pre><code>CONFIG_FSUTILS_PASSWD=y
</code></pre><p>And this determines the location of the password file in a mounted volume:</p><pre><code>CONFIG_FSUTILS_PASSWD_PATH=&quot;/etc/passwd&quot;
</code></pre><p><code>/etc/passwd</code> is a <em>standard</em> location, but you will need to locate the password where ever you have a mounted volume.</p><p>The password file can be a fixed list of users in a ROMFS file system or a modifiable list maintained in a file in some writable file system. If the password file lies in a read-only file system like ROMFS, then you should also indicate that the password file is read-only.</p><blockquote><p>CONFIG_FSUTILS_PASSWD_READONLY=y</p></blockquote><p>If the password file is writable, then additional NSH commands will be enabled to modify the password file: <code>\`useradd</code> &lt;#cmduseradd&gt;[__, ]{.title-ref}<code>userdel</code> &lt;#cmduserdel&gt;[__, and ]{.title-ref}<code>passwd</code> &lt;#cmdpasswd&gt;\`__. If you do not wish you have these commands available, then they should be specifically disabled.</p><p>The password file logic requires a few additional settings:</p><blockquote><ol><li><p>The size of dynamically allocated and freed buffer that is used for file access:</p><pre><code>CONFIG_FSUTILS_PASSWD_IOBUFFER_SIZE=512
</code></pre></li><li><p>And the 128-bit encryption key. The password file currently uses the Tiny Encryption Algorithm (TEA), but could be extended to use something more powerful.</p><blockquote><p>CONFIG_FSUTILS_PASSWD_KEY1=0x12345678 CONFIG_FSUTILS_PASSWD_KEY2=0x9abcdef0 CONFIG_FSUTILS_PASSWD_KEY3=0x12345678 CONFIG_FSUTILS_PASSWD_KEY4=0x9abcdef0</p></blockquote></li></ol></blockquote><p>Password can only be decrypted with access to this key. Note that this key could potentially be fished out of your FLASH image, but without any symbolic information, that would be a difficult job since the TEA KEY is binary data and not distinguishable from other binary data in the FLASH image.</p><p>If the password file is enabled (<code>CONFIG_NSH_LOGIN_PASSWD=y</code>), then the fixed user credentials will not be used for the NSH session login. Instead, the password file will be consulted to verify the user credentials.</p><h2 id="creating-a-password-file-for-a-romfs-file-system" tabindex="-1">Creating a Password File for a ROMFS File System <a class="header-anchor" href="#creating-a-password-file-for-a-romfs-file-system" aria-label="Permalink to &quot;Creating a Password File for a ROMFS File System&quot;">​</a></h2><p>What we want to accomplish is a ROMFS file system, mounted at <code>/etc</code> and containing the password file, <code>passwd</code> like:</p><pre><code>NuttShell (NSH)
nsh&gt; ls -Rl /etc
/etc:
 dr-xr-xr-x       0 .
 dr-xr-xr-x       0 init.d/
 -r--r--r--      39 passwd
/etc/init.d:
 dr-xr-xr-x       0 ..
 -r--r--r--     110 rcS
 -r--r--r--     110 rc.sysinit
nsh&gt;
</code></pre><p>Where <code>/etc/init.d/rc.sysinit</code> is the system init script and <code>/etc/init.d/rcS</code> is the start-up script; <code>/etc/passwd</code> is a the password file. Note that here we assume that you are already using a start-up script. We can then piggyback the passwd file into the <code>/etc</code> file system already mounted for the NSH start up file as described above <a href="#custinit">above</a>.</p><p>I use the sim/nsh configuration to create a new password file, but other configurations could also be used. That configuration already supports a ROMFS file system, passwords, and login prompts. First, I make these changes to that configuration.</p><blockquote><ol><li>Disable logins:</li></ol><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- CONFIG_NSH_CONSOLE_LOGIN=y</span></span>
<span class="line"><span>+ # CONFIG_NSH_CONSOLE_LOGIN is not set</span></span>
<span class="line"><span>  # CONFIG_NSH_TELNET_LOGIN is not set</span></span></code></pre></div></blockquote><ol><li>Move the password file to a write-able file system:</li></ol><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- CONFIG_FSUTILS_PASSWD_PATH=&quot;/etc/passwd&quot;</span></span>
<span class="line"><span>+ CONFIG_FSUTILS_PASSWD_PATH=&quot;/tmp/passwd&quot;</span></span></code></pre></div></blockquote><ol><li>Make the password file modifiable</li></ol><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- CONFIG_FSUTILS_PASSWD_READONLY=y</span></span>
<span class="line"><span># CONFIG_FSUTILS_PASSWD_READONLY is not set</span></span></code></pre></div></blockquote></blockquote><p>Now rebuild the simulation. No login should be required to enter the shell and you should find the <code>\`useradd</code> &lt;#cmduseradd&gt;[__, ]{.title-ref}<code>userdel</code> &lt;#cmduserdel&gt;[__, and ]{.title-ref}<code>passwd</code> &lt;#cmdpasswd&gt;[__ commands available in the help summary, provided that they are enabled. Make certain that the ]{.title-ref}[useradd]{.title-ref}\` command is not disabled:</p><pre><code># CONFIG_NSH_DISABLE_USERADD is not set
</code></pre><p>Use the NSH <code>\`useradd</code> &lt;#cmduseradd&gt;\`__ command to add new uses with new user passwords like:</p><pre><code>nsh&gt; useradd &lt;username&gt; &lt;password&gt;
</code></pre><p>Do this as many times as you would like. Each time that you do this a new entry with an encrypted password will be added to the <code>passwd</code> file at <code>/tmp/passwd</code>. You can see the content of the password file like:</p><pre><code>nsh&gt; cat /tmp/passwd
</code></pre><p>When you are finished, you can simply copy the <code>/tmp/passwd</code> content from the <code>cat</code> command and paste it into an editor. Make sure to remove any carriage returns that may have ended up on the file if you are using Windows.</p><p>Then create/re-create the <code>nsh_romfsimg.h</code> file as described below.</p><blockquote><ol><li><p>The content on the <code>nsh_romfsimg.h</code> header file is generated from a template directory structure. Create the directory structure:</p><pre><code>mkdir etc
mkdir etc/init.d
</code></pre><p>And copy your existing startup script into <code>etc/init.c</code> as <code>rcS</code>.</p></li><li><p>Save your new password file in the <code>etc/</code> directory as <code>passwd</code>.</p></li><li><p>Create the new ROMFS image:</p><pre><code>genromfs -f romfs_img -d etc -V MyVolName
</code></pre></li><li><p>Convert the ROMFS image to a C header file:</p><pre><code>xxd -i romfs_img &gt;nsh_romfsimg.h
</code></pre></li><li><p>Edit <code>nsh_romfsimg.h</code>: Mark both data definitions as <code>const</code> so that the data will be stored in FLASH.</p></li><li><p>Edit nsh_romfsimg.h, mark both data definitions as <code>const</code> so that that will be stored in FLASH.</p></li></ol></blockquote><p>There is a good example of how to do this in the NSH simulation configuration at <a href="https://github.com/apache/nuttx/blob/master/boards/sim/sim/sim/configs/nsh/" target="_blank" rel="noreferrer">boards/sim/sim/sim/configs/nsh</a>. The ROMFS support files are provided at <a href="https://github.com/apache/nuttx/blob/master/boards/sim/sim/sim/include/" target="_blank" rel="noreferrer">boards/sim/include</a> and the [[/platform](]{.title-ref}/platform.md)s/sim/sim/boards/sim/index\` page provides detailed information about creating and modifying the ROMFS file system.</p>`,46)]))}const f=t(i,[["render",n]]);export{u as __pageData,f as default};
