import{_ as a,c as t,al as r,o}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"ST Nucleo F334R8","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f3/boards/nucleo-f334r8/index.md","filePath":"en/platforms/arm/stm32f3/boards/nucleo-f334r8/index.md"}'),s={name:"en/platforms/arm/stm32f3/boards/nucleo-f334r8/index.md"};function i(n,e,l,h,p,d){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="st-nucleo-f334r8" tabindex="-1">ST Nucleo F334R8 <a class="header-anchor" href="#st-nucleo-f334r8" aria-label="Permalink to &quot;ST Nucleo F334R8&quot;">​</a></h1><p>chip:stm32, chip:stm32f3, chip:stm32f334</p><p>The Nucleo F334R8 is a member of the Nucleo-64 board family.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at apps/examples/nsh.</p><h3 id="adc" tabindex="-1">adc: <a class="header-anchor" href="#adc" aria-label="Permalink to &quot;adc:&quot;">​</a></h3><p>Configures the ADC example located at apps/examples/adc.</p><h3 id="highpri" tabindex="-1">highpri: <a class="header-anchor" href="#highpri" aria-label="Permalink to &quot;highpri:&quot;">​</a></h3><p>Configures the high priority interrupts example (ADC + PWM)</p><h3 id="spwm1-and-spwm2" tabindex="-1">spwm1 and spwm2: <a class="header-anchor" href="#spwm1-and-spwm2" aria-label="Permalink to &quot;spwm1 and spwm2:&quot;">​</a></h3><p>Configures the sinusoidal PWM (SPWM) example which presents a simple use case of the STM32 PWM lower-half driver without generic upper-half PWM logic.</p><p>There are two variants of this example, where functionality is achieved with different periperals:</p><ul><li>spwm1 uses HRTIM to generate PWM and change waveform samples</li><li>spwm2 uses TIM1 to generate PWM and TIM6 to change waveform samples</li></ul><p>At the moment, the waveform parameters are hardcoded, but it should be easy to modify this example and make it more functional.</p>',15)]))}const f=a(s,[["render",i]]);export{c as __pageData,f as default};
