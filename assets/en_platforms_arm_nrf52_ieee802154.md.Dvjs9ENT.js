import{_ as i,c as r,al as a,o as l}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Nordic nRF52 IEEE 802.15.4","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf52/ieee802154.md","filePath":"en/platforms/arm/nrf52/ieee802154.md"}'),o={name:"en/platforms/arm/nrf52/ieee802154.md"};function t(n,e,s,d,p,m){return l(),r("div",null,e[0]||(e[0]=[a('<h1 id="nordic-nrf52-ieee-802-15-4" tabindex="-1">Nordic nRF52 IEEE 802.15.4 <a class="header-anchor" href="#nordic-nrf52-ieee-802-15-4" aria-label="Permalink to &quot;Nordic nRF52 IEEE 802.15.4&quot;">â€‹</a></h1><p>Note</p><p>This driver is highly experimental. Help with development and testing will be appreciated ðŸ˜‰</p><p>Supported features:</p><ul><li>frame transmission</li><li>frame reception and filtering</li><li>immediate ACK (incoming and outgoing)</li><li>promiscuous mode</li><li>delayed transmission</li><li>radio events trace</li><li>setting pending bit for all incoming Data Request frames</li><li>un-slotted CSMA-CA</li></ul><p>Work in progress features (some logic is present, but they require more work):</p><ul><li>beacon transmission (periodic transmission works, but requires verification)</li><li>slotted CSMA-CA</li><li>GTS</li></ul><p>Fetures not implemented:</p><ul><li>enhanced ACK (Enh-ACK)</li><li>enhanced beacon</li><li>low power mode</li><li>advanced features from IEEE 802.15.4e (DSME, TSCH)</li></ul><h2 id="reserved-peripherals" tabindex="-1">Reserved peripherals <a class="header-anchor" href="#reserved-peripherals" aria-label="Permalink to &quot;Reserved peripherals&quot;">â€‹</a></h2><p>This implementation reserves the following peripherals:</p><ul><li><code>RADIO</code> - used for radio operations</li><li><code>TIMER0</code> - used as high resolution timer for ACK, IFS and other radio delays</li><li><code>RTC0</code> - if superframe support is enabled, used as low power timer to hande superframe events</li></ul>',12)]))}const f=i(o,[["render",t]]);export{u as __pageData,f as default};
