import{_ as t,c as i,al as s,o}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"touchscreen Touchscreen Events","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/touchscreen/index.md","filePath":"en/applications/examples/touchscreen/index.md"}'),c={name:"en/applications/examples/touchscreen/index.md"};function n(a,e,l,d,r,h){return o(),i("div",null,e[0]||(e[0]=[s('<h1 id="touchscreen-touchscreen-events" tabindex="-1"><code>touchscreen</code> Touchscreen Events <a class="header-anchor" href="#touchscreen-touchscreen-events" aria-label="Permalink to &quot;`touchscreen` Touchscreen Events&quot;">​</a></h1><p>This configuration implements a simple touchscreen test at <code>apps/examples/touchscreen</code>. This test will create an empty X11 window and will print the touchscreen output as it is received from the simulated touchscreen driver.</p><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> – Build the touchscreen test as an NSH built-in function. Default: Built as a standalone program.</li><li><code>CONFIG_EXAMPLES_TOUCHSCREEN_MINOR</code> – The minor device number. Minor <code>N</code> corresponds to touchscreen device <code>/dev/inputN</code>. Note this value must with <code>CONFIG_EXAMPLES_TOUCHSCREEN_DEVPATH</code>. Default <code>0</code>.</li><li><code>CONFIG_EXAMPLES_TOUCHSCREEN_DEVPATH</code> – The path to the touchscreen device. This must be consistent with <code>CONFIG_EXAMPLES_TOUCHSCREEN_MINOR</code>. Default: <code>/dev/input0</code>.</li><li><code>CONFIG_EXAMPLES_TOUCHSCREEN_NSAMPLES</code> – This number of samples is collected and the program terminates. Default: Samples are collected indefinitely.</li><li><code>CONFIG_EXAMPLES_TOUCHSCREEN_MOUSE</code> – The touchscreen test can also be configured to work with a mouse driver by setting this option.</li></ul><p>The following additional configurations must be set in the NuttX configuration file:</p><ul><li><code>CONFIG_INPUT=y</code> (plus any touchscreen-specific settings)</li></ul><p>The following must also be defined in your apps configuration file:</p><ul><li><code>CONFIG_EXAMPLES_TOUCHSREEN=y</code></li></ul><p>This example code will call <code>boardctl()</code> to setup the touchscreen driver for texting. The implementation of <code>boardctl()</code> will require that board- specific logic provide the following interfaces that will be called by the <code>boardctl()</code> in order to initialize the touchscreen hardware:</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> board_tsc_setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> minor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',9)]))}const _=t(c,[["render",n]]);export{u as __pageData,_ as default};
