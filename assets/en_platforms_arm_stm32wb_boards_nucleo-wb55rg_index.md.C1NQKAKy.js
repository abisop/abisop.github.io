import{_ as a,c as s,al as t,o}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"ST Nucleo WB55RG","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32wb/boards/nucleo-wb55rg/index.md","filePath":"en/platforms/arm/stm32wb/boards/nucleo-wb55rg/index.md"}'),r={name:"en/platforms/arm/stm32wb/boards/nucleo-wb55rg/index.md"};function i(n,e,l,d,h,c){return o(),s("div",null,e[0]||(e[0]=[t(`<h1 id="st-nucleo-wb55rg" tabindex="-1">ST Nucleo WB55RG <a class="header-anchor" href="#st-nucleo-wb55rg" aria-label="Permalink to &quot;ST Nucleo WB55RG&quot;">​</a></h1><p>chip:stm32, chip:stm32wb, chip:stm32wb55</p><p>This page file discusses the port of NuttX to the STMicroelectronics NUCLEO-WB55RG board. That board features the multi-protocol wireless and ultra-low-power STM32WB55RGV6 MCU with 1MiB of Flash and 256KiB of SRAM. A dedicated M0+ coprocessor is responsible for performing the real-time low layer operations via one of the available wireless stacks distributed as binaries in STM32CubeWB package.</p><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>April 2022: The nucleo-wb55rg board minimal setup compiles successfully.</p><p>June 2022: All STM32WB chip family is defined, many of peripherals are supported - GPIO, EXTI, DMA, timers, flash, PWR, RTC, USART/LPUART, SPI, IPCC. SRAM2 heap allocation works. Builtin apps work and ostest passed.</p><p>July 2022: Added BLE support with mailbox IPC driver.</p><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>The board has 3 user leds:</p><pre><code>LED1 (Blue)      PB5
LED2 (Green)     PB0
LED3 (Red)       PB1
</code></pre><p>These LEDs are not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/stm32_autoleds.c.</p><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>The board has 3 user buttons:</p><pre><code>SW1     PC4 (needs SB47 close)
SW2     PD0
SW3     PD1
</code></pre><h2 id="serial-consoles" tabindex="-1">Serial Consoles <a class="header-anchor" href="#serial-consoles" aria-label="Permalink to &quot;Serial Consoles&quot;">​</a></h2><p>The MCU&#39;s USART1 is connected to the on-board ST-LINK/V2-1 and exposed as a Virtual COM Port over the same Micro-USB Type B connection used for programming/debugging.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh. This configuration is focused on low level, command-line driver testing.</p><h3 id="ble" tabindex="-1">ble: <a class="header-anchor" href="#ble" aria-label="Permalink to &quot;ble:&quot;">​</a></h3><p>Besides the NuttShell this configuration also enables BLE support. It includes btsak application for testing BLE applications.</p><h3 id="nimble" tabindex="-1">nimble: <a class="header-anchor" href="#nimble" aria-label="Permalink to &quot;nimble:&quot;">​</a></h3><p>Besides the NuttShell it includes nimble example application which uses NimBLE host stack.:</p><pre><code>nsh&gt; ifup bnep0
nsh&gt; nimble
</code></pre>`,24)]))}const b=a(r,[["render",i]]);export{u as __pageData,b as default};
