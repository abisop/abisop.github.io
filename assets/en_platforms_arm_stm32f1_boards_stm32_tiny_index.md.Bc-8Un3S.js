import{_ as a,c as t,al as n,o as i}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"STM32 Tiny","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f1/boards/stm32_tiny/index.md","filePath":"en/platforms/arm/stm32f1/boards/stm32_tiny/index.md"}'),o={name:"en/platforms/arm/stm32f1/boards/stm32_tiny/index.md"};function s(r,e,l,h,u,d){return i(),t("div",null,e[0]||(e[0]=[n(`<h1 id="stm32-tiny" tabindex="-1">STM32 Tiny <a class="header-anchor" href="#stm32-tiny" aria-label="Permalink to &quot;STM32 Tiny&quot;">​</a></h1><p>chip:stm32, chip:stm32f1, chip:stm32f103</p><p>This page discusses issues unique to NuttX configurations for the STM32 Tiny development board.</p><p>This board is available from several vendors on the net, and may be sold under different names. It is based on a STM32 F103C8T6 MCU, and is (always ?) bundled with a nRF24L01 wireless communication module.</p><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>The STM32Tiny board has only one software controllable LED. This LED can be used by the board port when CONFIG_ARCH_LEDS option is enabled.</p><p>If enabled the LED is simply turned on when the board boots successfully, and is blinking on panic / assertion failed.</p><h2 id="pwm" tabindex="-1">PWM <a class="header-anchor" href="#pwm" aria-label="Permalink to &quot;PWM&quot;">​</a></h2><p>The STM32 Tiny has no real on-board PWM devices, but the board can be configured to output a pulse train using TIM3 CH2 on the GPIO line B.5 (connected to the LED). Please note that the CONFIG_STM32_TIM3_PARTIAL_REMAP option must be enabled in this case.</p><h2 id="uarts" tabindex="-1">UARTs <a class="header-anchor" href="#uarts" aria-label="Permalink to &quot;UARTs&quot;">​</a></h2><h3 id="uart-usart-pins" tabindex="-1">UART/USART PINS <a class="header-anchor" href="#uart-usart-pins" aria-label="Permalink to &quot;UART/USART PINS&quot;">​</a></h3><pre><code>USART1
  RX      PA10
  TX      PA9
USART2
  CK      PA4
  CTS     PA0*
  RTS     PA1
  RX      PA3
  TX      PA2
USART3
  CK      PB12*
  CTS     PB13*
  RTS     PB14*
  RX      PB11
  TX      PB10
</code></pre><ul><li>these IO lines are intended to be used by the wireless module on the board.</li></ul><h3 id="default-usart-uart-configuration" tabindex="-1">Default USART/UART Configuration <a class="header-anchor" href="#default-usart-uart-configuration" aria-label="Permalink to &quot;Default USART/UART Configuration&quot;">​</a></h3><p>USART1 (RX &amp; TX only) is available through the RS-232 port on the board. A MAX232 chip converts voltage to RS-232 level. This serial port can be used to flash a firmware using the boot loader integrated in the MCU.</p><h2 id="timer-inputs-outputs" tabindex="-1">Timer Inputs/Outputs <a class="header-anchor" href="#timer-inputs-outputs" aria-label="Permalink to &quot;Timer Inputs/Outputs&quot;">​</a></h2><p>TIM1</p><p>: CH1 PA8 CH2 PA9* CH3 PA10* CH4 PA11*</p><p>TIM2</p><p>: CH1 PA0*, PA15, PA5 CH2 PA1, PB3 CH3 PA2, PB10* CH4 PA3, PB11</p><p>TIM3</p><p>: CH1 PA6, PB4 CH2 PA7, PB5* CH3 PB0 CH4 PB1*</p><p>TIM4</p><p>: CH1 PB6* CH2 PB7 CH3 PB8 CH4 PB9*</p><pre><code>\\* Indicates pins that have other on-board functions and should be used only

:   with care (See board datasheet).
</code></pre><h2 id="stm32-tiny-specific-configuration-options" tabindex="-1">STM32 Tiny - specific Configuration Options <a class="header-anchor" href="#stm32-tiny-specific-configuration-options" aria-label="Permalink to &quot;STM32 Tiny - specific Configuration Options&quot;">​</a></h2><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each STM32Tiny configuration is maintained in a sub-directory and can be selected as follow:</p><blockquote><p>tools/configure.sh STM32Tiny:&lt;subdir&gt;</p></blockquote><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at apps/examples/nsh. This configuration enables a console on UART1. Support for builtin applications is enabled, but in the base configuration no builtin applications are selected (see NOTES below).</p><p>NOTES:</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>This is another NSH example. If differs from other &#39;nsh&#39; configurations in that this configurations uses a USB serial device for console I/O.</p><p>NOTES:</p>`,36)]))}const f=a(o,[["render",s]]);export{c as __pageData,f as default};
