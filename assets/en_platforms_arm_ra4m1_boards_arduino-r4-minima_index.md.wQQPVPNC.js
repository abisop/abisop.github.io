import{_ as a,c as t,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const r="/assets/arduino-r4-minima.D1l8jdSK.png",g=JSON.parse('{"title":"Arduino R4 Minima","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/ra4m1/boards/arduino-r4-minima/index.md","filePath":"en/platforms/arm/ra4m1/boards/arduino-r4-minima/index.md"}'),s={name:"en/platforms/arm/ra4m1/boards/arduino-r4-minima/index.md"};function i(d,e,l,h,c,u){return n(),t("div",null,e[0]||(e[0]=[o('<h1 id="arduino-r4-minima" tabindex="-1">Arduino R4 Minima <a class="header-anchor" href="#arduino-r4-minima" aria-label="Permalink to &quot;Arduino R4 Minima&quot;">​</a></h1><p>This board features the R7FA4M1ABxCFM MCU with 256 KiB of FLASH and 32 KiB of SRAM running at 64 MHz (internal clock - HOCO).</p><p><img src="'+r+'" alt="" class="align-center"></p><p>See the <a href="https://docs.arduino.cc/hardware/uno-r4-minima/" target="_blank" rel="noreferrer">Arduino website</a> for information about Arduino R4 Minima.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>There are no buttons on the Arduino R4 Minima board.</p><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>There are three user-controllable LEDs on board the Arduino R4 Minima:</p><blockquote><p>LED GPIO</p><hr><p>L Amber LED P111 TX Yellow LED P012 RX Yellow LED P013</p></blockquote><p>LED L is connected to ground and can be illuminated by driving the P111 output high. The TX and RX LEDs are pulled high and can be illuminated by driving the corresponding GPIO output low.</p><p>These LEDs are not used by the board port unless <code>CONFIG_ARCH_LEDS</code> is defined. In that case, the usage by the board port is defined in <code>include/board.h</code> and <code>src/ra_autoleds.c</code>. The LEDs are used to encode OS-related events as follows:</p><blockquote><p>+-------------------+---------------------------+-------+------+------------+ | SYMBOL | MEANING | L | TX | RX | +===================+===========================+=======+======+============+ | LED_STARTED | &gt; NuttX has been started | &gt; OFF | OFF | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_HEAPALLOCATE | &gt; Heap has been allocated | &gt; OFF | OFF | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_IRQSENABLED | &gt; Interrupts enabled | &gt; OFF | OFF | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_STACKCREATED | &gt; Idle stack created | &gt; ON | OFF | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_INIRQ | &gt; In an interrupt | &gt; N/C | GLOW | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_SIGNAL | &gt; In a signal handler | &gt; N/C | GLOW | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_ASSERTION | &gt; An assertion failed | &gt; N/C | GLOW | &gt; OFF | +-------------------+---------------------------+-------+------+------------+ | LED_PANIC | &gt; The system has crashed | &gt; N/C | N/C | &gt; Blinking | +-------------------+---------------------------+-------+------+------------+ | LED_IDLE | &gt; MCU is in sleep mode | &gt; NA | NA | &gt; NA | +-------------------+---------------------------+-------+------+------------+</p></blockquote><p>Thus, if LED L is statically on, NuttX has successfully booted and is apparently running normally. If LED RX is glowing, then NuttX is handling interrupts (and also signals and assertions). If TX is flashing at approximately 2 Hz, then a fatal error has been detected, and the system has halted.</p><h2 id="serial-consoles" tabindex="-1">Serial Consoles <a class="header-anchor" href="#serial-consoles" aria-label="Permalink to &quot;Serial Consoles&quot;">​</a></h2><p>The R7FA4M1ABxCFM has a UART and 4 SCI (UARTs).</p><p>Any of the SCI interfaces may be used as a serial console. By default, SCI2 is used as the serial console in all configurations. This can be easily changed by modifying the configuration.</p><blockquote><hr><p>Arduino R4 Minima R7FA4M1ABxCFM Pin (Label) SCI Mapping ================== ============ 0 (RX0&lt;-0) RXD2 1 (TX0-&gt;1) TXD2 13 (12) RXD9 14 (~11) TXD9 SWD-7 RXD1 SWD-8 TXD1</p><hr></blockquote><h2 id="loading-code" tabindex="-1">Loading Code <a class="header-anchor" href="#loading-code" aria-label="Permalink to &quot;Loading Code&quot;">​</a></h2><p>It is possible to use J-Link on the SWD connector or use USB Boot available through the USB-C connector.</p><h3 id="ra-usb-boot" tabindex="-1">RA USB Boot: <a class="header-anchor" href="#ra-usb-boot" aria-label="Permalink to &quot;RA USB Boot:&quot;">​</a></h3><p>Reboot the board with BOOT shorted to GND and press the reset button twice (double click). The board will enumerate as &quot;Renesas RA USB Boot.&quot;</p><p>Then, flash the <code>nuttx.hex</code> file using <code>rfp-cli</code>: (<a href="https://www.renesas.com/en/software-tool/renesas-flash-programmer-programming-gui" target="_blank" rel="noreferrer">https://www.renesas.com/en/software-tool/renesas-flash-programmer-programming-gui</a>)</p><p>Example command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rfp-cli -device ra -port /dev/ttyACM0 -p ./build/nuttx.hex</span></span></code></pre></div><p><em>Note:</em> Programming using the binary format will fail because, by default, the RA4M1 NuttX port writes to the <code>.idcode</code> section, which is located beyond the end of the flash area. This causes the RFP to attempt writing to protected regions, leading to failures.</p>',26)]))}const m=a(s,[["render",i]]);export{g as __pageData,m as default};
