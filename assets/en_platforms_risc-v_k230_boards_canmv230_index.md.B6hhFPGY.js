import{_ as a,c as n,al as s,o as t}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"CanMV K230","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/k230/boards/canmv230/index.md","filePath":"en/platforms/risc-v/k230/boards/canmv230/index.md"}'),i={name:"en/platforms/risc-v/k230/boards/canmv230/index.md"};function o(p,e,l,r,c,d){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="canmv-k230" tabindex="-1">CanMV K230 <a class="header-anchor" href="#canmv-k230" aria-label="Permalink to &quot;CanMV K230&quot;">​</a></h1><p>The <a href="https://developer.canaan-creative.com/k230/dev/zh/CanMV_K230_%E6%95%99%E7%A8%8B.html" target="_blank" rel="noreferrer">CanMV K230</a> is a raspberry-pi sized single board computer with 512MB DRAM and a microSD card slot for booting. It comes with serial console, Ethernet, HDMI and USB/OTG ports. Unfortuunately it doesn&#39;t support JTAG alike debugging interfaces.</p><p>The <a href="https://github.com/kendryte/k230_sdk" target="_blank" rel="noreferrer">K230 SDK</a> contains source code, libraries and user guides for booting up an AMP environment with Linux on CPU0 and RT-Thread on CPU1.</p><p>K230 boots from CPU0 and loads U-Boot SPL into DRAM first, then U-Boot kicks off OpenSBI wrapped Linux/RTT OS images on respective CPU cores accordingly.</p><p>The K230 U-Boot kicks off firmwares in machine mode, thus it allows flat, protected or kernel NuttX <a href="https://nuttx.apache.org/docs/latest/implementation/processes_vs_tasks.html" target="_blank" rel="noreferrer">build modes</a>. The kernel build mode further works with OpenSBI or a builtin minimal SBI layer.</p><h2 id="preparations" tabindex="-1">Preparations <a class="header-anchor" href="#preparations" aria-label="Permalink to &quot;Preparations&quot;">​</a></h2><p>Take the prebuilt CanMV-k230 boot image from <a href="https://gitee.com/yf1972/filexfers/tree/canmv230-tools-for-nuttx-v1.2" target="_blank" rel="noreferrer">here</a> as the default K230 SDK doesn&#39;t support RiscV standard PTE format at least till v1.2. The package also contains an extract of the OpenSBI from K230 SDK v1.2 release, which is needed to wrap the [canmv230/knsh]{.title-ref} kernel build. The K230 SBI extract is also available at <a href="https://github.com/yf13/k230osbi" target="_blank" rel="noreferrer">this Github repository</a>, it will updated over the time to match updates at NuttX repository.</p><p>Make sure that before trying NuttX:</p><ul><li>The board can boot with prebuilt CanMV-k230 image.</li><li>Device console access available (e.g. <code>minicom -D /dev/ttyACM0</code>).</li><li>U-Boot connectivity to TFTP service available.</li></ul><p>For below NuttX tests, the microSD card is only used to enter the U-Boot console environment, as NuttX isn&#39;t using any storage yet.</p><h2 id="toolchains" tabindex="-1">Toolchains <a class="header-anchor" href="#toolchains" aria-label="Permalink to &quot;Toolchains&quot;">​</a></h2><p>To build NuttX, we can use the stock <strong>gcc-riscv64-unknown-elf</strong> toolchain on Ubuntu, or download the RISC-V Toolchain riscv64-unknown-elf from <a href="https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack" target="_blank" rel="noreferrer">XPack</a>.</p><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>To build NuttX for CanMV-k230, [[in](\`in.md)stall the prerequisites &lt;/quickstart/install&gt;]{.title-ref} and [[clone the git repo](\`clone the git repo.md)sitories &lt;/quickstart/install&gt;]{.title-ref} for <code>nuttx</code> and <code>apps</code>.</p><h3 id="flat-build" tabindex="-1">FLAT Build <a class="header-anchor" href="#flat-build" aria-label="Permalink to &quot;FLAT Build&quot;">​</a></h3><p>FLAT build is straightforward:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean &amp;&amp; tools/configure.sh canmv230:nsh</span></span>
<span class="line"><span> make -j4</span></span></code></pre></div><p>The generated [nuttx.bin]{.title-ref} can then be tried on the target.</p><h3 id="protected-build" tabindex="-1">PROTECTED Build <a class="header-anchor" href="#protected-build" aria-label="Permalink to &quot;PROTECTED Build&quot;">​</a></h3><p>PROTECTED build can be done like below:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean &amp;&amp; tools/configure.sh canmv230:pnsh</span></span>
<span class="line"><span> make -j4</span></span></code></pre></div><p>There will be [nuttx.bin]{.title-ref} and [nuttx_user.bin]{.title-ref} generated. We need pad [nuttx.bin]{.title-ref} to so that to fill memory gap till user space flash start then combine it with [nuttx_user.bin]{.title-ref} to form the final binary for run on the target. Say the gap between uflash and kflash is 256KB in [scripts/ld-protected.script]{.title-ref}, we can pad-combine them like below:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> dd if=/dev/zero of=/tmp/padded bs=1024 count=256</span></span>
<span class="line"><span> dd if=nuttx.bin of=/tmp/padded conv=notrunc</span></span>
<span class="line"><span> cat /tmp/padded nuttx_user.bin &gt; /tftp-folder/nuttx.bin</span></span></code></pre></div><p>The combined [nuttx.bin]{.title-ref} in TFTP service folder can then be tried on target.</p><h3 id="kernel-build" tabindex="-1">KERNEL Build <a class="header-anchor" href="#kernel-build" aria-label="Permalink to &quot;KERNEL Build&quot;">​</a></h3><p>KERNEL build requires two build passes:</p><ul><li>First pass to build kernel and export package so that to build apps as ROMFS.</li><li>Second pass to build the kernel with real ROMFS image containing the apps.</li></ul><p>There are two configurations for KERNEL build mode:</p><ul><li>The <code>canmv230/knsh</code> is for use within standard SBI environment.</li><li>The <code>canmv230/nsbi</code> uses a built-in minimal SBI environment.</li></ul><p>The <code>canmv230/nsbi</code> has smaller footprint and is simpler to use, the <code>canmv230/knsh</code> is more tedious to build and is for situatinos with standard SBI environment.</p><p>Take the following steps to build the kernel export package:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> # first pass to build kernel exports</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean &amp;&amp; tools/configure.sh canmv230:knsh</span></span>
<span class="line"><span> make -j4</span></span>
<span class="line"><span> make export # build nuttx-export-*.gz package</span></span></code></pre></div><p>With export package, we can then build the apps and ROMFS:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd apps</span></span>
<span class="line"><span> # import the nuttx-export-*.gz package from kernel</span></span>
<span class="line"><span> tools/mkimport.sh -z -x ../nuttx/nuttx-export-*.gz</span></span>
<span class="line"><span> make import  # build the apps</span></span>
<span class="line"><span> # generate ROMFS image for contents in apps/bin folder</span></span>
<span class="line"><span> tools/mkromfsimg.sh ../nuttx/arch/risc-v/src/board/romfs_boot.c</span></span></code></pre></div><p>Once ROMFS for apps is ready, build the kernel again:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make -j4    # build kernel again with real ROMFS</span></span></code></pre></div><p>The <code>nuttx.bin</code> is the artifact of kernel build. For <code>canmv230/nsbi</code> case, simply copy it to the TFTP folder then run on the target.</p><p>For <code>canmv230/knsh</code> case, take additional steps to wrap the artifact with the OpenSBI extract from the K230 SDK downloaded above:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd HOME</span></span>
<span class="line"><span> # unpack the K230 OpenSBI extract</span></span>
<span class="line"><span> tar xvf canmv230-opensbi-dtb.tar.xz</span></span>
<span class="line"><span> export OSBI=HOME/opensbi</span></span>
<span class="line"><span> cd /tmp/aaa    # use a temporary folder</span></span>
<span class="line"><span> make -C OSBI O=(pwd) PLATFORM=generic \\</span></span>
<span class="line"><span>       CROSS_COMPILE=riscv64-unknown-elf- FW_PIC=n K230_LIITLE_CORE=1 \\</span></span>
<span class="line"><span>       FW_FDT_PATH=OSBI/k230.dtb FW_PAYLOAD_PATH=nuttx.bin -j4</span></span>
<span class="line"><span> cp platform/generic/firmware/fw_payload.bin tftp-server-path/nuttx.bin</span></span></code></pre></div><p>Please use actual paths on your host for <code>nuttx.bin</code> and TFTP folder when running above commands.</p><p>This Github <a href="https://github.com/yf13/k230osbi" target="_blank" rel="noreferrer">repository</a> contains latest version of the K230 OpenSBI extract.</p><h2 id="running" tabindex="-1">Running <a class="header-anchor" href="#running" aria-label="Permalink to &quot;Running&quot;">​</a></h2><p>Within U-boot console, load <code>nuttx.bin</code> from TFTP and run it as shown below:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>k230# usb start</span></span>
<span class="line"><span>k230# ping serverip</span></span>
<span class="line"><span>k230# tftp 8000000 nuttx.bin</span></span>
<span class="line"><span>k230# go 8000000</span></span></code></pre></div><p>Then the <code>nsh</code> console should appear, type <code>help</code> to see available commands.</p><h2 id="asymmetric-multi-processing" tabindex="-1">Asymmetric Multi Processing <a class="header-anchor" href="#asymmetric-multi-processing" aria-label="Permalink to &quot;Asymmetric Multi Processing&quot;">​</a></h2><p>We can do Asymmetric Multi Processing on K230 using the little core as master and the big core as remote.</p><p>Take the <code>canmv230/master</code> and <code>canmv230/remote</code> configurations to build the master and remote NuttX images respectively. They are both kernel builds derived from <code>canmv230/nsbi</code> mentioned above, so we can follow above kernel mode build steps to build them.</p><p>Let&#39;s put the NuttX image files as <code>master.bin</code> and <code>remote.bin</code> respectively on the TFTP folder. To run them on K230 device, do the following from U-Boot console:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>k230# usb start</span></span>
<span class="line"><span>k230# ping serverip</span></span>
<span class="line"><span>k230# tftp 7000000 remote.bin</span></span>
<span class="line"><span>k230# tftp 8000000 master.bin</span></span>
<span class="line"><span>k230# go 8000000</span></span></code></pre></div><p>Then we should see the &quot;master&gt; &quot; prompt, this is the master console. where we can further run the <code>cu</code> command and press Return key to see the remote console, within remote console type <code>~.</code> to get back to the master console.</p><p>There is a <a href="https://github.com/apache/nuttx/pull/11673" target="_blank" rel="noreferrer">session log</a> showing how to enter remote node and check file system status then get back and check master file system status.</p><h2 id="issues" tabindex="-1">Issues <a class="header-anchor" href="#issues" aria-label="Permalink to &quot;Issues&quot;">​</a></h2><ul><li>The <code>ostest</code> app has non-zero exit code in Kernel mode.</li></ul>`,54)]))}const m=a(i,[["render",o]]);export{u as __pageData,m as default};
