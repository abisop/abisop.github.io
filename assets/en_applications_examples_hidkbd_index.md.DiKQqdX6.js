import{_ as d,c as o,al as t,o as a}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"hidkbd USB Host HID keyboard","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/hidkbd/index.md","filePath":"en/applications/examples/hidkbd/index.md"}'),i={name:"en/applications/examples/hidkbd/index.md"};function s(c,e,r,n,l,_){return a(),o("div",null,e[0]||(e[0]=[t('<h1 id="hidkbd-usb-host-hid-keyboard" tabindex="-1"><code>hidkbd</code> USB Host HID keyboard <a class="header-anchor" href="#hidkbd-usb-host-hid-keyboard" aria-label="Permalink to &quot;`hidkbd` USB Host HID keyboard&quot;">â€‹</a></h1><p>This is a simple test to <code>debug/verify</code> the USB host HID keyboard class driver.</p><ul><li><code>CONFIG_EXAMPLES_HIDKBD_DEFPRIO</code> -- Priority of waiter thread. Default: <code>50</code>.</li><li><code>CONFIG_EXAMPLES_HIDKBD_STACKSIZE</code> -- Stacksize of waiter thread. Default <code>1024</code>.</li><li><code>CONFIG_EXAMPLES_HIDKBD_DEVNAME</code> -- Name of keyboard device to be used. Default: <code>/dev/kbda</code>.</li><li><code>CONFIG_EXAMPLES_HIDKBD_ENCODED</code> -- Decode special key press events in the user buffer. In this case, the example coded will use the interfaces defined in <code>include/nuttx/input/kbd_codec.h</code> to decode the returned keyboard data. These special keys include such things as up/down arrows, home and end keys, etc. If this not defined, only 7-bit printable and control ASCII characters will be provided to the user. Requires <code>CONFIG_HIDKBD_ENCODED</code> and <code>CONFIG_LIBC_KBDCODEC</code>.</li></ul>',3)]))}const b=d(i,[["render",s]]);export{p as __pageData,b as default};
