import{_ as r,c as t,al as o,j as i,o as a}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"README","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/or1k/mor1kx/boards/or1k/README.md","filePath":"en/platforms/or1k/mor1kx/boards/or1k/README.md"}'),l={name:"en/platforms/or1k/mor1kx/boards/or1k/README.md"};function n(s,e,c,p,h,d){return a(),t("div",null,e[0]||(e[0]=[o(`<h1 id="readme" tabindex="-1">README <a class="header-anchor" href="#readme" aria-label="Permalink to &quot;README&quot;">​</a></h1><p>Generic OpenRISC board, suitable for use with Qemu, for example.</p><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h1><p>o STATUS o Pre-built or1k-elf Toolchain (newlib) o OpenRISC GNU tool chain from source o OpenOCD o Qemu</p><h1 id="status" tabindex="-1">STATUS <a class="header-anchor" href="#status" aria-label="Permalink to &quot;STATUS&quot;">​</a></h1><p>2018-04-23: I have been trying to retrace all of Matt Thompson&#39;s steps to get or1k building running on Qemu. I am stuck at the moment because it looks like there is some problem with my Kubuntu package manager. The Qemu configuration gives:</p><pre><code>  ERROR:  glib-2.22 gthread-2.0 is required to compile QEMU.

But it looks like to do have a later version of gthread-2.0 installed.
</code></pre><h1 id="pre-built-or1k-elf-toolchain-newlib" tabindex="-1">Pre-built or1k-elf Toolchain (newlib) <a class="header-anchor" href="#pre-built-or1k-elf-toolchain-newlib" aria-label="Permalink to &quot;Pre-built or1k-elf Toolchain (newlib)&quot;">​</a></h1><p>Ref: <a href="https://openrisc.io/newlib/" target="_blank" rel="noreferrer">https://openrisc.io/newlib/</a></p><p>Download and Install the Toolchain</p><p>You can install pre-compiled toolchains and install them on your Linux system. We have prebuilt-toolchains for releases of the different components that are preferably installed to /opt/toolchains/or1k-elf. You can find all releases here. Those are current releases:</p><p>GCC 4.9.2, Binutils 2.26, Newlib 2.3.0 (+or1k backports), GDB 7.11 <a href="https://github.com/openrisc/newlib/releases/download/v2.3.0-1/or1k-elf%5C_gcc4.9.3%5C_binutils2.26%5C_newlib2.3.0-1%5C_gdb7.11.tgz" target="_blank" rel="noreferrer">https://github.com/openrisc/newlib/releases/download/v2.3.0-1/or1k-elf\\_gcc4.9.3\\_binutils2.26\\_newlib2.3.0-1\\_gdb7.11.tgz</a></p><p>GCC 5.2.0, Binutils 2.26, Newlib 2.3.0 (+or1k backports), GDB 7.11 <a href="https://github.com/openrisc/newlib/releases/download/v2.3.0-1/or1k-elf%5C_gcc5.2.0%5C_binutils2.26%5C_newlib2.3.0-1%5C_gdb7.11.tgz" target="_blank" rel="noreferrer">https://github.com/openrisc/newlib/releases/download/v2.3.0-1/or1k-elf\\_gcc5.2.0\\_binutils2.26\\_newlib2.3.0-1\\_gdb7.11.tgz</a></p><p>After downloading a release you can extract it anywhere in your filesystem, we recommend to /opt/toolchains/or1k-elf/. You need to add the toolchain to your path:</p>`,14),i("p",{PATH:""},"export PATH=/opt/toolchains/or1k-elf/bin:$",-1),o('<h1 id="openrisc-gnu-tool-chain-from-source" tabindex="-1">OpenRISC GNU tool chain from source <a class="header-anchor" href="#openrisc-gnu-tool-chain-from-source" aria-label="Permalink to &quot;OpenRISC GNU tool chain from source&quot;">​</a></h1><p>ref: <a href="https://github.com/juliusbaxter/mor1kx-dev-env/wiki/OpenRISC-tool-chain-installation-guide" target="_blank" rel="noreferrer">https://github.com/juliusbaxter/mor1kx-dev-env/wiki/OpenRISC-tool-chain-installation-guide</a></p><p>These instructions are as per the project&#39;s GNU tool chain page on [OpenCores] (<a href="http://opencores.org/or1k" target="_blank" rel="noreferrer">http://opencores.org/or1k</a>).</p><p>What is required first is a copy of the tool chain source. There are two repositories - one for GCC (called or1k-gcc) and one for the rest of the GNU tools and libraries (binutils, GDB, newlib, called or1k-src). We must get the entirety of both.</p><p>You will need to download the repositories as a zip file OR use git. Download zip files (save into $HOME/or1k):</p><p>or1k-src - <a href="https://github.com/openrisc/or1k-src/archive/or1k.zip" target="_blank" rel="noreferrer">https://github.com/openrisc/or1k-src/archive/or1k.zip</a> or1k-gcc - <a href="https://github.com/openrisc/or1k-gcc/archive/or1k.zip" target="_blank" rel="noreferrer">https://github.com/openrisc/or1k-gcc/archive/or1k.zip</a></p><p>and unzip into the $HOME/or1k directory, making 2 directories or1k-src-or1k/ and or1k-gcc-or1k/</p><p>Rename those directories to be without the trailing -or1k so</p><p>mv or1k-src-or1k or1k-src mv or1k-gcc-or1k or1k-gcc</p><p>or with git clone:</p><p>mkdir $HOME/or1k &amp;&amp; cd $HOME/or1k git clone git://github.com/openrisc/or1k-src.git git clone git://github.com/openrisc/or1k-gcc.git</p><p>Once the source trees are in place, we will build.</p><p>We will install the tool chain into /opt/or1k-toolchain. Make sure that directory is writeable eg.:</p><p>sudo mkdir /opt/or1k-toolchain sudo chown $USER /opt/or1k-toolchain</p><p>The following commands will build the tool chain (starting in the $HOME/or1k directory):</p><p># Build the first set of tools, binutils etc. # NOTE: on 32-bit machines --disable-werror is needed due to an enum acting as bit mask is considered signed</p><p>mkdir bld-or1k-src bld-or1k-gcc cd bld-or1k-src ../or1k-src/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-shared --disable-itcl --disable-tk --disable-tcl --disable-winsup --disable-libgui --disable-rda --disable-sid --disable-sim --disable-gdb --with-sysroot --disable-newlib --disable-libgloss --disable-werror make make install</p><p># Build gcc</p><p>cd ../bld-or1k-gcc ../or1k-gcc/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-languages=c --disable-shared --disable-libssp make make install</p><p># build newlib and gdb (without or1ksim in this case) cd ../bld-or1k-src ../or1k-src/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-shared --disable-itcl --disable-tk --disable-tcl --disable-winsup --disable-libgui --disable-rda --disable-sid --enable-sim --disable-or1ksim --enable-gdb --with-sysroot --enable-newlib --enable-libgloss --disable-werror make make install</p><p># build gcc again, this time with newlib cd ../bld-or1k-gcc ../or1k-gcc/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-languages=c,c++ --disable-shared --disable-libssp --with-newlib make make install</p><p>Finally, we will want to run the following to put this path in our .bashrc file:</p><p>echo &quot;# OpenRISC tool chain path&quot; &gt;&gt; ~/.bashrc echo &quot;export PATH=$PATH:/opt/or1k-toolchain/bin&quot;</p><h1 id="openocd" tabindex="-1">OpenOCD <a class="header-anchor" href="#openocd" aria-label="Permalink to &quot;OpenOCD&quot;">​</a></h1><p>ref: <a href="https://github.com/juliusbaxter/mor1kx-dev-env/wiki/OpenRISC-tool-chain-installation-guide" target="_blank" rel="noreferrer">https://github.com/juliusbaxter/mor1kx-dev-env/wiki/OpenRISC-tool-chain-installation-guide</a></p><p>OpenOCD is the debug proxy we&#39;ll use to talk to the board over JTAG.</p><p>Download the source to $HOME/or1k with</p><p>git clone <a href="https://github.com/openrisc/openOCD.git" target="_blank" rel="noreferrer">https://github.com/openrisc/openOCD.git</a></p><p>Go into the OpenOCD directory and, the very first time, you must bootstrap it:</p><p>./bootstrap</p><p>Once that is finished, configure and compile it:</p><p>./configure --enable-usb_blaster_libftdi --enable-adv_debug_sys --enable-altera_vjtag --enable-maintainer-mode make</p><p>You can run make install if you like, too.</p><h1 id="qemu" tabindex="-1">Qemu <a class="header-anchor" href="#qemu" aria-label="Permalink to &quot;Qemu&quot;">​</a></h1><p>The compiled ELF that works in or1ksim (<a href="https://github.com/openrisc/or1ksim" target="_blank" rel="noreferrer">https://github.com/openrisc/or1ksim</a>).</p><p>Ref: <a href="https://github.com/openrisc/or1ksim" target="_blank" rel="noreferrer">https://github.com/openrisc/or1ksim</a></p><p>Or1ksim is a generic OpenRISC 1000 architecture simulator capable of emulating OpenRISC based computer systems at the instruction level. It includes models of a range of peripherals, allowing complete systems to be modeled. For full details see <a href="http://opencores.org/or1k/Or1ksim" target="_blank" rel="noreferrer">http://opencores.org/or1k/Or1ksim</a></p><p>This is a variant of the standard Or1ksim, which uses or1k as the architecture name, rather than or32. At some stage in the future this will be merged in, so that either architecture name is supported.</p><h2 id="or1k-build" tabindex="-1">Or1k Build <a class="header-anchor" href="#or1k-build" aria-label="Permalink to &quot;Or1k Build&quot;">​</a></h2><p>Or1ksim uses a standard GNU autoconf/automake installation and is designed to be built in a separate build directory. So from the main directory, a minimal install can be done with</p><p>cd or1ksim mkdir bd cd bd ../configure make sudo make install</p><p>This will install the executables &#39;sim&#39;, &#39;profile&#39;, and &#39;mprofile&#39; at /user/local/bin and libraries at /usr/local/lib.</p><p>The UART must be enabled in sim.cfg BEFORE the build in order for the NSH configuration to work:</p><p>section uart - enabled = 0 + enabled = 1</p><h2 id="qemu-build" tabindex="-1">Qemu Build <a class="header-anchor" href="#qemu-build" aria-label="Permalink to &quot;Qemu Build&quot;">​</a></h2><p>Download:</p><p><a href="https://www.qemu.org/download/%5C#source" target="_blank" rel="noreferrer">https://www.qemu.org/download/\\#source</a></p><p>Configure and build</p><p>Ref: <a href="https://wiki.qemu.org/Documentation/Platforms/OpenRISC" target="_blank" rel="noreferrer">https://wiki.qemu.org/Documentation/Platforms/OpenRISC</a></p><p>./configure --target-list=or1k-softmmu make</p><p>Then this command will get it running:</p><p>qemu-system-or1k -kernel nuttx-or1k-sim.elf -serial stdio -nographic -monitor none</p>',52)]))}const k=r(l,[["render",n]]);export{b as __pageData,k as default};
