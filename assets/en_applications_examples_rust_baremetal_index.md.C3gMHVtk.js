import{_ as t,c as r,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"[baremetal]{.title-ref} Hello World in Rust","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/rust/baremetal/index.md","filePath":"en/applications/examples/rust/baremetal/index.md"}'),n={name:"en/applications/examples/rust/baremetal/index.md"};function o(l,e,s,d,h,m){return i(),r("div",null,e[0]||(e[0]=[a('<h1 id="baremetal-title-ref-hello-world-in-rust" tabindex="-1">[baremetal]{.title-ref} Hello World in Rust <a class="header-anchor" href="#baremetal-title-ref-hello-world-in-rust" aria-label="Permalink to &quot;[baremetal]{.title-ref} Hello World in Rust&quot;">â€‹</a></h1><p>This example demonstrates how to create a simple &quot;Hello World&quot; program in Rust for a bare-metal environment. The program is compiled using the [rustc]{.title-ref} compiler directly, without relying on any operating system or standard library.</p><p>The key aspects of this example include:</p><ul><li><strong>No Standard Library</strong>: The program uses the [#![no_std]]{.title-ref} attribute, which means it does not link against the standard library. This is essential for bare-metal programming where the standard library is not available.</li><li><strong>No Main Function</strong>: The program uses the [#![no_main]]{.title-ref} attribute, which indicates that the program does not have a standard [main]{.title-ref} function. Instead, it defines a custom entry point.</li><li><strong>Panic Handler</strong>: A custom panic handler is defined using the [#[panic_handler]]{.title-ref} attribute. This handler is called when a panic occurs, and in this case, it enters an infinite loop to halt the program.</li><li><strong>C Interoperability</strong>: The program uses the [extern &quot;C&quot;]{.title-ref} block to declare the [printf]{.title-ref} function from the C standard library. This allows the Rust program to call C functions directly.</li><li><strong>Entry Point</strong>: The [hello_rust_main]{.title-ref} function is the entry point of the program. It is marked with [#[no_mangle]]{.title-ref} to prevent the Rust compiler from mangling its name, making it callable from C.</li><li><strong>Printing</strong>: The program uses the [printf]{.title-ref} function to print &quot;Hello, Rust!!&quot; to the console. The [printf]{.title-ref} function is called using the [unsafe]{.title-ref} block because it involves calling a C function.</li></ul><p>This example is a great starting point for understanding how to write and compile Rust programs for bare-metal environments, where you have full control over the hardware and no operating system overhead.</p>',5)]))}const u=t(n,[["render",o]]);export{c as __pageData,u as default};
