import{_ as t,c as a,al as i,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Device Tree","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/devicetree.md","filePath":"en/guides/devicetree.md"}'),s={name:"en/guides/devicetree.md"};function o(n,e,l,d,p,c){return r(),a("div",null,e[0]||(e[0]=[i(`<h1 id="device-tree" tabindex="-1">Device Tree <a class="header-anchor" href="#device-tree" aria-label="Permalink to &quot;Device Tree&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Currently, NuttX supports parsing of FDT(Flattened Device Tree) using libfdt, a utility library for reading and manipulating the binary format:</p><p><a href="https://github.com/dgibson/dtc/" target="_blank" rel="noreferrer">https://github.com/dgibson/dtc/</a></p><p>Based on that, NuttX has implemented some common functions to get properties. Device Tree support in NuttX will reduce the configuration of chips/boards, it is not used in NuttX kernel framework yet.</p><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h2><ol><li>Enable Device Tree and libfdt</li></ol><p>Enable the Kconfig settings:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIG_DEVICE_TREE=y                        /* Enable Device Tree */</span></span>
<span class="line"><span>CONFIG_LIBFDT=y                             /* Enable utility library */</span></span></code></pre></div></blockquote><ol start="2"><li>Register the DTB address</li></ol><p>Use fdt_register to set the DTB Address in NuttX</p><ol start="3"><li>Parse the DTB</li></ol><p>Chip/board will use fdt_get to get the DTB Address, and then use <a href="./.html">fdt</a>* APIs to parse the DTB properties.</p>`,13)]))}const b=t(s,[["render",o]]);export{u as __pageData,b as default};
