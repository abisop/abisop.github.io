import{_ as r,c as n,al as o,j as e,a as t,o as s}from"./chunks/framework.NFAqBSgQ.js";const g=JSON.parse('{"title":"ST STM32F0","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f0/index.md","filePath":"en/platforms/arm/stm32f0/index.md"}'),l={name:"en/platforms/arm/stm32f0/index.md"};function i(p,a,d,u,c,h){return s(),n("div",null,a[0]||(a[0]=[o(`<h1 id="st-stm32f0" tabindex="-1">ST STM32F0 <a class="header-anchor" href="#st-stm32f0" aria-label="Permalink to &quot;ST STM32F0&quot;">​</a></h1><h2 id="supported-mcus" tabindex="-1">Supported MCUs <a class="header-anchor" href="#supported-mcus" aria-label="Permalink to &quot;Supported MCUs&quot;">​</a></h2><p>The following list includes MCUs from STM32F0 series and indicates whether they are supported in NuttX</p><p>MCU Support Note</p><hr><p>STM32F0x0 Yes Value line STM32F0x1 Yes Access line STM32F0x2 Yes USB line STM32F0x8 Yes Low-voltage line</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates peripherals supported in NuttX:</p><p>Peripheral Support Notes</p><hr><p>FLASH CRC PM RCC CSR GPIO SYSCFG DMA EXTI ADC DAC COMP TSC TIM IRTIM IWDG WWDG RTC I2C USART SPI I2S CAN USB HDMI-CEC No No No Yes No Yes Yes Yes Yes Yes No No No Yes No Yes Yes No Yes Yes Yes No No Yes No</p><h2 id="flashing-and-debugging" tabindex="-1">Flashing and Debugging <a class="header-anchor" href="#flashing-and-debugging" aria-label="Permalink to &quot;Flashing and Debugging&quot;">​</a></h2><p>NuttX firmware Flashing with STLink probe and OpenOCD:</p><pre><code>openocd -f  interface/stlink.cfg -f target/stm32f0x.cfg -c &#39;program nuttx.bin 0x08000000; reset run; exit&#39;
</code></pre><p>Remote target Reset with STLink probe and OpenOCD:</p><pre><code>openocd -f interface/stlink.cfg -f target/stm32f0x.cfg -c &#39;init; reset run; exit&#39;
</code></pre><p>Remote target Debug with STLink probe and OpenOCD:</p>`,17),e("blockquote",null,[e("ol",null,[e("li",null,[e("p",null,[t("You need to have NuttX built with debug symbols, see "),e("code",{class:"interpreted-text",role:"ref"},"debugging"),t(".")])]),e("li",null,[e("p",null,"Launch the OpenOCD GDB server:"),e("pre",null,[e("code",null,`openocd -f interface/stlink.cfg -f target/stm32f0x.cfg -c 'init; reset halt'
`)])]),e("li",null,[e("p",null,"You can now attach to remote OpenOCD GDB server with your favorite debugger, for instance gdb:"),e("pre",null,[e("code",null,`arm-none-eabi-gdb --tui nuttx -ex 'target extended-remote localhost:3333'
(gdb) monitor reset halt
(gdb) breakpoint nsh_main
(gdb) continue
`)])])])],-1),e("h2",{id:"supported-boards",tabindex:"-1"},[t("Supported Boards "),e("a",{class:"header-anchor",href:"#supported-boards","aria-label":'Permalink to "Supported Boards"'},"​")],-1),e("blockquote",null,[e("p",null,[t("boards/"),e("em",null,"/")])],-1)]))}const m=r(l,[["render",i]]);export{g as __pageData,m as default};
