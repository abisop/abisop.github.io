import{_ as t,c as a,al as i,o as s}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"bastest Bas BASIC Interpreter","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/bastest/index.md","filePath":"en/applications/examples/bastest/index.md"}'),r={name:"en/applications/examples/bastest/index.md"};function o(n,e,c,l,d,p){return s(),a("div",null,e[0]||(e[0]=[i('<h1 id="bastest-bas-basic-interpreter" tabindex="-1"><code>bastest</code> Bas BASIC Interpreter <a class="header-anchor" href="#bastest-bas-basic-interpreter" aria-label="Permalink to &quot;`bastest` Bas BASIC Interpreter&quot;">​</a></h1><p>This directory contains a small program that will mount a ROMFS file system containing the BASIC test files extracted from the Bas <code>2.4</code> release.</p><ul><li><code>CONFIG_EXAMPLES_BASTEST_DEVMINOR</code> -- The minor device number of the ROMFS block driver. For example, the <code>N</code> in <code>/dev/ramN</code>. Used for registering the RAM block driver that will hold the ROMFS file system containing the BASIC files to be tested. Default: <code>0</code>.</li><li><code>CONFIG_EXAMPLES_BASTEST_DEVPATH</code> -- The path to the ROMFS block driver device. This must match <code>EXAMPLES_BASTEST_DEVMINOR</code>. Used for registering the RAM block driver that will hold the ROMFS file system containing the BASIC files to be tested. Default: <code>/dev/ram0</code>.</li></ul><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">​</a></h2><p>Bas is an interpreter for the classic dialect of the programming language BASIC. It is pretty compatible to typical BASIC interpreters of the 1980s, unlike some other UNIX BASIC interpreters, that implement a different syntax, breaking compatibility to existing programs. Bas offers many ANSI BASIC statements for structured programming, such as procedures, local variables and various loop types. Further there are matrix operations, automatic LIST indentation and many statements and functions found in specific classic dialects. Line numbers are not required.</p><p>The interpreter tokenises the source and resolves references to variables and jump targets before running the program. This compilation pass increases efficiency and catches syntax errors, type errors and references to variables that are never initialised. Bas is written in ANSI C for UNIX systems.</p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p>BAS [2.4]{.title-ref} is released as part of NuttX under the standard 3-clause BSD license use by all components of NuttX. This is not incompatible with the original BAS [2.4]{.title-ref} licensing</p><p>Copyright (c) 1999-2014 Michael Haardt</p><p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p><p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>',12)]))}const I=t(r,[["render",o]]);export{m as __pageData,I as default};
