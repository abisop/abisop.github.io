import{_ as t,c as r,al as o,o as a}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Zilog Z80","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/z80/z80/index.md","filePath":"en/platforms/z80/z80/index.md"}'),i={name:"en/platforms/z80/z80/index.md"};function s(n,e,d,c,l,p){return a(),r("div",null,e[0]||(e[0]=[o(`<h1 id="zilog-z80" tabindex="-1">Zilog Z80 <a class="header-anchor" href="#zilog-z80" aria-label="Permalink to &quot;Zilog Z80&quot;">​</a></h1><p><strong>Z80 Instruction Set Simulator</strong>. This port uses the <a href="http://sdcc.sourceforge.net/" target="_blank" rel="noreferrer">SDCC</a> toolchain under Linux or Cygwin (verified using version 2.6.0). This port has been verified using only a Z80 instruction simulator called z80sim.</p><p><strong>STATUS:</strong> This port is complete and stable to the extent that it can be tested using an instruction set simulator. Refer to the NuttX board <a href="https://github.com/apache/nuttx/blob/master/Documentation/platforms/z80/z80/boards/z80sim/README.txt" target="_blank" rel="noreferrer">README</a> file for further information.</p><p><strong>XTRS: TRS-80 Model I/III/4/4P Emulator for Unix</strong>. A very similar Z80 port is available for <a href="http://www.tim-mann.org/xtrs.html" target="_blank" rel="noreferrer">XTRS</a>, the TRS-80 Model I/III/4/4P Emulator for Unix. That port also uses the <a href="http://sdcc.sourceforge.net/" target="_blank" rel="noreferrer">SDCC</a> toolchain under Linux or Cygwin (verified using version 2.6.0).</p><p><strong>STATUS:</strong> Basically the same as for the Z80 instruction set simulator. This port was contributed by Jacques Pelletier. Refer to the NuttX board <a href="https://bitbucket.org/patacongo/obsoleted/src/master/configs/xtrs/README.txt" target="_blank" rel="noreferrer">README</a> file for further information.</p><p><strong>NOTE:</strong> This port was removed from the NuttX source tree on 2017-11-24. It was removed because (1) it is unfinished, unverified, and unsupported, and (2) the TRS-80 simulation is a sub-optimal platform.i That platform includes a 16-bit ROM image and only a 48Kb RAM space for NuttX. The removed board support is still available in the <code>Obsoleted</code> repository if anyone would ever like to resurrect it.</p><blockquote><p>* A highly modified <a href="http://buildroot.uclibc.org/" target="_blank" rel="noreferrer">buildroot</a> is available that may be used to build a NuttX-compatible ELF toolchain under Linux or Cygwin. Configurations are available in that buildroot to support ARM, Cortex-M3, avr, m68k, m68hc11, m68hc12, m9s12, blackfin, m32c, h8, and SuperH ports.</p></blockquote><p>The <code>arch/z80</code> directories contain files to support a variety of 8-bit architectures from ZiLOG (and spin-architectures such as the Rabbit2000). The arch/z80/src/z80 sub-directory contains logic unique to the classic Z80 chip.</p><p>Files in this directory include:</p><p><code>z80_head.asm</code></p><p>: This is the main entry point into the Z80 program. This includes the handler for the RESET, power-up interrupt vector and address zero and all RST interrupts.</p><p><code>z80_rom.asm</code></p><p>: Some architectures may have ROM located at address zero. In this case, a special version of the &quot;head&quot; logic must be used. This special &quot;head&quot; file is probably board-specific and, hence, belongs in the board-specific boards/z80/z80/&lt;board-name&gt;/src directory. This file may, however, be used as a model for such a board-specific file.</p><pre><code>z80\\_rom.S is enabled by specifying CONFIG\\_LINKER\\_ROM\\_AT\\_0000 in
the configuration file.

A board specific version in the boards/z80/z80/\\&lt;board-name\\&gt;/src
directory can be used by:

1.  Define CONFIG\\_ARCH\\_HAVEHEAD
2.  Add the board-specific head file, say \\&lt;filename\\&gt;.asm, to
    boards/z80/z80/\\&lt;board-name\\&gt;/src
3.  Add a file called Make.defs in the
    boards/z80/z80/\\&lt;board-name\\&gt;/src directory containing the line:
    HEAD\\_ASRC = \\&lt;file-name\\&gt;.asm
</code></pre><p><code>Make.defs</code></p><p>: This is the standard makefile fragment that must be provided in all chip directories. This fragment identifies the chip-specific file to be used in building libarch.</p><p><code>chip.h</code></p><p>: This is the standard header file that must be provided in all chip directories.</p><p><code>z80_initialstate.c</code>, <code>z80_copystate.c</code>, <code>z80_restoreusercontext.asm</code>, and <code>z80_saveusercontext.asm</code></p><p>: These files implement the Z80 context switching logic</p><p><code>z80_schedulesigaction.c</code> and <code>z80_sigdeliver.c</code></p><p>: These files implement Z80 signal handling.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,24)]))}const f=t(i,[["render",s]]);export{u as __pageData,f as default};
