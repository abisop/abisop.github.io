import{_ as e,c as t,al as a,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"ST B-U585I-IOT02A","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32u5/boards/b-u585i-iot02a/index.md","filePath":"en/platforms/arm/stm32u5/boards/b-u585i-iot02a/index.md"}'),i={name:"en/platforms/arm/stm32u5/boards/b-u585i-iot02a/index.md"};function r(s,o,l,u,c,h){return n(),t("div",null,o[0]||(o[0]=[a(`<h1 id="st-b-u585i-iot02a" tabindex="-1">ST B-U585I-IOT02A <a class="header-anchor" href="#st-b-u585i-iot02a" aria-label="Permalink to &quot;ST B-U585I-IOT02A&quot;">​</a></h1><p>chip:stm32, chip:stm32u5, chip:stm32u585</p><p>This page discusses the port of NuttX to the STMicroelectronics B-U585I-IOT02A board. That board features the STM32U585AII6QU MCU with 2MiB of Flash and 768KiB of SRAM.</p><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>2022-02-13: With TrustedFirmware-M from STM32CubeU5 and signing the Apache NuttX binary image to get a tfm_ns_init.bin, the board now boots and the basic NSH configuration works with Apache NuttX as the OS running in the non-secure world.</p><p>2022-04-03: The dependency on TrustedFirmware-M was dropped. I.e. the b-u585i-iot02a:nsh configuration now runs standalone.</p><h2 id="clock-source" tabindex="-1">Clock Source <a class="header-anchor" href="#clock-source" aria-label="Permalink to &quot;Clock Source&quot;">​</a></h2><p>Only the low speed external (LSE) 32.768kHz crystal (X2) is installed in default configurations.</p><blockquote><p>FUNC GPIO</p><hr><p>OSC32_IN PC14 OSC32_OUT PC15</p></blockquote><h2 id="arduino-connector" tabindex="-1">Arduino Connector <a class="header-anchor" href="#arduino-connector" aria-label="Permalink to &quot;Arduino Connector&quot;">​</a></h2><p>CN13 / SPI1 / D10 - D13</p><blockquote><p>FUNC GPIO</p><hr><p>SPI1_NSS PE12 SPI1_SCK PE13 SPI1_MISO PE14 SPI1_MOSI PE15</p></blockquote><h2 id="serial-consoles" tabindex="-1">Serial Consoles <a class="header-anchor" href="#serial-consoles" aria-label="Permalink to &quot;Serial Consoles&quot;">​</a></h2><h3 id="virtual-com-port-on-usart1" tabindex="-1">Virtual COM Port on USART1 <a class="header-anchor" href="#virtual-com-port-on-usart1" aria-label="Permalink to &quot;Virtual COM Port on USART1&quot;">​</a></h3><p>Default board is configured to use USART1 as console. USART1 is connected to the ST-LINKV3E Virtual COM port as well as made available on connector CN9.</p><p>Pins and Connectors:</p><blockquote><p>FUNC GPIO Pin NAME</p><hr><p>TXD: PA9 CN9 14 T.VCP_TX RXD: PA10 CN9 13 T.VCP_RX</p></blockquote><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h3><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh b-u585i-iot02a:&lt;subdir&gt;
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.:</p><pre><code>make oldconfig
make
</code></pre><p>The &lt;subdir&gt; that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li><p>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>Unless stated otherwise, all configurations generate console output on USART3, as described above under &quot;Serial Console&quot;. The elevant configuration settings are listed below:</p><pre><code>CONFIG_STM32L5_USART3=y
CONFIG_STM32L5_USART3_SERIALDRIVER=y
CONFIG_STM32L5_USART=y

CONFIG_USART3_SERIALDRIVER=y
CONFIG_USART3_SERIAL_CONSOLE=y

CONFIG_USART3_RXBUFSIZE=256
CONFIG_USART3_TXBUFSIZE=256
CONFIG_USART3_BAUD=115200
CONFIG_USART3_BITS=8
CONFIG_USART3_PARITY=0
CONFIG_USART3_2STOP=0
</code></pre></li><li><p>All of these configurations are set up to build under Linux using the &quot;GNU Tools for ARM Embedded Processors&quot; that is maintained by ARM (unless stated otherwise in the description of the configuration).</p><blockquote><p><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm" target="_blank" rel="noreferrer">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm</a></p></blockquote><p>That toolchain selection can easily be reconfigured using &#39;make menuconfig&#39;. Here are the relevant current settings:</p><p>Build Setup::</p><p>: CONFIG_HOST_LINUX=y : Linux environment</p><p>System Type -&gt; Toolchain::</p><p>: CONFIG_ARM_TOOLCHAIN_GNU_EABI=y : GNU ARM EABI toolchain</p></li></ol><h3 id="configuration-sub-directories" tabindex="-1">Configuration sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration sub-directories&quot;">​</a></h3><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh. This configuration is focused on low level, command-line driver testing.</p>`,30)]))}const f=e(i,[["render",r]]);export{p as __pageData,f as default};
