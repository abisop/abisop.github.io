import{_ as t,c as o,al as i,o as a}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"ST STM32F746G-DISCO","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f7/boards/stm32f746g-disco/index.md","filePath":"en/platforms/arm/stm32f7/boards/stm32f746g-disco/index.md"}'),n={name:"en/platforms/arm/stm32f7/boards/stm32f746g-disco/index.md"};function r(s,e,l,d,c,h){return a(),o("div",null,e[0]||(e[0]=[i(`<h1 id="st-stm32f746g-disco" tabindex="-1">ST STM32F746G-DISCO <a class="header-anchor" href="#st-stm32f746g-disco" aria-label="Permalink to &quot;ST STM32F746G-DISCO&quot;">​</a></h1><p>chip:stm32, chip:stm32f7, chip:stm32f746</p><p>This page discusses issues unique to NuttX configurations for the STMicro STM32F746G-DISCO development board featuring the STM32F746NGH6 MCU. The STM32F746NGH6 is a 216MHz Cortex-M7 operation with 1024Kb Flash memory and 300Kb SRAM. The board features:</p><ul><li>On-board ST-LINK/V2 for programming and debugging,</li><li>Mbed-enabled (mbed.org)</li><li>4.3-inch 480x272 color LCD-TFT with capacitive touch screen</li><li>Camera connector</li><li>SAI audio codec</li><li>Audio line in and line out jack</li><li>Stereo speaker outputs</li><li>Two ST MEMS microphones</li><li>SPDIF RCA input connector</li><li>Two pushbuttons (user and reset)</li><li>128-Mbit Quad-SPI Flash memory</li><li>128-Mbit SDRAM (64 Mbits accessible)</li><li>Connector for microSD card</li><li>RF-EEPROM daughterboard connector</li><li>USB OTG HS with Micro-AB connectors</li><li>USB OTG FS with Micro-AB connectors</li><li>Ethernet connector compliant with IEEE-802.3-2002</li></ul><p>Refer to the <a href="http://www.st.com" target="_blank" rel="noreferrer">http://www.st.com</a> website for further information about this board (search keyword: stm32f746g-disco)</p><h2 id="development-environment" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h2><p>The Development environments for the STM32F746G-DISCO board are identical to the environments for other STM32F boards. For full details on the environment options and setup, see the README.txt file in the boards/arm/stm32f7/stm32f746g-disco directory.</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The STM32F746G-DISCO board has numerous LEDs but only one, LD1 located near the reset button, that can be controlled by software (LD2 is a power indicator, LD3-6 indicate USB status, LD7 is controlled by the ST-Link).</p><p>LD1 is controlled by PI1 which is also the SPI2_SCK at the Arduino interface. One end of LD1 is grounded so a high output on PI1 will illuminate the LED.</p><p>This LED is not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/stm32_leds.c. The LEDs are used to encode OS-related events as follows:</p><blockquote><p>SYMBOL Meaning LD1</p><hr><p>LED_STARTED NuttX has been started OFF LED_HEAPALLOCATE Heap has been allocated OFF LED_IRQSENABLED Interrupts enabled OFF LED_STACKCREATED Idle stack created ON LED_INIRQ In an interrupt N/C LED_SIGNAL In a signal handler N/C LED_ASSERTION An assertion failed N/C LED_PANIC The system has crashed FLASH</p><p>Thus is LD1 is statically on, NuttX has successfully booted and is, apparently, running normally. If LD1 is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p></blockquote><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>Pushbutton B1, labelled &quot;User&quot;, is connected to GPIO PI11. A high value will be sensed when the button is depressed.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The STM32F469G-DISCO uses USART1 connected to &quot;Virtual COM&quot;, so when you plug it on your computer it will be detected as a USB port (i.e. ttyACM0):</p><blockquote><p>V.COM FUNCTION GPIO</p><hr><p>RXD USART1_RX PB7 TXD USART1_TX PA9</p></blockquote><p>All you need to do after flashing NuttX on this board is use a serial console tool (minicom, picocom, screen, hyperterminal, teraterm, putty, etc ) configured to 115200 8n1.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="common-configuration-information" tabindex="-1">Common Configuration Information <a class="header-anchor" href="#common-configuration-information" aria-label="Permalink to &quot;Common Configuration Information&quot;">​</a></h3><p>Each STM32F746G-DISCO configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh stm32f746g-disco:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the sub-directories listed below.</p><p>NOTES:</p><ol><li><p>These configurations use the mconf-based configuration tool. To change this configuration using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>By default, these configurations use the USART1 for the serial console. Pins are configured to that RX/TX are available at pins D0 and D1 of the Arduion connectors. This should be compatible with most RS-232 shields.</p></li><li><p>All of these configurations are set up to build under Windows using the &quot;GNU Tools for ARM Embedded Processors&quot; that is maintained by ARM (unless stated otherwise in the description of the configuration).</p><blockquote><p><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm" target="_blank" rel="noreferrer">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm</a></p></blockquote><p>As of this writing (2015-03-11), full support is difficult to find for the Cortex-M7, but is supported by at least this release of the ARM GNU tools:</p><blockquote><p><a href="https://launchpadlibrarian.net/209776344/release.txt" target="_blank" rel="noreferrer">https://launchpadlibrarian.net/209776344/release.txt</a></p></blockquote><p>hat toolchain selection can easily be reconfigured using &#39;make menuconfig&#39;. Here are the relevant current settings:</p><p>Build Setup:</p><pre><code>CONFIG_HOST_WINDOWS=y               : Window environment
CONFIG_WINDOWS_CYGWIN=y             : Cywin under Windows
</code></pre><p>System Type -&gt; Toolchain:</p><pre><code>CONFIG_ARM_TOOLCHAIN_GNU_EABI=y  : GNU ARM EABI toolchain
</code></pre><p>NOTE: As of this writing, there are issues with using this tool at the -Os level of optimization. This has not been proven to be a compiler issue (as least not one that might not be fixed with a well placed volatile qualifier). However, in any event, it is recommend that you use not more that -O2 optimization.</p></li></ol><h3 id="configuration-directories" tabindex="-1">Configuration Directories <a class="header-anchor" href="#configuration-directories" aria-label="Permalink to &quot;Configuration Directories&quot;">​</a></h3><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (NSH) located at apps/examples/nsh. The Configuration enables the serial interfaces on USART1. Support for built-in applications is enabled, but in the base configuration no built-in applications are selected.</p><h3 id="netnsh" tabindex="-1">netnsh <a class="header-anchor" href="#netnsh" aria-label="Permalink to &quot;netnsh&quot;">​</a></h3><p>This configuration is similar to the nsh but a lot more hardware peripherals are enabled, in particular Ethernet, as well as networking support. It is similar to the stm32f769i-disco/netnsh configuration. This configuration uses USART1 for the serial console. USART1 is connected to the ST-link virtual com inside board.h to remove the need of a extra serial connection to use this board.</p><h3 id="lgvl" tabindex="-1">lgvl <a class="header-anchor" href="#lgvl" aria-label="Permalink to &quot;lgvl&quot;">​</a></h3><p>STM32F746G-DISCO LittlevGL demo example.</p><p>The LTDC is initialized during boot up. This configuration uses USART1 for the serial console. USART1 is connected to the ST-link virtual com inside board.h to remove the need of a extra serial connection to use this board. From the nsh command line execute the lvgldemo example:</p><pre><code>nsh&gt; lvgldemo
</code></pre><p>The test will execute the calibration process and then run the LittlevGL demo project.</p><h2 id="stm32f746g-disco-ltdc-framebuffer-demo-example" tabindex="-1">STM32F746G-DISCO LTDC Framebuffer demo example <a class="header-anchor" href="#stm32f746g-disco-ltdc-framebuffer-demo-example" aria-label="Permalink to &quot;STM32F746G-DISCO LTDC Framebuffer demo example&quot;">​</a></h2><p>Configure and build</p><p>tools/configure.sh stm32f746g-disco:fb make</p><p>Configuration</p><p>This configuration provides 1 LTDC with 16bpp pixel format and a resolution of 480x272.</p><p>Loading</p><p>st-flash write nuttx.bin 0x8000000</p><p>Executing</p><p>The ltdc is initialized during boot up. Interaction with NSH is via the serial console provided by ST-LINK USB at 115200 8N1 baud. From the nsh commandline execute the fb example:</p><pre><code>nsh&gt; fb
</code></pre><p>The test will put a pattern of concentric squares in the framebuffer and terminate.</p><h2 id="stm32f746g-disco-nx-terminal-example" tabindex="-1">STM32F746G-DISCO NX Terminal example <a class="header-anchor" href="#stm32f746g-disco-nx-terminal-example" aria-label="Permalink to &quot;STM32F746G-DISCO NX Terminal example&quot;">​</a></h2><p>Configure and build</p><p>tools/configure.sh stm32f746g-disco:nxterm make</p><p>Configuration</p><p>This configuration provides 1 LTDC with 16bpp pixel format and a resolution of 480x272.</p><p>Trickiest part of config is increasing max message size (CONFIG_MQ_MAXMSGSIZE=256). NX server - client communication cannot be established with default value 8 bytes.</p><p>Loading</p><p>st-flash write nuttx.bin 0x8000000</p><p>or</p><p>openocd -f interface/stlink.cfg -f target/stm32f7x.cfg telnet localhost 4444 &gt; program nuttx verify reset</p><p>Executing</p><p>The ltdc is initialized during boot up. Interaction with NSH is via the serial console provided by ST-LINK USB at 115200 8N1 baud.</p><p>From the nsh commandline execute the example:</p><pre><code>nsh&gt; nxterm
</code></pre><p>The test will show terminal window on the screen.</p><h2 id="stm32f746g-disco-nx-demo-example" tabindex="-1">STM32F746G-DISCO NX demo example <a class="header-anchor" href="#stm32f746g-disco-nx-demo-example" aria-label="Permalink to &quot;STM32F746G-DISCO NX demo example&quot;">​</a></h2><p>Configure and build:</p><pre><code>tools/configure.sh stm32f746g-disco:nxdemo
make
</code></pre><p>Configuration</p><p>This configuration provides 1 LTDC with 16bpp pixel format and a resolution of 480x272.</p><p>Trickiest part of config is increasing max message size (CONFIG_MQ_MAXMSGSIZE=256). NX server - client communication cannot be established with default value 8 bytes.</p><p>Loading:</p><pre><code>st-flash write nuttx.bin 0x8000000
</code></pre><p>or:</p><pre><code>openocd -f interface/stlink.cfg -f target/stm32f7x.cfg
telnet localhost 4444
&gt; program nuttx verify reset
</code></pre><p>Executing</p><p>The ltdc is initialized during boot up. Interaction with NSH is via the serial console provided by ST-LINK USB at 115200 8N1 baud.</p><p>There are two graphics examples provided in this configuration: - nxdemo</p><ul><li>nxhello</li></ul><p>Use help command to show list of examples available:</p><pre><code>nsh&gt; help
</code></pre><p>From the nsh commandline execute the example:</p><pre><code>nsh&gt; nxdemo
</code></pre><p>The test will draw animated lines, squares and circles on the device screen.</p>`,81)]))}const m=t(n,[["render",r]]);export{u as __pageData,m as default};
