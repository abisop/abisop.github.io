import{_ as o,c as t,al as i,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"FOC Driver Interface","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/motor/foc.md","filePath":"en/components/drivers/character/motor/foc.md"}'),c={name:"en/components/drivers/character/motor/foc.md"};function a(n,e,l,d,s,p){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="foc-driver-interface" tabindex="-1">FOC Driver Interface <a class="header-anchor" href="#foc-driver-interface" aria-label="Permalink to &quot;FOC Driver Interface&quot;">â€‹</a></h1><p>Field Oriented Control (FOC) is a common technique to control either synchronous or asynchronous alternating current machines. The main goal of FOC is to control direct current (Id) and quadrature current (Iq) in powered device.</p><p>The device on the kernel side is responsible for the following:</p><ol><li>update PWM duty cycles</li><li>return ADC current samples</li><li>synchronize user-space with PWM events</li></ol><p>The NuttX FOC driver is split into two parts:</p><ol><li>An &quot;upper half&quot;, generic driver that provides the common FOC interface to application level code,</li><li>A &quot;lower half&quot;, platform-specific driver that implements the low-level logic to implement the FOC functionality</li></ol><p>Files supporting FOC can be found in the following locations:</p><ul><li><code>include/nuttx/motor/foc/foc.h</code>. &quot;Upper-half&quot; FOC interface available for the user-space.</li><li><code>include/nuttx/motor/foc/foc_lower.h</code>. &quot;Lower-half&quot; FOC interface.</li><li><code>drivers/motor/foc/foc_dev.c</code>. The generic &quot;upper half&quot; FOC driver.</li><li><code>drivers/motor/foc/foc_pwr.c</code>. The generic power stage for FOC.</li></ul><p>The majority of the functionality available to the application is implemented in driver ioctl calls. Supported ioctl commands:</p><ul><li><code>MTRIOC_START</code> - Start the FOC device, arg: none.</li><li><code>MTRIOC_STOP</code> - Stop the FOC device, arg: none.</li><li><code>MTRIOC_GET_STATE</code> - Get the FOC device state, arg: <code>struct foc_state_s</code> pointer. This is a blocking operation that is used to synchronize the user space application with ADC samples.</li><li><code>MTRIOC_CLEAR_FAULT</code> - Clear the FOC device fault state, arg: none.</li><li><code>MTRIOC_SET_PARAMS</code> - Set the FOC device operation parameters, arg: <code>struct foc_params_s</code> pointer.</li><li><code>MTRIOC_SET_CONFIG</code> - Set the FOC device configuration, arg: <code>struct foc_cfg_s</code> pointer.</li><li><code>MTRIOC_GET_INFO</code> - Get the FOC device info, arg: <code>struct foc_info_s</code> pointer.</li></ul><p>Additionally, board logic can implement:</p><ul><li><code>MTRIOC_SET_BOARDCFG</code> - which returns the board specific FOC configuration</li><li><code>MTRIOC_GET_BOARDCFG</code> - which sets the board-specific FOC configuration</li></ul>',12)]))}const h=o(c,[["render",a]]);export{u as __pageData,h as default};
