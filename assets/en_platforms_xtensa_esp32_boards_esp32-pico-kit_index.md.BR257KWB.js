import{_ as i,c as r,al as a,j as e,a as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const s="/assets/esp32-pico-kit-v4-functional-block-diagram.CfLvV-qB.png",l="/assets/esp32-pico-kit-v4.1-f-layout.DnBOigTC.jpeg",p="/assets/esp32-pico-kit-v4-pinout.B7mzSV39.png",d="/assets/esp32-pico-kit-v4.1-dimensions-back.D81OF7Jx.jpg",c="/assets/esp32-pico-kit-v4-dimensions-side.CUGmQfML.jpg",m=JSON.parse('{"title":"ESP32-PICO-KIT V4","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/xtensa/esp32/boards/esp32-pico-kit/index.md","filePath":"en/platforms/xtensa/esp32/boards/esp32-pico-kit/index.md"}'),h={name:"en/platforms/xtensa/esp32/boards/esp32-pico-kit/index.md"};function u(P,o,I,C,_,O){return n(),r("div",null,o[0]||(o[0]=[a('<h1 id="esp32-pico-kit-v4" tabindex="-1">ESP32-PICO-KIT V4 <a class="header-anchor" href="#esp32-pico-kit-v4" aria-label="Permalink to &quot;ESP32-PICO-KIT V4&quot;">​</a></h1><p>chip:esp32, chip:esp32picod4</p><p>This guide shows how to get started with the ESP32-PICO-KIT V4/V4.1 mini development board.</p><p>This particular description covers ESP32-PICO-KIT V4 and V4.1. The difference is the upgraded USB-UART bridge from CP2102 in V4 with up to 1 Mbps transfer rates to CP2102N in V4.1 with up to 3 Mbps transfer rates.</p><h2 id="what-you-need" tabindex="-1">What You Need <a class="header-anchor" href="#what-you-need" aria-label="Permalink to &quot;What You Need&quot;">​</a></h2><ul><li><code>ESP32-PICO-KIT mini development board &lt;get-started-pico-kit-v4-board-front&gt;</code>{.interpreted-text role=&quot;ref&quot;}</li><li>USB 2.0 A to Micro B cable</li><li>Computer running Windows, Linux, or macOS</li></ul><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>ESP32-PICO-KIT is an ESP32-based mini development board produced by <a href="https://espressif.com" target="_blank" rel="noreferrer">Espressif</a>.</p><p>The core of this board is ESP32-PICO-D4 - a System-in-Package (SiP) module with complete Wi-Fi and Bluetooth functionalities. Compared to other ESP32 modules, ESP32-PICO-D4 integrates the following peripheral components in one single package, which otherwise would need to be installed separately:</p><ul><li>40 MHz crystal oscillator</li><li>4 MB flash</li><li>Filter capacitors</li><li>RF matching links</li></ul><p>This setup reduces the costs of additional external components as well as the cost of assembly and testing and also increases the overall usability of the product.</p><p>The development board features a USB-UART Bridge circuit which allows developers to connect the board to a computer&#39;s USB port for flashing and debugging.</p><p>All the IO signals and system power on ESP32-PICO-D4 are led out to two rows of 20 x 0.1&quot; header pads on both sides of the development board for easy access. For compatibility with Dupont wires, 2 x 17 header pads are populated with two rows of male pin headers. The remaining 2 x 3 header pads beside the antenna are not populated. These pads may be populated later by the user if required.</p><p>Note</p><ol><li>There are two versions of ESP32-PICO-KIT boards, respectively with male headers and female headers. In this guide, the male header version is taken as an example.</li><li>The 2 x 3 pads not populated with pin headers are connected to the flash memory embedded in the ESP32-PICO-D4 SiP module. For more details, see module&#39;s datasheet in <a href="#related-documents">Related Documents</a>.</li></ol><h2 id="functionality-overview" tabindex="-1">Functionality Overview <a class="header-anchor" href="#functionality-overview" aria-label="Permalink to &quot;Functionality Overview&quot;">​</a></h2><p>The block diagram below shows the main components of ESP32-PICO-KIT and their interconnections.</p><p><img src="'+s+`" alt="ESP32-PICO-KIT block
diagram" class="align-centeralign-center"></p><h2 id="functional-description" tabindex="-1">Functional Description <a class="header-anchor" href="#functional-description" aria-label="Permalink to &quot;Functional Description&quot;">​</a></h2><p>The following figure and the table below describe the key components, interfaces, and controls of the ESP32-PICO-KIT board.</p><p><img src="`+l+`" alt="ESP32-PICO-KIT board layout (with female
headers)" class="align-centeralign-center"></p><p>Below is the description of the items identified in the figure starting from the top left corner and going clockwise.</p><hr><p>Key Component Description</p><hr><p>ESP32-PICO-D4 Standard ESP32-PICO-D4 module soldered to the ESP32-PICO-KIT board. The complete ESP32 system on a chip (ESP32 SoC) has been integrated into the SiP module, requiring only an external antenna with LC matching network, decoupling capacitors, and a pull-up resistor for EN signals to function properly.</p><p>LDO 5V-to-3.3V Low dropout voltage regulator (LDO).</p><p>USB-UART bridge Single-chip USB-UART bridge: CP2102 in V4 provides up to 1 Mbps transfer rates and CP2102N in V4.1 offers up to 3 Mbps transfers rates.</p><p>Micro USB Port USB interface. Power supply for the board as well as the communication interface between a computer and the board.</p><p>5V Power On LED This red LED turns on when power is supplied to the board. For details, see the schematics in <a href="#related-documents">Related Documents</a>.</p><p>I/O All the pins on ESP32-PICO-D4 are broken out to pin headers. You can program ESP32 to enable multiple functions, such as PWM, ADC, DAC, I2C, I2S, SPI, etc. For details, please see Section <a href="#pin-descriptions">Pin Descriptions</a>.</p><p>BOOT Button Download button. Holding down <strong>Boot</strong> and then pressing <strong>EN</strong> initiates Firmware Download mode for downloading firmware through the serial port.</p><h2 id="en-button-reset-button" tabindex="-1">EN Button Reset button. <a class="header-anchor" href="#en-button-reset-button" aria-label="Permalink to &quot;EN Button         Reset button.&quot;">​</a></h2><h2 id="power-supply-options" tabindex="-1">Power Supply Options <a class="header-anchor" href="#power-supply-options" aria-label="Permalink to &quot;Power Supply Options&quot;">​</a></h2><p>There are three mutually exclusive ways to provide power to the board:</p><ul><li>Micro USB port, default power supply</li><li>5V / GND header pins</li><li>3V3 / GND header pins</li></ul><p>Warning</p><p>The power supply must be provided using <strong>one and only one of the options above</strong>, otherwise the board and/or the power supply source can be damaged.</p><h2 id="pin-descriptions" tabindex="-1">Pin Descriptions <a class="header-anchor" href="#pin-descriptions" aria-label="Permalink to &quot;Pin Descriptions&quot;">​</a></h2>`,39),e("p",null,[t("The two tables below provide the "),e("strong",null,"Name"),t(" and "),e("strong",null,"Function"),t(" of I/O header pins on both sides of the board, see "),e("code",{class:"interpreted-text",role:"ref"},"get-started-pico-kit-v4-board-front"),t(". The pin numbering and header names are the same as in the schematic given in "),e("a",{href:"#related-documents"},"Related Documents"),t(".")],-1),a('<h3 id="header-j2" tabindex="-1">Header J2 <a class="header-anchor" href="#header-j2" aria-label="Permalink to &quot;Header J2&quot;">​</a></h3><p>+-----+-------------------+------+--------------------------+ | No. | Name | Type | Function | +=====+===================+======+==========================+ | 1 | FLASH_SD1 (FSD1) | I/O | | GPIO8, SD_DATA1, | | | | | SPID, HS1_DATA1 | | | | | <code>(See 1) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , U2CTS | +-----+-------------------+------+--------------------------+ | 2 | FLASH_SD3 (FSD3) | I/O | | GPIO7, SD_DATA0, | | | | | SPIQ, HS1_DATA0 | | | | | <code>(See 1) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , U2RTS | +-----+-------------------+------+--------------------------+ | 3 | FLASH_CLK (FCLK) | I/O | | GPIO6, SD_CLK, | | | | | SPICLK, HS1_CLK | | | | | <code>(See 1) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , U1CTS | +-----+-------------------+------+--------------------------+ | 4 | IO21 | I/O | | GPIO21, VSPIHD, | | | | | EMAC_TX_EN | +-----+-------------------+------+--------------------------+ | 5 | IO22 | I/O | | GPIO22, VSPIWP, U0RTS, | | | | | EMAC_TXD1 | +-----+-------------------+------+--------------------------+ | 6 | IO19 | I/O | | GPIO19, VSPIQ, U0CTS, | | | | | EMAC_TXD0 | +-----+-------------------+------+--------------------------+ | 7 | IO23 | I/O | | GPIO23, VSPID, | | | | | HS1_STROBE | +-----+-------------------+------+--------------------------+ | 8 | IO18 | I/O | | GPIO18, VSPICLK, | | | | | HS1_DATA7 | +-----+-------------------+------+--------------------------+ | 9 | IO5 | I/O | | GPIO5, VSPICS0, | | | | | HS1_DATA6, | | | | | EMAC_RX_CLK | +-----+-------------------+------+--------------------------+ | 10 | IO10 | I/O | | GPIO10, SD_DATA3, | | | | | SPIWP, HS1_DATA3, | | | | | U1TXD | +-----+-------------------+------+--------------------------+ | 11 | IO9 | I/O | | GPIO9, SD_DATA2, | | | | | SPIHD, HS1_DATA2, | | | | | U1RXD | +-----+-------------------+------+--------------------------+ | 12 | RXD0 | I/O | | GPIO3, U0RXD | | | | | <code>(See 3) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , | | | | | CLK_OUT2 | +-----+-------------------+------+--------------------------+ | 13 | TXD0 | I/O | | GPIO1, U0TXD | | | | | <code>(See 3) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , | | | | | CLK_OUT3, EMAC_RXD2 | +-----+-------------------+------+--------------------------+ | 14 | IO35 | I | | ADC1_CH7, RTC_GPIO5 | +-----+-------------------+------+--------------------------+ | 15 | IO34 | I | | ADC1_CH6, RTC_GPIO4 | +-----+-------------------+------+--------------------------+ | 16 | IO38 | I | | GPIO38, ADC1_CH2, | | | | | RTC_GPIO2 | +-----+-------------------+------+--------------------------+ | 17 | IO37 | I | | GPIO37, ADC1_CH1, | | | | | RTC_GPIO1 | +-----+-------------------+------+--------------------------+ | 18 | EN | I | | CHIP_PU | +-----+-------------------+------+--------------------------+ | 19 | GND | P | | Ground | +-----+-------------------+------+--------------------------+ | 20 | VDD33 (3V3) | P | | 3.3V power supply | +-----+-------------------+------+--------------------------+</p><h3 id="header-j3" tabindex="-1">Header J3 <a class="header-anchor" href="#header-j3" aria-label="Permalink to &quot;Header J3&quot;">​</a></h3><p>+-----+-------------------+------+--------------------------+ | No. | Name | Type | Function | +=====+===================+======+==========================+ | 1 | FLASH_CS (FCS) | I/O | | GPIO16, HS1_DATA4 | | | | | <code>(See 1) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , U2RXD, | | | | | EMAC_CLK_OUT | +-----+-------------------+------+--------------------------+ | 2 | FLASH_SD0 (FSD0) | I/O | | GPIO17, HS1_DATA5 | | | | | <code>(See 1) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , U2TXD, | | | | | EMAC_CLK_OUT_180 | +-----+-------------------+------+--------------------------+ | 3 | FLASH_SD2 (FSD2) | I/O | | GPIO11, SD_CMD, | | | | | SPICS0, HS1_CMD | | | | | <code>(See 1) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , U1RTS | +-----+-------------------+------+--------------------------+ | 4 | SENSOR_VP (FSVP) | I | | GPIO36, ADC1_CH0, | | | | | RTC_GPIO0 | +-----+-------------------+------+--------------------------+ | 5 | SENSOR_VN (FSVN) | I | | GPIO39, ADC1_CH3, | | | | | RTC_GPIO3 | +-----+-------------------+------+--------------------------+ | 6 | IO25 | I/O | | GPIO25, DAC_1, | | | | | ADC2_CH8, RTC_GPIO6, | | | | | EMAC_RXD0 | +-----+-------------------+------+--------------------------+ | 7 | IO26 | I/O | | GPIO26, DAC_2, | | | | | ADC2_CH9, RTC_GPIO7, | | | | | EMAC_RXD1 | +-----+-------------------+------+--------------------------+ | 8 | IO32 | I/O | | 32K_XP | | | | | <code>(See 2a) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , | | | | | ADC1_CH4, TOUCH9, | | | | | RTC_GPIO9 | +-----+-------------------+------+--------------------------+ | 9 | IO33 | I/O | | 32K_XN | | | | | <code>(See 2b) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , | | | | | ADC1_CH5, TOUCH8, | | | | | RTC_GPIO8 | +-----+-------------------+------+--------------------------+ | 10 | IO27 | I/O | | GPIO27, ADC2_CH7, | | | | | TOUCH7, RTC_GPIO17 | | | | | | EMAC_RX_DV | +-----+-------------------+------+--------------------------+ | 11 | IO14 | I/O | | ADC2_CH6, TOUCH6, | | | | | RTC_GPIO16, MTMS, | | | | | HSPICLK, | | | | | | HS2_CLK, SD_CLK, | | | | | EMAC_TXD2 | +-----+-------------------+------+--------------------------+ | 12 | IO12 | I/O | | ADC2_CH5, TOUCH5, | | | | | RTC_GPIO15, MTDI | | | | | <code>(See 4) &lt;get-s | | | | | tarted-pico-kit-v4-pin-n | | | | | otes&gt;</code>{.interpreted-text | | | | | role=&quot;ref&quot;} , HSPIQ, | | | | | | HS2_DATA2, SD_DATA2, | | | | | EMAC_TXD3 | +-----+-------------------+------+--------------------------+ | 13 | IO13 | I/O | | ADC2_CH4, TOUCH4, | | | | | RTC_GPIO14, MTCK, | | | | | HSPID, | | | | | | HS2_DATA3, SD_DATA3, | | | | | EMAC_RX_ER | +-----+-------------------+------+--------------------------+ | 14 | IO15 | I/O | | ADC2_CH3, TOUCH3, | | | | | RTC_GPIO13, MTDO, | | | | | HSPICS0 | | | | | | HS2_CMD, SD_CMD, | | | | | EMAC_RXD3 | +-----+-------------------+------+--------------------------+ | 15 | IO2 | I/O | | ADC2_CH2, TOUCH2, | | | | | RTC_GPIO12, HSPIWP, | | | | | | HS2_DATA0, SD_DATA0 | +-----+-------------------+------+--------------------------+ | 16 | IO4 | I/O | | ADC2_CH0, TOUCH0, | | | | | RTC_GPIO10, HSPIHD, | | | | | | HS2_DATA1, SD_DATA1, | | | | | EMAC_TX_ER | +-----+-------------------+------+--------------------------+ | 17 | IO0 | I/O | | ADC2_CH1, TOUCH1, | | | | | RTC_GPIO11, CLK_OUT1 | | | | | | EMAC_TX_CLK | +-----+-------------------+------+--------------------------+ | 18 | VDD33 (3V3) | P | | 3.3V power supply | +-----+-------------------+------+--------------------------+ | 19 | GND | P | | Ground | +-----+-------------------+------+--------------------------+ | 20 | EXT_5V (5V) | P | | 5V power supply | +-----+-------------------+------+--------------------------+</p><p>Note</p><ol><li>This pin is connected to the flash pin of ESP32-PICO-D4.</li><li>32.768 kHz crystal oscillator: a) input, b) output.</li><li>This pin is connected to the pin of the USB bridge chip on the board.</li><li>The operating voltage of ESP32-PICO-KIT&#39;s embedded SPI flash is 3.3 V. Therefore, the strapping pin MTDI should hold bit zero during the module power-on reset. If connected, please make sure that this pin is not held up on reset.</li></ol><h4 id="pin-layout" tabindex="-1">Pin Layout <a class="header-anchor" href="#pin-layout" aria-label="Permalink to &quot;Pin Layout&quot;">​</a></h4><p><img src="'+p+`" alt="ESP32-PICO-KIT Pin Layout (click to
enlarge)" class="align-center"></p><h2 id="board-dimensions" tabindex="-1">Board Dimensions <a class="header-anchor" href="#board-dimensions" aria-label="Permalink to &quot;Board Dimensions&quot;">​</a></h2><p>The dimensions are 52 x 20.3 x 10 mm (2.1&quot; x 0.8&quot; x 0.4&quot;).</p><p><img src="`+d+`" alt="ESP32-PICO-KIT dimensions - back (with male
headers)" class="align-centeralign-center"></p><p><img src="`+c+`" alt="ESP32-PICO-KIT dimensions - side (with male
headers)" class="align-centeralign-center"></p><p>For the board physical construction details, please refer to its Reference Design listed below.</p><h2 id="related-documents" tabindex="-1">Related Documents <a class="header-anchor" href="#related-documents" aria-label="Permalink to &quot;Related Documents&quot;">​</a></h2><ul><li><a href="https://dl.espressif.com/dl/schematics/esp32-pico-kit-v4_schematic.pdf" target="_blank" rel="noreferrer">ESP32-PICO-KIT V4 schematic</a> (PDF)</li><li><a href="https://dl.espressif.com/dl/schematics/esp32-pico-kit-v4.1_schematic.pdf" target="_blank" rel="noreferrer">ESP32-PICO-KIT V4.1 schematic</a> (PDF)</li><li><a href="https://www.espressif.com/sites/default/files/documentation/esp32-pico-kit_v4.1_20180314_en.zip" target="_blank" rel="noreferrer">ESP32-PICO-KIT Reference Design</a> containing OrCAD schematic, PCB layout, gerbers and BOM</li><li><a href="https://espressif.com/sites/default/files/documentation/esp32-pico-d4_datasheet_en.pdf" target="_blank" rel="noreferrer">ESP32-PICO-D4 Datasheet</a> (PDF)</li></ul><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>All of the configurations presented below can be tested by running the following commands:</p><pre><code> ./tools/configure.sh esp32-pico-kit:&lt;config_name&gt;
 make flash ESPTOOL_PORT=/dev/ttyUSB0 -j
</code></pre><p>Where &lt;config_name&gt; is the name of board configuration you want to use, i.e.: nsh, buttons, wifi... Then use a serial console terminal like <code>picocom</code> configured to 115200 8N1.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, exposed via USB connection by means of CP2102 converter, at 115200 bps).</p>`,21)]))}const f=i(h,[["render",u]]);export{m as __pageData,f as default};
