import{_ as d,c as t,al as s,o}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"dhcpd DHCP Server","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/dhcpd/index.md","filePath":"en/applications/examples/dhcpd/index.md"}'),a={name:"en/applications/examples/dhcpd/index.md"};function r(i,e,c,n,p,l){return o(),t("div",null,e[0]||(e[0]=[s('<h1 id="dhcpd-dhcp-server" tabindex="-1"><code>dhcpd</code> DHCP Server <a class="header-anchor" href="#dhcpd-dhcp-server" aria-label="Permalink to &quot;`dhcpd` DHCP Server&quot;">​</a></h1><p>This examples builds a tiny DHCP server for the target system.</p><p><strong>Note</strong>: For test purposes, this example can be built as a host-based DHCPD server. This can be built as follows:</p><pre><code>cd examples/dhcpd\nmake -f Makefile.host TOPDIR=&lt;nuttx-directory&gt;\n</code></pre><p>NuttX configuration settings:</p><ul><li><code>CONFIG_NET=y</code> – of course.</li><li><code>CONFIG_NET_UDP=y</code> – UDP support is required for DHCP (as well as various other UDP-related configuration settings).</li><li><code>CONFIG_NET_BROADCAST=y</code> – UDP broadcast support is needed.</li><li><code>CONFIG_NETUTILS_NETLIB=y</code> – The networking library is needed.</li><li><code>CONFIG_EXAMPLES_DHCPD_NOMAC</code> – (May be defined to use software assigned MAC)</li></ul><p>See also <code>CONFIG_NETUTILS_DHCPD_*</code> settings described elsewhere and used in <code>netutils/dhcpd/dhcpd.c</code>. These settings are required to described the behavior of the daemon.</p>',7)]))}const u=d(a,[["render",r]]);export{h as __pageData,u as default};
