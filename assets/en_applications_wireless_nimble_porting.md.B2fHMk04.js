import{_ as t,c as o,al as n,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Porting Layer","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/wireless/nimble/porting.md","filePath":"en/applications/wireless/nimble/porting.md"}'),a={name:"en/applications/wireless/nimble/porting.md"};function r(c,e,d,s,l,p){return i(),o("div",null,e[0]||(e[0]=[n(`<h1 id="porting-layer" tabindex="-1">Porting Layer <a class="header-anchor" href="#porting-layer" aria-label="Permalink to &quot;Porting Layer&quot;">​</a></h1><p>nimBLE supports being built as part of different OS, not only their mynewt RTOS. A porting layer was written for NuttX, which was mostly a copy of the Linux porting layer.</p><h2 id="modifying-the-porting-layer" tabindex="-1">Modifying the porting layer <a class="header-anchor" href="#modifying-the-porting-layer" aria-label="Permalink to &quot;Modifying the porting layer&quot;">​</a></h2><p>NuttX is supported in nimBLE by adding an entry in the porting layer used to support different OSs. However, nimBLE supports each OS by generating a configuration header (<code>syscfg.h</code>) from YAML configuration files. If you want to modify the porting layer and change its configuration you will need to regenerate this header. This process is a bit involved since nimBLE uses its own <code>newt</code> build tool to do so and also somewhat assumes it will be built for their mynewt OS, so it actually may fail to build completely but it will still get to generate the required files.</p><p>So, first is to get the newt tool:</p><pre><code> cd apps/nimble
 git clone https://github.com/apache/mynewt-newt
 cd mynewt-newt
</code></pre><p>At the moment, you will probably require unstable version instead of a release so select a known working:</p><pre><code> git checkout c14c47bb683d
 ./build.sh
</code></pre><p>There should be now a <code>newt</code> binary under <code>mynewt-newt/newt</code>. Extend your path so that it is visible:</p><pre><code> export PATH=mynewt-newt/newt:PATH
</code></pre><p>Now, create a <code>newt</code> project:</p><pre><code> newt new foo
</code></pre><p>We want latest master version of mynewt OS and stack, so edit <code>foo/project.yml</code> and change the <code>vers</code> variable to <code>0.0.0</code>. Now do:</p><pre><code> cd foo/
 newt upgrade
</code></pre><p>Under <code>foo/repos</code> there will be a clone of both mynewt and nimble repo. Since this app already downloads nimble repo outside of <code>foo</code>, you can delete <code>foo/repos/apache-mynewt-nimble</code> and simply make a link to the <code>mynewt-nimble</code> directory, so that you can work on the nimBLE code directly.</p><p>Now you can make any changes to the <code>yml</code> files such as <code>porting/targets/nuttx/syscfg.yml</code>. Finally, you can build with:</p><pre><code> newt build @apache-mynewt-nimble/porting/targets/nuttx
</code></pre><p>This will most likely fail to complete but the generated headers should be there. So now copy them to the appropriate location in the <code>nuttx</code> target directory:</p><pre><code> cd foo/
 cp bin/@apache-mynewt-nimble/porting/targets/nuttx/generated/include/logcfg/logcfg.h \\
  repos/apache-mynewt-nimble/porting/examples/nuttx/include/logcfg
 cp bin/@apache-mynewt-nimble/porting/targets/nuttx/generated/include/syscfg/syscfg.h \\
  repos/apache-mynewt-nimble/porting/examples/nuttx/include/syscfg
</code></pre><p>If these changes are done to fix a problem with NuttX porting layer in nimBLE, you should open a pull-request to nimBLE repository to include the updated header files. It is recommended to mention the issue in NuttX mailing list first to ensure the change is needed.</p>`,20)]))}const u=t(a,[["render",r]]);export{m as __pageData,u as default};
