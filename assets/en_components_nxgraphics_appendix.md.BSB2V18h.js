import{_ as a,c as s,al as t,j as e,a as o,o as i}from"./chunks/framework.NFAqBSgQ.js";const N=JSON.parse('{"title":"Appendix","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/nxgraphics/appendix.md","filePath":"en/components/nxgraphics/appendix.md"}'),d={name:"en/components/nxgraphics/appendix.md"};function c(r,n,p,l,h,f){return i(),s("div",null,n[0]||(n[0]=[t('<h1 id="appendix" tabindex="-1">Appendix <a class="header-anchor" href="#appendix" aria-label="Permalink to &quot;Appendix&quot;">​</a></h1><h2 id="graphics-directory-structure" tabindex="-1"><code>graphics/</code> Directory Structure <a class="header-anchor" href="#graphics-directory-structure" aria-label="Permalink to &quot;`graphics/` Directory Structure&quot;">​</a></h2><p>The graphics capability consist both of components internal to the RTOS and of user-callable interfaces. In the NuttX kernel mode build there are some components of the graphics subsystem are callable in user mode and other components that are internal to the RTOS. The directory <code>nuttx/graphics</code> contains only those components that are internal to the RTOS. User callable functions must be part of a library that can be linked against user applications. This user callable interfaces are provided in sub-directories under <code>nuttx/libnx</code>.</p><p><code>libnx/nx</code></p><p>: Common callable interfaces that are, logically, part of both nxmu and nxsu.</p><p><code>graphics/nxglib</code> and <code>libnx/nxglib</code></p><p>: The NuttX tiny graphics library. The directory contains generic utilities support operations on primitive graphics objects and logic to rasterize directly into a framebuffer or through an LCD driver interface. It has no concept of windows (other than the one, framebuffer or LCD window).</p><p><code>graphics/nxbe</code></p><p>: This is the <em>back-end</em> of a tiny windowing system. It can be used with either of two front-ends to complete a windowing system (see <code>nxmu</code> and <code>nxsu</code> below). It contains most of the important window management logic: clipping, window controls, window drawing, etc.</p><p><code>graphics/nxmu</code> and <code>libnx/nxmu</code></p><p>: This is the NX multi user <em>front end</em>. When combined with the generic <em>back-end</em> (<code>nxbe</code>), it implements a multi-threaded, multi-user windowing system. The files in this directory present the window APIs described in <code>include/nuttx/nx/nx.h</code>. The multi-user front end includes a graphics server that executes on its own thread; multiple graphics clients then communicate with the server via a POSIX message queue to serialize window operations from many threads.</p><p><code>libnx/nxfonts</code></p><p>: This is where the NXFONTS implementation resides. This is a relatively low-level set of charset set/glyph management APIs. See <code>include/nuttx/nx/nxfonts.h</code>.</p><p><code>libnx/nxtk</code></p><p>: This is where the NXTOOLKIT implementation resides. This toolkit is built on top of NX and works with the multi-user NX front-end. See <code>include/nuttx/nx/nxtk.h</code>.</p><p><code>apps/graphics/NxWidgets</code></p>',16),e("p",null,[o(": The "),e("code",{class:"interpreted-text",role:"ref"},"NxWidgets <nxwidgets>"),o(" code is provided as a separate package provided in the "),e("code",null,"apps/"),o(" repository.")],-1),t(`<p><code>graphics/nxterm</code></p><p>: The NxTerm driver is built on top of NX and works with the multi-user NX front-end. See <code>include/nuttx/nx/nxterm.h</code>.</p><h2 id="nx-configuration-options" tabindex="-1">NX Configuration Options <a class="header-anchor" href="#nx-configuration-options" aria-label="Permalink to &quot;NX Configuration Options&quot;">​</a></h2><h3 id="general-configuration-settings" tabindex="-1">General Configuration Settings <a class="header-anchor" href="#general-configuration-settings" aria-label="Permalink to &quot;General Configuration Settings&quot;">​</a></h3><p><code>CONFIG_NX</code></p><p>: Enables overall support for graphics library and NX</p><p><code>CONFIG_NX_RAMBACKED</code></p><p>: Enables RAM backed window support. If this option is selected, then windows may be optionally created with a RAM framebuffer backing up the window content. Rending into the window will result in rending into the backup framebuffer, then updating the physical display from the framebuffer.</p><pre><code>The advantage of this option is that the application that manages
window will no longer receive redraw() callbacks. Those calls
normally occur, for example, when a window \\&quot;above\\&quot; moves exposing
a portion of the window below. If this option is selected, then the
system will redraw the exposed portion of the window from the backup
framebuffer without intervention of the window applications. This
greatly reduces the complexity of the application and performance of
the window at the expense of increased memory usage.

An exception is the case when the window is resized to a wider
and/or taller size. In that case, the redraw callback will till
occur. It is necessary in that case to provide new graphic content
for the extended window area.

Redraw requests in other cases are also suppressed: Changes to
window position, size, etc.
</code></pre><h3 id="nxgl-configuration-settings" tabindex="-1">NXGL Configuration Settings <a class="header-anchor" href="#nxgl-configuration-settings" aria-label="Permalink to &quot;NXGL Configuration Settings&quot;">​</a></h3><p><code>CONFIG_NX_NPLANES</code>:</p><p>: Some YUV color formats requires support for multiple planes, one for each color component. Unless you have such special hardware, this value should be undefined or set to 1.</p><p><code>CONFIG_NX_DISABLE_1BPP</code>, <code>CONFIG_NX_DISABLE_2BPP</code>, <code>CONFIG_NX_DISABLE_4BPP</code>, <code>CONFIG_NX_DISABLE_8BPP</code> <code>CONFIG_NX_DISABLE_16BPP</code>, <code>CONFIG_NX_DISABLE_24BPP</code>, and <code>CONFIG_NX_DISABLE_32BPP</code>:</p><p>: NX supports a variety of pixel depths. You can save some memory by disabling support for unused color depths.</p><p><code>CONFIG_NX_PACKEDMSFIRST</code>:</p><p>: If a pixel depth of less than 8-bits is used, then NX needs to know if the pixels pack from the MS to LS or from LS to MS</p><p><code>CONFIG_NX_LCDDRIVER</code>:</p><p>: By default, NX builds to use a framebuffer driver (see <code>include/nuttx/video/fb.h</code>). If this option is defined, NX will build to use an LCD driver (see <code>include/nuttx/lcd/lcd.h</code>).</p><p><code>CONFIG_NX_ANTIALIASING</code>:</p><p>: Enable support for anti-aliasing when rendering lines as various orientations. This option is only available for use with frame buffer drivers and only with 16-, 24-, or 32-bit RGB color formats.</p><h3 id="configuration-settings" tabindex="-1">Configuration Settings <a class="header-anchor" href="#configuration-settings" aria-label="Permalink to &quot;Configuration Settings&quot;">​</a></h3><p><code>CONFIG_NX_XYINPUT</code>:</p><p>: Build in support for an X/Y input such as a mouse or a touscreen.</p><p><code>CONFIG_NX_KBD</code>:</p><p>: Build in support of keypad/keyboard input.</p><p><code>CONFIG_NX_WRITEONLY</code>:</p><p>: Define if the underlying graphics device does not support read operations. Automatically defined if <code>CONFIG_NX_LCDDRIVER</code> and <code>CONFIG_LCD_NOGETRUN</code> are defined.</p><h3 id="nx-server-configuration-settings" tabindex="-1">NX Server Configuration Settings <a class="header-anchor" href="#nx-server-configuration-settings" aria-label="Permalink to &quot;NX Server Configuration Settings&quot;">​</a></h3><p><code>CONFIG_NX_BLOCKING</code></p><p>: Open the client message queues in blocking mode. In this case, <code>nx_eventhandler()</code> will not return until a message is received and processed.</p><p><code>CONFIG_NX_MXSERVERMSGS</code> and <code>CONFIG_NX_MXCLIENTMSGS</code></p><p>: Specifies the maximum number of messages that can fit in the message queues. No additional resources are allocated, but this can be set to prevent flooding of the client or server with too many messages (<code>CONFIG_PREALLOC_MQ_MSGS</code> controls how many messages are pre-allocated).</p><h3 id="nxtk-configuration-settings" tabindex="-1">NXTK Configuration Settings <a class="header-anchor" href="#nxtk-configuration-settings" aria-label="Permalink to &quot;NXTK Configuration Settings&quot;">​</a></h3><p><code>CONFIG_NXTK_BORDERWIDTH</code>:</p><p>: Specifies the width of the border (in pixels) used with framed windows. The default is 4.</p><p><code>CONFIG_NXTK_BORDERCOLOR1</code>, <code>CONFIG_NXTK_BORDERCOLOR2</code>, and <code>CONFIG_NXTK_BORDERCOLOR3</code>:</p><p>: Specify the colors of the border used with framed windows.</p><p><code>CONFIG_NXTK_BORDERCOLOR2</code></p><p>: The shadow side color and so is normally darker.</p><p><code>CONFIG_NXTK_BORDERCOLOR3</code></p><p>: The shiny side color and so is normally brighter. The default is medium, dark, and light grey, respectively</p><p><code>CONFIG_NXTK_AUTORAISE</code>:</p><p>: If set, a window will be raised to the top if the mouse position is over a visible portion of the window. Default: A mouse button must be clicked over a visible portion of the window.</p><h3 id="nxfonts-configuration-settings" tabindex="-1">NXFONTS Configuration Settings <a class="header-anchor" href="#nxfonts-configuration-settings" aria-label="Permalink to &quot;NXFONTS Configuration Settings&quot;">​</a></h3><p><code>CONFIG_NXFONTS_CHARBITS</code>:</p><p>: The number of bits in the character set. Current options are only 7 and 8. The default is 7.</p><p><code>CONFIG_NXFONT_SANS17X22</code>:</p><p>: This option enables support for a tiny, 17x22 san serif font (font <code>ID FONTID_SANS17X22</code> == 14).</p><p><code>CONFIG_NXFONT_SANS20X26</code>:</p><p>: This option enables support for a tiny, 20x26 san serif font (font <code>ID FONTID_SANS20X26</code> == 15).</p><p><code>CONFIG_NXFONT_SANS23X27</code>:</p><p>: This option enables support for a tiny, 23x27 san serif font (font <code>ID FONTID_SANS23X27</code> == 1).</p><p><code>CONFIG_NXFONT_SANS22X29</code>:</p><p>: This option enables support for a small, 22x29 san serif font (font <code>ID FONTID_SANS22X29</code> == 2).</p><p><code>CONFIG_NXFONT_SANS28X37</code>:</p><p>: This option enables support for a medium, 28x37 san serif font (font <code>ID FONTID_SANS28X37</code> == 3).</p><p><code>CONFIG_NXFONT_SANS39X48</code>:</p><p>: This option enables support for a large, 39x48 san serif font (font <code>ID FONTID_SANS39X48</code> == 4).</p><p><code>CONFIG_NXFONT_SANS17X23B</code>:</p><p>: This option enables support for a tiny, 17x23 san serif bold font (font <code>ID FONTID_SANS17X23B</code> == 16).</p><p><code>CONFIG_NXFONT_SANS20X27B</code>:</p><p>: This option enables support for a tiny, 20x27 san serif bold font (font <code>ID FONTID_SANS20X27B</code> == 17).</p><p><code>CONFIG_NXFONT_SANS22X29B</code>:</p><p>: This option enables support for a small, 22x29 san serif bold font (font ID <code>FONTID_SANS22X29B</code> == 5).</p><p><code>CONFIG_NXFONT_SANS28X37B</code>:</p><p>: This option enables support for a medium, 28x37 san serif bold font (font ID <code>FONTID_SANS28X37B</code> == 6).</p><p><code>CONFIG_NXFONT_SANS40X49B</code>:</p><p>: This option enables support for a large, 40x49 san serif bold font (font ID <code>FONTID_SANS40X49B</code> == 7).</p><p><code>CONFIG_NXFONT_SERIF22X29</code>:</p><p>: This option enables support for a small, 22x29 font (with serifs) (font ID <code>FONTID_SERIF22X29</code> == 8).</p><p><code>CONFIG_NXFONT_SERIF29X37</code>:</p><p>: This option enables support for a medium, 29x37 font (with serifs) (font ID <code>FONTID_SERIF29X37</code> == 9).</p><p><code>CONFIG_NXFONT_SERIF38X48</code>:</p><p>: This option enables support for a large, 38x48 font (with serifs) (font ID <code>FONTID_SERIF38X48</code> == 10).</p><p><code>CONFIG_NXFONT_SERIF22X28B</code>:</p><p>: This option enables support for a small, 27x38 bold font (with serifs) (font ID <code>FONTID_SERIF22X28B</code> == 11).</p><p><code>CONFIG_NXFONT_SERIF27X38B</code>:</p><p>: This option enables support for a medium, 27x38 bold font (with serifs) (font ID <code>FONTID_SERIF27X38B</code> == 12).</p><p><code>CONFIG_NXFONT_SERIF38X49B</code>:</p><p>: This option enables support for a large, 38x49 bold font (with serifs) (font ID <code>FONTID_SERIF38X49B</code> == 13).</p><h3 id="nxterm-configuration-settings" tabindex="-1">NxTerm Configuration Settings <a class="header-anchor" href="#nxterm-configuration-settings" aria-label="Permalink to &quot;NxTerm Configuration Settings&quot;">​</a></h3><p>General NxTerm settings.</p><p><code>CONFIG_NXTERM</code>:</p><p>: Enables building of the NxTerm driver.</p><p>NxTerm output text/graphics options:</p><p><code>CONFIG_NXTERM_BPP</code>:</p><p>: Currently, NxTerm supports only a single pixel depth. This configuration setting must be provided to support that single pixel depth. Default: The smallest enabled pixel depth. (see <code>CONFIG_NX_DISABLE_*BPP</code>)</p><p><code>CONFIG_NXTERM_CURSORCHAR</code>:</p><p>: The bitmap code to use as the cursor. Default &#39;_&#39;</p><p><code>CONFIG_NXTERM_MXCHARS</code>:</p><p>: NxTerm needs to remember every character written to the console so that it can redraw the window. This setting determines the size of some internal memory allocations used to hold the character data. Default: 128.</p><p><code>CONFIG_NXTERM_CACHESIZE</code>:</p><p>: NxTerm supports caching of rendered fonts. This font caching is required for two reasons: (1) First, it improves text performance, but more importantly (2) it preserves the font memory. Since the NX server runs on a separate server thread, it requires that the rendered font memory persist until the server has a chance to render the font. Unfortunately, the font cache would be quite large if all fonts were saved. The <code>CONFIG_NXTERM_CACHESIZE</code> setting will control the size of the font cache (in number of glyphs). Only that number of the most recently used glyphs will be retained. Default: 16.</p><pre><code>&gt; NOTE: There can still be a race condition between the NxTerm
&gt; driver and the NX task. If you every see character corruption
&gt; (especially when printing a lot of data or scrolling), then
&gt; increasing the value of \`CONFIG_NXTERM_CACHESIZE\` is something
&gt; that you should try. Alternatively, you can reduce the size of
&gt; \`CONFIG_MQ_MAXMSGSIZE\` which will force NxTerm task to pace the
&gt; server task. \`CONFIG_NXTERM_CACHESIZE\` should be larger than
&gt; \`CONFIG_MQ_MAXMSGSIZE\` in any event.
</code></pre><p><code>CONFIG_NXTERM_LINESEPARATION</code>:</p><p>: This the space (in rows) between each row of test. Default: 0</p><p><code>CONFIG_NXTERM_NOWRAP</code>:</p><p>: By default, lines will wrap when the test reaches the right hand side of the window. This setting can be defining to change this behavior so that the text is simply truncated until a new line is encountered.</p><p>NxTerm input options:</p><p><code>CONFIG_NXTERM_NXKBDIN</code>:</p><p>: Take input from the NX keyboard input callback. By default, keyboard input is taken from stdin (<code>/dev/console</code>). If this option is set, then the interface<code>nxterm_kdbin()</code> is enabled. That interface may be driven by window callback functions so that keyboard input <em>only</em> goes to the top window.</p><p><code>CONFIG_NXTERM_KBDBUFSIZE</code>:</p><p>: If <code>CONFIG_NXTERM_NXKBDIN</code> is enabled, then this value may be used to define the size of the per-window keyboard input buffer. Default: 16</p><p><code>CONFIG_NXTERM_NPOLLWAITERS</code>:</p><p>: The number of threads that can be waiting for read data available. Default: 4</p><h2 id="installing-new-fonts" tabindex="-1">Installing New Fonts <a class="header-anchor" href="#installing-new-fonts" aria-label="Permalink to &quot;Installing New Fonts&quot;">​</a></h2><p><strong>The BDF Font Converter</strong>. There is a tool called <em>bdf-converter</em> in the directory <code>tools/.</code>. The <em>bdf-converter</em> program be used to convert fonts in Bitmap Distribution Format (BDF) into fonts that can be used in the NX graphics system. The BDF format most well known as a font format traditionally used for X-11 bitmap fonts.</p><blockquote><p>A Note about Font Copyrights: My understanding is that the underlying bitmap font data for traditional fonts cannot be copyrighted (the same is not true for scalable fonts). This is because a copyright covers only the form of delivery of the font and not the underlying font content and, at least for the traditional typefaces, the underlying font designs are ancient. There could be issues, however, if you convert from modern, trademarked images. However, remember that I am a programmer not an attorney and that my knowledge of font copyright issues is limited to what I glean by Googling.</p></blockquote><p><strong>Font Installation Steps</strong>, Below are general instructions for creating and installing a new font in the NX graphic system. The first two steps only apply if you are using the BDF font converter program.</p><ol><li>Locate a font in BDF format. There are many good BDF bitmap fonts bundled with X-11. See <a href="http://www.cl.cam.ac.uk/~mgk25/ucs-fonts.html" target="_blank" rel="noreferrer">this link</a>, as an example,</li><li>Use the <em>bdf-converter</em> program to convert the BDF font to the NuttX font format. This will result in a C header file containing definitions. That header file should be installed at, for example, <code>graphics/nxfonts/nxfonts_myfont.h</code>.</li></ol><p>The remaining steps apply however you managed to create the NuttX C font header file. After you have your C font header file, the next thing to do is to create a new NuttX configuration variable to select the font. For example, suppose you define the following variable: <code>CONFIG_NXFONT_MYFONT</code>. Then you would need to:</p><ol start="3"><li>Define <code>CONFIG_NXFONT_MYFONT=y</code> in your NuttX configuration file.</li></ol><p>A font ID number has to be assigned for each new font. The font IDs are defined in the file <code>include/nuttx/nx/nxfonts.h</code>. Those definitions have to be extended to support your new font. Look at how the font ID enabled by <code>CONFIG_NXFONT_SANS23X27</code> is defined and add an ID for yournew font in a similar fashion:</p><ol start="4"><li><p><code>include/nuttx/nx/nxfonts.h</code>. Add you new font as a possible system default font:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if defined(CONFIG_NXFONT_SANS23X27)</span></span>
<span class="line"><span># define NXFONT_DEFAULT FONTID_SANS23X27</span></span>
<span class="line"><span>#elif defined(CONFIG_NXFONT_MYFONT)</span></span>
<span class="line"><span># define NXFONT_DEFAULT FONTID_MYFONT</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><p>Then define the actual font ID. Make sure that the font ID value is unique:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if defined(CONFIG_NXFONT_SANS23X27)</span></span>
<span class="line"><span># define NXFONT_DEFAULT FONTID_SANS23X27</span></span>
<span class="line"><span>#elif defined(CONFIG_NXFONT_MYFONT)</span></span>
<span class="line"><span># define NXFONT_DEFAULT FONTID_MYFONT</span></span>
<span class="line"><span>#endif</span></span></code></pre></div></li></ol><p>New Add the font to the NX build system. There are several files that you have to modify to do this. Look how the build system uses the font CONFIG_NXFONT_SANS23X27 for examaples:</p><ol start="5"><li><p><code>nuttx/graphics/Makefile</code>. This file needs logic to auto-generate a C source file from the header file that you generated with the <em>bdf-converter</em> program. Notice <code>NXFONTS_FONTID=2</code>; this must be set to the same font ID value that you defined in the <code>include/nuttx/nx/nxfonts.h</code> file.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>genfontsources:</span></span>
<span class="line"><span>  ifeq ((CONFIG_NXFONT_SANS23X27),y)</span></span>
<span class="line"><span>      @(MAKE) -C nxfonts -f Makefile.sources NXFONTS_FONTID=1 EXTRAFLAGS=(EXTRAFLAGS)</span></span>
<span class="line"><span>  endif</span></span>
<span class="line"><span>  ifeq ((CONFIG_NXFONT_MYFONT),y)</span></span>
<span class="line"><span>      @(MAKE) -C nxfonts -f Makefile.sources NXFONTS_FONTID=2 EXTRAFLAGS=(EXTRAFLAGS)</span></span>
<span class="line"><span>  endif</span></span></code></pre></div></li><li><p><code>nuttx/graphics/nxfonts/Make.defs</code>. Set the make variable <code>NXFSET_CSRCS</code>. <code>NXFSET_CSRCS</code> determines the name of the font C file to build when <code>NXFONTS_FONTID=2</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ifeq ((CONFIG_NXFONT_SANS23X27),y)</span></span>
<span class="line"><span>NXFSET_CSRCS += nxfonts_bitmaps_sans23x27.c</span></span>
<span class="line"><span>endif</span></span>
<span class="line"><span>ifeq ((CONFIG_NXFONT_MYFONT),y)</span></span>
<span class="line"><span>NXFSET_CSRCS += nxfonts_bitmaps_myfont.c</span></span>
<span class="line"><span>endif</span></span></code></pre></div></li><li><p><code>nuttx/graphics/nxfonts/Makefile.sources</code>. This is the Makefile used in step 5 that will actually generate the font C file. So, given your NXFONTS_FONTID=2, it needs to determine a prefix to use for auto-generated variable and function names and (again) the name of the autogenerated file to create (this must be the same name that was used in <code>nuttx/graphics/nxfonts/Make.defs</code>):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ifeq ((NXFONTS_FONTID),1)</span></span>
<span class="line"><span>NXFONTS_PREFIX  := g_sans23x27_</span></span>
<span class="line"><span>GEN_CSRC  = nxfonts_bitmaps_sans23x27.c</span></span>
<span class="line"><span>endif</span></span>
<span class="line"><span>ifeq ((NXFONTS_FONTID),2)</span></span>
<span class="line"><span>NXFONTS_PREFIX  := g_myfont_</span></span>
<span class="line"><span>GEN_CSRC  = nxfonts_bitmaps_myfont.c</span></span>
<span class="line"><span>endif</span></span></code></pre></div></li><li><p><code>graphics/nxfonts/nxfonts_bitmaps.c</code>. This is the file that contains the generic font structures. It is used as a &quot;template&amp;qout; file by <code>nuttx/graphics/nxfonts/Makefile.sources</code>to create your customized font data set at build time.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if NXFONTS_FONTID == 1</span></span>
<span class="line"><span>#  include &quot;nxfonts_sans23x27.h&quot;</span></span>
<span class="line"><span>#elif NXFONTS_FONTID == 2</span></span>
<span class="line"><span>#  include &quot;nxfonts_myfont.h&quot;</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>#  error &quot;No font ID specified&quot;</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><p>Where <code>nxfonts_myfont.h</code> is the NuttX font file that we generated in step 2 using the <em>bdf-converter</em> tool.</p></li><li><p><code>graphics/nxfonts/nxfonts_getfont.c</code>. Finally, we need to extend the logic that does the run-time font lookups so that can find our new font. The lookup function is <code>\`NXHANDLE nxf_getfonthandle(enum nx_fontid_e fontid)</code> &lt;#nxfgetfonthandle&gt;\`__. Note that the lookup is based on the font ID that was defined in step</p><p>4. The new font information needs to be added to data structures used by that function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#ifdef CONFIG_NXFONT_SANS23X27</span></span>
<span class="line"><span>extern const struct nx_fontpackage_s g_sans23x27_package;</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_MYFONT</span></span>
<span class="line"><span>extern const struct nx_fontpackage_s g_myfont_package;</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static FAR const struct nx_fontpackage_s *g_fontpackages[] =</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_SANS23X27</span></span>
<span class="line"><span>  &amp;g_sans23x27_package,</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_MYFONT</span></span>
<span class="line"><span>  &amp;g_myfont_package,</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>  NULL</span></span>
<span class="line"><span>};</span></span></code></pre></div></li></ol><h2 id="nx-test-coverage" tabindex="-1">NX Test Coverage <a class="header-anchor" href="#nx-test-coverage" aria-label="Permalink to &quot;NX Test Coverage&quot;">​</a></h2><p><code>apps/examples/nx</code>. The primary test tool for debugging NX resides at <code>apps/examples/nx</code>.</p><p><strong>Building</strong> <code>apps/examples/nx</code>. NX testing was performed using <code>apps/examples/nx</code> with the Linux/Cygwin-based NuttX simulator. Configuration files for building this test can be found in <code>boards/sim/sim/sim/configs/nx</code> and <code>boards/sim/sim/sim/configs/nx11</code>. There are two alternative configurations for building the simulation:</p><ol><li><p>The configuration using the configuration file at <code>boards/sim/sim/sim/configs/nx/defconfig</code>. This default configuration exercises the NX logic a 8 BPP but provides no visual feedback. In this configuration, a very simple, simulated framebuffer driver is used that is based upon a simple region of memory posing as video memory. That default configuration can be built as follows:</p><pre><code>tools/configure.sh sim:nx
make
./nuttx
</code></pre></li><li><p>The preferred configuration is at <code>boards/sim/sim/sim/configs/nx11/defconfig</code>. This configuration extends the test with a simulated framebuffer driver that uses an X window as a framebuffer. This is a superior test configuration because the X window appears at your desktop and you can see the NX output. This preferred configuration can be built as follows:</p><pre><code>tools/configure sim:nx11
make
./nuttx
</code></pre><p><em>Update:</em> The sim target has suffered some bit-rot over the years and so the following caveats need to be added:</p><ul><li><p>The X target builds under recent Cygwin configurations, but does not execute. (It fails inside of <code>XOpenDisplay()</code>.</p></li><li><p>The X target does not build under current (9.09) Ubuntu distributions. I needed to make the following changes:</p><p>The build will also fail to locate the X header files unless you install an X11 development package.</p></li><li><p>Refer to the [[/platform](]{.title-ref}/platform.md)s/sim/sim/boards/sim/index\` file for additional information.</p></li></ul></li></ol><p><strong>Test Coverage</strong>. At present, <code>apps/examples/nx</code>t only exercises a subset of NX; the remainder is essentially untested. The following table describes the testing performed on each NX API:</p><h3 id="nxglib-api-test-coverage" tabindex="-1">NXGLIB API Test Coverage <a class="header-anchor" href="#nxglib-api-test-coverage" aria-label="Permalink to &quot;NXGLIB API Test Coverage&quot;">​</a></h3><p>Function Special Setup/Notes Verified</p><hr><p><code>nxgl_rgb2yuv()</code> . NO <code>nxgl_yuv2rgb()</code> . NO <code>nxgl_rectcopy()</code> . YES <code>nxgl_rectoffset()</code> . YES <code>nxgl_vectoradd()</code> . YES <code>nxgl_vectorsubtract()</code> . YES <code>nxgl_rectintersect()</code> . YES <code>nxgl_rectunion()</code> . YES <code>nxgl_nonintersecting()</code> . YES <code>nxgl_rectoverlap()</code> . YES <code>nxgl_rectinside()</code> . YES <code>nxgl_rectsize()</code> . YES <code>nxgl_nullrect()</code> . YES <code>nxgl_runoffset()</code> Verified by apps/examples/nxlines. YES <code>nxgl_runcopy()</code> . NO <code>nxgl_trapoffset()</code> Verified by apps/examples/nxlines. YES <code>nxgl_trapcopy()</code> Verified by apps/examples/nxlines. YES <code>nxgl_colorcopy</code> . YES <code>nxgl_splitline</code> Verified using apps/examples/nxlines Generally works well, but has some accuracy/overflow problems wide lines that are nearly horizontal. There is a &quot;fudge factor&quot; that seems to eliminate the problem, but there could still be issues in some configurations. YES <code>nxgl_circlepts</code> Verified by apps/examples/nxlines. YES <code>nxgl_circletraps</code> Verified by apps/examples/nxlines. YES</p><h3 id="nx-server-callbacks-test-coverage" tabindex="-1">NX Server Callbacks Test Coverage <a class="header-anchor" href="#nx-server-callbacks-test-coverage" aria-label="Permalink to &quot;NX Server Callbacks Test Coverage&quot;">​</a></h3><p>Function Special Setup/Notes Verified</p><hr><p><code>redraw()</code> . YES <code>position()</code> . YES <code>mousein()</code> . YES <code>kbdin()</code> . YES</p><h3 id="nx-api-test-coverage" tabindex="-1">NX API Test Coverage <a class="header-anchor" href="#nx-api-test-coverage" aria-label="Permalink to &quot;NX API Test Coverage&quot;">​</a></h3><p>Function Special Setup/Notes Verified</p><hr><p><code>nx_runinstance()</code> . YES <code>nx_connectinstance()</code> . YES <code>nx_disconnect()</code> . YES <code>nx_eventhandler()</code> . YES <code>nx_eventnotify()</code> This is not used in the current version of apps/examples/nx, was tested in a previous version) NO <code>nx_openwindow()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config file</code> YES <code>nx_closewindow()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_requestbkgd()</code> Verified by <code>apps/examples/nxtext</code> and <code>apps/examples/nxhello</code>. YES <code>nx_releasebkgd()</code> Verified by <code>apps/examples/nxtext</code> and <code>apps/examples/nxhello</code>. YES <code>nx_getposition()</code> . NO <code>nx_setposition()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_setsize()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_raise()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_lower()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_modal()</code> . NO <code>nx_setvisibility()</code> Exercized using Twm4Nx YES, Informally <code>nx_ishidden()</code> Exercized using Twm4Nx YES, Informally <code>nx_fill()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_getrectangle()</code> . YES <code>nx_filltrapezoid()</code> Verified by <code>apps/examples/nxlines</code>. YES <code>nx_drawline()</code> by <code>apps/examples/nxlines</code>. YES <code>nx_drawcircle()</code> Verified by <code>apps/examples/nxlines</code>. YES <code>nx_fillcircle()</code> Verified by <code>apps/examples/nxlines</code>. YES <code>nx_setbgcolor()</code> . YES <code>nx_move()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file YES <code>nx_bitmap()</code> Change to <code>CONFIG_EXAMPLES_NX_RAWWINDOWS=y</code> in the <code>&lt;NuttX-Directory&gt;/.config</code> file. YES <code>nx_kbdin()</code> . YES <code>nx_mousein()</code> . YES</p><h3 id="nxtk-api-test-coverage" tabindex="-1">NXTK API Test Coverage <a class="header-anchor" href="#nxtk-api-test-coverage" aria-label="Permalink to &quot;NXTK API Test Coverage&quot;">​</a></h3><p>Function Special Setup/Notes Verified</p><hr><p><code>nxtk_openwindow()</code> . YES <code>nxtk_closewindow()</code> . YES <code>nxtk_getposition()</code> . NO <code>nxtk_setposition()</code> . YES <code>nxtk_setsize()</code> . YES <code>nxtk_raise()</code> . YES <code>nxtk_lower()</code> . YES <code>nxtk_modal()</code> . NO <code>nxtk_setvisibility()</code> Exercized using Twm4Nx YES, informally <code>nxtk_ishidden()</code> Exercized using Twm4Nx YES, informally <code>nxtk_fillwindow()</code> . YES <code>nxtk_getwindow()</code> . NO <code>nxtk_filltrapwindow()</code> . NO <code>nxtk_drawlinewindow()</code> . YES <code>nxtk_drawcirclewindow()</code> . YES <code>nxtk_fillcirclewindow()</code> . YES <code>nxtk_movewindow()</code> . NO <code>nxtk_bitmapwindow()</code> . YES <code>nxtk_opentoolbar()</code> . YES <code>nxtk_closetoolbar()</code> . YES <code>nxtk_filltoolbar()</code> . YES <code>nxtk_gettoolbar()</code> . NO <code>nxtk_filltraptoolbar()</code> . NO <code>nxtk_drawlinetoolbar()</code> . NO <code>nxtk_drawcircletoolbar()</code> . NO <code>nxtk_fillcircletoolbar()</code> . NO <code>nxtk_movetoolbar()</code> . NO <code>nxtk_bitmaptoolbar()</code> . NO</p><h3 id="nxfonts-api-test-coverage" tabindex="-1">NXFONTS API Test Coverage <a class="header-anchor" href="#nxfonts-api-test-coverage" aria-label="Permalink to &quot;NXFONTS API Test Coverage&quot;">​</a></h3><p>Function Special Setup/Notes Verified</p><hr><p><code>nxf_getfonthandle()</code> . YES <code>nxf_getfontset()</code> . YES <code>nxf_getbitmap()</code> . YES <code>nxf_convert_2bpp()</code> . NO <code>nxf_convert_4bpp()</code> . NO <code>nxf_convert_8bpp()</code> Use defconfig when building. YES <code>nxf_convert_16bpp()</code> . YES <code>nxf_convert_24bpp()</code> . NO <code>nxf_convert_32bpp()</code> . YES</p>`,141)]))}const g=a(d,[["render",c]]);export{N as __pageData,g as default};
