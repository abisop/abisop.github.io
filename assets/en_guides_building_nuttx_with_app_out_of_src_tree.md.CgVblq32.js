import{_ as t,c as o,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const c="/assets/custom_app_dir_through_extension.BfoQciPu.png",d="/assets/custom_app_dir_through_containment.kPpPORch.png",y=JSON.parse('{"title":"Building NuttX with Applications Outside the Source Tree","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/building_nuttx_with_app_out_of_src_tree.md","filePath":"en/guides/building_nuttx_with_app_out_of_src_tree.md"}'),r={name:"en/guides/building_nuttx_with_app_out_of_src_tree.md"};function n(s,e,l,p,h,u){return i(),o("div",null,e[0]||(e[0]=[a('<h1 id="building-nuttx-with-applications-outside-the-source-tree" tabindex="-1">Building NuttX with Applications Outside the Source Tree <a class="header-anchor" href="#building-nuttx-with-applications-outside-the-source-tree" aria-label="Permalink to &quot;Building NuttX with Applications Outside the Source Tree&quot;">​</a></h1><p>Warning</p><p>Migrated from: <a href="https://cwiki.apache.org/confluence/display/NUTTX/Building+NuttX+with+Applications+Outside+of+the+Source+Tree" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/display/NUTTX/Building+NuttX+with+Applications+Outside+of+the+Source+Tree</a></p><h2 id="q-has-anyone-come-up-with-a-tidy-way-to-build-nuttx-with-board-specific-pieces-outside-the-source-tree" tabindex="-1">Q: Has anyone come up with a tidy way to build NuttX with board-specific pieces outside the source tree? <a class="header-anchor" href="#q-has-anyone-come-up-with-a-tidy-way-to-build-nuttx-with-board-specific-pieces-outside-the-source-tree" aria-label="Permalink to &quot;Q: Has anyone come up with a tidy way to build NuttX with board-specific pieces outside the source tree?&quot;">​</a></h2><h2 id="a-here-are-four-approaches" tabindex="-1">A: Here are four approaches: <a class="header-anchor" href="#a-here-are-four-approaches" aria-label="Permalink to &quot;A: Here are four approaches:&quot;">​</a></h2><h3 id="_1-make-export" tabindex="-1">1. Make export <a class="header-anchor" href="#_1-make-export" aria-label="Permalink to &quot;1. Make export&quot;">​</a></h3><p>There is a make target called <code>make export</code>. It will build NuttX, then bundle all of the header files, libraries, startup objects, and other build components into a <code>.zip</code> file. You can move that <code>.zip</code> file into any build environment you want. You can even build NuttX under a DOS CMD window.</p><p>This <code>make target</code> is documented in the top-level [[Legacy README &lt;/introduction/re](`Legacy README &lt;/introduction/re.md)sources&gt;]{.title-ref}. Search for <code>Build Targets</code></p><h3 id="_1-replace-the-apps-directory" tabindex="-1">1. Replace the apps/ Directory <a class="header-anchor" href="#_1-replace-the-apps-directory" aria-label="Permalink to &quot;1. Replace the apps/ Directory&quot;">​</a></h3><p>You can replace the entire <code>apps/</code> directory. It is not a critical part of the OS. The <code>apps/</code> is simply provided for you to help with your application development. It should not dictate anything that you do.</p><p>To use a different <code>apps</code> directory, simply execute <code>make menuconfig</code> in the top-level <code>nuttx/</code> directory and redefine <code>CONFIG_APPS_DIR</code> in your <code>.config</code> file so that it points to a different, custom application directory. Note that <code>CONFIG_APPS_DIR</code> is a [relative]{.title-ref} path from the top-level <code>nuttx/</code> directory.</p><p>You can copy any pieces that you like from the old <code>apps/</code> directory to your custom <code>apps</code> directory as necessary. This is documented in the <a href="https://cwiki.apache.org/confluence/display/NUTTX/Porting+Guide" target="_blank" rel="noreferrer">NuttX Porting Guide</a> and in the <a href="https://github.com/apache/nuttx-apps/blob/master/README.md" target="_blank" rel="noreferrer">apps/README.md</a> file.</p><h3 id="_1-extend-the-apps-directory" tabindex="-1">1. Extend the apps/ Directory <a class="header-anchor" href="#_1-extend-the-apps-directory" aria-label="Permalink to &quot;1. Extend the apps/ Directory&quot;">​</a></h3><p>If you like the random collection of stuff in the <code>apps/</code> directory but just want to expand the existing components with your own, external sub-directory, then there is an easy way to do that too: Create a symbolic link in the <code>apps/</code> directory that redirects to your application sub-directory (or copy your code into a sub-directory of <code>apps/</code>).</p><p><img src="'+c+'" alt="image"></p><h4 id="makefile-and-make-defs" tabindex="-1">Makefile and Make.defs <a class="header-anchor" href="#makefile-and-make-defs" aria-label="Permalink to &quot;Makefile and Make.defs&quot;">​</a></h4><p>In order to be incorporated into the build, the directory that you link under the <code>apps/</code> directory should contain:</p><ol><li>A <code>Makefile</code> that supports the <code>clean</code> and <code>distclean</code> targets (see other Makefiles for examples).</li><li>A tiny <code>Make.defs</code> make file fragment that simply adds the build directories to the variable <code>CONFIGURED_APPS</code> like:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIGURED_APPS += my_directory1 my_directory2</span></span></code></pre></div><h4 id="automatic-sub-directory-inclusion" tabindex="-1">Automatic Sub-directory Inclusion <a class="header-anchor" href="#automatic-sub-directory-inclusion" aria-label="Permalink to &quot;Automatic Sub-directory Inclusion&quot;">​</a></h4><p>The <code>apps/Makefile</code> will always automatically check for the existence of sub-directories containing a <code>Makefile</code> and a <code>Make.defs</code> file. The <code>Makefile</code> will be used only to support cleaning operations. The <code>Make.defs</code> file provides the set of relative paths to directories to be built; these directories must also contain a <code>Makefile</code>. That <code>Makefile</code> can build the sources and add the object files to the <code>apps/libapps.a</code> archive (see other Makefiles for examples). It should support the <code>all</code>, <code>install</code>, <code>context</code>, and <code>depend</code> targets.</p><p><code>apps/Makefile</code> does not depend on any hard-coded lists of directories. Instead, it does a wildcard search to find all appropriate directories. This means that to install a new application, you simply have to copy the directory (or link it) into the <code>apps/</code> directory. If the new directory includes a <code>Makefile</code> and a <code>Make.defs</code> file, then it will be automatically discovered and included in the build at <code>make</code> time.</p><h4 id="kconfig" tabindex="-1">Kconfig <a class="header-anchor" href="#kconfig" aria-label="Permalink to &quot;Kconfig&quot;">​</a></h4><p>If the directory that you add also includes a <code>Kconfig</code> file, then it will be automatically included in the NuttX configuration system as well. <code>apps/Makefile</code> uses a tool at <code>apps/tools/mkkconfig.sh</code> that dynamically builds the <code>apps/Kconfig</code> file at pre-configuration time.</p><p>Note</p><p>The native Windows build will use a corresponding tool called <code>apps/tools/mkconfig.bat</code>.</p><h4 id="install-script" tabindex="-1">Install script <a class="header-anchor" href="#install-script" aria-label="Permalink to &quot;Install script&quot;">​</a></h4><p>You could, for example, create a script called <code>install.sh</code> that installs a custom application, configuration, and board-specific directory:</p><ol><li>Copy <code>MyBoard</code> directory to <code>boards/MyBoard</code>.</li><li>Add a symbolic link to <code>MyApplication</code> at <code>apps/external</code></li><li>Configure NuttX:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tools/configure.sh MyBoard:MyConfiguration</span></span></code></pre></div><h4 id="special-apps-external-directory" tabindex="-1">Special <code>apps/external</code> Directory <a class="header-anchor" href="#special-apps-external-directory" aria-label="Permalink to &quot;Special `apps/external` Directory&quot;">​</a></h4><p>Use of the name <code>apps/external</code> is suggested because that name is included in the <code>.gitignore</code> file and will save you some nuisance when working with GIT.</p><h3 id="_4-contain-the-apps-directory" tabindex="-1">4. Contain the apps/ Directory <a class="header-anchor" href="#_4-contain-the-apps-directory" aria-label="Permalink to &quot;4. Contain the apps/ Directory&quot;">​</a></h3><p>A simple, minimally invasive approach would be to contain the <code>apps/</code> GIT clone within your custom application directory. In this case, <code>apps/</code> would appear as a directory under your custom application directory instead of your application directories being inserted as sub-directories of <code>apps/</code>. It may even be implemented as a sub-module of your custom application directory.</p><p><img src="'+d+'" alt="image"></p><h4 id="kconfig-and-makefile" tabindex="-1">Kconfig and Makefile <a class="header-anchor" href="#kconfig-and-makefile" aria-label="Permalink to &quot;Kconfig and Makefile&quot;">​</a></h4><p>There are only a few minimal requirements of your custom application directory. It needs to have only its own <code>Makefile</code> and <code>Kconfig</code> file. That <code>Kconfig</code> would need to include the <code>apps/Kconfig</code>. The <code>Makefile</code> would similarly need to invoke the <code>apps/Makefile</code> for all of the relevant build targets. For example, the <code>clean</code> target:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(MAKE) -c apps clean TOPDIR=(TOPDIR)</span></span></code></pre></div><h4 id="library-issues" tabindex="-1">Library Issues <a class="header-anchor" href="#library-issues" aria-label="Permalink to &quot;Library Issues&quot;">​</a></h4><p>The contained directory will create and install a static library called <code>libapps(LIBEXT)</code> in the <code>nuttx/staging</code> directory. Your custom logic must also appear in the <code>nuttx/staging</code> directory. Here are two ways that you might do that:</p><ol><li><strong>Merge with ``libapps(\\LIBEXT)``.</strong> The custom application directory&#39;s <code>Makefile</code> could create and install the final <code>libapps(LIBEXT)</code> in the <code>nuttx/staging</code> directory. <code>&lt;custom-dir&gt;/apps/libapps(LIBEXT)</code> could merge its custom object files with <code>&lt;custom-dir&gt;/libapps(LIBEXT)</code> and then re-install the library at <code>nuttx/staging</code>.</li><li><strong>Use the EXTRA_LIBS Feature.</strong> The build system supports two special make-related variables called <code>EXTRA_LIBS</code> and <code>EXTRA_LIBPATHS</code>. These may be defined in your board-specific <code>Make.defs</code> file. <code>EXTRA_LIBS</code> provides the name of your custom library. If you create <code>&lt;custom-dir&gt;/libcustom.a</code>, then the value of <code>EXTRA_LIBS</code> would be <code>-lcustom</code> and the value of <code>EXTRA_LIBPATHS</code> would be <code>-L &lt;custom-dir&gt;</code> (assuming the GNU ld linker).</li></ol><h4 id="relative-effort-and-benefits" tabindex="-1">Relative Effort and Benefits <a class="header-anchor" href="#relative-effort-and-benefits" aria-label="Permalink to &quot;Relative Effort and Benefits&quot;">​</a></h4><p>The contained <code>apps/</code> directory approach requires some more effort than the extended <code>apps/</code> approach, but has the advantage that there will be no strange behavior due to issues with <code>.gitignore</code> and, hence, a cleaner user experience.</p><h4 id="out-of-tree-builds" tabindex="-1">Out-of-tree Builds <a class="header-anchor" href="#out-of-tree-builds" aria-label="Permalink to &quot;Out-of-tree Builds&quot;">​</a></h4><p>This configuration also has the possibility of supporting out-of-tree builds using <code>fusefs</code>. Suppose, for example, that you have a project directory with the contained <code>apps/</code> directory and, say, three platform build directories. Using <code>fusefs</code>, you can overlay one of the platform build directories on top of the project directory. Then all files generated by the build will be written into the overlaid platform build directory. When the <code>fusefs</code> is torn down, the project directory will still be clean, and the build result will still be in the platform build directory. This can then be repeated for the other two platform build directories.</p><p>In this case, you would probably also want to contain the <code>nuttx/</code> directory in the project directory as well so that the entire system is built out-of-tree.</p><h3 id="hooking-external-applications-into-the-configuration-system" tabindex="-1">Hooking External Applications into the Configuration System <a class="header-anchor" href="#hooking-external-applications-into-the-configuration-system" aria-label="Permalink to &quot;Hooking External Applications into the Configuration System&quot;">​</a></h3><p>Suppose you have opted to extend the <code>apps/</code> directory with your custom external application directories and would also like to support configuration variables in your external application. No problem! Thanks to Sebastien Lorquet, any external application that you install into the <code>apps/</code> (whether via a symbolic link or via a directory copy) [will]{.title-ref} be included in the NuttX configuration system.</p><p>The top-level <code>Kconfig</code> file in the <code>apps/</code> directory is automatically generated based on the contents of each <code>apps/</code> sub-directory. If your installed sub-directory contains <code>Kconfig</code>, <code>Makefile</code>, and <code>Make.defs</code> files, then it will be incorporated into the NuttX configuration system when the top-level <code>Kconfig</code> file is generated.</p>',49)]))}const b=t(r,[["render",n]]);export{y as __pageData,b as default};
