import{_ as o,c as t,al as l,o as i}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"helloxx Hello World in C++","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/helloxx/index.md","filePath":"en/applications/examples/helloxx/index.md"}'),a={name:"en/applications/examples/helloxx/index.md"};function n(c,e,s,r,d,p){return i(),t("div",null,e[0]||(e[0]=[l('<h1 id="helloxx-hello-world-in-c" tabindex="-1"><code>helloxx</code> Hello World in C++ <a class="header-anchor" href="#helloxx-hello-world-in-c" aria-label="Permalink to &quot;`helloxx` Hello World in C++&quot;">â€‹</a></h1><p>This is C++ version of the &quot;Hello, World&quot; example. It is intended only to verify that the C++ compiler is functional, that basic C++ library support is available, and that class are instantiated correctly.</p><p>NuttX configuration prerequisites:</p><ul><li><code>CONFIG_HAVE_CXX</code> -- Enable C++ Support.</li></ul><p>Optional NuttX configuration settings:</p><ul><li><code>CONFIG_HAVE_CXXINITIALIZE</code> -- Enable support for static constructors (may not be available on all platforms).</li></ul><p>NuttX configuration settings specific to this example:</p><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> -- Build the helloxx example as a built-in that can be executed from the NSH command line.</li></ul><p>Also needed:</p><ul><li><code>CONFIG_HAVE_CXX=y</code></li></ul><p>And you may have to tinker with the following to get libxx to compile properly:</p><ul><li><code>CCONFIG_ARCH_SIZET_LONG=y</code> or <code>=n</code>.</li></ul><p>The argument of the <code>new</code> operators should take a type of <code>size_t</code>. But <code>size_t</code> has an unknown underlying. In the nuttx <code>sys/types.h</code> header file, <code>size_t</code> is typed as <code>uint32_t</code> (which is determined by architecture-specific logic). But the C++ compiler may believe that <code>size_t</code> is of a different type resulting in compilation errors in the operator. Using the underlying integer type Instead of <code>size_t</code> seems to resolve the compilation issues.</p>',13)]))}const _=o(a,[["render",n]]);export{h as __pageData,_ as default};
