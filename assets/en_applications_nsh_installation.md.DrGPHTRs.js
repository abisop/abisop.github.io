import{_ as a,c as i,al as e,o}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Customizing NSH Initialization","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/nsh/installation.md","filePath":"en/applications/nsh/installation.md"}'),n={name:"en/applications/nsh/installation.md"};function s(r,t,c,l,d,h){return o(),i("div",null,t[0]||(t[0]=[e('<h1 id="customizing-nsh-initialization" tabindex="-1">Customizing NSH Initialization <a class="header-anchor" href="#customizing-nsh-initialization" aria-label="Permalink to &quot;Customizing NSH Initialization&quot;">â€‹</a></h1><p><strong>Ways to Customize NSH Initialization</strong>. There are three ways to customize the NSH start-up behavior. Here they are presented in order of increasing difficulty:</p><blockquote><ol><li>You can extend the initialization logic in <code>boards/arm/stm32/stm3240g-eval/src/stm32_appinit.c</code>. The logic there is called each time that NSH is started and is good place in particular for any device-related initialization.</li><li>You replace the sample code at <code>apps/examples/nsh/nsh_main.c</code> with whatever start-up logic that you want. NSH is a library at <code>apps/nshlib</code>. <code>apps.examples/nsh</code> is just a tiny, example start-up function (<code>CONFIG_INIT_ENTRYPOINT</code>()) that runs immediately and illustrates how to start NSH If you want something else to run immediately then you can write your write your own custom <code>CONFIG_INIT_ENTRYPOINT</code>() function and then start other tasks from your custom <code>CONFIG_INIT_ENTRYPOINT</code>().</li><li>NSH also supports a start-up script that executed when NSH first runs. This mechanism has the advantage that the start-up script can contain any NSH commands and so can do a lot of work with very little coding. The disadvantage is that is is considerably more complex to create the start-up script. It is sufficiently complex that is deserves its own paragraph</li></ol></blockquote>',3)]))}const m=a(n,[["render",s]]);export{u as __pageData,m as default};
