import{_ as n,c as t,j as a,a as e,al as o,o as p}from"./chunks/framework.NFAqBSgQ.js";const k=JSON.parse('{"title":"\\"Raw\\" packet socket support","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/net/pkt.md","filePath":"en/components/net/pkt.md"}'),r={name:"en/components/net/pkt.md"};function c(i,s,l,d,f,u){return p(),t("div",null,s[0]||(s[0]=[a("h1",{id:"raw-packet-socket-support",tabindex:"-1"},[e('"Raw" packet socket support '),a("a",{class:"header-anchor",href:"#raw-packet-socket-support","aria-label":'Permalink to "\\"Raw\\" packet socket support"'},"​")],-1),a("p",null,[e("Packet sockets (:c"),a("code",{class:"interpreted-text",role:"macro"},"AF_PACKET"),e(") allow receiving and transmitting frames without a transport protocol in between. Frames received are copied into a packet socket tap before they enter the network. Data written into a packet socket will bypass the network altogether and be placed in the transmission buffer of the network interface driver.")],-1),o(`<h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h2><p><code>CONFIG_NET_PKT_PREALLOC_CONNS</code></p><p>: Number of preallocated packet connections (all tasks).</p><p><code>CONFIG_NET_PKT_ALLOC_CONNS</code></p><p>: Dynamic memory allocations for packet connections.</p><p><code>CONFIG_NET_PKT_MAX_CONNS</code></p><p>: Maximum number of packet connections.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct sockaddr_ll addr;</span></span>
<span class="line"><span>uint8_t buffer[BUFSIZE];</span></span>
<span class="line"><span>int sd = socket(AF_PACKET, SOCK_RAW, 0); /* Create a packet socket */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>addr.sll_family = AF_PACKET;</span></span>
<span class="line"><span>addr.sll_ifindex = if_nametoindex(&quot;eth0&quot;);</span></span>
<span class="line"><span>bind(sd, (FAR struct sockaddr *)&amp;addr, sizeof(addr)); /* Bind to device */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>recv(sd, buffer, sizeof(buffer), 0); /* read(sd, buffer, sizeof(buffer)); */</span></span>
<span class="line"><span>send(sd, buffer, sizeof(buffer), 0); /* write(sd, buffer, sizeof(buffer)); */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>close(sd); /* Close the socket */</span></span></code></pre></div>`,9)]))}const h=n(r,[["render",c]]);export{k as __pageData,h as default};
