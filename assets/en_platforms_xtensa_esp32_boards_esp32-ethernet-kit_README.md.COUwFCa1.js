import{_ as t,c as a,al as r,o as s}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"README for the Espressif ESP32 Ethernet Kit","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/xtensa/esp32/boards/esp32-ethernet-kit/README.md","filePath":"en/platforms/xtensa/esp32/boards/esp32-ethernet-kit/README.md"}'),o={name:"en/platforms/xtensa/esp32/boards/esp32-ethernet-kit/README.md"};function n(i,e,l,p,h,d){return s(),a("div",null,e[0]||(e[0]=[r(`<h1 id="readme-for-the-espressif-esp32-ethernet-kit" tabindex="-1">README for the Espressif ESP32 Ethernet Kit <a class="header-anchor" href="#readme-for-the-espressif-esp32-ethernet-kit" aria-label="Permalink to &quot;README for the Espressif ESP32 Ethernet Kit&quot;">​</a></h1><p>The ESP32 is a dual-core system from Espressif with two Harvard architecture Xtensa LX6 CPUs. All embedded memory, external memory and peripherals are located on the data bus and/or the instruction bus of these CPUs. With some minor exceptions, the address mapping of two CPUs is symmetric, meaning they use the same addresses to access the same memory. Multiple peripherals in the system can access embedded memory via DMA.</p><p>The ESP32-Ethernet-Kit is an Ethernet-to-Wi-Fi development board that enables Ethernet devices to be interconnected over Wi-Fi. At the same time, to provide more flexible power supply options, the ESP32-Ethernet-Kit also supports power over Ethernet (PoE).</p><h1 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h1><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>There are two buttons labeled Boot and EN. The EN button is not available to software. It pulls the chip enable line that doubles as a reset line.</p><p>The BOOT button is connected to IO0. On reset it is used as a strapping pin to determine whether the chip boots normally or into the serial bootloader. After reset, however, the BOOT button can be used for software input.</p><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>There are several on-board LEDs for that indicate the presence of power and USB activity. None of these are available for use by software.</p><h1 id="ethernet" tabindex="-1">Ethernet <a class="header-anchor" href="#ethernet" aria-label="Permalink to &quot;Ethernet&quot;">​</a></h1><p>ESP32 has a 802.11 hardware MAC, so just connects to external PHY chip. Due to the limited number of GPIOs in ESP32, it&#39;s recommended to use RMII to connect to an external PHY chip. Current driver also only supports RMII option.</p><p>The RMII GPIO pins are fixed, but the SMI and functional GPIO pins are optional.</p><p>RMII GPIO pins are as following:</p><pre><code>  ESP32 GPIO          PHY Chip GPIO
    IO25       &lt;--&gt;       RXD[0]
    IO26       &lt;--&gt;       RXD[1]
    IO27       &lt;--&gt;       CRS_DV
    IO0        &lt;--&gt;       REF_CLK
    IO19       &lt;--&gt;       TXD[0]
    IO21       &lt;--&gt;       TX_EN
    IO22       &lt;--&gt;       TXD[1]
</code></pre><p>SMI GPIO pins (default option) are as following:</p><pre><code>  ESP32 GPIO          PHY Chip GPIO
    IO18       &lt;--&gt;       MDIO
    IO23       &lt;--&gt;       MDC
</code></pre><p>Functional GPIO pins(default option) are as following:</p><pre><code>  ESP32 GPIO          PHY Chip GPIO
    IO5        &lt;--&gt;      Reset_N
</code></pre><h1 id="using-qemu" tabindex="-1">Using QEMU: <a class="header-anchor" href="#using-qemu" aria-label="Permalink to &quot;Using QEMU:&quot;">​</a></h1><p>First follow the instructions at <a href="https://github.com/espressif/qemu/wiki" target="_blank" rel="noreferrer">https://github.com/espressif/qemu/wiki</a> to build QEMU. Enable the ESP32_QEMU_IMAGE config found in &quot;Board Selection -&gt; ESP32 binary image for QEMU&quot;. Download the bootloader and the partition table from <a href="https://github.com/espressif/esp-nuttx-bootloader/releases" target="_blank" rel="noreferrer">https://github.com/espressif/esp-nuttx-bootloader/releases</a> and place them in a directory, say ../esp-bins. Build and generate the QEMU image: <code>make ESPTOOL_BINDIR=../esp-bins</code> A new image &quot;esp32_qemu_image.bin&quot; will be created. It can be run as:</p><p>~/PATH_TO_QEMU/qemu/build/xtensa-softmmu/qemu-system-xtensa -nographic<br> -machine esp32<br> -drive file=esp32_qemu_image.bin,if=mtd,format=raw</p>`,21)]))}const m=t(o,[["render",n]]);export{c as __pageData,m as default};
