import{_ as a,c as i,al as r,o}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Flipper Zero","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32wb/boards/flipperzero/index.md","filePath":"en/platforms/arm/stm32wb/boards/flipperzero/index.md"}'),t={name:"en/platforms/arm/stm32wb/boards/flipperzero/index.md"};function n(l,e,s,c,h,d){return o(),i("div",null,e[0]||(e[0]=[r('<h1 id="flipper-zero" tabindex="-1">Flipper Zero <a class="header-anchor" href="#flipper-zero" aria-label="Permalink to &quot;Flipper Zero&quot;">​</a></h1><p>chip:stm32, chip:stm32wb, chip:stm32wb55</p><p>This page file discusses the port of NuttX to the Flipper Zero multi-tool device. See <a href="https://flipperzero.one/" target="_blank" rel="noreferrer">https://flipperzero.one/</a> for device details.</p><h2 id="device-features" tabindex="-1">Device features <a class="header-anchor" href="#device-features" aria-label="Permalink to &quot;Device features&quot;">​</a></h2><ul><li>Multi-protocol wireless STM32WB55RGV6 MCU with 1MiB of Flash and 256KiB of SRAM.</li><li>USB Type-C connector for communication and charging</li><li>LiPo battery with charger BQ25896 and fuel gauge BQ27220</li><li>5-button joystick and a Back button</li><li>ST7565 128x64 LCD</li><li>RGB LED with LP5562 I2C driver</li><li>Buzzer</li><li>Vibration motor</li><li>Micro SD slot connected over SPI</li><li>CC1101 RF transceiver</li><li>ST25R3916 high-performance NFC Universal Device and EMVCo reader</li><li>125 kHz RFID analog circuit</li><li>IR led</li><li>TSOP75538 IR receiver</li><li>iButton connector</li><li>GPIO connector with power out and SWD pins</li></ul><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Oct 2022: initial nsh configuration. LCD seems working.</p><h2 id="programming" tabindex="-1">Programming <a class="header-anchor" href="#programming" aria-label="Permalink to &quot;Programming&quot;">​</a></h2><p>The device can be normally flashing and debugging over SWD interface or flashing via USB interface when the device is in DFU mode using STMicro&#39;s STM32CubeProgrammer. The DFU mode will be activated after pressing two round button for 30s. Original firmware can be flashed back and stay working until the secure flash area is not changed.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The MCU&#39;s USART1 PB6/PB7 pins are available as external GPIO pins 13/14.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh. This configuration is focused on low level, command-line driver testing.</p>',14)]))}const f=a(t,[["render",n]]);export{u as __pageData,f as default};
