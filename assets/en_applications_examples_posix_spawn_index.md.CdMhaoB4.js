import{_ as o,c as t,al as i,o as a}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"posix_spawn posix_spawn Unit Test","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/posix_spawn/index.md","filePath":"en/applications/examples/posix_spawn/index.md"}'),s={name:"en/applications/examples/posix_spawn/index.md"};function n(l,e,d,c,r,p){return a(),t("div",null,e[0]||(e[0]=[i(`<h1 id="posix-spawn-posix-spawn-unit-test" tabindex="-1"><code>posix_spawn</code> posix_spawn Unit Test <a class="header-anchor" href="#posix-spawn-posix-spawn-unit-test" aria-label="Permalink to &quot;\`posix_spawn\` posix\\_spawn Unit Test&quot;">​</a></h1><p>This is a simple test of the <code>posix_spawn()</code> API. The example derives from <code>examples/elf</code>. As a result, these tests are built using the relocatable ELF format installed in a ROMFS file system. At run time, the test program in the ROMFS file system is spawned using <code>posix_spawn()</code>.</p><p>Requires:</p><ul><li><code>CONFIG_BINFMT_DISABLE=n</code> – Don&#39;t disable the binary loader.</li><li><code>CONFIG_ELF=y</code> – Enable ELF binary loader.</li><li><code>CONFIG_LIBC_EXECFUNCS=y</code> – Enable support for posix_spawn.</li><li><code>CONFIG_EXECFUNCS_SYMTAB_ARRAY=&quot;g_spawn_exports&quot;</code> – The name of the symbol table created by the test.</li><li><code>CONFIG_EXECFUNCS_NSYMBOLS_VAR=&quot;g_spawn_nexports&quot;</code> – Name of variable holding the number of symbols.</li><li><code>CONFIG_POSIX_SPAWN_STACKSIZE=768</code> – This default setting.</li></ul><p>Test-specific configuration options:</p><ul><li><code>CONFIG_EXAMPLES_POSIXSPAWN_DEVMINOR</code> – The minor device number of the ROMFS block. driver. For example, the <code>N</code> in <code>/dev/ramN</code>. Used for registering the RAM block driver that will hold the ROMFS file system containing the ELF executables to be tested. Default: <code>0</code>.</li><li><code>CONFIG_EXAMPLES_POSIXSPAWN_DEVPATH</code> – The path to the ROMFS block driver device. This must match <code>EXAMPLES_POSIXSPAWN_DEVMINOR</code>. Used for registering the RAM block driver that will hold the ROMFS file system containing the ELF executables to be tested. Default: <code>/dev/ram0</code>.</li></ul><p><strong>Notes</strong>:</p><ol><li><ul><li><p><code>CFLAGS</code> should be provided in <code>CELFFLAGS</code>. RAM and FLASH memory regions may<br> require long allcs. For ARM, this might be:</p><pre><code>CELFFLAGS = (CFLAGS) -mlong-calls
</code></pre><p>Similarly for C++ flags which must be provided in <code>CXXELFFLAGS</code>.</p></li></ul></li><li><p>Your top-level <code>nuttx/Make.defs</code> file must also include an appropriate definition, <code>LDELFFLAGS</code>, to generate a relocatable ELF object. With GNU LD, this should include <code>-r</code> and <code>-e main</code> (or <code>_main</code> on some platforms).:</p><pre><code>LDELFFLAGS = -r -e main
</code></pre><p>If you use GCC to link, you make also need to include <code>-nostdlib</code>.</p></li><li><p>This example also requires <code>genromfs</code>. <code>genromfs</code> can be build as part of the nuttx toolchain. Or can built from the <code>genromfs</code> sources that can be found in the NuttX tools repository (<code>genromfs-0.5.2.tar.gz</code>). In any event, the <code>PATH</code> variable must include the path to the <code>genromfs</code> executable.</p></li><li><p>ELF size: The ELF files in this example are, be default, quite large because they include a lot of build garbage. You can greatly reduce the size of the ELF binaries are using the <code>objcopy --strip-unneeded</code> command to remove un-necessary information from the ELF files.</p></li><li><p>Simulator. You cannot use this example with the NuttX simulator on Cygwin. That is because the Cygwin GCC does not generate ELF file but rather some Windows-native binary format.</p><p>If you really want to do this, you can create a NuttX x86 buildroot toolchain and use that be build the ELF executables for the ROMFS file system.</p></li><li><p>Linker scripts. You might also want to use a linker scripts to combine sections better. An example linker script is at <code>nuttx/binfmt/elf/gnu-elf.ld</code>. That example might have to be tuned for your particular linker output to position additional sections correctly. The GNU LD <code>LDELFFLAGS</code> then might be:</p><pre><code>LDELFFLAGS = -r -e main -T(TOPDIR)/binfmt/elf/gnu-elf.ld
</code></pre></li></ol>`,8)]))}const m=o(s,[["render",n]]);export{h as __pageData,m as default};
