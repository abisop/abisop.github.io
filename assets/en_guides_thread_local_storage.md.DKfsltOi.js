import{_ as e,c as t,al as o,o as s}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Thread Local Storage","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/thread_local_storage.md","filePath":"en/guides/thread_local_storage.md"}'),n={name:"en/guides/thread_local_storage.md"};function i(r,a,l,c,p,h){return s(),t("div",null,a[0]||(a[0]=[o(`<h1 id="thread-local-storage" tabindex="-1">Thread Local Storage <a class="header-anchor" href="#thread-local-storage" aria-label="Permalink to &quot;Thread Local Storage&quot;">​</a></h1><p>Thread local storage (TLS) is a mechanism that allows each thread to have its own copy of a variable. This is useful for variables that are used by multiple functions in a thread, but should not be shared with other threads.</p><p>There are some approaches to using TLS in NuttX:</p><p>1. Use the <code>pthread_key_create()</code> and <code>pthread_setspecific()</code> that from the POSIX standard. This is the most portable approach, but it requires that the platform support pthreads. 2. Use the <code>thread_local</code> or <code>__thread</code> keyword from the C standard: <a href="https://gcc.gnu.org/onlinedocs/gcc/extensions-to-the-c-language-family/thread-local-storage.html" target="_blank" rel="noreferrer">https://gcc.gnu.org/onlinedocs/gcc/extensions-to-the-c-language-family/thread-local-storage.html</a></p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIG_SCHED_THREAD_LOCAL  /* Enable native thread local storage support */</span></span></code></pre></div><p>Enable it to support native thread local storage, which is required that the compiler configured with <code>--enable-tls</code> option, this approach is more efficient if the compiler support it.</p><p>If your compiler support it then you still need further configuration to use it:</p><ol><li>Enable <code>CONFIG_SCHED_THREAD_LOCAL</code> in menuconfig</li><li>Handle <code>tbss</code> and <code>tdata</code> sections in linker script, your can refer to the example in rv-virt</li></ol><p>To confirm that your compiler supports TLS, you can try this command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arm-none-eabi-gcc --verbose</span></span>
<span class="line"><span>COLLECT_GCC=arm-none-eabi-gcc</span></span>
<span class="line"><span>COLLECT_LTO_WRAPPER=/home/huang/.local/pkg/arm/bin/../libexec/gcc/arm-none-eabi/13.3.1/lto-wrapper</span></span>
<span class="line"><span>Target: arm-none-eabi</span></span>
<span class="line"><span>Configured with: /data/jenkins/workspace/GNU-toolchain/arm-13/src/gcc/configure --target=arm-none-eabi --prefix=/data/jenkins/workspace/GNU-toolchain/arm-13/build-arm-none-eabi/install --with-gmp=/data/jenkins/workspace/GNU-toolchain/arm-13/build-arm-none-eabi/host-tools --with-mpfr=/data/jenkins/workspace/GNU-toolchain/arm-13/build-arm-none-eabi/host-tools --with-mpc=/data/jenkins/workspace/GNU-toolchain/arm-13/build-arm-none-eabi/host-tools --with-isl=/data/jenkins/workspace/GNU-toolchain/arm-13/build-arm-none-eabi/host-tools --disable-shared --disable-nls --disable-threads --disable-tls --enable-checking=release --enable-languages=c,c++,fortran --with-newlib --with-gnu-as --with-headers=yes --with-gnu-ld --with-native-system-header-dir=/include --with-sysroot=/data/jenkins/workspace/GNU-toolchain/arm-13/build-arm-none-eabi/install/arm-none-eabi --with-multilib-list=aprofile,rmprofile --with-pkgversion=&#39;Arm GNU Toolchain 13.3.Rel1 (Build arm-13.24)&#39; --with-bugurl=https://bugs.linaro.org/</span></span>
<span class="line"><span>Thread model: single</span></span>
<span class="line"><span>Supported LTO compression algorithms: zlib</span></span>
<span class="line"><span>gcc version 13.3.1 20240614 (Arm GNU Toolchain 13.3.Rel1 (Build arm-13.24))</span></span></code></pre></div><p>Then you can see <code>--disable-tls</code> in the output, which means that your compiler does not support TLS.</p><p>In this case, you can still use the thread local relative keyword, but it would be implemented by libgcc&#39;s emutls.</p>`,13)]))}const m=e(n,[["render",i]]);export{u as __pageData,m as default};
