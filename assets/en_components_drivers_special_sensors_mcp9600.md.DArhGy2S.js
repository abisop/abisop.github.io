import{_ as t,c as o,al as n,j as e,a as s,o as i}from"./chunks/framework.NFAqBSgQ.js";const _=JSON.parse('{"title":"MCP9600","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/sensors/mcp9600.md","filePath":"en/components/drivers/special/sensors/mcp9600.md"}'),p={name:"en/components/drivers/special/sensors/mcp9600.md"};function r(c,a,l,d,h,u){return i(),o("div",null,a[0]||(a[0]=[n(`<h1 id="mcp9600" tabindex="-1">MCP9600 <a class="header-anchor" href="#mcp9600" aria-label="Permalink to &quot;MCP9600&quot;">​</a></h1><p>Contributed by Matteo Golin.</p><p>The MCP9600 is a thermocouple EMF to temperature converter made by Microchip. It is also sold as a <a href="https://learn.adafruit.com/adafruit-mcp9600-i2c-thermocouple-amplifier" target="_blank" rel="noreferrer">breakout board module by Adafruit</a>.</p><h2 id="application-programming-interface" tabindex="-1">Application Programming Interface <a class="header-anchor" href="#application-programming-interface" aria-label="Permalink to &quot;Application Programming Interface&quot;">​</a></h2><p>The header file for the MCP9600 driver interface can be included using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;nuttx/sensors/mcp9600.h&gt;</span></span></code></pre></div><p>The MCP9600 registration function allows the driver to be registered as a [[UORB &lt;/component](\`UORB &lt;/component.md)s/drivers/special/sensors/sensors_uorb&gt;]{.title-ref} sensor.</p><p>The MCP9600 measures three types of temperature:</p><p>: - Hot junction temperature - Cold junction temperature - Temperature delta</p><p>Registering this sensor will create three UORB temperature topics, each with their own unique device number. You must specify the unique device numbers for each topic in the registration function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* Registers sensor_temp1, sensor_temp2 and sensor_temp 3, where 1 is the</span></span>
<span class="line"><span> * hot junction topic, 2 is the cold junction topic and 3 is the delta</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int err;</span></span>
<span class="line"><span>err = mcp9600_register(i2c_master, 0x60, 1, 2, 3);</span></span>
<span class="line"><span>if (err &lt; 0) {</span></span>
<span class="line"><span>  syslog(LOG_ERR, &quot;Could not register MCP9600: %d\\n&quot;, err);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>This sensor offers some additional control commands for features that are not accessible with the standard UORB interface.</p>`,12),e("blockquote",null,[e("ul",null,[e("li",null,[s(":c"),e("code",{class:"interpreted-text",role:"macro"},"SNIOC_SET_THERMO")]),e("li",null,[s(":c"),e("code",{class:"interpreted-text",role:"macro"},"SNIOC_WHO_AM_I")]),e("li",null,[s(":c"),e("code",{class:"interpreted-text",role:"macro"},"SNIOC_READ_RAW_DATA")]),e("li",null,[s(":c"),e("code",{class:"interpreted-text",role:"macro"},"SNIOC_CHECK_STATUS_REG")]),e("li",null,[s(":c"),e("code",{class:"interpreted-text",role:"macro"},"SNIOC_CONFIGURE")]),e("li",null,[s(":c"),e("code",{class:"interpreted-text",role:"macro"},"SNIOC_WRITECONF")])])],-1),n(`<h3 id="snioc-set-thermo" tabindex="-1"><code>SNIOC_SET_THERMO</code> <a class="header-anchor" href="#snioc-set-thermo" aria-label="Permalink to &quot;\`SNIOC_SET_THERMO\`&quot;">​</a></h3><p>This command configures the thermocouple type of the MCP9600. The device supports the following thermocouple types:</p><blockquote><ul><li>K</li><li>J</li><li>T</li><li>N</li><li>E</li><li>S</li><li>B</li><li>R</li></ul></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int err;</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_SET_THERMO, SENSOR_THERMO_TYPE_J);</span></span>
<span class="line"><span>if (err &lt; 0) {</span></span>
<span class="line"><span>  syslog(LOG_ERR, &quot;Failed to set thermocouple type: %d\\n&quot;, err);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="snioc-who-am-i" tabindex="-1"><code>SNIOC_WHO_AM_I</code> <a class="header-anchor" href="#snioc-who-am-i" aria-label="Permalink to &quot;\`SNIOC_WHO_AM_I\`&quot;">​</a></h3><p>This command reads the device ID register of the MCP9600 sensor. The device ID, major and minor revision numbers are returned in the argument, which must be of type <code>struct mcp9600_devinfo_s *</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct mcp9600_devinfo_s devinfo;</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_WHO_AM_I, &amp;devinfo);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>uint8_t revision_minor = MCP9600_REV_MINOR(devinfo.revision);</span></span>
<span class="line"><span>uint8_t revision_major = MCP9600_REV_MAJOR(devinfo.revision);</span></span></code></pre></div><h3 id="snioc-read-raw-data" tabindex="-1"><code>SNIOC_READ_RAW_DATA</code> <a class="header-anchor" href="#snioc-read-raw-data" aria-label="Permalink to &quot;\`SNIOC_READ_RAW_DATA\`&quot;">​</a></h3><p>This command allows the caller to read the raw data returned from the sensor&#39;s ADC.</p><p>The argument to this command must be an <code>int32_t</code> pointer. The raw data will be returned here. The process to convert the raw ADC data depends on the configured resolution; consult the data sheet.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int32_t raw;</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_READ_RAW_DATA, &amp;raw);</span></span></code></pre></div><h3 id="snioc-check-status-reg" tabindex="-1"><code>SNIOC_CHECK_STATUS_REG</code> <a class="header-anchor" href="#snioc-check-status-reg" aria-label="Permalink to &quot;\`SNIOC_CHECK_STATUS_REG\`&quot;">​</a></h3><p>This command lets you check the status register of the device. The argument to this command must be a pointer to type <code>struct mcp9600_status_s</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct mcp9600_status_s status;</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_CHECK_STATUS_REG, &amp;status);</span></span></code></pre></div><h3 id="snioc-configure" tabindex="-1"><code>SNIOC_CONFIGURE</code> <a class="header-anchor" href="#snioc-configure" aria-label="Permalink to &quot;\`SNIOC_CONFIGURE\`&quot;">​</a></h3><p>This command lets you configure the MCP9600&#39;s operation, including thermocouple type, operating mode, ADC resolution, etc.</p><p>The argument to this command must be a pointer to type <code>struct mcp9600_devconf_s</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct mcp9600_devconf_s conf = {</span></span>
<span class="line"><span>  .thermo_type = MCP9600_THERMO_TYPE_K,</span></span>
<span class="line"><span>  .resolution = MCP9600_ADC_RES_18,</span></span>
<span class="line"><span>  /* More fields ... */</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_CONFIGURE, &amp;conf);</span></span></code></pre></div><h3 id="snioc-writeconf" tabindex="-1"><code>SNIOC_WRITECONF</code> <a class="header-anchor" href="#snioc-writeconf" aria-label="Permalink to &quot;\`SNIOC_WRITECONF\`&quot;">​</a></h3><p>This command lets you configure the MCP9600&#39;s alerts on a per-alert basis.</p><p>The argument to this command must be a pointer to type <code>struct mcp9600_alertconf_s</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct mcp9600_alertconf_s conf = {</span></span>
<span class="line"><span>  .alert = MCP9600_ALERT1,</span></span>
<span class="line"><span>  .enable = true,</span></span>
<span class="line"><span>  .limit = 40 / 0.25,</span></span>
<span class="line"><span>  /* More fields ... */</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_WRITECONF, &amp;conf);</span></span></code></pre></div>`,22)]))}const g=t(p,[["render",r]]);export{_ as __pageData,g as default};
