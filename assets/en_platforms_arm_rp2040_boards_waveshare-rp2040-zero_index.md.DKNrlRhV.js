import{_ as a,c as i,al as l,o}from"./chunks/framework.NFAqBSgQ.js";const s="/assets/WaveshareRP2040Zero.DO-wgPCo.png",b=JSON.parse('{"title":"Waveshare RP2040 Zero","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp2040/boards/waveshare-rp2040-zero/index.md","filePath":"en/platforms/arm/rp2040/boards/waveshare-rp2040-zero/index.md"}'),t={name:"en/platforms/arm/rp2040/boards/waveshare-rp2040-zero/index.md"};function r(n,e,p,c,h,d){return o(),i("div",null,e[0]||(e[0]=[l('<h1 id="waveshare-rp2040-zero" tabindex="-1">Waveshare RP2040 Zero <a class="header-anchor" href="#waveshare-rp2040-zero" aria-label="Permalink to &quot;Waveshare RP2040 Zero&quot;">​</a></h1><p>chip:rp2040</p><p>The <a href="https://www.waveshare.com/wiki/RP2040-Zero" target="_blank" rel="noreferrer">Waveshare RP2040 Zero</a> is a general purpose board supplied by Waveshare.</p><p><img src="'+s+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>RP2040 microcontroller chip</li><li>Dual-core ARM Cortex M0+ processor, flexible clock running up to 133 MHz</li><li>264kB of SRAM, and 2MB of on-board Flash memory</li><li>Castellated module allows soldering direct to carrier boards</li><li>USB 1.1 Host and Device support</li><li>Low-power sleep and dormant modes</li><li>Drag &amp; drop programming using mass storage over USB</li><li>20 multi-function GPIO pins</li><li>2× SPI, 2× I2C, 2× UART, 3× 12-bit ADC, 16× controllable PWM channels</li><li>Accurate clock and timer on-chip</li><li>Temperature sensor</li><li>Accelerated floating point libraries on-chip</li><li>8 × Programmable IO (PIO) state machines for custom peripheral support</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default a serial console appears on pins 23 (TX GPIO0) and pin 22 (RX GPIO1). This console runs a 115200-8N1.</p><p>The board can be configured to use the USB connection as the serial console.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><p>A ws2812 (NeoPixel) smart RGB LED controlled by GPIO16 (data).</p><p>There is a BOOT button which if held down when power is first applied or the RESET button is pressed will cause the RP2040 to boot into program mode and appear as a storage device to a USB connecter. Saving a .UF2 file to this device will replace the Flash ROM contents on the RP2040.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pads numbered anticlockwise from USB connector.</p><p>Pad Signal Notes</p><hr><p>1 2 3 4 5 6 7 8 9 10 11 5V Ground 3.3V GPIO29 GPIO28 GPIO27 GPIO26 GPIO15 GPIO14 GPIO13 GPIO12<br> 12 GPIO11 Default TX for SPI1 13 GPIO10 Default SCK for SPI1 14 GPIO9 Default CSn for SPI1 15 GPIO8 Default RX for SPI1 16 GPIO7 Default SCL for I2C1 17 GPIO6 Default SDA for I2C1 18 GPIO5 Default SCL for I2C0 19 20 21 GPIO4 GPIO3 GPIO2 Default SDA for I2C0 22 GPIO1 Default RX for UART0 serial console 23 GPIO0 Default TX for UART0 serial console</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>The Waveshare RP2040 Zero can be powered via the USB connector, or by supplying +5V to pin 1.</p><p>The RP2040 runs on 3.3 volts. This is supplied by an onboard voltage regulator.</p><h2 id="supported-capabilities" tabindex="-1">Supported Capabilities <a class="header-anchor" href="#supported-capabilities" aria-label="Permalink to &quot;Supported Capabilities&quot;">​</a></h2><p>NuttX supports the following RP2040 capabilities:</p><ul><li>UART (console port) <ul><li>GPIO 0 (UART0 TX) and GPIO 1 (UART0 RX) are used for the console.</li></ul></li><li>I2C</li><li>SPI (master only)</li><li>DMAC</li><li>PWM</li><li>ADC</li><li>Watchdog</li><li>USB device <ul><li>MSC, CDC/ACM serial and these composite device are supported.</li><li>CDC/ACM serial device can be used for the console.</li></ul></li><li>PIO (RP2040 Programmable I/O)</li><li>Flash ROM Boot</li><li>SRAM Boot <ul><li>If Pico SDK is available, nuttx.uf2 file which can be used in BOOTSEL mode will be created.</li></ul></li><li>Persistent flash filesystem in unused flash ROM</li><li>WiFi wireless communication</li></ul><p>There is currently no direct user mode access to these RP2040 hardware features:</p><ul><li>SPI Slave Mode</li><li>SSI</li><li>RTC</li><li>Timers</li></ul><p>NuttX also provide support for these external devices:</p><ul><li>BMP180 sensor at I2C0 (don&#39;t forget to define I2C0 GPIOs at &quot;I2C0 GPIO pin assign&quot; in Board Selection menu)</li><li>INA219 sensor / module (don&#39;t forget to define I2C0 GPIOs at &quot;I2C0 GPIO pin assign&quot; in Board Selection menu)</li><li>SHT4X sensor at I2C0</li><li>Pico Display Pack (ST7789 LCD) <ul><li>RGB leds and buttons are not supported yet.</li></ul></li><li>Pico Audio Pack (PCM5100A I2S DAC) <ul><li>I2S interface is realized by PIO.</li></ul></li><li>WS2812 smart pixel support</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li>Download Raspberry Pi Pico SDK</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone -b 2.0.0 https://github.com/raspberrypi/pico-sdk.git</span></span></code></pre></div><ol start="2"><li>Download and install picotool</li></ol><blockquote><p>Instructions can be found here: <a href="https://github.com/raspberrypi/picotool" target="_blank" rel="noreferrer">https://github.com/raspberrypi/picotool</a></p><p>If you are on Arch Linux, you can install the picotool through the AUR:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> yay -S picotool</span></span></code></pre></div><ol start="3"><li>Set PICO_SDK_PATH environment variable</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> export PICO_SDK_PATH=&lt;absolute_path_to_pico-sdk_directory&gt;</span></span></code></pre></div><ol start="4"><li>Configure and build NuttX</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/apache/nuttx.git nuttx</span></span>
<span class="line"><span> git clone https://github.com/apache/nuttx-apps.git apps</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh waveshare-rp2040-zero:nsh</span></span>
<span class="line"><span> make V=1</span></span></code></pre></div><ol start="5"><li><p>Connect Raspberry Pi Pico board to USB port while pressing BOOTSEL. The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device. (Same manner as the standard Pico SDK applications installation.)</p></li><li><p>To access the console, GPIO 0 and 1 pins must be connected to the device such as USB-serial converter.</p><p>[usbnsh]{.title-ref} configuration provides the console access by USB CDC/ACM serial device. The console is available by using a terminal software on the USB host.</p></li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="gpio" tabindex="-1">gpio <a class="header-anchor" href="#gpio" aria-label="Permalink to &quot;gpio&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with GPIO examples.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps).</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>Basic NuttShell configuration using CDC/ACM serial (console enabled in USB Port, at 115200 bps).</p><h3 id="ws2812" tabindex="-1">ws2812 <a class="header-anchor" href="#ws2812" aria-label="Permalink to &quot;ws2812&quot;">​</a></h3><p>Basic NuttShell configuration with WS2812 driver and example enabled. Console is enabled over USB at 115200 bps.</p><h2 id="license-exceptions" tabindex="-1">License exceptions <a class="header-anchor" href="#license-exceptions" aria-label="Permalink to &quot;License exceptions&quot;">​</a></h2><p>The following files are originated from the files in Pico SDK. So, the files are licensed under 3-Clause BSD same as Pico SDK.</p><ul><li>arch/arm/src/rp2040/rp2040_clock.c</li><li>arch/arm/src/rp2040/rp2040_pll.c</li><li>arch/arm/src/rp2040/rp2040_xosc.c <ul><li>These are created by referring the Pico SDK clock initialization.</li></ul></li><li>arch/arm/src/rp2040/rp2040_pio.c</li><li>arch/arm/src/rp2040/rp2040_pio.h</li><li>arch/arm/src/rp2040/rp2040_pio_instructions.h <ul><li>These provide the similar APIs to Pico SDK&#39;s hardware_pio APIs.</li></ul></li><li>arch/arm/src/rp2040/hardware/*.h <ul><li>These are generated from rp2040.svd originally provided in Pico SDK.</li></ul></li></ul>`,50)]))}const P=a(t,[["render",r]]);export{b as __pageData,P as default};
