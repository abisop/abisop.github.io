import{_ as a,c as n,j as e,a as o,al as i,o as s}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"Espressif ESP32-C3 (Legacy)","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/esp32c3-legacy/index.md","filePath":"en/platforms/risc-v/esp32c3-legacy/index.md"}'),r={name:"en/platforms/risc-v/esp32c3-legacy/index.md"};function l(c,t,p,d,h,u){return s(),n("div",null,t[0]||(t[0]=[e("p",null,"Note",-1),e("p",null,[o("A new approach is being adopted for this chip and this implementation will be deprecated when the same support level is achieved. For the new approach please check "),e("code",{class:"interpreted-text",role:"ref"},"here<esp32c3>"),o(".")],-1),i(`<h1 id="espressif-esp32-c3-legacy" tabindex="-1">Espressif ESP32-C3 (Legacy) <a class="header-anchor" href="#espressif-esp32-c3-legacy" aria-label="Permalink to &quot;Espressif ESP32-C3 (Legacy)&quot;">​</a></h1><p>The ESP32-C3 is an ultra-low-power and highly integrated SoC with a RISC-V core and supports 2.4 GHz Wi-Fi and Bluetooth Low Energy.</p><ul><li>Address Space <ul><li>800 KB of internal memory address space accessed from the instruction bus</li><li>560 KB of internal memory address space accessed from the data bus</li><li>1016 KB of peripheral address space</li><li>8 MB of external memory virtual address space accessed from the instruction bus</li><li>8 MB of external memory virtual address space accessed from the data bus</li><li>480 KB of internal DMA address space</li></ul></li><li>Internal Memory <ul><li>384 KB ROM</li><li>400 KB SRAM (16 KB can be configured as Cache)</li><li>8 KB of SRAM in RTC</li></ul></li><li>External Memory <ul><li>Up to 16 MB of external flash</li></ul></li><li>Peripherals <ul><li>35 peripherals</li></ul></li><li>GDMA <ul><li>7 modules are capable of DMA operations.</li></ul></li></ul><h2 id="esp32-c3-toolchain" tabindex="-1">ESP32-C3 Toolchain <a class="header-anchor" href="#esp32-c3-toolchain" aria-label="Permalink to &quot;ESP32-C3 Toolchain&quot;">​</a></h2><p>A generic RISC-V toolchain can be used to build ESP32-C3 projects. It&#39;s recommended to use the same toolchain used by NuttX CI. Please refer to the Docker <a href="https://github.com/apache/nuttx/tree/master/tools/ci/docker/linux/Dockerfile" target="_blank" rel="noreferrer">container</a> and check for the current compiler version being used. For instance:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>###############################################################################</span></span>
<span class="line"><span># Build image for tool required by RISCV builds</span></span>
<span class="line"><span>###############################################################################</span></span>
<span class="line"><span>FROM nuttx-toolchain-base AS nuttx-toolchain-riscv</span></span>
<span class="line"><span># Download the latest RISCV GCC toolchain prebuilt by xPack</span></span>
<span class="line"><span>RUN mkdir riscv-none-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>curl -s -L &quot;https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases/download/v12.3.0-2/xpack-riscv-none-elf-gcc-12.3.0-2-linux-x64.tar.gz&quot; \\</span></span>
<span class="line"><span>| tar -C riscv-none-elf-gcc --strip-components 1 -xz</span></span></code></pre></div><p>It uses the xPack&#39;s prebuilt toolchain based on GCC 12.3.0.</p><h3 id="installing" tabindex="-1">Installing <a class="header-anchor" href="#installing" aria-label="Permalink to &quot;Installing&quot;">​</a></h3><p>First, create a directory to hold the toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> mkdir -p /path/to/your/toolchain/riscv-none-elf-gcc</span></span></code></pre></div><p>Download and extract toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> curl -s -L &quot;https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases/download/v12.3.0-2/xpack-riscv-none-elf-gcc-12.3.0-2-linux-x64.tar.gz&quot; \\</span></span>
<span class="line"><span>| tar -C /path/to/your/toolchain/riscv-none-elf-gcc --strip-components 1 -xz</span></span></code></pre></div><p>Add the toolchain to your \`PATH\`:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> echo &quot;export PATH=/path/to/your/toolchain/riscv-none-elf-gcc/bin:PATH&quot; &gt;&gt; ~/.bashrc</span></span></code></pre></div><p>You can edit your shell&#39;s rc files if you don&#39;t use bash.</p><h2 id="second-stage-bootloader-and-partition-table" tabindex="-1">Second stage bootloader and partition table <a class="header-anchor" href="#second-stage-bootloader-and-partition-table" aria-label="Permalink to &quot;Second stage bootloader and partition table&quot;">​</a></h2><p>The NuttX port for now relies on IDF&#39;s second stage bootloader to carry on some hardware initializations. The binaries for the bootloader and the partition table can be found in this repository: <a href="https://github.com/espressif/esp-nuttx-bootloader" target="_blank" rel="noreferrer">https://github.com/espressif/esp-nuttx-bootloader</a> That repository contains a dummy IDF project that&#39;s used to build the bootloader and partition table, these are then presented as Github assets and can be downloaded from: <a href="https://github.com/espressif/esp-nuttx-bootloader/releases" target="_blank" rel="noreferrer">https://github.com/espressif/esp-nuttx-bootloader/releases</a> Download <code>bootloader-esp32c3.bin</code> and <code>partition-table-esp32c3.bin</code> and place them in a folder, the path to this folder will be used later to program them. This can be: <code>../esp-bins</code></p><h2 id="building-and-flashing" tabindex="-1">Building and flashing <a class="header-anchor" href="#building-and-flashing" aria-label="Permalink to &quot;Building and flashing&quot;">​</a></h2><p>First make sure that <code>esptool.py</code> is installed. This tool is used to convert the ELF to a compatible ESP32 image and to flash the image into the board. It can be installed with: <code>pip install esptool==4.8.dev4</code>.</p><p>Configure the NuttX project: <code>./tools/configure.sh esp32c3-devkit:nsh</code> Run <code>make</code> to build the project. Note that the conversion mentioned above is included in the build process. The <code>esptool.py</code> command to flash all the binaries is:</p><pre><code>esptool.py --chip esp32c3 --port /dev/ttyUSBXX --baud 921600 write_flash 0x0 bootloader.bin 0x8000 partition-table.bin 0x10000 nuttx.bin
</code></pre><p>However, this is also included in the build process and we can build and flash with:</p><pre><code>make flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=../esp-bins
</code></pre><p>Where <code>&lt;port&gt;</code> is typically <code>/dev/ttyUSB0</code> or similar and <code>../esp-bins</code> is the path to the folder containing the bootloader and the partition table for the ESP32-C3 as explained above. Note that this step is required only one time. Once the bootloader and partition table are flashed, we don&#39;t need to flash them again. So subsequent builds would just require: <code>make flash ESPTOOL_PORT=/dev/ttyUSBXX</code></p><h2 id="debugging-with-openocd-and-gdb" tabindex="-1">Debugging with <code>openocd</code> and <code>gdb</code> <a class="header-anchor" href="#debugging-with-openocd-and-gdb" aria-label="Permalink to &quot;Debugging with \`openocd\` and \`gdb\`&quot;">​</a></h2><p>Espressif uses a specific version of OpenOCD to support ESP32-C3: <a href="https://github.com/espressif/" target="_blank" rel="noreferrer">openocd-esp32</a>.</p><p>Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32c3/api-guides/jtag-debugging/index.html#jtag-debugging-building-openocd" target="_blank" rel="noreferrer">Building OpenOCD from Sources</a> for more information on how to build OpenOCD for ESP32-C3.</p><p>ESP32-C3 has a built-in JTAG circuitry and can be debugged without any additional chip. Only an USB cable connected to the D+/D- pins is necessary:</p><p>ESP32-C3 Pin USB Signal</p><hr><p>GPIO18 D- GPIO19 D+ 5V V_BUS GND Ground</p><p>Note</p><p>One must configure the USB drivers to enable JTAG communication. Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32c3/api-guides/jtag-debugging/configure-builtin-jtag.html#configure-usb-drivers" target="_blank" rel="noreferrer">Configure USB Drivers</a> for more information.</p><p>OpenOCD can then be used:</p><pre><code>openocd -c &#39;set ESP_RTOS none&#39; -f board/esp32c3-builtin.cfg
</code></pre><p>If you want to debug with an external JTAG adapter it can be connected as follows:</p><p>ESP32-C6 Pin JTAG Signal</p><hr><p>GPIO4 TMS GPIO5 TDI GPIO6 TCK GPIO7 TDO</p><p>Furthermore, an efuse needs to be burnt to be able to debug:</p><pre><code>espefuse.py -p &lt;port&gt; burn_efuse DIS_USB_JTAG
</code></pre><p>Warning</p><p>Burning eFuses is an irreversible operation, so please consider the above option before starting the process.</p><p>OpenOCD can then be used:</p><pre><code>openocd  -c &#39;set ESP_RTOS none&#39; -f board/esp32c3-ftdi.cfg
</code></pre><p>Once OpenOCD is running, you can use GDB to connect to it and debug your application:</p><pre><code>riscv-none-elf-gdb -x gdbinit nuttx
</code></pre><p>whereas the content of the <code>gdbinit</code> file is:</p><pre><code>target remote :3333
set remote hardware-watchpoint-limit 2
mon reset halt
flushregs
monitor reset halt
thb nsh_main
c
</code></pre><p>Note</p><p><code>nuttx</code> is the ELF file generated by the build process. Please note that <code>CONFIG_DEBUG_SYMBOLS</code> must be enabled in the <code>menuconfig</code>.</p><p>Please refer to [[/quick](]{.title-ref}/quick.md)start/debugging\` for more information about debugging techniques.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates the state of peripherals&#39; support in NuttX:</p><p>+-----------------------------+-----------------------------+-------+ | Peripheral | Support | NOTES | +=============================+=============================+=======+ | ADC AES Bluetooth | &gt; Yes Yes Yes | | +-----------------------------+-----------------------------+-------+ | CDC Console DMA eFuse GPIO | &gt; Yes Yes Yes Yes Yes Yes | Rev.3 | | I2C LED_PWM RNG RSA RTC | &gt; Yes Yes Yes Yes Yes Yes | | | SHA SPI SPIFLASH Timers | &gt; Yes Yes Yes Yes Yes | | | Touch UART Watchdog Wifi | | | +-----------------------------+-----------------------------+-------+</p><h2 id="secure-boot-and-flash-encryption" tabindex="-1">Secure Boot and Flash Encryption <a class="header-anchor" href="#secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Secure Boot and Flash Encryption&quot;">​</a></h2><h3 id="secure-boot" tabindex="-1">Secure Boot <a class="header-anchor" href="#secure-boot" aria-label="Permalink to &quot;Secure Boot&quot;">​</a></h3><p>Secure Boot protects a device from running any unauthorized (i.e., unsigned) code by checking that each piece of software that is being booted is signed. On an ESP32-C3, these pieces of software include the second stage bootloader and each application binary. Note that the first stage bootloader does not require signing as it is ROM code thus cannot be changed. This is achieved using specific hardware in conjunction with MCUboot (read more about MCUboot <a href="https://docs.mcuboot.com/" target="_blank" rel="noreferrer">here</a>).</p><p>The Secure Boot process on the ESP32-C3 involves the following steps performed:</p><ol><li>The first stage bootloader verifies the second stage bootloader&#39;s RSA-PSS signature. If the verification is successful, the first stage bootloader loads and executes the second stage bootloader.</li><li>When the second stage bootloader loads a particular application image, the application&#39;s signature (RSA, ECDSA or ED25519) is verified by MCUboot. If the verification is successful, the application image is executed.</li></ol><p>Warning</p><p>Once enabled, Secure Boot will not boot a modified bootloader. The bootloader will only boot an application firmware image if it has a verified digital signature. There are implications for reflashing updated images once Secure Boot is enabled. You can find more information about the ESP32-C3&#39;s Secure boot <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/security/secure-boot-v2.html" target="_blank" rel="noreferrer">here</a>.</p><p>Note</p><p>As the bootloader image is built on top of the Hardware Abstraction Layer component of <a href="https://github.com/espressif/esp-idf" target="_blank" rel="noreferrer">ESP-IDF</a>, the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">API port by Espressif</a> will be used by MCUboot rather than the original NuttX port.</p><h3 id="flash-encryption" tabindex="-1">Flash Encryption <a class="header-anchor" href="#flash-encryption" aria-label="Permalink to &quot;Flash Encryption&quot;">​</a></h3><p>Flash encryption is intended for encrypting the contents of the ESP32-C3&#39;s off-chip flash memory. Once this feature is enabled, firmware is flashed as plaintext, and then the data is encrypted in place on the first boot. As a result, physical readout of flash will not be sufficient to recover most flash contents.</p><p>Warning</p><p>After enabling Flash Encryption, an encryption key is generated internally by the device and cannot be accessed by the user for re-encrypting data and re-flashing the system, hence it will be permanently encrypted. Re-flashing an encrypted system is complicated and not always possible. You can find more information about the ESP32-C3&#39;s Flash Encryption <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/security/flash-encryption.html" target="_blank" rel="noreferrer">here</a>.</p><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>First of all, we need to install <code>imgtool</code> (a MCUboot utility application to manipulate binary images) and <code>esptool</code> (the ESP32-C3 toolkit):</p><pre><code> pip install imgtool esptool
</code></pre><p>We also need to make sure that the python modules are added to <code>PATH</code>:</p><pre><code> echo &quot;PATH=PATH:/home/USER/.local/bin&quot; &gt;&gt; ~/.bashrc
</code></pre><p>Now, we will create a folder to store the generated keys (such as <code>~/signing_keys</code>):</p><pre><code> mkdir ~/signing_keys &amp;&amp; cd ~/signing_keys
</code></pre><p>With all set up, we can now generate keys to sign the bootloader and application binary images, respectively, of the compiled project:</p><pre><code> espsecure.py generate_signing_key --version 2 bootloader_signing_key.pem
 imgtool keygen --key app_signing_key.pem --type rsa-3072
</code></pre><p>Important</p><p>The contents of the key files must be stored securely and kept secret.</p><h3 id="enabling-secure-boot-and-flash-encryption" tabindex="-1">Enabling Secure Boot and Flash Encryption <a class="header-anchor" href="#enabling-secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Enabling Secure Boot and Flash Encryption&quot;">​</a></h3><p>To enable Secure Boot for the current project, go to the project&#39;s NuttX directory, execute <code>make menuconfig</code> and the following steps:</p><blockquote><ol><li>Enable experimental features in <code>Build Setup --&gt; Show experimental options</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable MCUboot in <code>Application Configuration --&gt; Bootloader Utilities --&gt; MCUboot</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Change image type to <code>MCUboot-bootable format</code> in <code>System Type --&gt; Application Image Configuration --&gt; Application Image Format</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable building MCUboot from the source code by selecting <code>Build binaries from source</code>; in <code>System Type --&gt; Application Image Configuration --&gt; Source for bootloader binaries</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable Secure Boot in <code>System Type --&gt; Application Image Configuration --&gt; Enable hardware Secure Boot in bootloader</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>If you want to protect the SPI Bus against data sniffing, you can enable Flash Encryption in <code>System Type --&gt; Application Image Configuration --&gt; Enable Flash Encryption on boot</code>{.interpreted-text role=&quot;menuselection&quot;}.</li></ol></blockquote><p>Now you can design an update and confirm agent to your application. Check the <a href="https://docs.mcuboot.com/design.html" target="_blank" rel="noreferrer">MCUboot design guide</a> and the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">MCUboot Espressif port documentation</a> for more information on how to apply MCUboot. Also check some <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/readme-nuttx.md" target="_blank" rel="noreferrer">notes about the NuttX MCUboot port</a>, the <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/PORTING.md" target="_blank" rel="noreferrer">MCUboot porting guide</a> and some <a href="https://github.com/apache/nuttx-apps/tree/master/examples/mcuboot" target="_blank" rel="noreferrer">examples of MCUboot applied in NuttX applications</a>.</p><p>After you developed an application which implements all desired functions, you need to flash it into the primary image slot of the device (it will automatically be in the confirmed state, you can learn more about image confirmation <a href="https://docs.mcuboot.com/design.html#image-swapping" target="_blank" rel="noreferrer">here</a>). To flash to the primary image slot, select <code>Application image primary slot</code> in <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} and compile it using <code>make -j ESPSEC_KEYDIR=~/signing_keys</code>.</p><p>When creating update images, make sure to change <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} to <code>Application image secondary slot</code>.</p><p>Important</p><p>When deploying your application, make sure to disable UART Download Mode by selecting <code>Permanently disabled</code> in <code>System Type --&gt; Application Image Configuration --&gt; UART ROM download mode</code>{.interpreted-text role=&quot;menuselection&quot;} and change usage mode to <code>Release</code> in [System Type --&gt; Application Image Configuration --&gt; Enable usage mode]{.title-ref}. <strong>After disabling UART Download Mode you will not be able to flash other images through UART.</strong></p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,89)]))}const f=a(r,[["render",l]]);export{b as __pageData,f as default};
