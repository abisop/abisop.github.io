import{_ as i,c as s,al as o,o as a}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"discover UDP Discover Daemon","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/discover/index.md","filePath":"en/applications/examples/discover/index.md"}'),d={name:"en/applications/examples/discover/index.md"};function c(t,e,r,l,n,_){return a(),s("div",null,e[0]||(e[0]=[o('<h1 id="discover-udp-discover-daemon" tabindex="-1"><code>discover</code> UDP Discover Daemon <a class="header-anchor" href="#discover-udp-discover-daemon" aria-label="Permalink to &quot;`discover` UDP Discover Daemon&quot;">​</a></h1><p>This example exercises <code>netutils/discover</code> utility. This example initializes and starts the UDP discover daemon. This daemon is useful for discovering devices in local networks, especially with DHCP configured devices. It listens for UDP broadcasts which also can include a device class so that groups of devices can be discovered. It is also possible to address all classes with a kind of broadcast discover.</p><p>This example will automatically be built as an NSH built-in if <code>CONFIG_NSH_BUILTIN_APPS</code> is selected. Otherwise, it will be a standalone program with entry point <code>discover_main</code>.</p><p>NuttX configuration settings:</p><ul><li><code>CONFIG_EXAMPLES_DISCOVER_DHCPC</code> – DHCP Client.</li><li><code>CONFIG_EXAMPLES_DISCOVER_NOMAC</code> – Use canned MAC address.</li><li><code>CONFIG_EXAMPLES_DISCOVER_IPADDR</code> – Target IP address.</li><li><code>CONFIG_EXAMPLES_DISCOVER_DRIPADDR</code> – Router IP address.</li><li><code>CONFIG_EXAMPLES_DISCOVER_NETMASK</code> – Network Mask.</li></ul>',5)]))}const D=i(d,[["render",c]]);export{m as __pageData,D as default};
