import{_ as o,c as i,al as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"README","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/x86/qemu/boards/qemu-i486/README.md","filePath":"en/platforms/x86/qemu/boards/qemu-i486/README.md"}'),a={name:"en/platforms/x86/qemu/boards/qemu-i486/README.md"};function r(l,e,s,u,d,c){return n(),i("div",null,e[0]||(e[0]=[t(`<h1 id="readme" tabindex="-1">README <a class="header-anchor" href="#readme" aria-label="Permalink to &quot;README&quot;">​</a></h1><p>This README file describes the contents of the build configurations available for the NuttX QEMU i486 port.</p><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h1><ul><li>QEMU <ul><li>Building QEMU</li><li>Cygwin Build Problems</li><li>Running QEMU</li></ul></li><li>Toolchains <ul><li>Cygwin Buildroot Toolchain</li><li>Buildroot Instructions</li></ul></li><li>FAQ</li><li>Configurations <ul><li>ostest</li><li>nsh</li></ul></li></ul><h1 id="qemu" tabindex="-1">QEMU <a class="header-anchor" href="#qemu" aria-label="Permalink to &quot;QEMU&quot;">​</a></h1><p>QEMU is a generic and open source machine emulator and virtualizer. Here are some links (which will probably be mostly outdated by the time your read this):</p><p>Home Page: <a href="http://wiki.qemu.org/Main%5C_Page" target="_blank" rel="noreferrer">http://wiki.qemu.org/Main\\_Page</a> Downloads: <a href="http://wiki.qemu.org/Download" target="_blank" rel="noreferrer">http://wiki.qemu.org/Download</a> Documentation: <a href="http://wiki.qemu.org/Manual" target="_blank" rel="noreferrer">http://wiki.qemu.org/Manual</a> Usage: qemu -nographic -kernel nuttx.elf</p><h2 id="building-qemu" tabindex="-1">Building QEMU <a class="header-anchor" href="#building-qemu" aria-label="Permalink to &quot;Building QEMU&quot;">​</a></h2><p>tar zxf qemu-0.14.0.tar.gz cd qemu-0.14.0 ./configure --target-list=i386-softmmu make make install</p><h2 id="cygwin-build-problems" tabindex="-1">Cygwin Build Problems <a class="header-anchor" href="#cygwin-build-problems" aria-label="Permalink to &quot;Cygwin Build Problems&quot;">​</a></h2><p>Error:</p><pre><code>&quot;gcc: The -mno-cygwin flag has been removed; use a mingw-targeted cross-compiler.&quot;
</code></pre><p>Workaround:</p><pre><code>None known.  It does not seem possible to build QEMU using the Cygwin gcc.
I tried editing configure.  Removing the following line will allow QEMU to
configure:

  QEMU_CFLAGS=&quot;-mno-cygwin $QEMU_CFLAGS&quot;

However, it then fails later during the compilation phase.
</code></pre><p>Recommendation:</p><pre><code>1. Google for &quot;qemu windows download&quot; and download some pre-built QEMU
   binaries.  I found 0.14.0 here: http://dietpc.org/windows/qemu/, or
2. Try building QEMU with MingGW (I understand that this is difficult).
</code></pre><p>NOTE: As of this writing, I have not been successful getting ANY pre-built version of QEMU to work successfully with WinXP. The same binaries work fine on Vista, however.</p><h2 id="running-qemu" tabindex="-1">Running QEMU <a class="header-anchor" href="#running-qemu" aria-label="Permalink to &quot;Running QEMU&quot;">​</a></h2><p>In the top-level NuttX directory:</p><pre><code>qemu -cpu 486 -m 2 -kernel nuttx.elf -nographic
</code></pre><p>The -nographic option redirects COM1 to your console. However, the -nographic option does not work under Cygwin. For simple testing under Cygwin, I use</p><pre><code>qemu -cpu 486 -m 2 -kernel nuttx.elf -serial file:test.txt
</code></pre><p>which will send COM1 output to the file test.txt.</p><h1 id="toolchains" tabindex="-1">Toolchains <a class="header-anchor" href="#toolchains" aria-label="Permalink to &quot;Toolchains&quot;">​</a></h1><p>Two target environments are supported: (1) Linux and (2) Cygwin under Windows. Any GCC toolchain that can produce i486 ELF binaries should work. On Linux, you can probably use the installed system gcc. But that will not work with Cygwin. Why? Because the Cygwin gcc (and probably the MinGW gcc as well) do not produce ELF final binaries but, rather, DOS MZ executables (i.e., .exe files). Those cannot be used with QEMU.</p><pre><code>NOTE: It has also been reported to me that with a certain Ubuntu virtual
installation, the native x86 did not build correct i486 code.  Other
installations of the same vintage do not have such issues.  However,
there is always a possibility that any GCC release will be incompatible
with i486.  That fallback used by this person in this particular case
was to use the Buildroot i486 cross-development tool described below.  I
suspect that this was not necessary, but it was a simple work-around
that allowed that person to build a work-able system.
</code></pre><p>In any event, the PATH environment variable should be modified to point to the correct path to the GCC toolchain.</p><h2 id="cygwin-buildroot-toolchain" tabindex="-1">Cygwin Buildroot Toolchain <a class="header-anchor" href="#cygwin-buildroot-toolchain" aria-label="Permalink to &quot;Cygwin Buildroot Toolchain&quot;">​</a></h2><p>With Cygwin the solution is to build an i486 cross-development toolchain to generate the i486 ELF files needed by QEMU. The NuttX buildroot package will create such a toolchain.</p><p>NOTE: As of this writing, none of the released buildroot packages support the i486 build. This is only available in GIT or in any any 1.10 or later buildroot release.</p><h2 id="buildroot-instructions" tabindex="-1">Buildroot Instructions <a class="header-anchor" href="#buildroot-instructions" aria-label="Permalink to &quot;Buildroot Instructions&quot;">​</a></h2><ol><li><p>You must have already configured NuttX in <code>&lt;some-dir&gt;</code>/nuttx.</p><p>tools/configure.sh qemu-i486:<code>&lt;sub-dir&gt;</code></p></li><li><p>Download the latest buildroot package into <code>&lt;some-dir&gt;</code></p></li><li><p>unpack the buildroot tarball. The resulting directory may have versioning information on it like buildroot-x.y.z. If so, rename <code>&lt;some-dir&gt;</code>/buildroot-x.y.z to <code>&lt;some-dir&gt;</code>/buildroot.</p></li><li><p>cd <code>&lt;some-dir&gt;</code>/buildroot</p></li><li><p>cp boards/i486-defconfig-4.3.3 .config</p></li><li><p>make oldconfig</p></li><li><p>make</p></li><li><p>Make sure that the PATH variable includes the path to the newly built binaries.</p></li></ol><p>See the file boards/README.txt in the buildroot source tree. That has more detailed PLUS some special instructions that you will need to follow if you run into problems building the toolchain for Cygwin under Windows.</p><h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><p>Q: I get the following error message, &quot;undefined reference to &#39;__stack_chk_fail&#39;&quot; A: Add -fno-stack-protector to ARCHCPUFLAGS in you Make.defs file. Switch the commenting on the following two lines in the Make.defs file:</p><p>ARCHCPUFLAGS = -march=i486 -mtune=i486 #ARCHCPUFLAGS = -march=i486 -mtune=i486 -fno-stack-protector</p><h1 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h1><h2 id="common-configuration-notes" tabindex="-1">Common Configuration Notes <a class="header-anchor" href="#common-configuration-notes" aria-label="Permalink to &quot;Common Configuration Notes&quot;">​</a></h2><ol><li><p>Each Qemu-i486 Web Server configuration is maintained in a sub-directory and can be selected as follow:</p><p>tools/configure.sh qemu-i486:<code>&lt;subdir&gt;</code></p><p>Where <code>&lt;subdir&gt;</code> is one of the configuration sub-directories described in the following paragraph.</p></li><li><p>These configurations use the mconf-based configuration tool. To change a configurations using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository.</p><p>b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>By default, all configurations assume the Linux. This is easily reconfigured:</p><p>CONFIG_HOST_LINUX=y</p></li></ol><h2 id="configuration-sub-directories" tabindex="-1">Configuration Sub-Directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration Sub-Directories&quot;">​</a></h2><p>ostest</p><pre><code>The &quot;standard&quot; NuttX examples/ostest configuration.
</code></pre><p>nsh</p><pre><code>Configures the NuttShell (nsh) located at examples/nsh.
</code></pre>`,44)]))}const g=o(a,[["render",r]]);export{p as __pageData,g as default};
