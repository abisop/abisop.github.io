import{_ as a,c as t,al as i,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"DAC Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/analog/dac/index.md","filePath":"en/components/drivers/character/analog/dac/index.md"}'),r={name:"en/components/drivers/character/analog/dac/index.md"};function o(s,e,c,d,p,l){return n(),t("div",null,e[0]||(e[0]=[i(`<h1 id="dac-drivers" tabindex="-1">DAC Drivers <a class="header-anchor" href="#dac-drivers" aria-label="Permalink to &quot;DAC Drivers&quot;">​</a></h1><ul><li><code>include/nuttx/analog/dac.h</code>. All structures and APIs needed to work with DAC drivers are provided in this header file. This header file includes: <ol><li>Structures and interface descriptions needed to develop a low-level, architecture-specific, DAC driver.</li><li>To register the DAC driver with a common DAC character driver.</li><li>Interfaces needed for interfacing user programs with the common DAC character driver.</li></ol></li><li><code>drivers/analog/dac.c</code>. The implementation of the common DAC character driver.</li></ul><h2 id="application-programming-interface" tabindex="-1">Application Programming Interface <a class="header-anchor" href="#application-programming-interface" aria-label="Permalink to &quot;Application Programming Interface&quot;">​</a></h2><p>The first necessary thing to be done in order to use the DAC driver from an application is to include the correct header filer. It contains the Application Programming Interface to the PWM driver. To do so, include</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;nuttx/analog/dac.h&gt;</span></span></code></pre></div><p>DAC driver is registered as a POSIX character device driver into <code>/dev</code> namespace. It is necessary to open the device to get a file descriptor for further operations. This can be done with standard POSIX <code>open()</code> call.</p><p>Standard POSIX <code>write()</code> call is used to send data from an application to a controller. Structure <code>dac_msg_s</code> is used to pass the data/samples.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>begin_packed_struct struct dac_msg_s</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  /* The 8-bit DAC Channel */</span></span>
<span class="line"><span>  uint8_t      am_channel;</span></span>
<span class="line"><span>  /* DAC convert result (4 bytes) */</span></span>
<span class="line"><span>  int32_t      am_data;</span></span>
<span class="line"><span>} end_packed_struct;</span></span></code></pre></div><h3 id="application-example" tabindex="-1">Application Example <a class="header-anchor" href="#application-example" aria-label="Permalink to &quot;Application Example&quot;">​</a></h3><p>An example application can be found in <code>nuttx-apps</code> repository under path <code>examples/dac</code>. It provides command line interface to write data to DAC channels.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>This section describes DAC driver configuration in <code>Kconfig</code>. The reader should refer to target documentation for target specific configuration.</p><p>The peripheral is enabled by <code>CONFIG_ANALOG</code> and <code>CONFIG_DAC</code> options, respectively. The FIFO queue size is configurable with <code>CONFIG_DAC_FIFOSIZE</code>. This size is limited to <code>255</code> to fit into <code>uint8_t</code>.</p><h2 id="supported-external-dacs-i2c-spi" tabindex="-1">Supported External DACs (I2C/SPI) <a class="header-anchor" href="#supported-external-dacs-i2c-spi" aria-label="Permalink to &quot;Supported External DACs (I2C/SPI)&quot;">​</a></h2><p>NuttX also provides support for various external DAC devices. These usually communicate with the MCU via I2C or SPI interfaces.</p><p>I2C-based DACs:</p><blockquote><p>dac7571/index.rst mcp47x6/index.rst</p></blockquote><p>SPI-based DACs:</p><blockquote><p>dac7554/index.rst mcp48xx/index.rst</p></blockquote>`,19)]))}const m=a(r,[["render",o]]);export{u as __pageData,m as default};
