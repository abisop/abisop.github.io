import{_ as a,c as i,al as t,o as s}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"LED Support","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/os/led.md","filePath":"en/reference/os/led.md"}'),n={name:"en/reference/os/led.md"};function o(r,e,d,l,c,h){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="led-support" tabindex="-1">LED Support <a class="header-anchor" href="#led-support" aria-label="Permalink to &quot;LED Support&quot;">​</a></h1><p>A board architecture may or may not have LEDs. If the board does have LEDs, then most architectures provide similar LED support that is enabled when <code>CONFIG_ARCH_LEDS</code> is selected in the NuttX configuration file. This LED support is part of architecture-specific logic and is not managed by the core NuttX logic. However, the support provided by each architecture is sufficiently similar that it can be documented here.</p><h2 id="header-files" tabindex="-1">Header Files <a class="header-anchor" href="#header-files" aria-label="Permalink to &quot;Header Files&quot;">​</a></h2><p>LED-related definitions are provided in two header files:</p><ul><li>LED definitions are provided for each board in the <code>board.h</code> that resides in the <code>&lt;board-name&gt;/include/board.h</code> file (which is also linked to <code>include/arch/board/board.h</code> when the RTOS is configured). Those definitions are discussed <a href="#leddefinitions">below</a>.</li><li>The board-specific logic provides unique instances of the LED interfaces. This is because the implementation of LED support may be very different on different boards. Prototypes for these board-specific implementations are, however, provided in architecture-common header files. That header file is usually at <code>&lt;arch-name&gt;/src/common/up_internal.h</code>, but could be at other locations in particular architectures. These prototypes are discussed <a href="#ledapis">below</a>.</li></ul><h2 id="led-definitions" tabindex="-1">LED Definitions <a class="header-anchor" href="#led-definitions" aria-label="Permalink to &quot;LED Definitions&quot;">​</a></h2><p>The implementation of LED support is very specific to a board architecture. Some boards have several LEDS, others have only one or two. Some have none. Others LED matrices and show alphanumeric data, etc. The NuttX logic does not refer to specific LEDS, rather, it refers to an event to be shown on the LEDS in whatever manner is appropriate for the board; the way that this event is presented depends upon the hardware available on the board.</p><p>The model used by NuttX is that the board can show 8 events defined as follows in <code>&lt;board-name&gt;/include/board.h</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define LED_STARTED       ??</span></span>
<span class="line"><span>#define LED_HEAPALLOCATE  ??</span></span>
<span class="line"><span>#define LED_IRQSENABLED   ??</span></span>
<span class="line"><span>#define LED_STACKCREATED  ??</span></span>
<span class="line"><span>#define LED_INIRQ         ??</span></span>
<span class="line"><span>#define LED_SIGNAL        ??</span></span>
<span class="line"><span>#define LED_ASSERTION     ??</span></span>
<span class="line"><span>#define LED_PANIC         ??</span></span></code></pre></div><p>The specific value assigned to each pre-processor variable can be whatever makes the implementation easiest for the board logic. The <em>meaning</em> associated with each definition is as follows:</p><ul><li><code>LED_STARTED</code> is the value that describes the setting of the LEDs when the LED logic is first initialized. This LED value is set but never cleared.</li><li><code>LED_HEAPALLOCATE</code> indicates that the NuttX heap has been configured. This is an important place in the boot sequence because if the memory is configured wrong, it will probably crash leaving this LED setting. This LED value is set but never cleared.</li><li><code>LED_IRQSENABLED</code> indicates that interrupts have been enabled. Again, during bring-up (or if there are hardware problems), it is very likely that the system may crash just when interrupts are enabled, leaving this setting on the LEDs. This LED value is set but never cleared.</li><li><code>LED_STACKCREATED</code> is set each time a new stack is created. If set, it means that the system attempted to start at least one new thread. This LED value is set but never cleared.</li><li><code>LED_INIRQ</code> is set and cleared on entry and exit from each interrupt. If interrupts are working okay, this LED will have a dull glow.</li><li><code>LED_SIGNAL</code> is set and cleared on entry and exit from a signal handler. Signal handlers are tricky so this is especially useful during bring-up or a new architecture.</li><li><code>LED_ASSERTION</code> is set if an assertion occurs.</li><li><code>LED_PANIC</code> will blink at around 1Hz if the system panics and hangs.</li></ul><h2 id="common-led-interfaces" tabindex="-1">Common LED interfaces <a class="header-anchor" href="#common-led-interfaces" aria-label="Permalink to &quot;Common LED interfaces&quot;">​</a></h2><p>The <code>include/nuttx/board.h</code> includes the following declarations:</p>`,13)]))}const f=a(n,[["render",o]]);export{u as __pageData,f as default};
