import{_ as n,c as t,al as i,o}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Development Environments","description":"","frontmatter":{},"headers":[],"relativePath":"en/introduction/development_environments.md","filePath":"en/introduction/development_environments.md"}'),a={name:"en/introduction/development_environments.md"};function s(r,e,l,d,c,h){return o(),t("div",null,e[0]||(e[0]=[i('<p>revise and update links</p><h1 id="development-environments" tabindex="-1">Development Environments <a class="header-anchor" href="#development-environments" aria-label="Permalink to &quot;Development Environments&quot;">​</a></h1><h2 id="linux-gnu-make-gcc-binutils-for-linux" tabindex="-1">Linux + GNU <code>make</code> + GCC/binutils for Linux <a class="header-anchor" href="#linux-gnu-make-gcc-binutils-for-linux" aria-label="Permalink to &quot;Linux + GNU `make` + GCC/binutils for Linux&quot;">​</a></h2><p>The is the most natural development environment for NuttX. Any version of the GCC/binutils toolchain may be used. There is a highly modified <a href="http://buildroot.uclibc.org/" target="_blank" rel="noreferrer">buildroot</a> available for download from the <a href="https://bitbucket.org/nuttx/buildroot/downloads/" target="_blank" rel="noreferrer">NuttX Bitbucket.org</a> page. This download may be used to build a NuttX-compatible ELF toolchain under Linux or Cygwin. That toolchain will support ARM, m68k, m68hc11, m68hc12, and SuperH ports. The buildroot GIT may be accessed in the NuttX <a href="https://bitbucket.org/nuttx/buildroot" target="_blank" rel="noreferrer">buildroot GIT</a>.</p><h2 id="linux-gnu-make-sdcc-for-linux" tabindex="-1">Linux + GNU <code>make</code> + SDCC for Linux <a class="header-anchor" href="#linux-gnu-make-sdcc-for-linux" aria-label="Permalink to &quot;Linux + GNU `make` + SDCC for Linux&quot;">​</a></h2><p>Also very usable is the Linux environment using the <a href="http://sdcc.sourceforge.net/" target="_blank" rel="noreferrer">SDCC</a> compiler. The SDCC compiler provides support for the 8051/2, z80, hc08, and other microcontrollers. The SDCC-based logic is less well exercised and you will likely find some compilation issues if you use parts of NuttX with SDCC that have not been well-tested.</p><h2 id="windows-with-cygwin-gnu-make-gcc-binutils-custom-built-under-cygwin" tabindex="-1">Windows with Cygwin + GNU <code>make</code> + GCC/binutils (custom built under Cygwin) <a class="header-anchor" href="#windows-with-cygwin-gnu-make-gcc-binutils-custom-built-under-cygwin" aria-label="Permalink to &quot;Windows with Cygwin + GNU `make` + GCC/binutils (custom built under Cygwin)&quot;">​</a></h2><p>This combination works well too. It works just as well as the native Linux environment except that compilation and build times are a little longer. The custom NuttX <a href="https://bitbucket.org/nuttx/buildroot/downloads/" target="_blank" rel="noreferrer">buildroot</a> referenced above may be build in the Cygwin environment as well.</p><h2 id="windows-with-cygwin-gnu-make-sdcc-custom-built-under-cygwin" tabindex="-1">Windows with Cygwin + GNU <code>make</code> + SDCC (custom built under Cygwin) <a class="header-anchor" href="#windows-with-cygwin-gnu-make-sdcc-custom-built-under-cygwin" aria-label="Permalink to &quot;Windows with Cygwin + GNU `make` + SDCC (custom built under Cygwin)&quot;">​</a></h2><p>I have never tried this combination, but it would probably work just fine.</p><h2 id="windows-with-cygwin-gnu-make-windows-native-toolchain" tabindex="-1">Windows with Cygwin + GNU <code>make</code> + Windows Native Toolchain <a class="header-anchor" href="#windows-with-cygwin-gnu-make-windows-native-toolchain" aria-label="Permalink to &quot;Windows with Cygwin + GNU `make` + Windows Native Toolchain&quot;">​</a></h2><p>This is a tougher environment. In this case, the Windows native toolchain is unaware of the Cygwin <em>sandbox</em> and, instead, operates in the native Windows environment. The primary difficulties with this are:</p><ul><li><strong>Paths</strong>. Full paths for the native toolchain must follow Windows standards. For example, the path <code>/home/my\\ name/nuttx/include</code> my have to be converted to something like <code>&#39;C:\\cygwin\\home\\my name\\nuttx\\include&#39;</code> to be usable by the toolchain.</li><li><strong>Symbolic Links</strong> NuttX depends on symbolic links to install platform-specific directories in the build system. On Linux, true symbolic links are used. On Cygwin, emulated symbolic links are used. Unfortunately, for native Windows applications that operate outside of the Cygwin <em>sandbox</em>, these symbolic links cannot be used.</li><li><strong>Dependencies</strong> NuttX uses the GCC compiler&#39;s <code>-M</code> option to generate make dependencies. These dependencies are retained in files called <code>Make.deps</code> throughout the system. For compilers other than GCC, there is no support for making dependencies in this way.</li></ul><p><strong>Supported Windows Native Toolchains</strong>. At present, the following Windows native toolchains are in use:</p><ol><li>GCC built for Windows (such as CodeSourcery, Atollic, devkitARM, etc.),</li><li>SDCC built for Windows,</li><li>the ZiLOG XDS-II toolchain for Z16F, z8Encore, and eZ80Acclaim parts.</li></ol><h2 id="windows-native-cmd-exe-gnuwin32-including-gnu-make-mingw-host-gcc-compiler-windows-native-toolchain" tabindex="-1">Windows Native (<code>CMD.exe</code>) + GNUWin32 (including GNU <code>make</code>) + MinGW Host GCC compiler + Windows Native Toolchain <a class="header-anchor" href="#windows-native-cmd-exe-gnuwin32-including-gnu-make-mingw-host-gcc-compiler-windows-native-toolchain" aria-label="Permalink to &quot;Windows Native (`CMD.exe`) + GNUWin32 (including GNU `make`) + MinGW Host GCC compiler + Windows Native Toolchain&quot;">​</a></h2><p>Build support has been added to support building natively in a Windows console rather than in a POSIX-like environment.</p><p>This build:</p><ol><li>Uses all Windows style paths</li><li>Uses primarily Windows batch commands from cmd.exe, with</li><li>A few extensions from GNUWin32</li></ol><p>This capability first appeared in NuttX-6.24 and should still be considered a work in progress because: (1) it has not been verified on all targets and tools, and (2) still lacks some of the creature-comforts of the more mature environments. The windows native build logic initiated if <code>CONFIG_WINDOWS_NATIVE=y</code> is defined in the NuttX configuration file:</p><p>At present, this build environment also requires:</p><p><strong>Windows Console</strong>. The build must be performed in a Windows console window. This may be using the standard <code>CMD.exe</code> terminal that comes with Windows. I prefer the ConEmu terminal which can be downloaded from: <a href="http://code.google.com/p/conemu-maximus5/" target="_blank" rel="noreferrer">http://code.google.com/p/conemu-maximus5/</a></p><p><strong>GNUWin32</strong>. The build still relies on some Unix-like commands. I usethe GNUWin32 tools that can be downloaded from <a href="http://gnuwin32.sourceforge.net/" target="_blank" rel="noreferrer">http://gnuwin32.sourceforge.net/</a>. See the top-level <code>nuttx/README.txt</code> file for some download, build, and installation notes.</p><p><strong>MinGW-GCC</strong>. MinGW-GCC is used to compiler the C tools in the <code>nuttx/tools</code> directory that are needed by the build. MinGW-GCC can be downloaded from <a href="http://www.mingw.org/" target="_blank" rel="noreferrer">http://www.mingw.org/</a>. If you are using GNUWin32, then it is recommended that you not install the optional MSYS components as there may be conflicts.</p><h2 id="wine-gnu-make-windows-native-toolchain" tabindex="-1">Wine + GNU <code>make</code> + Windows Native Toolchain <a class="header-anchor" href="#wine-gnu-make-windows-native-toolchain" aria-label="Permalink to &quot;Wine + GNU `make` + Windows Native Toolchain&quot;">​</a></h2><p>I&#39;ve never tried this one, but I off the following reported by an ez80 user using the ZiLOG ZDS-II Windows-native toolchain:</p><blockquote><p>&quot;I&#39;ve installed ZDS-II 5.1.1 (IDE for ez80-based boards) on wine (windows emulator for UNIX) and to my surprise, not many changes were needed to make GIT snapshot of NuttX buildable... I&#39;ve tried nsh profile and build process completed successfully. One remark is necessary: NuttX makefiles for ez80 are referencing <code>cygpath</code> utility. Wine provides similar thing called <code>winepath</code> which is compatible and offers compatible syntax. To use that, <code>winepath</code> (which itself is a shell script) has to be copied as <code>cygpath</code> somewhere in <code>PATH</code>, and edited as in following patch:</p><p>&quot;Better solution would be replacing all <code>cygpath</code> references in <code>Makefiles</code> with <code>(CONVPATH)</code> (or <code>{CONVPATH}</code> in shell scripts) and setting <code>CONVPATH</code> to <code>cygpath</code> or <code>winepath</code> regarding to currently used environment.</p></blockquote><h2 id="other-environments" tabindex="-1">Other Environments <a class="header-anchor" href="#other-environments" aria-label="Permalink to &quot;Other Environments&quot;">​</a></h2><p><strong>Environment Dependencies</strong>. The primary environmental dependency of NuttX are (1) GNU make, (2) bash scripting, and (3) Linux utilities (such as cat, sed, etc.). If you have other platforms that support GNU make or make utilities that are compatible with GNU make, then it is very likely that NuttX would work in that environment as well (with some porting effort). If GNU make is not supported, then some significant modification of the Make system would be required.</p><p><strong>MSYS</strong>. I have not used MSYS but what I gather from talking with NuttX users is that MSYS can be used as an alternative to Cygwin in any of the above Cygwin environments. This is not surprising since MSYS is based on an older version of Cygwin (cygwin-1.3). MSYS has been modified, however, to interoperate in the Windows environment better than Cygwin and that may be of value to some users.</p><p>MSYS, however, cannot be used with the native Windows NuttX build because it will invoke the MSYS bash shell instead of the <code>CMD.exe</code> shell. Use GNUWin32 in the native Windows build environment.</p>',31)]))}const w=n(a,[["render",s]]);export{m as __pageData,w as default};
