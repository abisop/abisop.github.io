import{_ as i,c as s,al as r,o as t}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"SPI Device Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/spi.md","filePath":"en/components/drivers/special/spi.md"}'),o={name:"en/components/drivers/special/spi.md"};function d(c,e,n,a,l,p){return t(),s("div",null,e[0]||(e[0]=[r('<h1 id="spi-device-drivers" tabindex="-1">SPI Device Drivers <a class="header-anchor" href="#spi-device-drivers" aria-label="Permalink to &quot;SPI Device Drivers&quot;">â€‹</a></h1><ul><li><code>include/nuttx/spi/spi.h</code>. All structures and APIs needed to work with SPI drivers are provided in this header file.</li><li><code>struct spi_ops_s</code>. Each SPI device driver must implement an instance of <code>struct spi_ops_s</code>. That structure defines a call table with the following methods:</li><li><strong>Binding SPI Drivers</strong>. SPI drivers are not normally directly accessed by user code, but are usually bound to another, higher level device driver. See for example, <code>int mmcsd_spislotinitialize(int minor, int slotno, FAR struct spi_dev_s *spi)</code> in <code>drivers/mmcsd/mmcsd_spi.c</code>. In general, the binding sequence is: <ol><li>Get an instance of <code>struct spi_dev_s</code> from the hardware-specific SPI device driver, and</li><li>Provide that instance to the initialization method of the higher level device driver.</li></ol></li><li><strong>Examples</strong>: <code>drivers/loop.c</code>, <code>drivers/mmcsd/mmcsd_spi.c</code>, <code>drivers/ramdisk.c</code>, etc.</li></ul>',2)]))}const _=i(o,[["render",d]]);export{m as __pageData,_ as default};
