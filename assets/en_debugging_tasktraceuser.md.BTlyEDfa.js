import{_ as n,c as l,al as s,j as e,a,o as i}from"./chunks/framework.NFAqBSgQ.js";const o="/assets/trace-compass-screenshot.sNQhZgPc.png",b=JSON.parse('{"title":"Task Trace User Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/debugging/tasktraceuser.md","filePath":"en/debugging/tasktraceuser.md"}'),c={name:"en/debugging/tasktraceuser.md"};function r(p,t,d,h,u,m){return i(),l("div",null,t[0]||(t[0]=[s('<h1 id="task-trace-user-guide" tabindex="-1">Task Trace User Guide <a class="header-anchor" href="#task-trace-user-guide" aria-label="Permalink to &quot;Task Trace User Guide&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><h3 id="install-trace-compass" tabindex="-1">Install Trace Compass <a class="header-anchor" href="#install-trace-compass" aria-label="Permalink to &quot;Install Trace Compass&quot;">​</a></h3><p>Task Trace uses the external tool <a href="https://www.eclipse.org/tracecompass/" target="_blank" rel="noreferrer">&quot;Trace Compass&quot;</a> to display the trace result.</p><p>Download it from <a href="https://www.eclipse.org/tracecompass/" target="_blank" rel="noreferrer">https://www.eclipse.org/tracecompass/</a> and install into the host environment. After the installation, execute it and choose <code>Tools</code> -&gt; <code>add-ons</code> menu, then select <code>Install Extensions</code> to install the extension named &quot;Trace Compass ftrace (Incubation)&quot;.</p><h3 id="nuttx-kernel-configuration" tabindex="-1">NuttX kernel configuration <a class="header-anchor" href="#nuttx-kernel-configuration" aria-label="Permalink to &quot;NuttX kernel configuration&quot;">​</a></h3><p>To enable the task trace function, the NuttX kernel configuration needs to be modified.</p><p>The following configurations must be enabled.</p>',8),e("ul",null,[e("li",null,[e("code",null,"CONFIG_SCHED_INSTRUMENTATION"),a(" : Enables the feature of scheduler notes.")]),e("li",null,[e("code",null,"CONFIG_SCHED_INSTRUMENTATION_FILTER"),a(" : Enables the filter logic of the notes.")]),e("li",null,[e("code",null,"CONFIG_SCHED_INSTRUMENTATION_SYSCALL"),a(" : Enable system call instrumentation.")]),e("li",null,[e("code",null,"CONFIG_SCHED_INSTRUMENTATION_IRQHANDLER"),a(" : Enables IRQ instrumentation.")]),e("li",null,[e("code",null,"CONFIG_DRIVERS_NOTE"),a(" : Enables note driver support.")]),e("li",null,[e("code",null,"CONFIG_DRIVERS_NOTERAM"),a(" : Enables "),e("code",null,"/dev/note"),a(" in-memory buffering driver.")]),e("li",null,[e("code",null,"CONFIG_DRIVERS_NOTECTL"),a(" : Enables "),e("code",null,"/dev/notectl"),a(" filter control driver.")]),e("li",null,[e("code",null,"CONFIG_SYSTEM_TRACE"),a(' : Enables "'),e("code",null,"trace"),a('" command')]),e("li",null,[e("code",null,"CONFIG_SYSTEM_SYSTEM"),a(' : Enables "'),e("code",null,"system"),a('" command (required by '),e("code",{class:"interpreted-text",role:"ref"},"trace_cmd"),a(")")])],-1),s(`<p>The following configurations are configurable parameters for trace.</p><ul><li><code>CONFIG_SCHED_INSTRUMENTATION_FILTER_DEFAULT_MODE</code><ul><li>Specify the default filter mode. If the following bits are set, the corresponding instrumentations are enabled on boot. <ul><li>Bit 0 = Enable instrumentation</li><li>Bit 1 = Enable syscall instrumentation</li><li>Bit 2 = Enable IRQ instrumentation</li><li>Bit 3 = Enable collecting syscall arguments</li></ul></li></ul></li><li><code>CONFIG_DRIVERS_NOTE_TASKNAME_BUFSIZE</code><ul><li>Specify the task name buffer size in bytes. The buffer is used to hold the name of the task during instrumentation. Trace dump can find and show a task name corresponding to given pid in the instrumentation data by using this buffer. If 0 is specified, this feature is disabled and trace dump shows only the name of the newly created task.</li></ul></li><li><code>CONFIG_DRIVERS_NOTERAM_BUFSIZE</code><ul><li>Specify the note buffer size in bytes. Higher value can hold more note records, but consumes more kernel memory.</li></ul></li><li><code>CONFIG_DRIVERS_NOTERAM_DEFAULT_NOOVERWRITE</code><ul><li>If enabled, stop overwriting old notes in the circular buffer when the buffer is full by default. This is useful to keep instrumentation data of the beginning of a system boot.</li></ul></li><li><code>CONFIG_DRIVERS_NOTERAM_CRASH_DUMP</code><ul><li>If enabled, it will dump the data in the noteram buffer after a system crash. This function can help to view the behavior of the system before the crash</li></ul></li></ul><p>After the configuration, rebuild the NuttX kernel and application.</p><p>If the trace function is enabled, &quot;<code>trace</code>&quot; [[../application](]{.title-ref}../application.md)s/nsh/builtin\` will be available.</p><h2 id="how-to-get-trace-data" tabindex="-1">How to get trace data <a class="header-anchor" href="#how-to-get-trace-data" aria-label="Permalink to &quot;How to get trace data&quot;">​</a></h2><p>The trace function can be controlled by &quot;<code>trace</code>&quot; command.</p><h3 id="quick-guide" tabindex="-1">Quick Guide <a class="header-anchor" href="#quick-guide" aria-label="Permalink to &quot;Quick Guide&quot;">​</a></h3><h4 id="getting-the-trace" tabindex="-1">Getting the trace <a class="header-anchor" href="#getting-the-trace" aria-label="Permalink to &quot;Getting the trace&quot;">​</a></h4><p>Trace is started by the following command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace start</span></span></code></pre></div><p>Trace is stopped by the following command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace stop</span></span></code></pre></div><p>If you want to get the trace while executing some command, the following command can be used.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace cmd &lt;command&gt; [&lt;args&gt;...]</span></span></code></pre></div><h4 id="displaying-the-trace-result" tabindex="-1">Displaying the trace result <a class="header-anchor" href="#displaying-the-trace-result" aria-label="Permalink to &quot;Displaying the trace result&quot;">​</a></h4><p>The trace result is accumulated in the memory. After getting the trace, the following command displays the accumulated trace data to the console.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace dump</span></span></code></pre></div><p>This will get the trace results like the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_close()</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_close -&gt; 0</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_sched_lock()</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_sched_lock -&gt; 0</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_nxsched_get_stackinfo()</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_nxsched_get_stackinfo -&gt; 0</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_sched_unlock()</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_sched_unlock -&gt; 0</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sys_clock_nanosleep()</span></span>
<span class="line"><span>&lt;noname&gt;-1   [0]   7.640000000: sched_switch: prev_comm=&lt;noname&gt; prev_pid=1 prev_state=S ==&gt; next_comm=&lt;noname&gt; next_pid=0</span></span>
<span class="line"><span>&lt;noname&gt;-0   [0]   7.640000000: irq_handler_entry: irq=11</span></span>
<span class="line"><span>&lt;noname&gt;-0   [0]   7.640000000: irq_handler_exit: irq=11</span></span>
<span class="line"><span>&lt;noname&gt;-0   [0]   7.640000000: irq_handler_entry: irq=15</span></span>
<span class="line"><span>&lt;noname&gt;-0   [0]   7.650000000: irq_handler_exit: irq=15</span></span>
<span class="line"><span>&lt;noname&gt;-0   [0]   7.650000000: irq_handler_entry: irq=15</span></span>
<span class="line"><span>    :</span></span></code></pre></div><p>By using the logging function of your terminal software, the trace result can be saved into the host environment and it can be used as the input for <a href="https://www.eclipse.org/tracecompass/" target="_blank" rel="noreferrer">&quot;Trace Compass&quot;</a>.</p><p>If the target has a storage, the trace result can be stored into the file by using the following command. It also can be used as the input for &quot;Trace Compass&quot; by transferring the file in the target device to the host.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace dump &lt;file name&gt;</span></span></code></pre></div><p>To display the trace result by <a href="https://www.eclipse.org/tracecompass/" target="_blank" rel="noreferrer">&quot;Trace Compass&quot;</a>, choose <code>File</code> -&gt; <code>Open Trace</code> menu to specify the trace data file name.</p><p><img src="`+o+`" alt="image"></p><h2 id="trace-command-description" tabindex="-1">Trace command description <a class="header-anchor" href="#trace-command-description" aria-label="Permalink to &quot;Trace command description&quot;">​</a></h2><h3 id="trace-start" tabindex="-1">trace start <a class="header-anchor" href="#trace-start" aria-label="Permalink to &quot;trace start&quot;">​</a></h3><p>Start task tracing</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace start [-c][&lt;duration&gt;]</span></span></code></pre></div><ul><li><code>-c</code> : Continue the previous trace. The trace data is not cleared before starting new trace.</li><li><code>&lt;duration&gt;</code> : Specify the duration of the trace by seconds. Task tracing is stopped after the specified period. If not specified, the tracing continues until stopped by the command.</li></ul><h3 id="trace-stop" tabindex="-1">trace stop <a class="header-anchor" href="#trace-stop" aria-label="Permalink to &quot;trace stop&quot;">​</a></h3><p>Stop task tracing</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace stop</span></span></code></pre></div><h3 id="trace-cmd" tabindex="-1">trace cmd <a class="header-anchor" href="#trace-cmd" aria-label="Permalink to &quot;trace cmd&quot;">​</a></h3><p>Get the trace while running the specified command. After the termination of the command, task tracing is stopped. To use this command, <code>CONFIG_SYSTEM_SYSTEM</code> needs to be enabled.</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace cmd [-c] &lt;command&gt; [&lt;args&gt;...]</span></span></code></pre></div><ul><li><code>-c</code> : Continue the previous trace. The trace data is not cleared before starting new trace.</li><li><code>&lt;command&gt;</code> : Specify the command to get the task trace.</li><li><code>&lt;args&gt;</code> : Arguments for the command.</li></ul><p><strong>Example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace cmd sleep 1</span></span></code></pre></div><h3 id="trace-dump" tabindex="-1">trace dump <a class="header-anchor" href="#trace-dump" aria-label="Permalink to &quot;trace dump&quot;">​</a></h3><p>Output the trace result. If the task trace is running, it is stopped before the output.</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace dump [-c][&lt;filename&gt;]</span></span></code></pre></div><ul><li><code>-c</code> : Not stop tracing before the output. Because dumping trace itself is a task activity and new trace data is added while output, the dump will never stop.</li><li><code>&lt;filename&gt;</code> : Specify the filename to save the trace result. If not specified, the trace result is displayed to console.</li></ul><h3 id="trace-mode" tabindex="-1">trace mode <a class="header-anchor" href="#trace-mode" aria-label="Permalink to &quot;trace mode&quot;">​</a></h3><p>Set the task trace mode options. The default value is given by the kernel configuration <code>CONFIG_SCHED_INSTRUMENTATION_FILTER_DEFAULT_MODE</code>.</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace mode [{+|-}{o|s|a|i}...]</span></span></code></pre></div><ul><li><code>+o</code> : Enable overwrite mode. The trace buffer is a ring buffer and it can overwrite old data if no free space is available in the buffer. Enables this behavior.</li><li><code>-o</code> : Disable overwrite mode. The new trace data will be disposed when the buffer is full. This is useful to keep the data of the beginning of the trace.</li><li><code>+s</code> : Enable system call trace. It records the event of enter/leave system call which is issued by the application. All system calls are recorded by default. <code>trace syscall</code> command can filter the system calls to be recorded.</li><li><code>-s</code> : Disable system call trace.</li><li><code>+a</code> : Enable recording the system call arguments. It records the arguments passed to the issued system call to the trace data.</li><li><code>-a</code> : Disable recording the system call arguments.</li><li><code>+i</code> : Enable interrupt trace. It records the event of enter/leave interrupt handler which occurred while tracing. All IRQs are recorded by default. <code>trace irq</code> command can filter the IRQs to be recorded.</li><li><code>-i</code> : Disable interrupt trace.</li></ul><p>If no command parameters are specified, display the current mode as the follows.</p><p><strong>Example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace mode</span></span>
<span class="line"><span>Task trace mode:</span></span>
<span class="line"><span> Trace                   : enabled</span></span>
<span class="line"><span> Overwrite               : on  (+o)</span></span>
<span class="line"><span> Syscall trace           : on  (+s)</span></span>
<span class="line"><span>  Filtered Syscalls      : 16</span></span>
<span class="line"><span> Syscall trace with args : on  (+a)</span></span>
<span class="line"><span> IRQ trace               : on  (+i)</span></span>
<span class="line"><span>  Filtered IRQs          : 2</span></span></code></pre></div><h3 id="trace-syscall" tabindex="-1">trace syscall <a class="header-anchor" href="#trace-syscall" aria-label="Permalink to &quot;trace syscall&quot;">​</a></h3><p>Configure the filter of the system call trace.</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace syscall [{+|-}&lt;syscallname&gt;...]</span></span></code></pre></div><ul><li><code>+&lt;syscallname&gt;</code> : Add the specified system call name to the filter. The execution of the filtered system call is not recorded into the trace data.</li><li><code>-&lt;syscallname&gt;</code> : Remove the specified system call name from the filter.</li></ul><p>Wildcard &quot;<code>*</code>&quot; can be used to specify the system call name. For example, &quot;<code>trace syscall +sem_*</code>&quot; filters the system calls begin with &quot;<code>sem_</code>&quot;, such as <code>sem_post()</code>, <code>sem_wait()</code>,...</p><p>If no command parameters are specified, display the current filter settings as the follows.</p><p><strong>Example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace syscall</span></span>
<span class="line"><span>Filtered Syscalls: 16</span></span>
<span class="line"><span>  getpid</span></span>
<span class="line"><span>  sem_destroy</span></span>
<span class="line"><span>  sem_post</span></span>
<span class="line"><span>  sem_timedwait</span></span>
<span class="line"><span>  sem_trywait</span></span>
<span class="line"><span>  sem_wait</span></span>
<span class="line"><span>  mq_close</span></span>
<span class="line"><span>  mq_getattr</span></span>
<span class="line"><span>  mq_notify</span></span>
<span class="line"><span>  mq_open</span></span>
<span class="line"><span>  mq_receive</span></span>
<span class="line"><span>  mq_send</span></span>
<span class="line"><span>  mq_setattr</span></span>
<span class="line"><span>  mq_timedreceive</span></span>
<span class="line"><span>  mq_timedsend</span></span>
<span class="line"><span>  mq_unlink</span></span></code></pre></div><h3 id="trace-irq" tabindex="-1">trace irq <a class="header-anchor" href="#trace-irq" aria-label="Permalink to &quot;trace irq&quot;">​</a></h3><p>Configure the filter of the interrupt trace.</p><p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>trace irq [{+|-}&lt;irqnum&gt;...]</span></span></code></pre></div><ul><li><code>+&lt;irqnum&gt;</code> : Add the specified IRQ number to the filter. The execution of the filtered IRQ handler is not recorded into the trace data.</li><li><code>-&lt;irqnum&gt;</code> : Remove the specified IRQ number from the filter.</li></ul><p>Wildcard &quot;<code>*</code>&quot; can be used to specify all IRQs.</p><p>If no command parameters are specified, display the current filter settings as the follows.</p><p><strong>Example:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; trace irq</span></span>
<span class="line"><span>Filtered IRQs: 2</span></span>
<span class="line"><span>  11</span></span>
<span class="line"><span>  15</span></span></code></pre></div>`,72)]))}const f=n(c,[["render",r]]);export{b as __pageData,f as default};
