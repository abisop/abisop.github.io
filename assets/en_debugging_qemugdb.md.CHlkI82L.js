import{_ as n,c as s,al as e,o as t}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"How to debug NuttX using QEMU and GDB","description":"","frontmatter":{},"headers":[],"relativePath":"en/debugging/qemugdb.md","filePath":"en/debugging/qemugdb.md"}'),o={name:"en/debugging/qemugdb.md"};function p(i,a,l,c,d,u){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="how-to-debug-nuttx-using-qemu-and-gdb" tabindex="-1">How to debug NuttX using QEMU and GDB <a class="header-anchor" href="#how-to-debug-nuttx-using-qemu-and-gdb" aria-label="Permalink to &quot;How to debug NuttX using QEMU and GDB&quot;">​</a></h1><p>This guide explains the steps needed to use QEMU and GDB to debug an ARM board (lm3s6965-ek), but it could be modified to work with other board or architecture supported by QEMU.</p><p>Start configuring and compiling the lm3s6965-ek board with qemu-flat profile.</p><h2 id="compiling" tabindex="-1">Compiling <a class="header-anchor" href="#compiling" aria-label="Permalink to &quot;Compiling&quot;">​</a></h2><ol><li><p>Configure the lm3s6965-ek</p><p>There is a sample configuration to use lm3s6965-ek on QEMU.</p><p>Just use <code>lm3s6965-ek:qemu-flat</code> board profile for this purpose.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> ./tools/configure.sh lm3s6965-ek:qemu-flat</span></span></code></pre></div></blockquote></li><li><p>Compile</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make -j</span></span></code></pre></div></blockquote></li></ol><h2 id="start-qemu" tabindex="-1">Start QEMU <a class="header-anchor" href="#start-qemu" aria-label="Permalink to &quot;Start QEMU&quot;">​</a></h2><ol><li><p>You need to start QEMU using the NuttX ELF file just create above:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> qemu-system-arm -M lm3s6965evb -device loader,file=nuttx -serial mon:stdio -nographic -s</span></span>
<span class="line"><span>Timer with period zero, disabling</span></span>
<span class="line"><span>ABCDF</span></span>
<span class="line"><span>telnetd [4:100]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NuttShell (NSH) NuttX-12.0.0</span></span>
<span class="line"><span>nsh&gt;</span></span></code></pre></div></blockquote></li></ol><h2 id="start-gdb-to-connect-to-qemu" tabindex="-1">Start GDB to connect to QEMU <a class="header-anchor" href="#start-gdb-to-connect-to-qemu" aria-label="Permalink to &quot;Start GDB to connect to QEMU&quot;">​</a></h2><blockquote><p>These steps show how to connect GDB to QEMU running NuttX:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> gdb-multiarch nuttx -ex &quot;source tools/pynuttx/gdbinit.py&quot; -ex &quot;target remote 127.0.0.1:1234&quot;</span></span>
<span class="line"><span>Reading symbols from nuttx...</span></span>
<span class="line"><span>Registering NuttX GDB commands from ~/nuttx/nuttx/tools/gdb/nuttxgdb</span></span>
<span class="line"><span>set pagination off</span></span>
<span class="line"><span>set python print-stack full</span></span>
<span class="line"><span>&quot;handle SIGUSR1 &quot;nostop&quot; &quot;pass&quot; &quot;noprint&quot;</span></span>
<span class="line"><span>Load macro: ~/nuttx/nuttx/b73e7dbb3d3bbd6ff2eb9be4e5f01d5e.json</span></span>
<span class="line"><span>readelf took 0.1 seconds</span></span>
<span class="line"><span>Parse macro took 0.1 seconds</span></span>
<span class="line"><span>Cache macro info to ~/nuttx/nuttx/b73e7dbb3d3bbd6ff2eb9be4e5f01d5e.json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if use thread command, please don&#39;t use &#39;continue&#39;, use &#39;c&#39; instead !!!</span></span>
<span class="line"><span>if use thread command, please don&#39;t use &#39;step&#39;, use &#39;s&#39; instead !!!</span></span>
<span class="line"><span>Build version:  &quot;86868a9e194-dirty Nov 26 2024 00:14:53&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Remote debugging using :1234</span></span>
<span class="line"><span>0x0000b78a in up_idle () at chip/common/tiva_idle.c:62</span></span>
<span class="line"><span>62      }</span></span>
<span class="line"><span>(gdb)</span></span></code></pre></div></blockquote></blockquote><ol><li><p>From (gdb) prompt you can run commands to inspect NuttX:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(gdb) info threads</span></span>
<span class="line"><span>Id   Thread                Info                                                                             Frame</span></span>
<span class="line"><span>*0   Thread 0x2000168c     (Name: Idle_Task, State: Running, Priority: 0, Stack: 1008)                      0xa45a up_idle() at chip/common/tiva_idle.c:62</span></span>
<span class="line"><span>1    Thread 0x20005270     (Name: hpwork, State: Waiting,Semaphore, Priority: 224, Stack: 1984)             0xa68c up_switch_context() at common/arm_switchcontext.c:95</span></span>
<span class="line"><span>2    Thread 0x20005e30     (Name: nsh_main, State: Waiting,Semaphore, Priority: 100, Stack: 2008)           0xa68c up_switch_context() at common/arm_switchcontext.c:95</span></span>
<span class="line"><span>3    Thread 0x20006d48     (Name: NTP_daemon, State: Waiting,Signal, Priority: 100, Stack: 1960)            0xa68c up_switch_context() at common/arm_switchcontext.c:95</span></span>
<span class="line"><span>4    Thread 0x20008b60     (Name: telnetd, State: Waiting,Semaphore, Priority: 100, Stack: 2016)            0xa68c up_switch_context() at common/arm_switchcontext.c:95</span></span>
<span class="line"><span>(gdb)</span></span></code></pre></div></blockquote></li></ol><p>As you can see QEMU and GDB are powerful tools to debug NuttX without using external board or expensive debugging hardware.</p>`,11)]))}const g=n(o,[["render",p]]);export{h as __pageData,g as default};
