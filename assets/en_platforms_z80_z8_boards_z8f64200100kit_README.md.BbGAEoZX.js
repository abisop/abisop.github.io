import{_ as t,c as o,al as i,o as n}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/z80/z8/boards/z8f64200100kit/README.md","filePath":"en/platforms/z80/z8/boards/z8f64200100kit/README.md"}'),a={name:"en/platforms/z80/z8/boards/z8f64200100kit/README.md"};function s(r,e,l,p,c,d){return n(),o("div",null,e[0]||(e[0]=[i(`<p>README.txt ^^^^^^^^^^</p><p>ZDS-II Compiler Versions ^^^^^^^^^^^^^^^^^^^^^^^^</p><p>4.10.1 NuttX builds successfully with the 4.10.1 compiler.</p><p>Version 4.9.5 This is the latest tool version listed on the ZiLOG site for the Z8F6403. However, it uses different compiler command line arguments.</p><p>Version 5.0.0</p><p>On November 28, 2012, all of the z8 configurations were converted to use 5.0.0, but have not been verified on a running target.</p><p>Paths were also updated that are specific to a 32-bit toolchain running on a 64 bit windows platform. Change to a different toolchain, you will need to modify the versioning in the Make.defs file; if you want to build on a different platform, you will need to change the path in the ZDS binaries in those that file and also in your PATH variable.</p><p>Other Versions If you use any version of ZDS-II other than 5.0.0 or if you install ZDS-II at any location other than the default location, you will have to modify the boards/z80/z8/z8f64200100kit/*/Make.defs file and also your PATH environment variable.</p><p>It has been a long time since the z8 port has been used. A lot has changed so it would most likely require a modest effort to get the compilation working again.</p><p>Configuration Subdirectories ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p><ul><li>src/ and include/ These directories contain common logic for all z8f64200100kit configurations.</li></ul><p>Variations on the basic z8f64200100kit configuration are maintained in subdirectories. To configure any specific configuration, do the following steps:</p><p>tools/configure.sh z8f64200100kit:<code>&lt;sub-directory&gt;</code> make</p><p>Where <code>&lt;sub-directory&gt;</code> is the specific board configuration that you wish to build. The following board-specific configurations are available:</p><ul><li><p>ostest This builds the examples/ostest application for execution from FLASH. See examples/README.txt for information about ostest.</p><p>NOTES:</p><ol><li><p>This configuration uses the mconf-based configuration tool. To change this configuration using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository.</p><p>b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>By default, this configuration assumes that you are using the Cygwin environment on Windows. An option is to use the native CMD.exe window build as described in the top-level README.txt file. To set up that configuration:</p><p>-CONFIG_WINDOWS_CYGWIN=y +CONFIG_WINDOWS_NATIVE=y</p><p>And after configuring, make sure that CONFIG_APPS_DIR uses the back slash character. For example:</p><p>CONFIG_APPS_DIR=&quot;..<code>\\apps</code>&quot;</p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- --&gt;</span></span></code></pre></div><pre><code>NOTES:

a. If you need to change the toolchain path used in Make.defs, you
   will need to use the short 8.3 filenames to avoid spaces.  On my
   PC, C:\\PROGRA~1\\ is is C:\\Program Files\\ and C:\\PROGRA~2\\ is
   C:\\Program Files (x86)\\
b. At present, the native Windows build fails at the final link stages.
   The failure is due to problems in arch/z80/src/nuttx.linkcmd that
   is autogenerated by arch/z80/src/Makefile.zdsii.  The basic problem
   is the spurious spaces and and carrirage returns are generated at
   the end of the lines after a line continuation (\\ ^M).  If these
   trailing bad characters are manually eliminated, then the build
   will succeed on the next try.
</code></pre></li></ul><p>ostest/README.txt ^^^^^^^^^^^^^^^^^</p><p>ostest.zfpproj is a simple ZDS-II project that will allow you to use the ZDS-II debugger. Before using, copy the following files from the toplevel directory:</p><p>nuttx.hex, nuttx.map, nuttx.lod</p><p>to this directory as:</p><p>ostest.hex, ostest.map, ostest.lod</p>`,20)]))}const f=t(a,[["render",s]]);export{h as __pageData,f as default};
