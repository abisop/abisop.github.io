import{_ as a,c as e,al as i,o as t}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"wamr Webassembly Micro Runtime","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/interpreters/wamr/index.md","filePath":"en/applications/interpreters/wamr/index.md"}'),n={name:"en/applications/interpreters/wamr/index.md"};function l(r,s,p,o,h,d){return t(),e("div",null,s[0]||(s[0]=[i(`<h1 id="wamr-webassembly-micro-runtime" tabindex="-1"><code>wamr</code> Webassembly Micro Runtime <a class="header-anchor" href="#wamr-webassembly-micro-runtime" aria-label="Permalink to &quot;\`wamr\` Webassembly Micro Runtime&quot;">​</a></h1><p>This guides explains how to try WAMR on NuttX.</p><h2 id="install-wasi-sdk" tabindex="-1">Install WASI SDK <a class="header-anchor" href="#install-wasi-sdk" aria-label="Permalink to &quot;Install WASI SDK&quot;">​</a></h2><p>We need to be able to build WASM programs. This can be done by installing the <code>wasi-sdk</code> as shown in the <a href="https://wamr.gitbook.io/document/basics/getting-started/host_prerequsites" target="_blank" rel="noreferrer">WAMR guide</a>.</p><p>Make sure the installation is reachable via <code>/opt/wasi-sdk</code> on your host, as this is expected by the build script of the WASM hello world sample below.</p><h2 id="building-nuttx" tabindex="-1">Building NuttX <a class="header-anchor" href="#building-nuttx" aria-label="Permalink to &quot;Building NuttX&quot;">​</a></h2><p>We use the <span class="title-ref">sim/wamr</span> config to build WAMR with NuttX. Note that at this writing, the that CMake scripts don&#39;t work for this configuration. For now, please use the makefile build instead:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cd nuttx</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tools/configure.sh sim/wamr</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> make -j4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ls -l nuttx</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-rwxrwxr-x 1 yf yf 4176376 Jun 10 08:11 nuttx</span></span></code></pre></div><p>This will generate a <code>nutxx</code> binary. Also a WASM sample is available in the folder <code>apps/interpreters/wamr/wamr/product-mini/app-samples/hello-world</code> folder. We build the sample as follows:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cd apps/interpreters/wamr/wamr/product-mini/app-samples/hello-world</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ./build.sh</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ls -l test.wasm</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-rwxrwxr-x 1 yf yf  413 Jun 10 08:18 test.wasm</span></span></code></pre></div><p>The <code>test.wasm</code> program should be accessible from NuttX later.</p><h2 id="try-wamr-in-nsh" tabindex="-1">Try WAMR in NSH <a class="header-anchor" href="#try-wamr-in-nsh" aria-label="Permalink to &quot;Try WAMR in NSH&quot;">​</a></h2><p>Copy the <code>test.wasm</code> to the folder where the <code>nuttx</code> program lives, then run <code>./nuttx</code> to kick off NuttX and run <code>iwasm /data/test.wasm</code> from NSH:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ./nuttx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NuttShell (NSH) NuttX-12.4.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nsh&gt; iwasm /data/test.wasm</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hello world!</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buf ptr: 0x1460</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buf: 1234</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nsh&gt;</span></span></code></pre></div>`,14)]))}const k=a(n,[["render",l]]);export{u as __pageData,k as default};
