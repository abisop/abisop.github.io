import{_ as t,c as o,al as i,o as n}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/str71x/boards/olimex-strp711/README.md","filePath":"en/platforms/arm/str71x/boards/olimex-strp711/README.md"}'),a={name:"en/platforms/arm/str71x/boards/olimex-strp711/README.md"};function r(l,e,s,p,c,u){return n(),o("div",null,e[0]||(e[0]=[i(`<p>README File for the Olimex STR-P711 NuttX Port ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p><p>Contents ^^^^^^^^</p><p>Olimex STR-P711 Features Power Supply GIO Usage Jumpers External Interrupts Development Environment GNU Toolchain Options NuttX buildroot Toolchain Linux OpenOCD with Wiggler JTAG Windows OpenOCD will Olimex JTAG MMC/SD Slot ENC28J60 Module Configurations STR71x-Specific Configuration Settings</p><p>Olimex STR-P711 ^^^^^^^^^^^^^^^ Features:</p><ul><li>MCU: STR711FR2T6 16/32 bit ARM7TDMI™ with 256K Bytes Program Flash, 64K Bytes RAM, USB 2.0, RTC, 12 bit ADC, 4x UARTs, 2x I2C,2x SPI, 5x 32bit TIMERS, 2x PWM, 2x CCR, WDT, up to 50MHz operation</li><li>Standard JTAG connector with ARM 2x10 pin layout for programming/debugging with ARM-JTAG</li><li>USB connector</li><li>Two channel RS232 interface and drivers</li><li>SD/MMC card connector</li><li>Two buttons</li><li>Trimpot connected to ADC</li><li>Two status LEDs</li><li>Buzzer</li><li>UEXT - 10 pin extension connector for Olimex addon peripherals like MP3, RF2.4Ghz, RFID etc. modules</li><li>2x SPI connectors</li><li>I2C connector</li><li>On board voltage regulator 3.3V with up to 800mA current</li><li>Single power supply: 6V AC or DC required, USB port can power the board</li><li>Power supply LED</li><li>Power supply filtering capacitor</li><li>RESET circuit</li><li>RESET button</li><li>4 MHz crystal oscillator</li><li>32768 Hz crystal and RTC</li></ul><p>Power Supply</p><p>6V AC or DC (or powered from USB port)</p><p>GIO with on-board connections (others available for prototyping):</p><p>SIGNAL DESCRIPTION PIN</p><hr><p>MISO1 BSPI0 to MMC/SD P0.4 MOSI1 &quot; &quot; &quot;&quot; &quot; &quot; P0.5 SCLK1 &quot; &quot; &quot;&quot; &quot; &quot; P0.6 SS1 &quot; &quot; &quot;&quot; &quot; &quot; P0.7 U0RX UART 0 P0.8 U0TX &quot; &quot; &quot; P0.9 U1RX UART 1 P0.10 U1TX &quot; &quot; &quot; P0.11 BUZZ Buzzer P0.13 WAKE-UP Button P0.15 AIN0 Potentiometer (AN_TR) P1.3 LED1 LED 1 P1.8 LED2 LED 2 P1.9 WP MMC/SD write protect P1.10 USBOP USB P1.11 USBON &quot; &quot; P1.12 BUT Button P1.13 CP MMC/SD card present P1.15</p><p>Jumpers STNBY Will pull pin 23 /STDBY low</p><p>External Interrupt (XTI) availability.</p><p>XTI TQFP64 LINE PIN SIGNAL * OLIMEX USAGE ---- ------ ------------------------- - ------------------------ 2 -- P2.8 (Not available in TQFP64) 3 -- P2.9 (Not available in TQFP64) 4 -- P2.10 (Not available in TQFP64) 5 25 P2.11 (Not available in TQFP64) 6 42 P1.11/CANRX USBOP (to USB connector) 7 47 P1.13/HCLK/I0.SCL CLK ?????????????? 8 48 P1.14/HRXD/I0.SDA BUT button (PL open, PU closed) 9 53 P0.1/S0.MOSI/U3.RX * SPI0-3 MOSI0 10 54 P0.2/S0.SCLK/I1.SCL * SPI0-5 SCLK0 11 61 P0.6/S1.SCLK * SPI1-5 SCLK1 (also to MMC slot) 12 63 P0.8/U0.RX/U0.TX U0.TX 13 1 P0.10/U1.RX/U1.TX/SC.DATA U1.RX 14 5 P0.13/U2.RX/T2.OCMPA BUZZ (to buzzer circult) 15 20 P0.15/WAKEUP WAKE-UP button (PL open, PU closed)</p><pre><code>                                     * Only these pins are available at a
                                       connector and are not dedicated to
                                       other board functions.
</code></pre><p>Development Environment ^^^^^^^^^^^^^^^^^^^^^^^</p><p>Either Linux or Cygwin on Windows can be used for the development environment. The source has been built only using the GNU toolchain (see below). Other toolchains will likely cause problems.</p><p>GNU Toolchain Options ^^^^^^^^^^^^^^^^^^^^^</p><p>The NuttX make system has been modified to support the following different toolchain options.</p><ol><li>The NuttX buildroot Toolchain (see below),</li><li>The ARM EABI GNU toolchain, or</li><li>The devkitARM GNU toolchain.</li></ol><p>All testing has been conducted using the NuttX buildroot toolchain. To use the CodeSourcery or devkitARM GNU toolchain, you simply need to build the system as follows:</p><pre><code> make                         # Will build for the NuttX buildroot toolchain
 make CROSSDEV=arm-eabi-      # Will build for the devkitARM toolchain
 make CROSSDEV=arm-none-eabi- # Will build for the ARM EABI GCC toolchain
 make CROSSDEV=arm-nuttx-elf- # Will build for the NuttX buildroot toolchain
</code></pre><p>Of course, hard coding this CROSS_COMPILE value in Make.defs file will save some repetitive typing.</p><p>NOTE: the CodeSourcery and devkitARM toolchains are Windows native toolchains. The NuttX buildroot toolchain is a Cygwin toolchain. There are several limitations to using a Windows based toolchain in a Cygwin environment. The three biggest are:</p><ol><li><p>The Windows toolchain cannot follow Cygwin paths. Path conversions are performed automatically in the Cygwin makefiles using the &#39;cygpath&#39; utility but you might easily find some new path problems. If so, check out &#39;cygpath -w&#39;</p></li><li><p>Windows toolchains cannot follow Cygwin symbolic links. Many symbolic links are used in NuttX (e.g., include/arch). The make system works around these problems for the Windows tools by copying directories instead of linking them. But this can also cause some confusion for you: For example, you may edit a file in a &quot;linked&quot; directory and find that your changes had no effect. That is because you are building the copy of the file in the &quot;fake&quot; symbolic directory. If you use a Windows toolchain, you should get in the habit of making like this:</p><p>make clean_context; make CROSSDEV=arm-none-eabi-</p><p>An alias in your .bashrc file might make that less painful.</p></li></ol><p>NOTE 1: The CodeSourcery toolchain (2009q1) may not work with default optimization level of -Os (See Make.defs). It will work with -O0, -O1, or -O2, but not with -Os.</p><p>NOTE 2: The devkitARM toolchain includes a version of MSYS make. Make sure that the paths to Cygwin&#39;s /bin and /usr/bin directories appear BEFORE the devkitARM path or will get the wrong version of make.</p><p>NuttX buildroot Toolchain ^^^^^^^^^^^^^^^^^^^^^^^^^</p><p>A GNU GCC-based toolchain is assumed. The PATH environment variable should be modified to point to the correct path to the ARM toolchain (if different from the default).</p><p>If you have no ARM toolchain, one can be downloaded from the NuttX Bitbucket download site (<a href="https://bitbucket.org/nuttx/buildroot/downloads/" target="_blank" rel="noreferrer">https://bitbucket.org/nuttx/buildroot/downloads/</a>).</p><ol><li><p>You must have already configured NuttX in <code>&lt;some-dir&gt;</code>nuttx.</p><p>tools/configure.sh olimex-strp711:<code>&lt;sub-dir&gt;</code></p></li><li><p>Download the latest buildroot package into <code>&lt;some-dir&gt;</code></p></li><li><p>unpack</p></li><li><p>cd <code>&lt;some-dir&gt;</code>/buildroot</p></li><li><p>cp boards/arm-defconfig .config or cp boards/arm7tdmi-defconfig-4.3.3 .config (Last tested with this toolchain)</p></li><li><p>make oldconfig</p></li><li><p>make</p></li><li><p>Make sure that the PATH variable includes the path to the newly built binaries.</p></li></ol><p>Linux OpenOCD with Wiggler JTAG ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p><p>For a debug environment, I am using OpenOCD with a Wiggler-clone JTAG interface. The following steps worked for me with a 20081028 OpenOCD snapshot.</p><p>GENERAL STEPS:</p><ol><li><p>Check out OpenOCD</p><p>svn checkout svn://svn.berlios.de/openocd/trunk openocd</p></li><li><p>Build OpenOCD</p></li></ol><p>Read the INSTALL file from the files you just downloaded. You probably just need to run:</p><pre><code>./bootstrap
</code></pre><p>Then configure OpenOCD using the configure script created by ./bootstrap.</p><pre><code>./configure --enable-parport
</code></pre><p>Build OpenOCD with:</p><pre><code>make
</code></pre><p>Install OpenOCD. Since we used the default configuration the code will be installed at /usr/local/bin/openocd. Other files will be installed at /usr/local/lib/openocd (configuration files, scripts, etc.) and /usr/local/share/info (online documentation accessible via &#39;info openocd&#39;). You need root privileges to do the following:</p><pre><code>make install.
</code></pre><ol start="3"><li>Setup</li></ol><p>OpenOCD reads its configuration from the file openocd.cfg in the current directory when started. You have two different options:</p><ul><li><p>Create a symbolic link named openocd.cfg to one of the configuration files in /usr/local/lib/openocd, or</p></li><li><p>Use a custom configuration file specified with the &#39;-f &lt;conf.file&gt;&#39; command line switch opeion when starting OpenOCD.</p></li></ul><p>For the STR-P711, I have included bash scripts in the scripts sub-directory.</p><ol start="4"><li>Running OpenOCD</li></ol><p>Make sure the ARM7TDMI board is powered and the JTAG cable is connected</p><p>Run &#39;src/openocd -d&#39; (might be required to be root) and check for any errors reported. The &#39;-d&#39; option enables debugging info.</p><ol start="5"><li>Telnet interface</li></ol><p>telnet into port 4444 to get a command interface: &#39;telnet localhost 4444&#39;</p><ol start="6"><li>GDB</li></ol><p>start arm-nuttx-elf-gdb type &#39;file &lt;executable.elf&gt;&#39; to load the executable type &#39;set debug remote 1&#39; to enable tracing of gdb protocol (if required) type &#39;target remote localhost:3333&#39; to connect to the target The same commands from the telnet interface can now be accessed through the &#39;monitor&#39; command, e.g. &#39;monitor help&#39;</p><p>Windows OpenOCD will Olimex JTAG ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p><p>I have been using the Olimex ARM-USB-OCD JTAG debugger with the STR-P711 (<a href="http://www.olimex.com" target="_blank" rel="noreferrer">http://www.olimex.com</a>). The OpenOCD configuration file is here: scripts/oocd_ft2xx.cfg. There is also a script on the scripts/ directory that I used to start the OpenOCD daemon on my system called oocd.sh. That script would probably require some modifications to work in another environment:</p><pre><code>- possibly the value of OPENOCD_PATH
- If you are working under Linux you will need to change any
  occurrences of \`cygpath -w blablabla\` to just blablabla
</code></pre><p>If you have $PATH and other environment variables set up, then you should be able to start the OpenOCD daemon like:</p><pre><code>oocd.sh
</code></pre><p>To use the Windows Olimex USB JTAG (or &#39;oocd.sh pp&#39; to use the Wriggler JTAG) where it is assumed that you are executing oocd.sh from the top level level NuttX directory.</p><p>Once the OpenOCD daemon has been started, you can connect to it via GDB using the following GDB command:</p><p>arm-nuttx-elf-gdb (gdb) target remote localhost:3333</p><p>And you can load the NuttX ELF file into FLASH:</p><p>(gdb) load nuttx</p><p>(There are also some files in the scripts/ directory that I used to get OpenOCD working with a Wriggler clone... I never got that stuff working).</p><p>MMC/SD Slot ^^^^^^^^^^^</p><p>STR-P711 PIN MMC/SD USAGE PIN CONFIGURATION</p><hr><p>P0.7/S1.SS 1 CD/DAT3/CS P.07 output P0.5/S1.MOSI 2 CMD/DI MOSI1 --- 3 VSS1 --- --- 4 VDD --- P0.6/S1.SCLK 5 CLK/SCLK SLCK1 --- 6 VSS2 --- P0.4/S1.MISO 7 DAT0/D0 MISO1 --- 8 DAT1/RES (Pulled up) --- 9 DAT2/RES (Pulled up)</p><p>P1.10/USBCLK 10/14 WP P1.10 input P1.15/HTXD 13/15 CP P1.15 input</p><p>Use of SPI1 doesn&#39;t conflict with anything. WP conflicts USB; CP conflicts with NTXD.</p><p>ENC28J60 Module ^^^^^^^^^^^^^^^</p><p>The ENC28J60 module does not come on the Olimex-STR-P711, but this describes how I have connected it. NOTE that the ENC28J60 requires an external interrupt (XTI) pin. The only easily accessible XTI pins are on SPI0/1 so you can&#39;t have both SPI0 and 1 together with this configuration.</p><p>Module CON5 QFN ENC2860 Description</p><hr><p>1 J8-1 NET CS 5 ~CS Chip select input pin for SPI interface (active low) 2 2 SCK 4 SCK Clock in pin for SPI interface 3 3 MOSI 3 SI Data in pin for SPI interface 4 4 MISO 2 SO Data out pin for SPI interface 5 5 GND -- --- --- 10 J9-1 3V3 -- --- --- 9 2 WOL 1 ~WOL Unicast WOL filter 8 3 NET INT 28 ~INT Interrupt output pin (active low) 7 4 CLKOUT 27 CLKOUT Programmable clock output pin 6 5 NET RST 6 ~RESET Active-low device Reset input</p><p>For the Olimex STR-P711, the ENC28J60 module is placed on SPI0 and uses P0.3 for CS, P0.6 for an interrupt, and P0.4 as a reset:</p><p>Module CON5 Olimex STR-P711 Connection</p><hr><p>1 J8-1 NET CS SPI0-2 P0.3 output P0.3/S0.SS/I1.SDA 2 2 SCK SPI0-5 SCLK0 P0.2/S0.SCLK/I1.SCL 3 3 MOSI SPI0-3 MOSI0 P0.0/S0.MOSI/U3.RX 4 4 MISO SPI0-4 MISO0 P0.1/S0.MISO/U3.TX 5 5 GND SPI0-1 GND 10 J9-1 3V3 SPI0-6 3.3V 9 2 WOL NC 8 3 NET INT SPI1-5 P0.6 XTI 11 P0.6/S1.SCLK 7 4 CLKOUT NC 6 5 NET RST SPI1-4 P0.4 output P0.4/S1.MISO</p><p>UART3, I2C cannot be used with SPI0. The GPIOs selected for the ENC28J60 interrupt conflict with TIM1.</p><p>NOTE: As of this writing, the ENC28J60 does not function on the board. The board just locks up when the ENC29J60 is powered. Most likely, in sufficient current is provided via USB to power both the board and the ENC28J60 (And I don&#39;t have the correct wall wart to power the the board).</p><h2 id="common-configuration-notes" tabindex="-1">Common Configuration Notes: <a class="header-anchor" href="#common-configuration-notes" aria-label="Permalink to &quot;Common Configuration Notes:&quot;">​</a></h2><ol><li><p>Each Olimex STRP711 configuration is maintained in a sub-directory and can be selected as follow:</p><p>tools/configure.sh olimex-strp711:<code>&lt;subdir&gt;</code></p><p>Where <code>&lt;subdir&gt;</code> is one of the configuration sub-directories described in the following paragraph.</p></li><li><p>These configurations use the mconf-based configuration tool. To change a configurations using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository.</p><p>b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>By default, all configurations assume the NuttX Buildroot toolchain under Linux (should work under Windows with Cygwin as well). This is easily reconfigured:</p><p>CONFIG_HOST_LINUX=y CONFIG_ARM_TOOLCHAIN_BUILDROOT=y</p></li></ol><h2 id="configuration-sub-directories" tabindex="-1">Configuration Sub-Directories: <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration Sub-Directories:&quot;">​</a></h2><p>nettest: This configuration directory may be used to enable networking using the an Microchip ENC28J60 SPI Ethernet module (see above for connection to STR-P711).</p><p>nsh: Configures the NuttShell (nsh) located at examples/nsh. The Configuration enables both the serial and telnetd NSH interfaces.</p><h2 id="str71x-specific-configuration-settings" tabindex="-1">STR71x-Specific Configuration Settings <a class="header-anchor" href="#str71x-specific-configuration-settings" aria-label="Permalink to &quot;STR71x-Specific Configuration Settings&quot;">​</a></h2><p>CONFIG_STR71X_I2C0, CONFIG_STR71X_I2C1, CONFIG_STR71X_UART0, CONFIG_STR71X_UART1, CONFIG_STR71X_UART2, CONFIG_STR71X_UART3, CONFIG_STR71X_USB, CONFIG_STR71X_CAN, CONFIG_STR71X_BSPI0, CONFIG_STR71X_BSPI1, CONFIG_STR71X_HDLC, CONFIG_STR71X_XTI, CONFIG_STR71X_GPIO0, CONFIG_STR71X_GPIO1, CONFIG_STR71X_GPIO2, CONFIG_STR71X_ADC12, CONFIG_STR71X_CKOUT, CONFIG_STR71X_TIM1, CONFIG_STR71X_TIM2, CONFIG_STR71X_TIM3, and CONFIG_STR71X_RTC Select peripherals to initialize (Timer0 and EIC are always initialized) CONFIG_UART_PRI, STR71X_BSPI_PRI, CONFIG_TIM_PRI, CONFIG_USB_PRI Can be defined to set the priority of NuttX managed devices. Default is</p><ol><li>CONFIG_STR71X_BANK0, CONFIG_STR71X_BANK1, CONFIG_STR71X_BANK2, and CONFIG_STR71X_BANK3 Enable initialize of external memory banks 0-3. CONFIG_STR71X_BANK0_SIZE, CONFIG_STR71X_BANK1_SIZE, CONFIG_STR71X_BANK2_SIZE, and CONFIG_STR71X_BANK3_SIZE If a particular external memory bank is configured, then its width must be provided. 8 and 16 (bits) are the only valid options. CONFIG_STR71X_BANK0_WAITSTATES, CONFIG_STR71X_BANK1_WAITSTATES, CONFIG_STR71X_BANK2_WAITSTATES, and CONFIG_STR71X_BANK3_WAITSTATES If a particular external memory bank is configured, then the number of waistates for the bank must also be provided. Valid options are {0, .., 15} CONFIG_STR71X_BIGEXTMEM The default is to provide 20 bits of address for all external memory regions. If any memory region is larger than 1Mb, then this option should be selected. In this case, 24 bits of addressing will be used</li></ol><p>CONFIG_UARTn_SERIAL_CONSOLE - selects the UARTn for the console and ttys0 (default is the UART0). CONFIG_UARTn_RXBUFSIZE - Characters are buffered as received. This specific the size of the receive buffer CONFIG_UARTn_TXBUFSIZE - Characters are buffered before being sent. This specific the size of the transmit buffer CONFIG_UARTn_BAUD - The configure BAUD of the UART. Must be CONFIG_UARTn_BITS - The number of bits. Must be either 7 or 8. CONFIG_UARTn_PARTIY - 0=no parity, 1=odd parity, 2=even parity, 3=mark 1, 4=space 0 CONFIG_UARTn_2STOP - Two stop bits</p>`,91)]))}const S=t(a,[["render",r]]);export{h as __pageData,S as default};
