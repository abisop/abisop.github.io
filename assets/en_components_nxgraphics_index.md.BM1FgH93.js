import{_ as n,c as a,al as i,j as e,a as o,o as s}from"./chunks/framework.NFAqBSgQ.js";const r="/assets/NuttXScreenShot.BCTGFBwG.jpg",d="/assets/NXOrganization.BbClU7kQ.png",b=JSON.parse('{"title":"NX Graphics Subsystem","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/nxgraphics/index.md","filePath":"en/components/nxgraphics/index.md"}'),l={name:"en/components/nxgraphics/index.md"};function c(h,t,p,u,m,f){return s(),a("div",null,t[0]||(t[0]=[i('<h1 id="nx-graphics-subsystem" tabindex="-1">NX Graphics Subsystem <a class="header-anchor" href="#nx-graphics-subsystem" aria-label="Permalink to &quot;NX Graphics Subsystem&quot;">​</a></h1><p>This document describes the tiny graphics support included in NuttX. It includes an overview description of that graphics support, detailed descriptions of the NuttX graphics APIs, and discussion of code organization, and OS configuration options.</p><p><img src="'+r+`" alt="Figure 1. This screenshot shows the final frame for the NuttX
example at  running on the simulated, Linux x86
platform with simulated framebuffer output to an X window. This picture
shows to framed window with (blank) toolbars. Each window has displayed
text as received from the NX keyboard interface The second window has
just been raised to the top of the
display." class="align-center"></p><h2 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to &quot;Objectives&quot;">​</a></h2><p>The objective of this development was to provide a tiny windowing system in the spirit of X, but greatly scaled down and appropriate for most resource-limited embedded environments. The current NX implementation supports the general following, high-level features:</p><ul><li><strong>Virtual Vertical Graphics Space</strong>. Windows that reside in a virtual, <em>vertical</em> space so that it makes sense to talk about one window being on top of another and obscuring the window below it.</li><li><strong>Client/Server Model</strong>. A standard client server/model was adopted. NX may be considered a server and other logic that presents the windows are NX clients.</li><li><strong>Multi-User Support</strong>. NX includes <em>front-end</em> logic to support a separate NX server thread that can serve multiple NX client threads. The NX is a server thread/daemon the serializes graphics operations from multiple clients.</li><li><strong>Minimal Graphics Toolset</strong>. The actual implementation of the graphics operations is performed by common, <em>back-end</em> logic. This back-end supports only a primitive set of graphic and rendering operations.</li><li><strong>Device Interface</strong>. NX supports any graphics device either of two device interfaces: <ul><li>Any device with random access video memory using the NuttX framebuffer driver interface (see <code>include/nuttx/video/fb.h</code>).</li><li>Any LCD-like device than can accept raster line <em>runs</em> through a parallel or serial interface (see <code>include/nuttx/lcd/lcd.h</code>). By default, NX is configured to use the frame buffer driver unless <code>CONFIG_NX_LCDDRIVER</code> is defined =y in your NuttX configuration file.</li></ul></li><li><strong>Transparent to NX Client</strong>. The window client on &quot;sees&quot; the sub-window that is operates in and does not need to be concerned with the virtual, vertical space (other that to respond to <em>redraw</em> requests from NX when needed).</li><li><strong>Framed Windows and Toolbars</strong>. NX also adds the capability to support windows with frames and toolbars on top of the basic windowing support. These are windows such as those shown in the <a href="#screenshot">screenshot</a> above. These framed windows sub-divide one one window into three relatively independent subwindows: A frame, the contained window and an (optional) toolbar window.</li><li><strong>Mouse Support</strong>. NX provides support for a mouse or other X/Y pointing devices. APIs are provided to allow external devices to give X/Y position information and mouse button presses to NX. NX will then provide the mouse input to the relevant window clients via callbacks. Client windows only receive the mouse input callback if the mouse is positioned over a visible portion of the client window; X/Y position is provided to the client in the relative coordinate system of the client window.</li><li><strong>Keyboard input</strong>. NX also supports keyboard/keypad devices. APIs are provided to allow external devices to give keypad information to NX. NX will then provide the mouse input to the top window on the display (the window that has the <em>focus</em>) via a callback function.</li></ul><h2 id="organization" tabindex="-1">Organization <a class="header-anchor" href="#organization" aria-label="Permalink to &quot;Organization&quot;">​</a></h2><p>NX is organized into 6 (and perhaps someday 7 or 8) logical modules. These logical modules also correspond to the directory organization. That NuttX directory organization is discussed in <a href="#grapicsdirs">Appendix B</a> of this document. The logic modules are discussed in the following sub-paragraphs.</p><p><img src="`+d+'" alt="" class="align-center"></p><h3 id="nx-graphics-library-nxgl" tabindex="-1">NX Graphics Library (<code>NXGL</code>) <a class="header-anchor" href="#nx-graphics-library-nxgl" aria-label="Permalink to &quot;NX Graphics Library (`NXGL`)&quot;">​</a></h3><p>NXGLIB is a standalone library that contains low-level graphics utilities and direct framebuffer or LCD rendering logic. NX is built on top NXGLIB.</p><h3 id="nx-nxsu-and-nxmu" tabindex="-1">NX (<code>NXSU</code> and <code>NXMU</code>) <a class="header-anchor" href="#nx-nxsu-and-nxmu" aria-label="Permalink to &quot;NX (`NXSU` and `NXMU`)&quot;">​</a></h3><p>NX is the tiny NuttX windowing system for raw windows (i.e., simple regions of graphics memory). NX includes a small-footprint, multi-user implementation (NXMU as described below). NX can be used without NxWidgets and without NXTOOLKIT for raw window displays.</p><p>^1^NXMU and NXSU are interchangeable other than (1) certain start-up and initialization APIs (as described below), and (2) timing. With NXSU, NX APIs execute immediately; with NXMU, NX APIs defer and serialize the operations and, hence, introduce different timing and potential race conditions that you would not experience with NXSU.</p><p><strong>NXNULL?</strong> At one time, I also envisioned a <em>NULL</em> front-end that did not support windowing at all but, rather, simply provided the entire framebuffer or LCD memory as one dumb window. This has the advantage that the same NX APIs can be used on the one dumb window as for the other NX windows. This would be in the NuttX spirit of scalability.</p><p>However, the same end result can be obtained by using the <code>`nx_requestbkgd()</code> &lt;#nxrequestbkgd&gt;`__ API. It still may be possible to reduce the footprint in this usage case by developing and even thinner NXNULL front-end. That is a possible future development.</p><h3 id="nx-tool-kit-nxtk" tabindex="-1">NX Tool Kit (<code>NXTK</code>) <a class="header-anchor" href="#nx-tool-kit-nxtk" aria-label="Permalink to &quot;NX Tool Kit (`NXTK`)&quot;">​</a></h3><p>NXTK is a s set of C graphics tools that provide higher-level window drawing operations. This is the module where the framed windows and toolbar logic is implemented. NXTK is built on top of NX and does not depend on NxWidgets.</p><h3 id="nx-fonts-support-nxfonts" tabindex="-1">NX Fonts Support (<code>NXFONTS</code>) <a class="header-anchor" href="#nx-fonts-support-nxfonts" aria-label="Permalink to &quot;NX Fonts Support (`NXFONTS`)&quot;">​</a></h3><p>A set of C graphics tools for present (bitmap) font images. The font implementation is at a very low level or graphics operation, comparable to the logic in NXGLIB. NXFONTS does not depend on any NX module other than some utilities and types from NXGLIB.</p><h3 id="nx-widgets-nxwidgets" tabindex="-1">NX Widgets (<code>NxWidgets</code>) <a class="header-anchor" href="#nx-widgets-nxwidgets" aria-label="Permalink to &quot;NX Widgets (`NxWidgets`)&quot;">​</a></h3>',21),e("p",null,[e("code",{class:"interpreted-text",role:"ref"},"NxWidgets <nxwidgets>"),o(' is a higher level, C++, object-oriented library for object-oriented access to graphical "widgets." NxWidgets is provided as a separate library in the '),e("code",null,"apps/"),o(" repository NxWidgets is built on top of the core NuttX graphics subsystem, but is part of the application space rather than part of the core OS graphics subsystems.")],-1),i(`<h3 id="terminal-driver-nxterm" tabindex="-1">Terminal Driver (<code>NxTerm</code>) <a class="header-anchor" href="#terminal-driver-nxterm" aria-label="Permalink to &quot;Terminal Driver (\`NxTerm\`)&quot;">​</a></h3><p>NxTerm is a write-only character device (not shown) that is built on top of an NX window. This character device can be used to provide <code>stdout</code> and <code>stderr</code> and, hence, can provide the output side of NuttX console. ).</p><h2 id="nx-header-files" tabindex="-1">NX Header Files <a class="header-anchor" href="#nx-header-files" aria-label="Permalink to &quot;NX Header Files&quot;">​</a></h2><p><code>include/nuttx/nx/nxglib.h</code></p><p>: Describes the NXGLIB C interfaces</p><p><code>include/nuttx/nx/nx.h</code></p><p>: Describes the NX C interfaces</p><p><code>include/nutt/nxtk.h</code></p><p>: Describe the NXTOOLKIT C interfaces</p><p><code>include/nutt/nxfont.h</code></p><p>: Describe sthe NXFONT C interfaces</p><pre><code>nxgl.rst nx.rst nxtk.rst nxfonts.rst nxcursor.rst
nxwm\\_threading.rst framebuffer\\_char\\_driver.rst sample.rst
appendix.rst
</code></pre>`,12)]))}const w=n(l,[["render",c]]);export{b as __pageData,w as default};
