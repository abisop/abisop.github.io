import{_ as o,c,al as a,j as e,a as r,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Touchscreen Device Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/touchscreen.md","filePath":"en/components/drivers/character/touchscreen.md"}'),n={name:"en/components/drivers/character/touchscreen.md"};function s(l,t,d,h,u,p){return i(),c("div",null,t[0]||(t[0]=[a('<h1 id="touchscreen-device-drivers" tabindex="-1">Touchscreen Device Drivers <a class="header-anchor" href="#touchscreen-device-drivers" aria-label="Permalink to &quot;Touchscreen Device Drivers&quot;">​</a></h1><p>NuttX supports a two-part touchscreen driver architecture.</p><ol><li>An &quot;upper half&quot;, generic driver that provides the common touchscreen interface to application level code, and</li><li>A &quot;lower half&quot;, platform-specific driver that implements the low-level touchscreen controls to implement the touchscreen functionality.</li></ol><p>Files supporting the touchscreen controller (TSC) driver can be found in the following locations:</p><ul><li><strong>Interface Definition</strong>. The header files for NuttX touchscreen drivers reside in the <code>include/nuttx/include/input</code> directory. The interface between the touchscreen controller &quot;upper half&quot; and &quot;lower half&quot; drivers are <em>not</em> common, but vary from controller-to-controller. Because of this, each touchscreen driver has its own unique header file that describes the &quot;upper half&quot;/&quot;lower half&quot; interface in that directory. The application level interface to each touchscreen driver, on the other hand, <em>is</em> the same for each touchscreen driver and is described <code>include/nuttx/include/input/touchscreen.h</code>. The touchscreen driver uses a standard character driver framework but read operations return specially formatted data.</li><li><strong>&quot;Upper Half&quot; Driver</strong>. The controller-specific, &quot;upper half&quot; touchscreen drivers reside in the directory <code>drivers/input</code>.</li><li><strong>&quot;Lower Half&quot; Drivers</strong>. Platform-specific touchscreen drivers reside in either: (1) The <code>arch/&lt;architecture&gt;/src/&lt;hardware&gt;</code> directory for the processor architectures that have build in touchscreen controllers or (2) the <code>boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/src/</code> directory for boards that use an external touchscreen controller chip.</li></ul><h2 id="application-programming-interface" tabindex="-1">Application Programming Interface <a class="header-anchor" href="#application-programming-interface" aria-label="Permalink to &quot;Application Programming Interface&quot;">​</a></h2><p>The first thing to be done in order to use the touchscreen driver from an application is to include the correct header filer. It contains the Application Programming Interface to the driver. To do so, include</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;nuttx/input/touchscreen.h&gt;</span></span></code></pre></div><p>Touchscreen driver is registered as a POSIX character device file into <code>/dev</code> namespace. It is necessary to open the device to get a file descriptor for further operations. This can be done with standard POSIX <code>open()</code> call.</p><p>The driver is accessed through <code>read</code>, <code>write</code>, <code>poll</code> and <code>ioctl</code> interface, Following <code>ioctl</code> commands are available:</p>',10),e("blockquote",null,[e("ul",null,[e("li",null,[r(":c"),e("code",{class:"interpreted-text",role:"macro"},"TSIOC_GRAB")])])],-1),e("p",null,[r("This command let the current handle has the device grabbed. When a handle grabs a device it becomes sole recipient for all touchscreen events coming from the device. An argument is an "),e("code",null,"int32_t"),r(" variable to enable or disable the grab.")],-1)]))}const v=o(n,[["render",s]]);export{m as __pageData,v as default};
