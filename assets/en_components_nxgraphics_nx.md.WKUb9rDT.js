import{_ as o,c as i,al as a,j as e,a as t,o as s}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"NX","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/nxgraphics/nx.md","filePath":"en/components/nxgraphics/nx.md"}'),r={name:"en/components/nxgraphics/nx.md"};function l(d,n,c,p,h,u){return s(),i("div",null,n[0]||(n[0]=[a('<h1 id="nx" tabindex="-1">NX <a class="header-anchor" href="#nx" aria-label="Permalink to &quot;NX&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>NX provides a tiny windowing system in the spirit of X, but greatly scaled down and appropriate for most resource-limited embedded environments. The current NX implementation supports the general following, high-level features:</p><ul><li><strong>Virtual Vertical Graphics Space</strong> Windows that reside in a virtual, vertical space so that it makes sense to talk about one window being on top of another and obscuring the window below it.</li><li><strong>Client/Server Model</strong> A standard client server/model was adopted. NX may be considered a server and other logic that presents the windows are NX clients.</li><li><strong>Multi-User Support</strong> NX includes front-end logic to an NX server daemon that can serve multiple NX client threads. The NX sever thread/daemon serializes graphics operations from multiple clients.</li><li><strong>Minimal Graphics Toolset</strong> The actual implementation of the graphics operations is performed by common, back-end logic. This back-end supports only a primitive set of graphic and rendering operations.</li><li><strong>Device Interface</strong> NX supports any graphics device either of two device interfaces: <ol><li>Any device with random access video memory using the NuttX framebuffer driver interface (see include/nuttx/video/fb.h).</li><li>Any LCD-like device than can accept raster line runs through a parallel or serial interface (see include/nuttx/lcd/lcd.h). By default, NX is configured to use the frame buffer driver unless CONFIG_NX_LCDDRIVER is defined =y in your NuttX configuration file.</li></ol></li><li><strong>Transparent to NX Client</strong> The window client on &quot;sees&quot; the sub-window that is operates in and does not need to be concerned with the virtual, vertical space (other that to respond to redraw requests from NX when needed).</li><li><strong>Framed Windows and Toolbars</strong> NX also adds the capability to support windows with frames and toolbars on top of the basic windowing support. These are windows such as those shown in the screenshot above. These framed windows sub-divide one one window into three relatively independent subwindows: A frame, the contained window and an (optional) toolbar window.</li><li><strong>Mouse Support</strong> NX provides support for a mouse or other X/Y pointing devices. APIs are provided to allow external devices to give X/Y position information and mouse button presses to NX. NX will then provide the mouse input to the relevant window clients via callbacks. Client windows only receive the mouse input callback if the mouse is positioned over a visible portion of the client window; X/Y position is provided to the client in the relative coordinate system of the client window.</li><li><strong>Keyboard input</strong> NX also supports keyboard/keypad devices. APIs are provided to allow external devices to give keypad information to NX. NX will then provide the mouse input to the top window on the display (the window that has the focus) via a callback function.</li></ul><h2 id="pre-processor-definitions" tabindex="-1">Pre-Processor Definitions <a class="header-anchor" href="#pre-processor-definitions" aria-label="Permalink to &quot;Pre-Processor Definitions&quot;">​</a></h2>',5),e("p",null,[t("The default server message queue name used by the :c"),e("code",{class:"interpreted-text",role:"macro"},"nx_run"),t(" macro:")],-1),a(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define NX_DEFAULT_SERVER_MQNAME &quot;/dev/nxs&quot;</span></span></code></pre></div><p>Mouse button bits:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define NX_MOUSE_NOBUTTONS    0x00</span></span>
<span class="line"><span>#define NX_MOUSE_LEFTBUTTON   0x01</span></span>
<span class="line"><span>#define NX_MOUSE_CENTERBUTTON 0x02</span></span>
<span class="line"><span>#define NX_MOUSE_RIGHTBUTTON  0x04</span></span></code></pre></div><h2 id="nx-types" tabindex="-1">NX Types <a class="header-anchor" href="#nx-types" aria-label="Permalink to &quot;NX Types&quot;">​</a></h2><p>The interface to the NX server is managed using a opaque handle:</p><p>The interface to a specific window is managed using an opaque handle:</p>`,6),e("p",null,[t("These define callbacks that must be provided to :c"),e("code",{class:"interpreted-text",role:"func"},"nx_openwindow"),t(". These callbacks will be invoked as part of the processing performed by :c"),e("code",{class:"interpreted-text",role:"func"},"nx_eventhandler"),t(".")],-1),e("h2",{id:"starting-the-nx-server",tabindex:"-1"},[t("Starting the NX Server "),e("a",{class:"header-anchor",href:"#starting-the-nx-server","aria-label":'Permalink to "Starting the NX Server"'},"​")],-1),e("p",null,[t("The "),e("em",null,"NX Server"),t(" is a kernel daemon that receives and serializes graphic commands. Before you can use the NX graphics system, you must first start this daemon. There are two ways that this can be done:")],-1),e("ol",null,[e("li",null,[e("p",null,[t("The NX server may be started in your board startup logic by simply calling the function "),e("code",null,"nxmu_start()"),t(". The board startup logic usually resides the the "),e("code",null,"boards/arch/chip/board/src"),t(" directory. The board startup logic can run automatically during the early system if "),e("code",null,"CONFIG_BOARD_LATE_INITIALIZE"),t(" is defined in the configuration. Or, the board startup logic can execute under control of the application by calling :c"),e("code",{class:"interpreted-text",role:"func"},"boardctl"),t(" as:")]),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"boardctl(BOARDIOC_INIT, arg)")])])])]),e("p",null,[t("The board initialization logic will run in either case and the simple call to "),e("code",null,"nxmu_start()"),t(" will start the NX server.")])]),e("li",null,[e("p",null,"The NX server may also be started later by the application via"),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"boardctl(BOARDIOC_NX_START, arg)")])])])])])],-1),e("h2",{id:"nx-server-callbacks",tabindex:"-1"},[t("NX Server Callbacks "),e("a",{class:"header-anchor",href:"#nx-server-callbacks","aria-label":'Permalink to "NX Server Callbacks"'},"​")],-1),e("p",null,"Set the color of the background.",-1),e("p",null,"param handle",-1),e("p",null,[t(": The handle created by :c"),e("code",null,"nx_openwindow"),t('{.interpreted-text role="func"} or :c'),e("code",{class:"interpreted-text",role:"func"},"nx_requestbkgd")],-1),a("<p>param color</p><p>: The color to use in the background</p><p>return</p><p>: <code>OK</code> on success; <code>ERROR</code> on failure with <code>errno</code> set appropriately</p><p>Move a rectangular region within the window.</p><p>param hwnd</p>",6),e("p",null,[t(": The handle returned by :c"),e("code",null,"nx_openwindow"),t('{.interpreted-text role="func"} or :c'),e("code",{class:"interpreted-text",role:"func"},"nx_requestbkgd"),t(" that specifies the window within which the move is to be done")],-1),a("<p>param rect</p><p>: Describes the (source) rectangular region to move</p><p>param offset</p><p>: The offset to move the region</p><p>return</p><p>: <code>OK</code> on success; <code>ERROR</code> on failure with <code>errno</code> set appropriately</p>",6)]))}const v=o(r,[["render",l]]);export{m as __pageData,v as default};
