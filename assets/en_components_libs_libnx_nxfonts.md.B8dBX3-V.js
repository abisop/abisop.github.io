import{_ as s,c as e,al as a,o as t}from"./chunks/framework.NFAqBSgQ.js";const r=JSON.parse('{"title":"nxfont","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/libs/libnx/nxfonts.md","filePath":"en/components/libs/libnx/nxfonts.md"}'),o={name:"en/components/libs/libnx/nxfonts.md"};function p(i,n,l,c,d,f){return t(),e("div",null,n[0]||(n[0]=[a(`<h1 id="nxfont" tabindex="-1">nxfont <a class="header-anchor" href="#nxfont" aria-label="Permalink to &quot;nxfont&quot;">​</a></h1><p>This directory contains font support for NuttX. The contents of this directory are only build if CONFIG_NXFONTS is defined in the NuttX configuration file.</p><h2 id="installing-new-fonts" tabindex="-1">Installing New Fonts <a class="header-anchor" href="#installing-new-fonts" aria-label="Permalink to &quot;Installing New Fonts&quot;">​</a></h2><p>There is a tool called bdf-converter in the directory tools/. The bdf-converter program be used to convert fonts in Bitmap Distribution Format (BDF) into fonts that can be used in the NX graphics system.</p><p>Below are general instructions for creating and installing a new font in the NX graphic system:</p><ol><li>Locate a font in BDF format,</li><li>Use the bdf-converter program to convert the BDF font to the NuttX font format. This will result in a C header file containing definitions. That header file should be installed at, for example, <code>graphics/nxfonts/nxfonts_myfont.h</code>.</li></ol><p>Create a new NuttX configuration variable. For example, suppose you define the following variable: CONFIG_NXFONT_MYFONT. Then you would need to:</p><ol><li>Define <code>CONFIG_NXFONT_MYFONT=y</code> in your NuttX configuration file.</li></ol><p>A font ID number has to be assigned for each new font. The font ID is defined in the file <code>include/nuttx/nx/nxfonts.h</code>. Those definitions have to be extended to support your new font. Look at how the font ID enabled by <code>CONFIG_NXFONT_SANS23X27</code> is defined and add an ID for your new font in a similar fashion:</p><ol start="3"><li><p><code>include/nuttx/nx/nxfonts.h</code> Add you new font as a possible system default font:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if defined(CONFIG_NXFONT_SANS23X27)</span></span>
<span class="line"><span># define NXFONT_DEFAULT FONTID_SANS23X27</span></span>
<span class="line"><span>#elif defined(CONFIG_NXFONT_MYFONT)</span></span>
<span class="line"><span># define NXFONT_DEFAULT FONTID_MYFONT</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Then define the actual font ID.  Make sure that the font ID value</span></span>
<span class="line"><span>is unique:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>enum nx_fontid_e</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  FONTID_DEFAULT     = 0      /* The default font */</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_SANS23X27</span></span>
<span class="line"><span>  , FONTID_SANS23X27 = 1      /* The 23x27 sans serif font */</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_MYFONT</span></span>
<span class="line"><span>  , FONTID_MYFONT    = 2      /* My shiny, new font */</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>...</span></span></code></pre></div></blockquote></li></ol><p>New Add the font to the NX build system. There are several files that you have to modify to do this. Look how the build system uses the font CONFIG_NXFONT_SANS23X27 for examaples:</p><ol><li><p><code>nuttx/graphics/Makefile</code> This file needs logic to auto-generate a C source file from the header file that you generated with the the bdf-converter program. Notice NXFONTS_FONTID=2; this must be set to the same font ID value that you defined in the <code>include/nuttx/nx/nxfonts.h</code> file.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>genfontsources:</span></span>
<span class="line"><span>  ifeq ((CONFIG_NXFONT_SANS23X27),y)</span></span>
<span class="line"><span>   @(MAKE) -C nxfonts -f Makefile.sources NXFONTS_FONTID=1 EXTRAFLAGS=(EXTRAFLAGS)</span></span>
<span class="line"><span> endif</span></span>
<span class="line"><span>  ifeq ((CONFIG_NXFONT_MYFONT),y)</span></span>
<span class="line"><span>   @(MAKE) -C nxfonts -f Makefile.sources NXFONTS_FONTID=2 EXTRAFLAGS=(EXTRAFLAGS)</span></span>
<span class="line"><span> endif</span></span></code></pre></div></blockquote></li><li><p><code>nuttx/graphics/nxfonts/Make.defs</code>. Set the make variable NXFSET_CSRCS. NXFSET_CSRCS determines the name of the font C file to build when NXFONTS_FONTID=2:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ifeq ((CONFIG_NXFONT_SANS23X27),y)</span></span>
<span class="line"><span>NXFSET_CSRCS += nxfonts_bitmaps_sans23x27.c</span></span>
<span class="line"><span>endif</span></span>
<span class="line"><span>ifeq ((CONFIG_NXFONT_MYFONT),y)</span></span>
<span class="line"><span>NXFSET_CSRCS += nxfonts_bitmaps_myfont.c</span></span>
<span class="line"><span>endif</span></span></code></pre></div></blockquote></li><li><p><code>nuttx/graphics/nxfonts/Makefile.sources</code>. This is the Makefile used in step 5 that will actually generate the font C file. So, given your NXFONTS_FONTID=2, it needs to determine a prefix to use for auto-generated variable and function names and (again) the name of the autogenerated file to create (this must be the same name that was used in nuttx/graphics/nxfonts/Make.defs):</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ifeq ((NXFONTS_FONTID),1)</span></span>
<span class="line"><span>NXFONTS_PREFIX := g_sans23x27_</span></span>
<span class="line"><span>GEN_CSRC = nxfonts_bitmaps_sans23x27.c</span></span>
<span class="line"><span>endif</span></span>
<span class="line"><span>ifeq ((NXFONTS_FONTID),2)</span></span>
<span class="line"><span>NXFONTS_PREFIX := g_myfont_</span></span>
<span class="line"><span>GEN_CSRC = nxfonts_bitmaps_myfont.c</span></span>
<span class="line"><span>endif</span></span></code></pre></div></blockquote></li><li><p><code>graphics/nxfonts/nxfonts_bitmaps.c</code>. This is the file that contains the generic font structures. It is used as a &quot;template&quot; file by <code>nuttx/graphics/nxfonts/Makefile.sources</code> to create your customized font data set.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#if NXFONTS_FONTID == 1</span></span>
<span class="line"><span>#  include &quot;nxfonts_sans23x27.h&quot;</span></span>
<span class="line"><span>#elif NXFONTS_FONTID == 2</span></span>
<span class="line"><span>#  include &quot;nxfonts_myfont.h&quot;</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>#  error &quot;No font ID specified&quot;</span></span>
<span class="line"><span>#endif</span></span></code></pre></div></blockquote><p>Where nxfonts_myfont.h is the NuttX font file that we generated in step 2 using the bdf-converter tool.</p></li><li><p><code>graphics/nxfonts/nxfonts_getfont.c</code>. Finally, we need to extend the logic that does the run-time font lookups so that can find our new font. The lookup function is NXHANDLE nxf_getfonthandle(enum nx_fontid_e fontid). The new font information needs to be added to data structures used by that function</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#ifdef CONFIG_NXFONT_SANS23X27</span></span>
<span class="line"><span>extern const struct nx_fontpackage_s g_sans23x27_package;</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_MYFONT</span></span>
<span class="line"><span>extern const struct nx_fontpackage_s g_myfont_package;</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static FAR const struct nx_fontpackage_s *g_fontpackages[] =</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_SANS23X27</span></span>
<span class="line"><span>&amp;g_sans23x27_package,</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>#ifdef CONFIG_NXFONT_MYFONT</span></span>
<span class="line"><span>&amp;g_myfont_package,</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span>NULL</span></span>
<span class="line"><span>};</span></span></code></pre></div></blockquote></li></ol><h2 id="configuration-settings" tabindex="-1">Configuration Settings <a class="header-anchor" href="#configuration-settings" aria-label="Permalink to &quot;Configuration Settings&quot;">​</a></h2><h3 id="nxfonts" tabindex="-1">NxFonts <a class="header-anchor" href="#nxfonts" aria-label="Permalink to &quot;NxFonts&quot;">​</a></h3><ul><li><p><code>CONFIG_NXFONTS</code></p><p>Enables font support</p></li><li><p><code>CONFIG_NXFONTS_CHARBITS</code></p><p>The number of bits in the character set. Current options are only 7 and 8. The default is 7.</p></li><li><p><code>CONFIG_NXFONTS_DISABLE_1BPP</code>, <code>CONFIG_NXFONTS_DISABLE_2BPP</code>, <code>CONFIG_NXFONTS_DISABLE_4BPP</code>, <code>CONFIG_NXFONTS_DISABLE_8BPP</code>, <code>CONFIG_NXFONTS_DISABLE_16BPP</code>, <code>CONFIG_NXFONTS_DISABLE_24BPP</code>, and <code>CONFIG_NXFONTS_DISABLE_32BPP</code></p><p>NX supports a variety of pixel depths. You can save some memory by disabling support for unused color depths.</p></li><li><p><code>CONFIG_NXFONTS_PACKEDMSFIRST</code></p><p>If a pixel depth of less than 8-bits is used, then NX needs to know if the pixels pack from the MS to LS or from LS to MS</p></li></ul><h3 id="font-selections" tabindex="-1">Font Selections <a class="header-anchor" href="#font-selections" aria-label="Permalink to &quot;Font Selections&quot;">​</a></h3><ul><li><p><code>CONFIG_NXFONT_SANS17X22</code></p><p>This option enables support for a tiny, 17x22 san serif font (font ID FONTID_SANS17X22 == 14).</p></li><li><p><code>CONFIG_NXFONT_SANS20X26</code></p><p>This option enables support for a tiny, 20x26 san serif font (font ID FONTID_SANS20X26 == 15).</p></li><li><p><code>CONFIG_NXFONT_SANS23X27</code></p><p>This option enables support for a tiny, 23x27 san serif font (font ID FONTID_SANS23X27 == 1).</p></li><li><p><code>CONFIG_NXFONT_SANS22X29</code></p><p>This option enables support for a small, 22x29 san serif font (font ID FONTID_SANS22X29 == 2).</p></li><li><p><code>CONFIG_NXFONT_SANS28X37</code></p><p>This option enables support for a medium, 28x37 san serif font (font ID FONTID_SANS28X37 == 3).</p></li><li><p><code>CONFIG_NXFONT_SANS39X48</code></p><p>This option enables support for a large, 39x48 san serif font (font ID FONTID_SANS39X48 == 4).</p></li><li><p><code>CONFIG_NXFONT_SANS17X23B</code></p><p>This option enables support for a tiny, 17x23 san serif bold font (font ID FONTID_SANS17X23B == 16).</p></li><li><p><code>CONFIG_NXFONT_SANS20X27B</code></p><p>This option enables support for a tiny, 20x27 san serif bold font (font ID FONTID_SANS20X27B == 17).</p></li><li><p><code>CONFIG_NXFONT_SANS22X29B</code></p><p>This option enables support for a small, 22x29 san serif bold font (font ID FONTID_SANS22X29B == 5).</p></li><li><p><code>CONFIG_NXFONT_SANS28X37B</code></p><p>This option enables support for a medium, 28x37 san serif bold font (font ID FONTID_SANS28X37B == 6).</p></li><li><p><code>CONFIG_NXFONT_SANS40X49B</code></p><p>This option enables support for a large, 40x49 san serif bold font (font ID FONTID_SANS40X49B == 7).</p></li><li><p><code>CONFIG_NXFONT_SERIF22X29</code></p><p>This option enables support for a small, 22x29 font (with serifs) (font ID FONTID_SERIF22X29 == 8).</p></li><li><p><code>CONFIG_NXFONT_SERIF29X37</code></p><p>This option enables support for a medium, 29x37 font (with serifs) (font ID FONTID_SERIF29X37 == 9).</p></li><li><p><code>CONFIG_NXFONT_SERIF38X48</code></p><p>This option enables support for a large, 38x48 font (with serifs) (font ID FONTID_SERIF38X48 == 10).</p></li><li><p><code>CONFIG_NXFONT_SERIF22X28B</code></p><p>This option enables support for a small, 27x38 bold font (with serifs) (font ID FONTID_SERIF22X28B == 11).</p></li><li><p><code>CONFIG_NXFONT_SERIF27X38B</code></p><p>This option enables support for a medium, 27x38 bold font (with serifs) (font ID FONTID_SERIF27X38B == 12). p</p></li><li><p><code>CONFIG_NXFONT_SERIF38X49B</code></p><p>This option enables support for a large, 38x49 bold font (with serifs) (font ID FONTID_SERIF38X49B == 13).</p></li></ul><p>[REVISIT... this list is not complete]</p>`,18)]))}const h=s(o,[["render",p]]);export{r as __pageData,h as default};
