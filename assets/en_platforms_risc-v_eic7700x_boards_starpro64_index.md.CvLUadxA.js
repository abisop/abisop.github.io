import{_ as a,c as t,al as s,o as n}from"./chunks/framework.NFAqBSgQ.js";const o="/assets/starpro64.CE4Hwe4w.jpg",g=JSON.parse('{"title":"PINE64 StarPro64","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/eic7700x/boards/starpro64/index.md","filePath":"en/platforms/risc-v/eic7700x/boards/starpro64/index.md"}'),r={name:"en/platforms/risc-v/eic7700x/boards/starpro64/index.md"};function i(p,e,l,c,d,h){return n(),t("div",null,e[0]||(e[0]=[s('<h1 id="pine64-starpro64" tabindex="-1">PINE64 StarPro64 <a class="header-anchor" href="#pine64-starpro64" aria-label="Permalink to &quot;PINE64 StarPro64&quot;">​</a></h1><p><a href="https://lupyuen.github.io/articles/starpro64" target="_blank" rel="noreferrer">PINE64 StarPro64</a> is a RISC-V Single-Board Computer based on the ESWIN EIC7700X RISC-V SoC with Quad-Core 64-bit RISC-V CPU, 32 GB LPDDR5 RAM and 100 Mbps Ethernet.</p><p><img src="'+o+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li><strong>System on Chip:</strong> ESWIN EIC7700X</li><li><strong>Processors:</strong> 4 x RV64GC 1.4 GHz 64-bit RISC-V Cores</li><li><strong>NPU:</strong> 19.95 TOPS INT8</li><li><strong>Memory:</strong> 32 GB 64-bit LPDDR5</li><li><strong>Storage:</strong> 1 x microSD Connector, 1 x eMMC Pad</li><li><strong>Network:</strong> 2 x GMAC, RGMII supported</li><li><strong>PCI Express:</strong> 4-lane PCIe 3.0 (RC + EP)</li><li><strong>Wireless:</strong> WiFi, Bluetooth</li><li><strong>USB:</strong> USB 2.0 and 3.0</li><li><strong>GPIO:</strong> Full GPIO Header</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>A <strong>USB Serial Adapter</strong> (CH340 or CP2102) is required to run NuttX on StarPro64.</p><p>Connect the USB Serial Adapter to StarPro64 Serial Console at:</p><p>USB Serial StarPro64 Pin</p><hr><p>GND Pin 6 (GND) RX Pin 8 (UART0 TX) TX Pin 10 (UART0 RX)</p><p>On the USB Serial Adapter, set the <strong>Voltage Level</strong> to 3V3.</p><p>Connect StarPro64 to our computer with the USB Serial Adapter. On our computer, start a Serial Terminal and connect to the USB Serial Port at <strong>115.2 kbps</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> screen /dev/ttyUSB0 115200</span></span></code></pre></div><p>NuttX will appear in the Serial Console when it boots on StarPro64.</p><h2 id="risc-v-toolchain" tabindex="-1">RISC-V Toolchain <a class="header-anchor" href="#risc-v-toolchain" aria-label="Permalink to &quot;RISC-V Toolchain&quot;">​</a></h2><p>Before building NuttX for StarPro64, download the toolchain for <a href="https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases" target="_blank" rel="noreferrer">xPack GNU RISC-V Embedded GCC (riscv-none-elf)</a>.</p><p>Add the downloaded toolchain <code>xpack-riscv-none-elf-gcc-.../bin</code> to the <code>PATH</code> Environment Variable.</p><p>Check the RISC-V Toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> riscv-none-elf-gcc -v</span></span></code></pre></div><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>To build NuttX for StarPro64, [[in](\`in.md)stall the prerequisites &lt;/quickstart/install&gt;]{.title-ref} and [[clone the git repo](\`clone the git repo.md)sitories &lt;/quickstart/install&gt;]{.title-ref} for <code>nuttx</code> and <code>apps</code>.</p><p>Configure the NuttX project and build the project:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> tools/configure.sh starpro64:nsh</span></span>
<span class="line"><span> make</span></span></code></pre></div><p>This produces the NuttX Kernel <code>nuttx.bin</code>. Next, build the NuttX Apps Filesystem:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make export</span></span>
<span class="line"><span> pushd ../apps</span></span>
<span class="line"><span> tools/mkimport.sh -z -x ../nuttx/nuttx-export-*.tar.gz</span></span>
<span class="line"><span> make import</span></span>
<span class="line"><span> popd</span></span>
<span class="line"><span> genromfs -f initrd -d ../apps/bin -V &quot;NuttXBootVol&quot;</span></span></code></pre></div><p>This generates the Initial RAM Disk <code>initrd</code>.</p><p>Package the NuttX Kernel and Initial RAM Disk into a NuttX Image:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> head -c 65536 /dev/zero &gt;/tmp/nuttx.pad</span></span>
<span class="line"><span> cat nuttx.bin /tmp/nuttx.pad initrd &gt;Image-starpro64</span></span></code></pre></div><p>The NuttX Image <code>Image-starpro64</code> will be copied to the TFTP Server in the next step.</p><h2 id="booting" tabindex="-1">Booting <a class="header-anchor" href="#booting" aria-label="Permalink to &quot;Booting&quot;">​</a></h2><p>To boot NuttX on StarPro64, <a href="https://lupyuen.github.io/articles/starpro64#boot-nuttx-over-tftp" target="_blank" rel="noreferrer">install a TFTP Server</a> on our computer.</p><p>Copy the file <code>Image-starpro64</code> from the previous section to the TFTP Server, together with the Device Tree:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> wget https://github.com/lupyuen/nuttx-starpro64/raw/refs/heads/main/eic7700-evb.dtb</span></span>
<span class="line"><span> scp Image-starpro64 \\</span></span>
<span class="line"><span>   tftpserver:/tftpfolder/Image-starpro64</span></span>
<span class="line"><span> scp eic7700-evb.dtb \\</span></span>
<span class="line"><span>   tftpserver:/tftpfolder/eic7700-evb.dtb</span></span></code></pre></div><p>Check that StarPro64 is connected to our computer via a USB Serial Adapter at 115.2 kbps:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> screen /dev/ttyUSB0 115200</span></span></code></pre></div><p>When StarPro64 boots, press Ctrl-C until U-Boot stops. At the U-Boot Prompt, run these commands to <a href="https://lupyuen.github.io/articles/starpro64#boot-nuttx-over-tftp" target="_blank" rel="noreferrer">boot NuttX over TFTP</a>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Change to your TFTP Server</span></span>
<span class="line"><span> setenv tftp_server 192.168.x.x</span></span>
<span class="line"><span> saveenv</span></span>
<span class="line"><span> dhcp {kernel_addr_r} {tftp_server}:Image-starpro64</span></span>
<span class="line"><span> tftpboot {fdt_addr_r} {tftp_server}:eic7700-evb.dtb</span></span>
<span class="line"><span> fdt addr {fdt_addr_r}</span></span>
<span class="line"><span> booti {kernel_addr_r} - {fdt_addr_r}</span></span></code></pre></div><p>Or configure U-Boot to <a href="https://lupyuen.github.io/articles/starpro64#boot-nuttx-over-tftp" target="_blank" rel="noreferrer">boot NuttX automatically</a>.</p><p>NuttX boots on StarPro64 and NuttShell (nsh) appears in the Serial Console. To see the available commands in NuttShell:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> help</span></span></code></pre></div><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic configuration that runs NuttShell (nsh). This configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. Serial Console is enabled on UART0 at 115.2 kbps.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>NuttX for StarPro64 supports these peripherals:</p><p>Peripheral Support NOTES</p><hr><p>UART Yes</p>`,49)]))}const b=a(r,[["render",i]]);export{g as __pageData,b as default};
