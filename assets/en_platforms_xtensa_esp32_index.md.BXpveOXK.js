import{_ as t,c as a,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Espressif ESP32","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/xtensa/esp32/index.md","filePath":"en/platforms/xtensa/esp32/index.md"}'),s={name:"en/platforms/xtensa/esp32/index.md"};function i(r,e,c,d,l,p){return n(),a("div",null,e[0]||(e[0]=[o(`<h1 id="espressif-esp32" tabindex="-1">Espressif ESP32 <a class="header-anchor" href="#espressif-esp32" aria-label="Permalink to &quot;Espressif ESP32&quot;">​</a></h1><p>The ESP32 is a series of single and dual-core SoCs from Espressif based on Harvard architecture Xtensa LX6 CPUs and with on-chip support for Bluetooth and Wi-Fi.</p><p>All embedded memory, external memory and peripherals are located on the data bus and/or the instruction bus of these CPUs. With some minor exceptions, the address mapping of two CPUs is symmetric, meaning they use the same addresses to access the same memory. Multiple peripherals in the system can access embedded memory via DMA.</p><p>On dual-core SoCs, the two CPUs are typically named &quot;PRO_CPU&quot; and &quot;APP_CPU&quot; (for &quot;protocol&quot; and &quot;application&quot;), however for most purposes the two CPUs are interchangeable.</p><h2 id="esp32-toolchain" tabindex="-1">ESP32 Toolchain <a class="header-anchor" href="#esp32-toolchain" aria-label="Permalink to &quot;ESP32 Toolchain&quot;">​</a></h2><p>The toolchain used to build ESP32 firmware can be either downloaded or built from the sources. It is <strong>highly</strong> recommended to use (download or build) the same toolchain version that is being used by the NuttX CI.</p><p>Please refer to the Docker <a href="https://github.com/apache/nuttx/tree/master/tools/ci/docker/linux/Dockerfile" target="_blank" rel="noreferrer">container</a> and check for the current compiler version being used. For instance:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>###############################################################################</span></span>
<span class="line"><span># Build image for tool required by ESP32 builds</span></span>
<span class="line"><span>###############################################################################</span></span>
<span class="line"><span>FROM nuttx-toolchain-base AS nuttx-toolchain-esp32</span></span>
<span class="line"><span># Download the latest ESP32 GCC toolchain prebuilt by Espressif</span></span>
<span class="line"><span>RUN mkdir -p xtensa-esp32-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>  curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>  | tar -C xtensa-esp32-elf-gcc --strip-components 1 -xJ</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN mkdir -p xtensa-esp32s2-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>  curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32s2-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>  | tar -C xtensa-esp32s2-elf-gcc --strip-components 1 -xJ</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN mkdir -p xtensa-esp32s3-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>  curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32s3-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>  | tar -C xtensa-esp32s3-elf-gcc --strip-components 1 -xJ</span></span></code></pre></div><p>For ESP32, the toolchain version is based on GGC 12.2.0 (<code>xtensa-esp32-elf-12.2.0_20230208</code>)</p><h3 id="the-prebuilt-toolchain-recommended" tabindex="-1">The prebuilt Toolchain (Recommended) <a class="header-anchor" href="#the-prebuilt-toolchain-recommended" aria-label="Permalink to &quot;The prebuilt Toolchain (Recommended)&quot;">​</a></h3><p>First, create a directory to hold the toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> mkdir -p /path/to/your/toolchain/xtensa-esp32-elf-gcc</span></span></code></pre></div><p>Download and extract toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>| tar -C xtensa-esp32-elf-gcc --strip-components 1 -xJ</span></span></code></pre></div><p>Add the toolchain to your \`PATH\`:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> echo &quot;export PATH=/path/to/your/toolchain/xtensa-esp32-elf-gcc/bin:PATH&quot; &gt;&gt; ~/.bashrc</span></span></code></pre></div><p>You can edit your shell&#39;s rc files if you don&#39;t use bash.</p><h3 id="building-from-source" tabindex="-1">Building from source <a class="header-anchor" href="#building-from-source" aria-label="Permalink to &quot;Building from source&quot;">​</a></h3><p>You can also build the toolchain yourself. The steps to build the toolchain with crosstool-NG on Linux are as follows</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/espressif/crosstool-NG.git</span></span>
<span class="line"><span> cd crosstool-NG</span></span>
<span class="line"><span> git submodule update --init</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ./bootstrap &amp;&amp; ./configure --enable-local &amp;&amp; make</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ./ct-ng xtensa-esp32-elf</span></span>
<span class="line"><span> ./ct-ng build</span></span>
<span class="line"><span></span></span>
<span class="line"><span> chmod -R u+w builds/xtensa-esp32-elf</span></span>
<span class="line"><span></span></span>
<span class="line"><span> export PATH=&quot;crosstool-NG/builds/xtensa-esp32-elf/bin:PATH&quot;</span></span></code></pre></div><p>These steps are given in the setup guide in <a href="https://docs.espressif.com/projects/esp-idf/en/latest/get-started/linux-setup-scratch.html" target="_blank" rel="noreferrer">ESP-IDF documentation</a>.</p><h2 id="building-and-flashing-nuttx" tabindex="-1">Building and flashing NuttX <a class="header-anchor" href="#building-and-flashing-nuttx" aria-label="Permalink to &quot;Building and flashing NuttX&quot;">​</a></h2><h3 id="installing-esptool" tabindex="-1">Installing esptool <a class="header-anchor" href="#installing-esptool" aria-label="Permalink to &quot;Installing esptool&quot;">​</a></h3><p>First, make sure that <code>esptool.py</code> is installed and up-to-date. This tool is used to convert the ELF to a compatible ESP32 image and to flash the image into the board.</p><p>It can be installed with: <code>pip install esptool&gt;=4.8.1</code>.</p><p>Warning</p><p>Installing <code>esptool.py</code> may required a Python virtual environment on newer systems. This will be the case if the <code>pip install</code> command throws an error such as: <code>error: externally-managed-environment</code>.</p><p>If you are not familiar with virtual environments, refer to <a href="./.html">Managing esptool on virtual environment</a> for instructions on how to install <code>esptool.py</code>.</p><h3 id="bootloader-and-partitions" tabindex="-1">Bootloader and partitions <a class="header-anchor" href="#bootloader-and-partitions" aria-label="Permalink to &quot;Bootloader and partitions&quot;">​</a></h3><p>NuttX can boot the ESP32 directly using the so-called &quot;Simple Boot&quot;. An externally-built 2nd stage bootloader is not required in this case as all functions required to boot the device are built within NuttX. Simple boot does not require any specific configuration (it is selectable by default if no other 2nd stage bootloader is used).</p><p>If other features are required, an externally-built 2nd stage bootloader is needed. The bootloader is built using the <code>make bootloader</code> command. This command generates the firmware in the <code>nuttx</code> folder. The <code>ESPTOOL_BINDIR</code> is used in the <code>make flash</code> command to specify the path to the bootloader. For compatibility among other SoCs and future options of 2nd stage bootloaders, the commands <code>make bootloader</code> and the <code>ESPTOOL_BINDIR</code> option (for the <code>make flash</code>) can be used even if no externally-built 2nd stage bootloader is being built (they will be ignored if Simple Boot is used, for instance):</p><pre><code> make bootloader
</code></pre><p>Note</p><p>It is recommended that if this is the first time you are using the board with NuttX to perform a complete SPI FLASH erase.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> esptool.py erase_flash</span></span></code></pre></div><h3 id="building-and-flashing" tabindex="-1">Building and Flashing <a class="header-anchor" href="#building-and-flashing" aria-label="Permalink to &quot;Building and Flashing&quot;">​</a></h3><p>This is a two-step process where the first step converts the ELF file into an ESP32 compatible binary and the second step flashes it to the board. These steps are included in the build system and it is possible to build and flash the NuttX firmware simply by running:</p><pre><code> make flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=./
</code></pre><p>where:</p><ul><li><code>ESPTOOL_PORT</code> is typically <code>/dev/ttyUSB0</code> or similar.</li><li><code>ESPTOOL_BINDIR=./</code> is the path of the externally-built 2nd stage bootloader and the partition table (if applicable): when built using the <code>make bootloader</code>, these files are placed into <code>nuttx</code> folder.</li><li><code>ESPTOOL_BAUD</code> is able to change the flash baud rate if desired.</li></ul><h3 id="flashing-nsh-example" tabindex="-1">Flashing NSH Example <a class="header-anchor" href="#flashing-nsh-example" aria-label="Permalink to &quot;Flashing NSH Example&quot;">​</a></h3><p>This example shows how to build and flash the <code>nsh</code> defconfig for the ESP32-DevKitC board:</p><pre><code> cd nuttx
 make distclean
 ./tools/configure.sh esp32-devkitc:nsh
 make -j(nproc)
</code></pre><p>When the build is complete, the firmware can be flashed to the board using the command:</p><pre><code> make -j(nproc) flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=./
</code></pre><p>where <code>&lt;port&gt;</code> is the serial port where the board is connected:</p><pre><code> make flash ESPTOOL_PORT=/dev/ttyUSB0 ESPTOOL_BINDIR=./
 CP: nuttx.hex
 MKIMAGE: ESP32 binary
 esptool.py -c esp32 elf2image --ram-only-header -fs 4MB -fm dio -ff 40m -o nuttx.bin nuttx
 esptool.py v4.8.1
 Creating esp32 image...
 Image has only RAM segments visible. ROM segments are hidden and SHA256 digest is not appended.
 Merged 1 ELF section
 Successfully created esp32 image.
 Generated: nuttx.bin
 esptool.py -c esp32 -p /dev/ttyUSB0 -b 921600  write_flash -fs detect -fm dio -ff 40m 0x1000 nuttx.bin
 esptool.py v4.8.1
 Serial port /dev/ttyUSB0
 Connecting.....
 Chip is ESP32-D0WD-V3 (revision v3.1)
 [...]
 Flash will be erased from 0x00001000 to 0x00032fff...
 Flash params set to 0x0230
 Compressed 203816 bytes to 74735...
 Wrote 203816 bytes (74735 compressed) at 0x00001000 in 2.2 seconds (effective 744.4 kbit/s)...
 Hash of data verified.

 Leaving...
 Hard resetting via RTS pin...
</code></pre><p>Now opening the serial port with a terminal emulator should show the NuttX console:</p><pre><code> picocom -b 115200 /dev/ttyUSB0
NuttShell (NSH) NuttX-12.8.0
nsh&gt; uname -a
NuttX 12.8.0 759d37b97c-dirty Mar  5 2025 20:31:15 xtensa esp32-devkitc
</code></pre><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>This section describes debugging techniques for the ESP32.</p><h3 id="debugging-with-openocd-and-gdb" tabindex="-1">Debugging with <code>openocd</code> and <code>gdb</code> <a class="header-anchor" href="#debugging-with-openocd-and-gdb" aria-label="Permalink to &quot;Debugging with \`openocd\` and \`gdb\`&quot;">​</a></h3><p>Espressif uses a specific version of OpenOCD to support ESP32: <a href="https://github.com/espressif/" target="_blank" rel="noreferrer">openocd-esp32</a>.</p><p>Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32/api-guides/jtag-debugging/index.html#jtag-debugging-building-openocd" target="_blank" rel="noreferrer">Building OpenOCD from Sources</a> for more information on how to build OpenOCD for ESP32.</p><p>ESP32 has dedicated pins for JTAG debugging. The following pins are used for JTAG debugging:</p><p>ESP32 Pin JTAG Signal</p><hr><p>MTDO / GPIO15 TDO MTDI / GPIO12 TDI MTCK / GPIO13 TCK MTMS / GPIO14 TMS</p><p>Some boards, like <code>ESP32-Ethernet-Kit V1.2 &lt;platforms/xtensa/esp32/boards/esp32-ethernet-kit/index:ESP32-Ethernet-Kit V1.2&gt;</code>{.interpreted-text role=&quot;ref&quot;} and <code>ESP-WROVER-KIT &lt;platforms/xtensa/esp32/boards/esp32-wrover-kit/index:ESP-WROVER-KIT&gt;</code>{.interpreted-text role=&quot;ref&quot;}, have a built-in JTAG debugger.</p><p>Other boards that don&#39;t have any built-in JTAG debugger can be debugged using an external JTAG debugger, like the one described for the <code>ESP32-DevKitC &lt;platforms/xtensa/esp32/boards/esp32-devkitc/index:Debugging with OpenOCD&gt;</code>{.interpreted-text role=&quot;ref&quot;}.</p><p>Note</p><p>One must configure the USB drivers to enable JTAG communication. Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32/api-guides/jtag-debugging/configure-ft2232h-jtag.html#configure-usb-drivers" target="_blank" rel="noreferrer">Configure USB Drivers</a> for configuring the JTAG adapter of the <code>ESP32-Ethernet-Kit V1.2 &lt;platforms/xtensa/esp32/boards/esp32-ethernet-kit/index:ESP32-Ethernet-Kit V1.2&gt;</code>{.interpreted-text role=&quot;ref&quot;} and <code>ESP-WROVER-KIT &lt;platforms/xtensa/esp32/boards/esp32-wrover-kit/index:ESP-WROVER-KIT&gt;</code>{.interpreted-text role=&quot;ref&quot;} boards and other FT2232-based JTAG adapters.</p><p>OpenOCD can then be used:</p><pre><code>openocd -s &lt;tcl_scripts_path&gt; -c &#39;set ESP_RTOS hwthread&#39; -f board/esp32-wrover-kit-3.3v.cfg -c &#39;init; reset halt; esp appimage_offset 0x1000&#39;
</code></pre><p>Note</p><p>- <code>appimage_offset</code> should be set to <code>0x1000</code> when <code>Simple Boot</code> is used. For MCUboot, this value should be set to <code>CONFIG_ESP32_OTA_PRIMARY_SLOT_OFFSET</code> value (<code>0x10000</code> by default). - <code>-s &lt;tcl_scripts_path&gt;</code> defines the path to the OpenOCD scripts. Usually set to [tcl]{.title-ref} if running openocd from its source directory. It can be omitted if [openocd-esp32]{.title-ref} were installed in the system with [sudo make install]{.title-ref}.</p><p>Once OpenOCD is running, you can use GDB to connect to it and debug your application:</p><pre><code>xtensa-esp32-elf-gdb -x gdbinit nuttx
</code></pre><p>whereas the content of the <code>gdbinit</code> file is:</p><pre><code>target remote :3333
set remote hardware-watchpoint-limit 2
mon reset halt
flushregs
monitor reset halt
thb nsh_main
c
</code></pre><p>Note</p><p><code>nuttx</code> is the ELF file generated by the build process. Please note that <code>CONFIG_DEBUG_SYMBOLS</code> must be enabled in the <code>menuconfig</code>.</p><p>Please refer to [[/quick](]{.title-ref}/quick.md)start/debugging\` for more information about debugging techniques.</p><h3 id="stack-dump-and-backtrace-dump" tabindex="-1">Stack Dump and Backtrace Dump <a class="header-anchor" href="#stack-dump-and-backtrace-dump" aria-label="Permalink to &quot;Stack Dump and Backtrace Dump&quot;">​</a></h3><p>NuttX has a feature to dump the stack of a task and to dump the backtrace of it (and of all the other tasks). This feature is useful to debug the system when it is not behaving as expected, especially when it is crashing.</p><p>In order to enable this feature, the following options must be enabled in the NuttX configuration: <code>CONFIG_SCHED_BACKTRACE</code>, <code>CONFIG_DEBUG_SYMBOLS</code> and, optionally, <code>CONFIG_ALLSYMS</code>.</p><p>Note</p><p>The first two options enable the backtrace dump. The third option enables the backtrace dump with the associated symbols, but increases the size of the generated NuttX binary.</p><p>Espressif also provides a tool to translate the backtrace dump into a human-readable format. This tool is called <code>btdecode.sh</code> and is available at <code>tools/espressif/btdecode.sh</code> of NuttX repository.</p><p>Note</p><p>This tool is not necessary if <code>CONFIG_ALLSYMS</code> is enabled. In this case, the backtrace dump contains the function names.</p><h4 id="example-crash-dump" tabindex="-1">Example - Crash Dump <a class="header-anchor" href="#example-crash-dump" aria-label="Permalink to &quot;Example - Crash Dump&quot;">​</a></h4><p>A typical crash dump, caused by an illegal load with <code>CONFIG_SCHED_BACKTRACE</code> and <code>CONFIG_DEBUG_SYMBOLS</code> enabled, is shown below:</p><pre><code>xtensa_user_panic: User Exception: EXCCAUSE=001d task: backtrace
_assert: Current Version: NuttX  10.4.0 2ae3246e40-dirty Sep 19 2024 12:59:10 xtensa
_assert: Assertion failed user panic: at file: :0 task: backtrace process: backtrace 0x400f0724
up_dump_register:    PC: 400f0754    PS: 00060530
up_dump_register:    A0: 800e2fcc    A1: 3ffe1400    A2: 00000000    A3: 3ffe0470
up_dump_register:    A4: 3ffe0486    A5: 3ffaf4b0    A6: 00000000    A7: 00000000
up_dump_register:    A8: 800f0751    A9: 3ffe13d0   A10: 0000005a   A11: 3ffafcb0
up_dump_register:   A12: 00000059   A13: 3ffaf600   A14: 00000002   A15: 3ffafaa4
up_dump_register:   SAR: 00000018 CAUSE: 0000001d VADDR: 00000000
up_dump_register:  LBEG: 4000c28c  LEND: 4000c296  LCNT: 00000000
dump_stack: User Stack:
dump_stack:   base: 0x3ffe0490
dump_stack:   size: 00004048
dump_stack:     sp: 0x3ffe1400
stack_dump: 0x3ffe13e0: 00000059 3ffaf600 00000002 3ffafaa4 800e1eb4 3ffe1420 400f0724 00000002
stack_dump: 0x3ffe1400: 3ffe0486 3ffaf4b0 00000000 00000000 00000000 3ffe1440 00000000 400f0724
stack_dump: 0x3ffe1420: 3ffe0470 3ffafae8 00000000 3ffb0d2c 00000000 3ffe1460 00000000 00000000
stack_dump: 0x3ffe1440: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
stack_dump: 0x3ffe1460: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
sched_dumpstack: backtrace| 2: 0x400ef738 0x40085152 0x40084d05 0x40084c7d 0x40080c84 0x400f0754 0x400e2fcc 0x400e1eb4
sched_dumpstack: backtrace| 2: 0x40000000 0x400e2fcc 0x400e1eb4 0x40000000
dump_tasks:    PID GROUP PRI POLICY   TYPE    NPX STATE   EVENT      SIGMASK          STACKBASE  STACKSIZE   COMMAND
dump_task:       0     0   0 FIFO     Kthread - Ready              0000000000000000 0x3ffb0010      3056   Idle_Task
dump_task:       1     1 100 RR       Task    - Waiting Semaphore  0000000000000000 0x3ffaec10      3024   nsh_main
dump_task:       2     2 255 RR       Task    - Running            0000000000000000 0x3ffe0490      4048   backtrace task
sched_dumpstack: backtrace| 0: 0x400e12bb 0x400826eb
sched_dumpstack: backtrace| 1: 0x400edc59 0x400edb5b 0x400edb94 0x400e6c36 0x400e643c 0x400e6714 0x400e5830 0x400e56b8
sched_dumpstack: backtrace| 1: 0x400e5689 0x400e2fcc 0x400e1eb4 0x40000000
sched_dumpstack: backtrace| 2: 0x400ef738 0x40084ed4 0x400ed9ea 0x40085184 0x40084d05 0x40084c7d 0x40080c84 0x400f0754
sched_dumpstack: backtrace| 2: 0x400e2fcc 0x400e1eb4 0x40000000 0x400e2fcc 0x400e1eb4 0x40000000
</code></pre><p>The lines starting with <code>sched_dumpstack</code> show the backtrace of the tasks. By checking it, it is possible to track the root cause of the crash. Saving this output to a file and using the <code>btdecode.sh</code>:</p><pre><code>./tools/btdecode.sh esp32 /tmp/backtrace.txt
Backtrace for task 2:
0x400ef738: sched_dumpstack at sched_dumpstack.c:69
0x40085152: _assert at assert.c:691
0x40084d05: xtensa_user_panic at xtensa_assert.c:188 (discriminator 1)
0x40084c7d: xtensa_user at ??:?
0x40080c84: _xtensa_user_handler at xtensa_user_handler.S:194
0x400f0754: assert_on_task at backtrace_main.c:158
 (inlined by) backtrace_main at backtrace_main.c:194
0x400e2fcc: nxtask_startup at task_startup.c:70
0x400e1eb4: nxtask_start at task_start.c:75
0x40000000: ?? ??:0
0x400e2fcc: nxtask_startup at task_startup.c:70
0x400e1eb4: nxtask_start at task_start.c:75
0x40000000: ?? ??:0

Backtrace dump for all tasks:

Backtrace for task 2:
0x400ef738: sched_dumpstack at sched_dumpstack.c:69
0x40084ed4: dump_backtrace at assert.c:418
0x400ed9ea: nxsched_foreach at sched_foreach.c:69 (discriminator 2)
0x40085184: _assert at assert.c:726
0x40084d05: xtensa_user_panic at xtensa_assert.c:188 (discriminator 1)
0x40084c7d: xtensa_user at ??:?
0x40080c84: _xtensa_user_handler at xtensa_user_handler.S:194
0x400f0754: assert_on_task at backtrace_main.c:158
 (inlined by) backtrace_main at backtrace_main.c:194
0x400e2fcc: nxtask_startup at task_startup.c:70
0x400e1eb4: nxtask_start at task_start.c:75
0x40000000: ?? ??:0
0x400e2fcc: nxtask_startup at task_startup.c:70
0x400e1eb4: nxtask_start at task_start.c:75
0x40000000: ?? ??:0

Backtrace for task 1:
0x400edc59: nxsem_wait at sem_wait.c:217
0x400edb5b: nxsched_waitpid at sched_waitpid.c:165
0x400edb94: waitpid at sched_waitpid.c:618
0x400e6c36: nsh_builtin at nsh_builtin.c:163
0x400e643c: nsh_execute at nsh_parse.c:652
 (inlined by) nsh_parse_command at nsh_parse.c:2840
0x400e6714: nsh_parse at nsh_parse.c:2930
0x400e5830: nsh_session at nsh_session.c:246
0x400e56b8: nsh_consolemain at nsh_consolemain.c:79
0x400e5689: nsh_main at nsh_main.c:80
0x400e2fcc: nxtask_startup at task_startup.c:70
0x400e1eb4: nxtask_start at task_start.c:75
0x40000000: ?? ??:0

Backtrace for task 0:
0x400e12bb: nx_start at nx_start.c:772 (discriminator 1)
0x400826eb: __esp32_start at esp32_start.c:294
 (inlined by) __start at esp32_start.c:358
</code></pre><p>The above output shows the backtrace of the tasks. By checking it, it is possible to track the functions that were being executed when the crash occurred.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates the state of peripherals&#39; support in NuttX:</p><p>+----------------------+----------------------+----------------------+ | Peripheral | Support | NOTES | +======================+======================+======================+ | ADC AES Bluetooth | &gt; Yes Yes Yes No Yes | &gt; Oneshot | | Camera CAN/TWAI DMA | &gt; Yes | | +----------------------+----------------------+----------------------+ | DAC eFuse Ethernet | &gt; Yes Yes Yes Yes | &gt; One-shot | | GPIO | | | +----------------------+----------------------+----------------------+ | I2C I2S | &gt; Yes Yes | &gt; Master and Slave | | | | &gt; mode supported | +----------------------+----------------------+----------------------+ | LCD LED/PWM MCPWM | &gt; No Yes Yes Yes Yes | &gt; There is support | | Pulse_CNT RMT RNG | &gt; Yes No Yes No No | &gt; for SPI displays | | RSA RTC SD/MMC SDIO | &gt; No Yes Yes Yes Yes | | | SHA SPI SPIFLASH | &gt; Yes Yes Yes Yes | | | SPIRAM Timers Touch | | | | UART Watchdog Wi-Fi | | | +----------------------+----------------------+----------------------+</p><h2 id="memory-map" tabindex="-1">Memory Map <a class="header-anchor" href="#memory-map" aria-label="Permalink to &quot;Memory Map&quot;">​</a></h2><h3 id="address-mapping" tabindex="-1">Address Mapping <a class="header-anchor" href="#address-mapping" aria-label="Permalink to &quot;Address Mapping&quot;">​</a></h3><p>+-------------+-------------+-------------+-------------+----------+ | BUS TYPE | START | LAST | DESCRIPTION | NOTES | +=============+=============+=============+=============+==========+ | Data Data | 0x00000000 | 0x3F3FFFFF | External | Reserved | | | 0x3F400000 | 0x3F7FFFFF | Memory | | | Data Data | 0x3F800000 | 0x3FBFFFFF | External | Reserved | | Instruction | 0x3FC00000 | 0x3FEFFFFF | Memory | | | Instruction | 0x3FF00000 | 0x3FF7FFFF | | Reserved | | . Data / | 0x3FF80000 | 0x3FFFFFFF | Peripheral | | | Instruction | 0x40000000 | 0x400C1FFF | Embedded | Reserved | | | 0x400C2000 | 0x40BFFFFF | Memory | | | . | 0x40C00000 | 0x4FFFFFFF | Embedded | | | | 0x50000000 | 0x50001FFF | Memory | | | | | | External | | | | 0x50002000 | 0xFFFFFFFF | Memory | | | | | | | | | | | | Embedded | | | | | | Memory | | +-------------+-------------+-------------+-------------+----------+</p><h3 id="embedded-memory" tabindex="-1">Embedded Memory <a class="header-anchor" href="#embedded-memory" aria-label="Permalink to &quot;Embedded Memory&quot;">​</a></h3><p>+-------------+-------------+-------------+-------------+-------------+ | BUS TYPE | START | LAST | DESCRIPTION | NOTES | +=============+=============+=============+=============+=============+ | Data . Data | 0x3ff80000 | 0x3ff81fff | RTC FAST | PRO_CPU | | . | 0x3ff82000 | 0x3ff8ffff | Memory | Only | | | 0x3ff90000 | 0x3ff9ffff | | Reserved | | | 0x3ffa0000 | 0x3ffadfff | Internal | | | | | | ROM 1 | Reserved | +-------------+-------------+-------------+-------------+-------------+ | Data | 0x3ffae000 | 0x3ffdffff | Internal | DMA | | | | | SRAM 2 | | +-------------+-------------+-------------+-------------+-------------+ | Data | 0x3ffe0000 | 0x3fffffff | Internal | DMA | | | | | SRAM 1 | | +-------------+-------------+-------------+-------------+-------------+</p><h3 id="boundary-address-embedded" tabindex="-1">Boundary Address (Embedded) <a class="header-anchor" href="#boundary-address-embedded" aria-label="Permalink to &quot;Boundary Address (Embedded)&quot;">​</a></h3><p>+-------------+-------------+-------------+-------------+-------------+ | BUS TYPE | START | LAST | DESCRIPTION | NOTES | +=============+=============+=============+=============+=============+ | Instruction | 0x40000000 | 0x40007fff | Internal | Remap | | Instruction | 0x40008000 | 0x4005ffff | ROM 0 | | | . | 0x40060000 | 0x4006ffff | Internal | Reserved | | | | | ROM 0 | | +-------------+-------------+-------------+-------------+-------------+ | Instruction | 0x40070000 | 0x4007ffff | Internal | Cache | | Instruction | 0x40080000 | 0x4009ffff | SRAM 0 | | | Instruction | 0x400a0000 | 0x400affff | Internal | | | | | | SRAM 0 | | | | | | Internal | | | | | | SRAM 1 | | +-------------+-------------+-------------+-------------+-------------+ | Instruction | 0x400b0000 | 0x400b7FFF | Internal | Remap | | Instruction | 0x400b8000 | 0x400bffff | SRAM 1 | | | | | | Internal | | | | | | SRAM 1 | | +-------------+-------------+-------------+-------------+-------------+ | Instruction | 0x400c0000 | 0x400c1FFF | RTC FAST | PRO_CPU | | Data / | 0x50000000 | 0x50001fff | Memory RTC | Only | | Instruction | | | SLOW Memory | | +-------------+-------------+-------------+-------------+-------------+</p><h3 id="external-memory" tabindex="-1">External Memory <a class="header-anchor" href="#external-memory" aria-label="Permalink to &quot;External Memory&quot;">​</a></h3><p>BUS TYPE START LAST DESCRIPTION NOTES</p><hr><p>Data 0x3f400000 0x3f7fffff External Flash Read Data 0x3f800000 0x3fbfffff External SRAM Read and Write</p><h3 id="boundary-address-external" tabindex="-1">Boundary Address (External) <a class="header-anchor" href="#boundary-address-external" aria-label="Permalink to &quot;Boundary Address (External)&quot;">​</a></h3><p>Instruction 0x400c2000 0x40bfffff 11512 KB External Flash Read</p><h3 id="linker-segments" tabindex="-1">Linker Segments <a class="header-anchor" href="#linker-segments" aria-label="Permalink to &quot;Linker Segments&quot;">​</a></h3><p>+-----------------+---------+---------+----+------------------------+ | DESCRIPTION | START | END | AT | LINKER SEGMENT NAME | | | | | TR | | +=================+=========+=========+====+========================+ | FLA | 0x3 | 0x3 | R | drom0_0_seg | | SH mapped data: | f400010 | fc00010 | | | | | | | | | | : - .rodata | | | | | | - | | | | | | Constructors | | | | | | | | | | | | /destructors | | | | | +-----------------+---------+---------+----+------------------------+ | C | 0x3 | 0x4 | RW | dram0_0_seg (NOTE | | OMMON data RAM: | ffb0000 | 0000000 | | 1,2,3) | | | | | | | | : | | | | | | - .bss/.data | | | | | +-----------------+---------+---------+----+------------------------+ | IR | 0x4 | 0x4 | RX | iram0_0_seg | | AM for PRO cpu: | 0080000 | 00a0000 | | | | | | | | | | : | | | | | | - Interrupt | | | | | | Vectors | | | | | | - Low | | | | | | level | | | | | | | | | | | | handlers | | | | | | - X | | | | | | tensa/Espressif | | | | | | | | | | | | libraries | | | | | +-----------------+---------+---------+----+------------------------+ | R | 0x4 | 0x4 | R | rtc_iram_seg | | TC fast memory: | 00c0000 | 00c2000 | WX | (PRO_CPU only) | | | | | | | | : | | | | | | - .rtc.text | | | | | | | | | | | | (unused?) | | | | | +-----------------+---------+---------+----+------------------------+ | FLASH: | 0x4 | 0x4 | RX | iram0_2_seg | | | 00d0018 | 0400018 | | (actually FLASH) | | : - .text | | | | | +-----------------+---------+---------+----+------------------------+ | R | 0x5 | 0x5 | RW | rtc_slow_seg (NOTE | | TC slow memory: | 0000000 | 0001000 | | 4) | | | | | | | | : - . | | | | | | rtc.data/rodata | | | | | | | | | | | | (unused?) | | | | | +-----------------+---------+---------+----+------------------------+</p><p>Note</p><p>(1) Linker script will reserve space at the beginning of the segment for BT and at the end for trace memory. (2) Heap ends at the top of dram_0_seg. (3) Parts of this region is reserved for the ROM bootloader. (4) Linker script will reserve space at the beginning of the segment for co-processor reserve memory and at the end for ULP coprocessor reserve memory.</p><h2 id="_64-bit-timers" tabindex="-1">64-bit Timers <a class="header-anchor" href="#_64-bit-timers" aria-label="Permalink to &quot;64-bit Timers&quot;">​</a></h2><p>ESP32 has 4 generic timers of 64 bits (2 from Group 0 and 2 from Group 1). They&#39;re accessible as character drivers, the configuration along with a guidance on how to run the example and the description of the application level interface can be found [[here &lt;/component](\`here &lt;/component.md)s/drivers/character/timers/timer&gt;]{.title-ref}.</p><h2 id="watchdog-timers" tabindex="-1">Watchdog Timers <a class="header-anchor" href="#watchdog-timers" aria-label="Permalink to &quot;Watchdog Timers&quot;">​</a></h2><p>ESP32 has 3 WDTs. 2 MWDTS from the Timers Module and 1 RWDT from the RTC Module (Currently not supported yet). They&#39;re accessible as character drivers, The configuration along with a guidance on how to run the example and the description of the application level interface can be found [[here &lt;/component](\`here &lt;/component.md)s/drivers/character/timers/watchdog&gt;]{.title-ref}.</p><h2 id="smp" tabindex="-1">SMP <a class="header-anchor" href="#smp" aria-label="Permalink to &quot;SMP&quot;">​</a></h2><p>The ESP32 has 2 CPUs. Support is included for testing an SMP configuration. That configuration is still not yet ready for usage but can be enabled with the following configuration settings, in <code>RTOS Features --&gt; Tasks and Scheduling</code>{.interpreted-text role=&quot;menuselection&quot;}, with:</p><pre><code>CONFIG_SPINLOCK=y
CONFIG_SMP=y
CONFIG_SMP_NCPUS=2
</code></pre><p>Debug Tip: During debug session, OpenOCD may mysteriously switch from one CPU to another. This behavior can be eliminated by uncommenting one of the following in <code>scripts/esp32.cfg</code>:</p><pre><code># Only configure the PRO CPU
#set ESP32_ONLYCPU 1
# Only configure the APP CPU
#set ESP32_ONLYCPU 2
</code></pre><h2 id="wi-fi" tabindex="-1">Wi-Fi <a class="header-anchor" href="#wi-fi" aria-label="Permalink to &quot;Wi-Fi&quot;">​</a></h2><p>A standard network interface will be configured and can be initialized such as:</p><pre><code>nsh&gt; ifup wlan0
nsh&gt; wapi psk wlan0 mypasswd 3
nsh&gt; wapi essid wlan0 myssid 1
nsh&gt; renew wlan0
</code></pre><p>In this case a connection to AP with SSID <code>myssid</code> is done, using <code>mypasswd</code> as password. IP address is obtained via DHCP using <code>renew</code> command. You can check the result by running <code>ifconfig</code> afterwards.</p><p>Tip</p><p>Boards usually expose a <code>wifi</code> defconfig which enables Wi-Fi</p><p>Tip</p><p>Please check [[wapi &lt;/application](\`wapi &lt;/application.md)s/wireless/wapi/index&gt;]{.title-ref} documentation for more information about its commands and arguments.</p><p>Note</p><p>The <code>wapi psk</code> command on Station mode sets a security threshold. That is, it enables connecting only to an equally or more secure network than the set threshold. <code>wapi psk wlan0 mypasswd 3</code> sets a WPA2-PSK-secured network and enables the device to connect to networks that are equally or more secure than that (WPA3-SAE, for instance, would be eligible for connecting to).</p><h2 id="wi-fi-softap" tabindex="-1">Wi-Fi SoftAP <a class="header-anchor" href="#wi-fi-softap" aria-label="Permalink to &quot;Wi-Fi SoftAP&quot;">​</a></h2><p>It is possible to use ESP32 as an Access Point (SoftAP). Actually there are some boards config examples called sta_softap which enables this support</p><p>If you are using this board config profile you can run these commands to be able to connect your smartphone or laptop to your board:</p><pre><code>nsh&gt; ifup wlan1
nsh&gt; dhcpd_start wlan1
nsh&gt; wapi psk wlan1 mypasswd 3
nsh&gt; wapi essid wlan1 nuttxap 1
</code></pre><p>In this case, you are creating the access point <code>nuttxapp</code> in your board and to connect to it on your smartphone you will be required to type the password <code>mypasswd</code> using WPA2.</p><p>Tip</p><p>Please check [[wapi &lt;/application](\`wapi &lt;/application.md)s/wireless/wapi/index&gt;]{.title-ref} documentation for more information about its commands and arguments.</p><p>The <code>dhcpd_start</code> is necessary to let your board to associate an IP to your smartphone.</p><h2 id="bluetooth" tabindex="-1">Bluetooth <a class="header-anchor" href="#bluetooth" aria-label="Permalink to &quot;Bluetooth&quot;">​</a></h2><p>These are the steps to test Bluetooth Low Energy (BLE) scan on ESP32 (i.e. Devkit board). First configure to use the BLE board profile:</p><pre><code> make distclean
 ./tools/configure.sh esp32-devkitc:ble
 make flash ESPTOOL_PORT=/dev/ttyUSB0
</code></pre><p>Enter in the NSH shell using your preferred serial console tool and run the scan command:</p><pre><code>NuttShell (NSH) NuttX-10.2.0
nsh&gt; ifconfig
bnep0   Link encap:UNSPEC at DOWN
        inet addr:0.0.0.0 DRaddr:0.0.0.0 Mask:0.0.0.0

wlan0   Link encap:Ethernet HWaddr ac:67:b2:53:8b:ec at UP
        inet addr:10.0.0.2 DRaddr:10.0.0.1 Mask:255.255.255.0

nsh&gt; bt bnep0 scan start
nsh&gt; bt bnep0 scan stop
nsh&gt; bt bnep0 scan get
Scan result:
1.     addr:           63:14:2f:b9:9f:83 type: 1
       rssi:            -90
       response type:   3
       advertiser data: 1e ff 06 00 01 09 20 02 7c 33 a3 a7 cd c9 44 5b
2.     addr:           52:ca:05:b5:ad:77 type: 1
       rssi:            -82
       response type:   3
       advertiser data: 1e ff 06 00 01 09 20 02 03 d1 21 57 bf 19 b3 7a
3.     addr:           46:8e:b2:cd:94:27 type: 1
       rssi:            -92
       response type:   2
       advertiser data: 02 01 1a 09 ff c4 00 10 33 14 12 16 80 02 0a d4
4.     addr:           46:8e:b2:cd:94:27 type: 1
       rssi:            -92
       response type:   4
       advertiser data: 18 09 5b 4c 47 5d 20 77 65 62 4f 53 20 54 56 20
5.     addr:           63:14:2f:b9:9f:83 type: 1
       rssi:            -80
       response type:   3
    advertiser data: 1e ff 06 00 01 09 20 02 7c 33 a3 a7 cd c9 44 5b
nsh&gt;
</code></pre><h2 id="i2s" tabindex="-1">I2S <a class="header-anchor" href="#i2s" aria-label="Permalink to &quot;I2S&quot;">​</a></h2><p>The I2S peripheral is accessible using either the generic I2S audio driver or a specific audio codec driver. Also, it&#39;s possible to use the I2S character driver to bypass the audio subsystem and develop specific usages of the I2S peripheral.</p><p>Note</p><p>Note that the bit-width and sample rate can be modified &quot;on-the-go&quot; when using audio-related drivers. That is not the case for the I2S character device driver and such parameters are set on compile time through [make menuconfig]{.title-ref}.</p><p>Warning</p><p>Some upper driver implementations might not handle both transmission and reception configured at the same time on the same peripheral.</p><p>Please check for usage examples using the [[ESP32 DevKitC &lt;/platform](\`ESP32 DevKitC &lt;/platform.md)s/xtensa/esp32/boards/esp32-devkitc/index&gt;]{.title-ref}.</p><h2 id="analog-to-digital-converter-adc" tabindex="-1">Analog-to-digital converter (ADC) <a class="header-anchor" href="#analog-to-digital-converter-adc" aria-label="Permalink to &quot;Analog-to-digital converter (ADC)&quot;">​</a></h2><p>Two ADC units are available for the ESP32:</p><ul><li>ADC1 with 8 channels</li><li>ADC2 with 10 channels</li></ul><p>Those units are independent and can be used simultaneously. During bringup, GPIOs for selected channels are configured automatically to be used as ADC inputs. If available, ADC calibration is automatically applied (see <a href="https://docs.espressif.com/projects/esp-idf/en/v5.1/esp32/api-reference/peripherals/adc_calibration.html" target="_blank" rel="noreferrer">this page</a> for more details). Otherwise, a simple conversion is applied based on the attenuation and resolution.</p><p>Each ADC unit is accessible using the ADC character driver, which returns data for the enabled channels.</p><p>The ADC unit can be enabled in the menu <code>System Type --&gt; ESP32 Peripheral Selection --&gt; Analog-to-digital converter (ADC)</code>{.interpreted-text role=&quot;menuselection&quot;}.</p><p>Then, it can be customized in the menu <code>System Type --&gt; ADC Configuration</code>{.interpreted-text role=&quot;menuselection&quot;}, which includes operating mode, gain and channels.</p><p>+---------+-----------+------------+ | Channel | ADC1 GPIO | ADC2 GPIO | +=========+===========+============+ | 0 | &gt; 36 | &gt; 4 | +---------+-----------+------------+ | 1 | &gt; 37 | &gt; 0 | +---------+-----------+------------+ | 2 | &gt; 38 | &gt; 2 | +---------+-----------+------------+ | 3 | &gt; 39 | &gt; 15 | +---------+-----------+------------+ | 4 | &gt; 32 | &gt; 13 | +---------+-----------+------------+ | 5 | &gt; 33 | &gt; 12 | +---------+-----------+------------+ | 6 | &gt; 34 | &gt; 14 | +---------+-----------+------------+ | 7 8 9 | &gt; 35 | &gt; 27 25 26 | +---------+-----------+------------+</p><p>Warning</p><p>ADC2 channels 1, 2 and 3 are used as strapping pins and can present undefined behavior.</p><h2 id="using-qemu" tabindex="-1">Using QEMU <a class="header-anchor" href="#using-qemu" aria-label="Permalink to &quot;Using QEMU&quot;">​</a></h2><p>Get or build QEMU from <a href="https://github.com/espressif/qemu/wiki" target="_blank" rel="noreferrer">here</a>.</p><p>Enable the <code>ESP32_QEMU_IMAGE</code> config found in <code>Board Selection --&gt; ESP32 binary image for QEMU</code>{.interpreted-text role=&quot;menuselection&quot;}.</p><p>Build and generate the QEMU image:</p><pre><code> make bootloader
 make ESPTOOL_BINDIR=.
</code></pre><p>A QEMU-compatible <code>nuttx.merged.bin</code> binary image will be created. It can be run as:</p><pre><code> qemu-system-xtensa -nographic -machine esp32 -drive file=nuttx.merged.bin,if=mtd,format=raw
</code></pre><p>QEMU for ESP32 does not correctly define the chip revision as v3.0 so you have two options:</p><ul><li>#define <code>ESP32_IGNORE_CHIP_REVISION_CHECK</code> in <code>arch/xtensa/src/esp32/esp32_start.c</code></li><li>Emulate the efuse as described <a href="https://github.com/espressif/esp-toolchain-docs/blob/main/qemu/esp32/README.md#emulating-esp32-eco3" target="_blank" rel="noreferrer">here</a>.</li></ul><h3 id="qemu-networking" tabindex="-1">QEMU Networking <a class="header-anchor" href="#qemu-networking" aria-label="Permalink to &quot;QEMU Networking&quot;">​</a></h3><p>Networking is possible using the openeth MAC driver. Enable <code>ESP32_OPENETH</code> option and set the nic in QEMU:</p><pre><code> qemu-system-xtensa -nographic -machine esp32 -drive file=nuttx.merged.bin,if=mtd,format=raw -nic user,model=open_eth
</code></pre><h2 id="secure-boot-and-flash-encryption" tabindex="-1">Secure Boot and Flash Encryption <a class="header-anchor" href="#secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Secure Boot and Flash Encryption&quot;">​</a></h2><h3 id="secure-boot" tabindex="-1">Secure Boot <a class="header-anchor" href="#secure-boot" aria-label="Permalink to &quot;Secure Boot&quot;">​</a></h3><p>Secure Boot protects a device from running any unauthorized (i.e., unsigned) code by checking that each piece of software that is being booted is signed. On an ESP32, these pieces of software include the second stage bootloader and each application binary. Note that the first stage bootloader does not require signing as it is ROM code thus cannot be changed. This is achieved using specific hardware in conjunction with MCUboot (read more about MCUboot <a href="https://docs.mcuboot.com/" target="_blank" rel="noreferrer">here</a>).</p><p>The Secure Boot process on the ESP32 involves the following steps performed:</p><ol><li>The first stage bootloader verifies the second stage bootloader&#39;s RSA-PSS signature. If the verification is successful, the first stage bootloader loads and executes the second stage bootloader.</li><li>When the second stage bootloader loads a particular application image, the application&#39;s signature (RSA, ECDSA or ED25519) is verified by MCUboot. If the verification is successful, the application image is executed.</li></ol><p>Warning</p><p>Once enabled, Secure Boot will not boot a modified bootloader. The bootloader will only boot an application firmware image if it has a verified digital signature. There are implications for reflashing updated images once Secure Boot is enabled. You can find more information about the ESP32&#39;s Secure boot <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/security/secure-boot-v2.html" target="_blank" rel="noreferrer">here</a>.</p><p>Note</p><p>As the bootloader image is built on top of the Hardware Abstraction Layer component of <a href="https://github.com/espressif/esp-idf" target="_blank" rel="noreferrer">ESP-IDF</a>, the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">API port by Espressif</a> will be used by MCUboot rather than the original NuttX port.</p><h3 id="flash-encryption" tabindex="-1">Flash Encryption <a class="header-anchor" href="#flash-encryption" aria-label="Permalink to &quot;Flash Encryption&quot;">​</a></h3><p>Flash encryption is intended for encrypting the contents of the ESP32&#39;s off-chip flash memory. Once this feature is enabled, firmware is flashed as plaintext, and then the data is encrypted in place on the first boot. As a result, physical readout of flash will not be sufficient to recover most flash contents.</p><p>Warning</p><p>After enabling Flash Encryption, an encryption key is generated internally by the device and cannot be accessed by the user for re-encrypting data and re-flashing the system, hence it will be permanently encrypted. Re-flashing an encrypted system is complicated and not always possible. You can find more information about the ESP32&#39;s Flash Encryption <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/security/flash-encryption.html" target="_blank" rel="noreferrer">here</a>.</p><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>First of all, we need to install <code>imgtool</code> (a MCUboot utility application to manipulate binary images) and <code>esptool</code> (the ESP32 toolkit):</p><pre><code> pip install imgtool esptool==4.8.dev4
</code></pre><p>We also need to make sure that the python modules are added to <code>PATH</code>:</p><pre><code> echo &quot;PATH=PATH:/home/USER/.local/bin&quot; &gt;&gt; ~/.bashrc
</code></pre><p>Now, we will create a folder to store the generated keys (such as <code>~/signing_keys</code>):</p><pre><code> mkdir ~/signing_keys &amp;&amp; cd ~/signing_keys
</code></pre><p>With all set up, we can now generate keys to sign the bootloader and application binary images, respectively, of the compiled project:</p><pre><code> espsecure.py generate_signing_key --version 2 bootloader_signing_key.pem
 imgtool keygen --key app_signing_key.pem --type rsa-3072
</code></pre><p>Important</p><p>The contents of the key files must be stored securely and kept secret.</p><h3 id="enabling-secure-boot-and-flash-encryption" tabindex="-1">Enabling Secure Boot and Flash Encryption <a class="header-anchor" href="#enabling-secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Enabling Secure Boot and Flash Encryption&quot;">​</a></h3><p>To enable Secure Boot for the current project, go to the project&#39;s NuttX directory, execute <code>make menuconfig</code> and the following steps:</p><blockquote><ol><li>Enable experimental features in <code>Build Setup --&gt; Show experimental options</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable MCUboot in <code>Application Configuration --&gt; Bootloader Utilities --&gt; MCUboot</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Change image type to <code>MCUboot-bootable format</code> in <code>System Type --&gt; Application Image Configuration --&gt; Application Image Format</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable building MCUboot from the source code by selecting <code>Build binaries from source</code>; in <code>System Type --&gt; Application Image Configuration --&gt; Source for bootloader binaries</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable Secure Boot in <code>System Type --&gt; Application Image Configuration --&gt; Enable hardware Secure Boot in bootloader</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>If you want to protect the SPI Bus against data sniffing, you can enable Flash Encryption in <code>System Type --&gt; Application Image Configuration --&gt; Enable Flash Encryption on boot</code>{.interpreted-text role=&quot;menuselection&quot;}.</li></ol></blockquote><p>Now you can design an update and confirm agent to your application. Check the <a href="https://docs.mcuboot.com/design.html" target="_blank" rel="noreferrer">MCUboot design guide</a> and the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">MCUboot Espressif port documentation</a> for more information on how to apply MCUboot. Also check some <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/readme-nuttx.md" target="_blank" rel="noreferrer">notes about the NuttX MCUboot port</a>, the <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/PORTING.md" target="_blank" rel="noreferrer">MCUboot porting guide</a> and some <a href="https://github.com/apache/nuttx-apps/tree/master/examples/mcuboot" target="_blank" rel="noreferrer">examples of MCUboot applied in NuttX applications</a>.</p><p>After you developed an application which implements all desired functions, you need to flash it into the primary image slot of the device (it will automatically be in the confirmed state, you can learn more about image confirmation <a href="https://docs.mcuboot.com/design.html#image-swapping" target="_blank" rel="noreferrer">here</a>). To flash to the primary image slot, select <code>Application image primary slot</code> in <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} and compile it using <code>make -j ESPSEC_KEYDIR=~/signing_keys</code>.</p><p>When creating update images, make sure to change <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} to <code>Application image secondary slot</code>.</p><p>Important</p><p>When deploying your application, make sure to disable UART Download Mode by selecting <code>Permanently disabled</code> in <code>System Type --&gt; Application Image Configuration --&gt; UART ROM download mode</code>{.interpreted-text role=&quot;menuselection&quot;} and change usage mode to <code>Release</code> in [System Type --&gt; Application Image Configuration --&gt; Enable usage mode]{.title-ref}. <strong>After disabling UART Download Mode you will not be able to flash other images through UART.</strong></p><h2 id="things-to-do" tabindex="-1">Things to Do <a class="header-anchor" href="#things-to-do" aria-label="Permalink to &quot;Things to Do&quot;">​</a></h2><ol><li><p>Lazy co-processor save logic supported by Xtensa. That logic works like this:</p><p>a. CPENABLE is set to zero on each context switch, disabling all co-processors. b. If/when the task attempts to use the disabled co-processor, an exception occurs c. The co-processor exception handler re-enables the co-processor.</p><p>Instead, the NuttX logic saves and restores CPENABLE on each context switch. This has disadvantages in that (1) co-processor context will be saved and restored even if the co-processor was never used, and (2) tasks must explicitly enable and disable co-processors.</p></li><li><p>Currently the Xtensa port copies register state save information from the stack into the TCB. A more efficient alternative would be to just save a pointer to a register state save area in the TCB. This would add some complexity to signal handling and also to up_initialstate(). But the performance improvement might be worth the effort.</p></li><li><p>See SMP-related issues above</p></li></ol><h2 class="title-ref" id="managing-esptool-on-virtual-environment" tabindex="-1">_[Managing esptool on virtual environment] <a class="header-anchor" href="#managing-esptool-on-virtual-environment" aria-label="Permalink to &quot;\\_[Managing esptool on virtual environment]{.title-ref}&quot;">​</a></h2><p>This section describes how to install <code>esptool</code>, <code>imgtool</code> or any other Python packages in a proper environment.</p><p>Normally, a Linux-based OS would already have Python 3 installed by default. Up to a few years ago, you could simply call <code>pip install</code> to install packages globally. However, this is no longer recommended as it can lead to conflicts between packages and versions. The recommended way to install Python packages is to use a virtual environment.</p><p>A virtual environment is a self-contained directory that contains a Python installation for a particular version of Python, plus a number of additional packages. You can create a virtual environment for each project you are working on, and install the required packages in that environment.</p><p>Two alternatives are explained below, you can select any one of those.</p><h3 id="using-pipx-recommended" tabindex="-1">Using pipx (recommended) <a class="header-anchor" href="#using-pipx-recommended" aria-label="Permalink to &quot;Using pipx (recommended)&quot;">​</a></h3><p><code>pipx</code> is a tool that makes it easy to install Python packages in a virtual environment. To install <code>pipx</code>, you can run the following command (using apt as example):</p><pre><code> apt install pipx
</code></pre><p>Once you have installed <code>pipx</code>, you can use it to install Python packages in a virtual environment. For example, to install the <code>esptool</code> package, you can run the following command:</p><pre><code> pipx install esptool
</code></pre><p>This will create a new virtual environment in the <code>~/.local/pipx/venvs</code> directory, which contains the <code>esptool</code> package. You can now use the <code>esptool</code> command as normal, and so will the build system.</p><p>Make sure to run <code>pipx ensurepath</code> to add the <code>~/.local/bin</code> directory to your <code>PATH</code>. This will allow you to run the <code>esptool</code> command from any directory.</p><h3 id="using-venv-alternative" tabindex="-1">Using venv (alternative) <a class="header-anchor" href="#using-venv-alternative" aria-label="Permalink to &quot;Using venv (alternative)&quot;">​</a></h3><p>To create a virtual environment, you can use the <code>venv</code> module, which is included in the Python standard library. To create a virtual environment, you can run the following command:</p><pre><code> python3 -m venv myenv
</code></pre><p>This will create a new directory called <code>myenv</code> in the current directory, which contains a Python installation and a copy of the Python standard library. To activate the virtual environment, you can run the following command:</p><pre><code> source myenv/bin/activate
</code></pre><p>This will change your shell prompt to indicate that you are now working in the virtual environment. You can now install packages using <code>pip</code>. For example, to install the <code>esptool</code> package, you can run the following command:</p><pre><code> pip install esptool
</code></pre><p>This will install the <code>esptool</code> package in the virtual environment. You can now use the <code>esptool</code> command as normal. When you are finished working in the virtual environment, you can deactivate it by running the following command:</p><pre><code> deactivate
</code></pre><p>This will return your shell prompt to its normal state. You can reactivate the virtual environment at any time by running the <code>source myenv/bin/activate</code> command again. You can also delete the virtual environment by deleting the directory that contains it.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,226)]))}const m=t(s,[["render",i]]);export{u as __pageData,m as default};
