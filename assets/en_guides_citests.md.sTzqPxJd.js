import{_ as s,c as a,al as e,o as n}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Running CI Test Locally","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/citests.md","filePath":"en/guides/citests.md"}'),i={name:"en/guides/citests.md"};function o(l,t,p,c,r,u){return n(),a("div",null,t[0]||(t[0]=[e(`<h1 id="running-ci-test-locally" tabindex="-1">Running CI Test Locally <a class="header-anchor" href="#running-ci-test-locally" aria-label="Permalink to &quot;Running CI Test Locally&quot;">​</a></h1><p>NuttX automatically runs continuous integration (CI) tests on <a href="https://nuttx.apache.org/docs/latest/guides/simulator.html" target="_blank" rel="noreferrer">simulator</a> target when new pull request is submitted. To avoid the tests failing you can also run them locally on your computer prior to submitting new pull request. This page describes the step by step manual to do so.</p><h2 id="configuring-nuttx" tabindex="-1">Configuring NuttX <a class="header-anchor" href="#configuring-nuttx" aria-label="Permalink to &quot;Configuring NuttX&quot;">​</a></h2><p>NuttX has a simulator target that allows the user to run NuttX as a regular program on a computer. The simulator target with CI test is configured and compiled followingly.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> ./tools/configure.sh sim:citest</span></span>
<span class="line"><span> make</span></span></code></pre></div></blockquote><p>Now you can run the simulator to check the configuration was successful.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./nuttx</span></span>
<span class="line"><span>login: admin</span></span>
<span class="line"><span>password: Administrator</span></span></code></pre></div></blockquote><p>You should see NuttX shell with built in test applications. Now you can exit the simulator.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; poweroff</span></span>
<span class="line"><span></span></span>
<span class="line"><span> # we&#39;re back at the Linux prompt.</span></span></code></pre></div></blockquote><h2 id="running-ci-tests" tabindex="-1">Running CI Tests <a class="header-anchor" href="#running-ci-tests" aria-label="Permalink to &quot;Running CI Tests&quot;">​</a></h2><p>Running CI tests locally requires Minicom and Python 3.6 or newer to be installed on the system. Other requirements can be installed with following set of commands.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd tools/ci/testrun/env</span></span>
<span class="line"><span> pip3 install -r requirements.txt</span></span>
<span class="line"><span> cd ..</span></span>
<span class="line"><span> cd script</span></span></code></pre></div></blockquote><p>Now you have everything prepared to run CI tests. The tests themself are run by following command.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> python3 -m pytest -m &#39;common or sim&#39; ./ -B sim -P &lt;nuttx-path&gt; -L &lt;log-path&gt; -R sim -C --json=&lt;log-path&gt;/pytest.json</span></span></code></pre></div></blockquote><p>Where nuttx-path is an absolute path to NuttX root directory and log-path is a user defined directory to which tests log are saved.</p>`,15)]))}const g=s(i,[["render",o]]);export{h as __pageData,g as default};
