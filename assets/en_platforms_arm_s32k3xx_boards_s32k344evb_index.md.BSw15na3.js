import{_ as t,c as a,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"NXP S32K344EVB","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/s32k3xx/boards/s32k344evb/index.md","filePath":"en/platforms/arm/s32k3xx/boards/s32k344evb/index.md"}'),n={name:"en/platforms/arm/s32k3xx/boards/s32k344evb/index.md"};function s(i,e,l,d,p,h){return r(),a("div",null,e[0]||(e[0]=[o(`<h1 id="nxp-s32k344evb" tabindex="-1">NXP S32K344EVB <a class="header-anchor" href="#nxp-s32k344evb" aria-label="Permalink to &quot;NXP S32K344EVB&quot;">​</a></h1><p><a href="https://www.nxp.com/design/development-boards/automotive-development-platforms/s32k-mcu-platforms/s32k3x4-q257-full-featured-general-purpose-development-board:S32K3X4EVB-Q257" target="_blank" rel="noreferrer">NXP S32K3X4EVB-Q257</a> is an evaluation board for the <a href="https://www.nxp.com/products/processors-and-microcontrollers/s32-automotive-platform/s32k-general-purpose-mcus/s32k3-microcontrollers-for-general-purpose:S32K3" target="_blank" rel="noreferrer">NXP S32K344 MCU</a> based on a Arm Cortex-M7 core (Lock-Step).</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>NXP FS32K344

:   -   Lock-Step Configuration
    -   160 MHz Clock (Max.)
    -   4000 Kb Flash
    -   512 Kb RAM
</code></pre><ul><li><p>NXP FS26 Safety System Basis Chip</p></li><li></li></ul><pre><code>Connectivity:

:   -   OpenSDA UART (Console @ 115,200 baud)
    -   2x Secure CAN transceivers
    -   I/O headers with GPIO, I2C, SPI, etc.
</code></pre><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default, the serial console will be provided on the OpenSDA VCOM port:</p><hr><p>OpenSDA UART RX PTA15 LPUART6_RX OpenSDA UART TX PTA16 LPUART6_TX</p><hr><p>USB drivers for the PEmicro CDC Serial Port are available here: <a href="http://www.pemicro.com/opensda/" target="_blank" rel="noreferrer">http://www.pemicro.com/opensda/</a></p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">Leds <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;Leds&quot;">​</a></h3><p>The S32K344EVB has two RGB LEDs:</p><hr><p>RedLED0 PTA29 EMIOS1 CH12 / EMIOS2 CH12 GreenLED0 PTA30 EMIOS1 CH13 / EMIOS2 CH13 BlueLED0 PTA31 EMIOS1 CH14 / FXIO D0</p><hr><hr><p>RedLED1 PTB18 EMIOS1 CH15 / EMIOS2 CH14 / FXIO D1 GreenLED1 PTB25 EMIOS1 CH21 / EMIOS2 CH21 / FXIO D6 BlueLED1 PTE12 EMIOS1 CH5 / FXIO D8</p><hr><p>An output of &#39;1&#39; illuminates the LED.</p><p>If CONFIG_ARCH_LEDS is not defined, then the user can control the LEDs in any way. The following definitions are used to access individual RGB components (see s32k344evb.h):</p><ul><li>GPIO_LED0_R</li><li>GPIO_LED0_G</li><li>GPIO_LED0_B</li><li>GPIO_LED1_R</li><li>GPIO_LED1_G</li><li>GPIO_LED1_B</li></ul><p>The RGB components could, alternatively, be controlled through PWM using the common RGB LED driver.</p><p>If CONFIG_ARCH_LEDs is defined, then NuttX will control the LEDs on board the S32K344EVB. The following definitions describe how NuttX controls the LEDs:</p><p>State Description RED GREEN BLUE</p><hr><p>LED_STARTED NuttX has been started OFF OFF OFF LED_HEAPALLOCATE Heap has been allocated OFF OFF ON LED_IRQSENABLED Interrupts enabled OFF OFF ON LED_STACKCREATED LED_INIRQ LED_SIGNAL LED_ASSERTION Idle stack created In an interrupt In a signal handler An assertion failed OFF ON OFF LED_PANIC LED_IDLE The system has crashed S32K344 in sleep mode FLASH OFF OFF</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>The S32K344EVB supports two buttons:</p><hr><p>SW0 PTB26 EIRQ13 / WKPU41 SW1 PTB19 WKPU38</p><hr><h2 id="opensda-notes" tabindex="-1">OpenSDA Notes <a class="header-anchor" href="#opensda-notes" aria-label="Permalink to &quot;OpenSDA Notes&quot;">​</a></h2><ul><li>USB drivers for the PEmicro CDC Serial Port are available here: <a href="http://www.pemicro.com/opensda/" target="_blank" rel="noreferrer">http://www.pemicro.com/opensda/</a></li><li>The drag&#39;n&#39;drog interface expects files in .srec format.</li></ul><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each S32K344EVB configuration is maintained in a sub-directory and can be selected as follows:</p><pre><code>tools/configure.sh s32k344evb:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the sub-directories listed in the next paragraph.</p><p>NOTES (common for all configurations):</p><ol><li></li></ol><pre><code>This configuration uses the mconf-based configuration tool. To change this configuration using that tool, you should:

:   a.  Build and install the kconfig-mconf tool. See
        nuttx/README.txt. Also see additional README.txt files in
        the NuttX tools repository.
    b.  Execute \\&#39;make menuconfig\\&#39; in nuttx/ in order to start the
        reconfiguration process.
</code></pre><ol start="2"><li>Unless otherwise stated, the serial console used is LPUART6 at 115,200 8N1.</li></ol><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at apps/examples/nsh. Support for builtin applications is enabled, but in the base configuration the only application selected is the &quot;Hello, World!&quot; example.</p>`,47)]))}const f=t(n,[["render",s]]);export{u as __pageData,f as default};
