import{_ as t,c as o,al as i,o as a}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"i2c I2C Tool","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/system/i2c/index.md","filePath":"en/applications/system/i2c/index.md"}'),r={name:"en/applications/system/i2c/index.md"};function d(n,e,s,l,c,h){return a(),o("div",null,e[0]||(e[0]=[i(`<h1 id="i2c-i2c-tool" tabindex="-1"><code>i2c</code> I2C Tool <a class="header-anchor" href="#i2c-i2c-tool" aria-label="Permalink to &quot;\`i2c\` I2C Tool&quot;">​</a></h1><p>The I2C tool provides a way to debug I2C related problems. This README file will provide usage information for the I2C tools.</p><h2 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h2><ul><li>System Requirements <ul><li>I2C Driver</li><li>Configuration Options</li></ul></li><li>Help</li><li>Common Line Form</li><li>Common Command Options <ul><li>_<a href="./.html">Sticky</a> Options</li><li>Environment variables</li><li>Common Option Summary</li></ul></li><li>Command summary <ul><li><code>bus</code></li><li><code>dev</code></li><li><code>get</code></li><li><code>set</code></li><li><code>verf</code></li></ul></li><li>I2C Build Configuration <ul><li>NuttX Configuration Requirements</li><li>I2C Tool Configuration Options</li></ul></li></ul><h2 id="system-requirements" tabindex="-1">System Requirements <a class="header-anchor" href="#system-requirements" aria-label="Permalink to &quot;System Requirements&quot;">​</a></h2><p>The I2C tool is designed to be implemented as a NuttShell (NSH) add-on. Read the <code>apps/nshlib/README.md</code> file for information about add-ons.</p><h3 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h3><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> – Build the tools as an NSH built-in command.</li><li><code>CONFIG_I2CTOOL_MINBUS</code> – Smallest bus index supported by the hardware (default <code>0</code>).</li><li><code>CONFIG_I2CTOOL_MAXBUS</code> – Largest bus index supported by the hardware (default <code>3</code>).</li><li><code>CONFIG_I2CTOOL_MINADDR</code> – Minimum device address (default: <code>0x03</code>).</li><li><code>CONFIG_I2CTOOL_MAXADDR</code> – Largest device address (default: <code>0x77</code>).</li><li><code>CONFIG_I2CTOOL_MAXREGADDR</code> – Largest register address (default: <code>0xff</code>).</li><li><code>CONFIG_I2CTOOL_DEFFREQ</code> – Default frequency (default: <code>4000000</code>).</li></ul><h2 id="help" tabindex="-1">Help <a class="header-anchor" href="#help" aria-label="Permalink to &quot;Help&quot;">​</a></h2><p>First of all, the I2C tools supports a pretty extensive help output. That help output can be view by entering either:</p><pre><code>nsh&gt; i2c help
</code></pre><p>or:</p><pre><code>nsh&gt; i2c ?
</code></pre><p>Here is an example of the help output. I shows the general form of the command line, the various I2C commands supported with their unique command line options, and a more detailed summary of the command I2C command options:</p><pre><code>nsh&gt; i2c help

Usage: i2c &lt;cmd&gt; [arguments]
Where &lt;cmd&gt; is one of:

  Show help     : ?
  List buses    : bus
  List devices  : dev [OPTIONS] &lt;first&gt; &lt;last&gt;
  Read register : get [OPTIONS] [&lt;repetitions&gt;]
  Show help     : help
  Write register: set [OPTIONS] &lt;value&gt; [&lt;repetitions&gt;]
  Verify access : verf [OPTIONS] &lt;value&gt; [&lt;repetitions&gt;]

  Where common _sticky_ OPTIONS include:
    [-a addr] is the I2C device address (hex).  Default: 03 Current: 03
    [-b bus] is the I2C bus number (decimal).  Default: 1 Current: 1
    [-r regaddr] is the I2C device register address (hex).  Default: 00 Current: 00
    [-w width] is the data width (8 or 16 decimal).  Default: 8 Current: 8
    [-s|n], send/don&#39;t send start between command and data.  Default: -n Current: -n
    [-i|j], Auto increment|don&#39;t increment regaddr on repetitions.  Default: NO Current: NO
    [-f freq] I2C frequency.  Default: 100000 Current: 100000
</code></pre><p><strong>Notes</strong>:</p><ul><li>An environment variable like <code>PATH</code> may be used for any argument.</li><li>Arguments are _<a href="./.html">sticky</a>. For example, once the I2C address is specified, that address will be reused until it is changed.</li></ul><p><strong>Warning</strong>:</p><ul><li>The I2C dev command may have bad side effects on your I2C devices. Use only at your own risk.</li></ul><h2 id="command-line-form" tabindex="-1">Command Line Form <a class="header-anchor" href="#command-line-form" aria-label="Permalink to &quot;Command Line Form&quot;">​</a></h2><p>The I2C is started from NSH by invoking the <code>i2c</code> command from the NSH command line. The general form of the <code>i2c</code> command is:</p><pre><code>i2c &lt;cmd&gt; [arguments]
</code></pre><p>Where <code>&lt;cmd&gt;</code> is a sub-command and identifies one I2C operations supported by the tool. <code>[arguments]</code> represents the list of arguments needed to perform the I2C operation. Those arguments vary from command to command as described below. However, there is also a core set of common <code>OPTIONS</code> supported by all commands. So perhaps a better representation of the general I2C command would be:</p><pre><code>i2c &lt;cmd&gt; [OPTIONS] [arguments]
</code></pre><p>Where <code>[OPTIONS]</code> represents the common options and and arguments represent the operation-specific arguments.</p><h2 id="common-command-options" tabindex="-1">Common Command Options <a class="header-anchor" href="#common-command-options" aria-label="Permalink to &quot;Common Command Options&quot;">​</a></h2><h3 id="sticky-options" tabindex="-1">&quot;Sticky&quot; Options <a class="header-anchor" href="#sticky-options" aria-label="Permalink to &quot;&quot;Sticky&quot; Options&quot;">​</a></h3><p>In order to interact with I2C devices, there are a number of I2C parameters that must be set correctly. One way to do this would be to provide to set the value of each separate command for each I2C parameter. The I2C tool takes a different approach, instead: The I2C configuration can be specified as a (potentially long) sequence of command line arguments.</p><p>These arguments, however, are _<a href="./.html">sticky</a>. They are sticky in the sense that once you set the I2C parameter, that value will remain until it is reset with a new value (or until you reset the board).</p><h3 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h3><p><strong>Note</strong> also that if environment variables are not disabled (by <code>CONFIG_DISABLE_ENVIRON=y</code>), then these options may also be environment variables. Environment variables must be preceded with the special character \`\`. For example, <code>PWD</code> is the variable that holds the current working directory and so <code>PWD</code> could be used as a command line argument. The use of environment variables on the I2C tools command is really only useful if you wish to write NSH scripts to execute a longer, more complex series of I2C commands.</p><h3 id="common-option-summary" tabindex="-1">Common Option Summary <a class="header-anchor" href="#common-option-summary" aria-label="Permalink to &quot;Common Option Summary&quot;">​</a></h3><ul><li><p><code>[-a addr]</code> is the I2C device address (hex). Default: <code>03</code> Current: <code>03</code></p><p>The <code>[-a addr]</code> sets the I2C device address. The valid range is <code>0x03</code> through <code>0x77</code> (this valid range is controlled by the configuration settings <code>CONFIG_I2CTOOL_MINADDR</code> and <code>CONFIG_I2CTOOL_MAXADDR</code>). If you are working with the same device, the address needs to be set only once.</p><p>All I2C address are 7-bit, hexadecimal values.</p><p><strong>Note 1</strong>: Notice in the <code>help</code> output above it shows both default value of the I2C address (<code>03</code> hex) and the current address value (also <code>03</code> hex).</p><p><strong>Note 2</strong>: Sometimes I2C addresses are represented as 8-bit values (with bit zero indicating a read or write operation). The I2C tool uses a 7-bit representation of the address with bit 7 unused and no read/write indication in bit 0. Essentially, the 7-bit address is like the 8-bit address shifted right by 1.</p><p><strong>Note 3</strong>: Most I2C bus controllers will also support 10-bit addressing. That capability has not been integrated into the I2C tool as of this writing.</p></li><li><p><code>[-b bus]</code> is the I2C bus number (decimal). Default: <code>1</code> Current: <code>1</code></p><p>Most devices support multiple I2C devices and also have unique bus numbering. This option identifies which bus you are working with now. The valid range of bus numbers is controlled by the configuration settings <code>CONFIG_I2CTOOL_MINBUS</code> and <code>CONFIG_I2CTOOL_MAXBUS</code>.</p><p>The bus numbers are small, decimal numbers.</p></li><li><p><code>[-r regaddr]</code> is the I2C device register address (hex). Default: <code>00</code> Current: <code>00</code></p><p>The I2C set and get commands will access registers on the I2C device. This option selects the device register address (sometimes called the sub-address). This is an 8-bit hexadecimal value. The maximum value is determined by the configuration setting <code>CONFIG_I2CTOOL_MAXREGADDR</code>.</p></li><li><p><code>[-w width]</code> is the data width (8 or 16 decimal). Default: <code>8</code> Current: <code>8</code></p><p>Device register data may be 8-bit or 16-bit. This options selects one of those two data widths.</p></li><li><p><code>[-s|n]</code>, send/don&#39;t send start between command and data. Default: <code>-n</code> Current: <code>-n</code></p><p>This determines whether or not there should be a new I2C START between sending of the register address and sending/receiving of the register data.</p></li><li><p><code>[-i|j]</code>, Auto increment|don&#39;t increment <code>regaddr</code> on repetitions. Default: <code>NO</code> Current: <code>NO</code></p><p>On commands that take a optional number of repetitions, the option can be used to temporarily increment the <code>regaddr</code> value by one on each repetition.</p></li><li><p><code>[-f freq]</code> I2C frequency. Default: <code>400000</code> Current: <code>400000</code></p><p>The <code>[-f freq]</code> sets the frequency of the I2C device.</p></li></ul><h2 id="command-summary" tabindex="-1">Command Summary <a class="header-anchor" href="#command-summary" aria-label="Permalink to &quot;Command Summary&quot;">​</a></h2><p>We have already seen the I2C help (or <code>?</code>) commands above. This section will discuss the remaining commands.</p><h3 id="list-buses-bus-options" tabindex="-1">List buses: <code>bus [OPTIONS]</code> <a class="header-anchor" href="#list-buses-bus-options" aria-label="Permalink to &quot;List buses: \`bus [OPTIONS]\`&quot;">​</a></h3><p>This command will simply list all of the configured I2C buses and indicate which are supported by the driver and which are not:</p><pre><code>BUS   EXISTS?
Bus 1: YES
Bus 2: NO
</code></pre><p>The valid range of bus numbers is controlled by the configuration settings <code>CONFIG_I2CTOOL_MINBUS</code> and <code>CONFIG_I2CTOOL_MAXBUS</code>.</p><h3 id="list-devices-dev-options-first-last" tabindex="-1">List devices: <code>dev [OPTIONS] &lt;first&gt; &lt;last&gt;</code> <a class="header-anchor" href="#list-devices-dev-options-first-last" aria-label="Permalink to &quot;List devices: \`dev [OPTIONS] &lt;first&gt; &lt;last&gt;\`&quot;">​</a></h3><p>The <code>dev</code> command will attempt to identify all of the I2C devices on the selected bus. The <code>&lt;first&gt;</code> and <code>&lt;last&gt;</code> arguments are 7-bit, hexadecimal I2C addresses. This command will examine a range of addresses beginning with <code>&lt;first&gt;</code> and continuing through <code>&lt;last&gt;</code>. It will request the value of register address zero from each device.</p><p>The register address of zero is always used by default. The previous _<a href="./.html">sticky</a> register address is ignored. Some devices may not respond to ergister address zero, however. To work around this, you can provide a new _<a href="./.html">sticky</a> register address on the command as an option to the &#39;dev&#39; command. Then that new _<a href="./.html">sticky</a> register address will be used instead of the address zero.</p><p>If the device at an I2C address responds to the read request, then the <code>dev</code> command will display the I2C address of the device. If the device does not respond, this command will display <code>--</code>. The resulting display looks like:</p><pre><code>nsh&gt; i2c dev 03 77

     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:         -- -- -- -- -- -- -- -- -- -- -- -- --
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- -- 49 -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --
</code></pre><p>Warnings:</p><ul><li>The I2C dev command may have bad side effects on certain I2C devices. For example, if could cause data loss in an EEPROM device.</li><li>The I2C dev command also depends upon the underlying behavior of the I2C driver. How does the driver respond to addressing failures?</li></ul><h3 id="read-register-get-options" tabindex="-1">Read register: <code>get [OPTIONS]</code> <a class="header-anchor" href="#read-register-get-options" aria-label="Permalink to &quot;Read register: \`get [OPTIONS]\`&quot;">​</a></h3><p>This command will read the value of the I2C register using the selected I2C parameters in the common options. No other arguments are required.</p><p>This command with write the 8-bit address value then read an 8- or 16-bit data value from the device. Optionally, it may re-start the transfer before obtaining the data.</p><p>An optional <code>&lt;repetitions&gt;</code> argument can be supplied to repeat the read operation an arbitrary number of times (up to 2 billion). If auto-increment is select (<code>-i</code>), then the register address will be temporarily incremented on each repetitions. The increment is temporary in the since that it will not alter the _<a href="./.html">sticky</a> value of the register address.</p><p>On success, the output will look like the following (the data value read will be shown as a 4-character hexadecimal number if the 16-bit data width option is selected):</p><pre><code>READ Bus: 1 Addr: 49 Subaddr: 04 Value: 96
</code></pre><p>All values (except the bus numbers) are hexadecimal.</p><h3 id="write-register-set-options-value" tabindex="-1">Write register: <code>set [OPTIONS] &lt;value&gt;</code> <a class="header-anchor" href="#write-register-set-options-value" aria-label="Permalink to &quot;Write register: \`set [OPTIONS] &lt;value&gt;\`&quot;">​</a></h3><p>This command will write a value to an I2C register using the selected I2C parameters in the common options. The value to write must be provided as the final, hexadecimal value. This value may be an 8-bit value (in the range <code>00</code>-<code>ff</code>) or a 16-bit value (in the range <code>0000</code>-<code>ffff</code>), depending upon the selected data width.</p><p>This command will write the 8-bit address value then write the 8- or 16-bit data value to the device. Optionally, it may re-start the transfer before writing the data.</p><p>An optional <code>&lt;repetitions&gt;</code> argument can be supplied to repeat the write operation an arbitrary number of times (up to 2 billion). If auto-increment is select (<code>-i</code>), then the register address will be temporarily incremented on each repetitions. The increment is temporary in the since that it will not alter the _<a href="./.html">sticky</a> value of the register address.</p><p>On success, the output will look like the following (the data value written will be shown as a 4-character hexadecimal number if the 16-bit data width option is selected):</p><pre><code>WROTE Bus: 1 Addr: 49 Subaddr: 04 Value: 96
</code></pre><p>All values (except the bus numbers) are hexadecimal.</p><h3 id="verify-access-verf-options-value-repetitions" tabindex="-1">Verify access: <code>verf [OPTIONS] &lt;value&gt; [&lt;repetitions&gt;]</code> <a class="header-anchor" href="#verify-access-verf-options-value-repetitions" aria-label="Permalink to &quot;Verify access: \`verf [OPTIONS] &lt;value&gt; [&lt;repetitions&gt;]\`&quot;">​</a></h3><p>This command combines writing and reading from an I2C device register. It will write a value to an will write a value to an I2C register using the selected I2C parameters in the common options just as described for tie <code>set</code> command. Then this command will read the value back just as described with the <code>get</code> command. Finally, this command will compare the value read and against the value written and emit an error message if they do not match.</p><p>If no value is provided, then this command will use the register address itself as the data, providing for a address-in-address test.</p><p>An optional <code>&lt;repetitions&gt;</code> argument can be supplied to repeat the verify operation an arbitrary number of times (up to 2 billion). If auto-increment is select (<code>-i</code>), then the register address will be temporarily incremented on each repetitions. The increment is temporary in the since that it will not alter the <code>sticky</code> value of the register address.</p><p>On success, the output will look like the following (the data value written will be shown as a 4-character hexadecimal number if the 16-bit data width option is selected):</p><pre><code>VERIFY Bus: 1 Addr: 49 Subaddr: 04 Wrote: 96 Read: 92 FAILURE
</code></pre><p>All values (except the bus numbers) are hexadecimal.</p><h2 id="i2c-build-configuration" tabindex="-1">I2C Build Configuration <a class="header-anchor" href="#i2c-build-configuration" aria-label="Permalink to &quot;I2C Build Configuration&quot;">​</a></h2><h3 id="nuttx-configuration-requirements" tabindex="-1">NuttX Configuration Requirements <a class="header-anchor" href="#nuttx-configuration-requirements" aria-label="Permalink to &quot;NuttX Configuration Requirements&quot;">​</a></h3><p>The I2C tools requires the following in your NuttX configuration:</p><ol><li><p>Application configuration.</p><p>Using <code>make menuconfig</code>, select the i2c tool. The following definition should appear in your <code>.config</code> file:</p><pre><code>CONFIG_SYSTEM_I2C=y
</code></pre></li><li><p>Device-specific I2C driver support must be enabled:</p><pre><code>CONFIG_I2C_DRIVER=y
</code></pre><p>The I2C tool will then use the I2C character driver to access the I2C bus. These devices will reside at <code>/dev/i2cN</code> where <code>N</code> is the I2C bus number.</p><p><strong>Note</strong>: The I2C driver <code>ioctl</code> interface is defined in <code>include/nuttx/i2c/i2c_master.h</code>.</p></li></ol><h3 id="i2c-tool-configuration-options" tabindex="-1">I2C Tool Configuration Options <a class="header-anchor" href="#i2c-tool-configuration-options" aria-label="Permalink to &quot;I2C Tool Configuration Options&quot;">​</a></h3><p>The default behavior of the I2C tool can be modified by the setting the options in the NuttX configuration. This configuration is the <code>defconfig</code> file in your configuration directory that is copied to the NuttX top-level directory as <code>.config</code> when NuttX is configured.</p><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> – Build the tools as an NSH built-in command.</li><li><code>CONFIG_I2CTOOL_MINBUS</code> – Smallest bus index supported by the hardware (default <code>0</code>).</li><li><code>CONFIG_I2CTOOL_MAXBUS</code> – Largest bus index supported by the hardware (default <code>3</code>).</li><li><code>CONFIG_I2CTOOL_MINADDR</code> – Minimum device address (default: <code>0x03</code>).</li><li><code>CONFIG_I2CTOOL_MAXADDR</code> – Largest device address (default: <code>0x77</code>).</li><li><code>CONFIG_I2CTOOL_MAXREGADDR</code> – Largest register address (default: <code>0xff</code>).</li><li><code>CONFIG_I2CTOOL_DEFFREQ</code> – Default frequency (default: <code>4000000</code>).</li></ul>`,74)]))}const p=t(r,[["render",d]]);export{m as __pageData,p as default};
