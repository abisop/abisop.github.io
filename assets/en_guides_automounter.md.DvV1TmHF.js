import{_ as t,c as a,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Auto-Mounter","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/automounter.md","filePath":"en/guides/automounter.md"}'),i={name:"en/guides/automounter.md"};function r(s,e,d,u,l,m){return n(),a("div",null,e[0]||(e[0]=[o(`<h1 id="auto-mounter" tabindex="-1">Auto-Mounter <a class="header-anchor" href="#auto-mounter" aria-label="Permalink to &quot;Auto-Mounter&quot;">​</a></h1><h2 id="general-description" tabindex="-1">General Description <a class="header-anchor" href="#general-description" aria-label="Permalink to &quot;General Description&quot;">​</a></h2><p>NuttX implements an auto-mounter than can make working with SD cards or other removable media easier. With the auto-mounter, the file system will be automatically mounted when media is inserted and automatically unmounted when the media is removed.</p><p>The auto is enable by selecting in the NuttX configuration:</p><pre><code>CONFIG_FS_AUTOMOUNTER=y
</code></pre><p>WARNING: SD cards should never be removed without first unmounting them. This is to avoid data and possible corruption of the file system. Certainly this is the case if you are writing to the SD card at the time of the removal. If you use the SD card for read-only access, however, then I cannot think of any reason why removing the card without mounting would be harmful.</p><p>For applications that write to the removable media, the automatic unmount is still beneficial (as opposed to leaving a broken mount in place) although should not be relied upon for a proper solution.</p><h2 id="board-specific-support" tabindex="-1">Board-Specific Support <a class="header-anchor" href="#board-specific-support" aria-label="Permalink to &quot;Board-Specific Support&quot;">​</a></h2><p>Like many components of NuttX, the auto-mounter has a upper-half/lower-half architecture:</p><ul><li><strong>Upper half</strong> The upper half is the file <code>fs/fs_automount.c</code>. This upper half performs the basic automount activities. It responds to media insertion and removal events by mounting and unmounting the file system on the media. This includes logic to handle unmount retries: The unmount cannot be performed while applications have open files on the media. In this case, the auto-mounter will periodically retry the unmount until all of the applications close there references to files on the non-existent media.</li><li><strong>Lower Half</strong> The lower half is defined by a standard interface. That interface definition is in the header file <code>include/nuttx/fs/automount.h</code>. The lower half interface provides: (1) mount information including file system type, block driver path, and mount point path, (2) mount and unmount retry delays, and (3) and callbacks to attach to and management the media insertion / removal interrupts.</li></ul><h2 id="example-implementation" tabindex="-1">Example Implementation <a class="header-anchor" href="#example-implementation" aria-label="Permalink to &quot;Example Implementation&quot;">​</a></h2><p>There is an example implementation of this lower half interface at <code>boards/arm/sama5/sama5d4-ek/src/sam_automount.c</code>. The <code>boards/arm/sama5/sama5d4-ek/Kconfig</code> as the board-specific configuration for the auto-mounter. You can see the configuration settings in the <code>boards/arm/sama5/sama5d4-ek/configs/nsh/defconfig</code> and <code>boards/arm/sama5/sama5d4-ek/configs/nxwm/defconfig</code> configuration files:</p><pre><code>CONFIG_SAMA5D4EK_HSMCI0_AUTOMOUNT=y
CONFIG_SAMA5D4EK_HSMCI0_AUTOMOUNT_FSTYPE=&quot;vfat&quot;
CONFIG_SAMA5D4EK_HSMCI0_AUTOMOUNT_BLKDEV=&quot;/dev/mmcsd0&quot;
CONFIG_SAMA5D4EK_HSMCI0_AUTOMOUNT_MOUNTPOINT=&quot;/mnt/sdcard&quot;
CONFIG_SAMA5D4EK_HSMCI0_AUTOMOUNT_DDELAY=1000
CONFIG_SAMA5D4EK_HSMCI0_AUTOMOUNT_UDELAY=2000
</code></pre><p>These setting determine the values in the lower half interface. The interrupt is provided by a PIO pin defined in <code>boards/arm/sama5/sama5d4-ek/src/sama5e4-ek.h</code> and the implementation of the interface and callbacks is in <code>boards/arm/sama5/sama5d4-ek/src/sam_automount.c</code>.</p>`,14)]))}const p=t(i,[["render",r]]);export{h as __pageData,p as default};
