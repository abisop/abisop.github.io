import{_ as l,c as a,al as o,j as e,a as n,o as s}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/lc823450/boards/lc823450-xgevk/README.md","filePath":"en/platforms/arm/lc823450/boards/lc823450-xgevk/README.md"}'),p={name:"en/platforms/arm/lc823450/boards/lc823450-xgevk/README.md"},i={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},r={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.588ex",height:"1.758ex",role:"img",focusable:"false",viewBox:"0 -583 2027.8 777","aria-hidden":"true"};function d(c,t,u,h,m,g){return s(),a("div",null,[t[4]||(t[4]=o('<p>README ^^^^^^</p><p>README for NuttX port to the LC823450XGEVK board.</p><p>The board information is available at</p><p><a href="http://www.onsemi.com/PowerSolutions/evalBoard.do?id=LC823450XGEVK" target="_blank" rel="noreferrer">http://www.onsemi.com/PowerSolutions/evalBoard.do?id=LC823450XGEVK</a></p><p>LC823450 related documents are available at</p><p><a href="http://www.onsemi.com/PowerSolutions/supportDoc.do?type=AppNotes&amp;rpn=LC823450" target="_blank" rel="noreferrer">http://www.onsemi.com/PowerSolutions/supportDoc.do?type=AppNotes&amp;rpn=LC823450</a></p><p>OpenOCD for NuttX thread and LC823450 support is available at</p><p><a href="https://github.com/sony/openocd-nuttx/wiki" target="_blank" rel="noreferrer">https://github.com/sony/openocd-nuttx/wiki</a></p><p>MakeIPL2 Tool for eMMC boot is available at</p><p><a href="http://www.onsemi.com/PowerSolutions/supportDoc.do?type=software&amp;rpn=LC823450" target="_blank" rel="noreferrer">http://www.onsemi.com/PowerSolutions/supportDoc.do?type=software&amp;rpn=LC823450</a></p><p>This port is intended to test LC823450 features including SMP. Supported peripherals: UART, TIMER, RTC, GPIO, DMA, I2C, SPI, LCD, eMMC, USB, WDT, ADC, Audio.</p><p>Settings ^^^^^^^^</p><ol><li>eMMC boot and SRAM boot via openocd are supported.</li></ol><p>If you do SRAM boot via openocd+gdb, please specify hookpost-load in .gdbinit to set MSP (main stack pointer) as follows.</p>',14)),e("p",null,[t[2]||(t[2]=n("define hookpost-load print *(uint32_t *)0x02040000 set ")),e("mjx-container",i,[(s(),a("svg",r,t[0]||(t[0]=[o('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1249.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[1]||(t[1]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"s"),e("mi",null,"p"),e("mo",null,"=")])],-1))]),t[3]||(t[3]=n(" end"))]),t[5]||(t[5]=o(`<ol start="2"><li>If SWD connection is lost, please specify lower adaptor clock.</li><li>Both CPUs are running at 160MHz.</li><li>Internal SRAMs (seg0 to seg5) are used.</li><li>Serial console can be used via external USB-UART (115200/8/N/1).</li><li>Interrupt handlers except for inter-cpu are handled on CPU0.</li></ol><p>SMP related Status ^^^^^^^^^^^^^^^^^^</p><p>CPU activities are shown at D9 (CPU0) and D10 (CPU1) respectively.</p><p>Currently all applications except for ostest work in SMP mode but might stop due to deadlocks or ASSERT(). For a workaround, please try</p><p>$ cd apps; git diff diff --git a/examples/ostest/waitpid.c b/examples/ostest/waitpid.c index 687f50ca..8418eff8 100644 --- a/examples/ostest/waitpid.c +++ b/examples/ostest/waitpid.c @@ -54,7 +54,7 @@ ****************************************************************************/</p><p>#define RETURN_STATUS 14 -#define NCHILDREN 3 +#define NCHILDREN 2 #define PRIORITY 100</p><p>/****************************************************************************</p><p>Other Status ^^^^^^^^^^^^</p><ol><li>nsh built-in commands such as ps, free are available.</li></ol><p>NuttShell (NSH) nsh&gt; ps PID GROUP CPU PRI POLICY TYPE NPX STATE EVENT SIGMASK STACK COMMAND 0 0 0 0 FIFO Kthread N-- Assigned 00000000 000000 CPU0 IDLE 1 0 1 0 FIFO Kthread N-- Running 00000000 002044 CPU1 IDLE 3 1 0 100 FIFO Task --- Running 00000000 003052 init nsh&gt; free total used free largest Mem: 1027024 13136 1013888 1013888</p><ol start="2"><li>date command can be used to get/set RTC date and time.</li></ol><p>nsh&gt; date Oct 03 00:00:55 2013 nsh&gt; date -s &quot;Mar 31 12:34:56 2017&quot; nsh&gt; date Mar 31 12:34:56 2017</p><ol start="3"><li>i2c app can be used to test I2C buses.</li></ol><p>nsh&gt; i2c get -b 1 -a 18 -r 0 READ Bus: 1 Addr: 18 Subaddr: 00 Value: f9</p><ol start="4"><li>nxhello app can be used to test LCD via SPI.</li></ol><p>nsh&gt; nxhello nxhello_initialize: Initializing LCD nxhello_initialize: Open NX nxhello_main: NX handle=20096f0 nxhello_main: Set background color=0 nxhello_main: Screen resolution (128,48) nxhello_hello: Position (31,20) nxhello_main: Close NX</p><ol start="5"><li>eMMC can be accessed via /dev/mtdblock0pX</li></ol><p>nsh&gt; mkfatfs -F 32 /dev/mtdblock0p10 nsh&gt; mount -t vfat /dev/mtdblock0p10 /mnt/sd0 nsh&gt; df Block Number Size Blocks Used Available Mounted on 16384 453025 2 453023 /mnt/sd0 0 0 0 0 /proc nsh&gt; ls /mnt/sd0 /mnt/sd0: nsh&gt; ps &gt; /mnt/sd0/ps.txt nsh&gt; ls /mnt/sd0 /mnt/sd0: ps.txt</p><p>Micro SD slot on the board can be used via /dev/mtdblock1. Please note that card hotplugging is not supported.</p><ol start="6"><li>USB Mass Storage Class support</li></ol><p>nsh&gt; msconn nsh&gt; msdis</p><ol start="7"><li>ADC</li></ol><p>nsh&gt; adc adc_main: g_adcstate.count: 1 adc_main: Hardware initialized. Opening the ADC device: /dev/adc0 Sample: 1: channel: 0 value: 366 2: channel: 1 value: 691 3: channel: 2 value: 752 4: channel: 3 value: 963 5: channel: 4 value: 6 6: channel: 5 value: 0</p><ol start="8"><li>WDT</li></ol><p>nsh&gt; wdog ping elapsed=0 ping elapsed=500 ping elapsed=1000 ping elapsed=1500 ping elapsed=2000 ping elapsed=2500 ping elapsed=3000 ping elapsed=3500 ping elapsed=4000 ping elapsed=4500 NO ping elapsed=5000 NO ping elapsed=5500 NO ping elapsed=6000</p><ol start="9"><li>IPL2 and eMMC boot</li></ol><p>IPL2 is the 2nd boot loader based on NuttX and can be built as follows.</p><p>$ make distclean $ ./tools/configure.sh lc823450-xgevk:ipl2 $ make V=1 $ MakeIPL2 ./nuttx.bin 0 2 0 0 0 $ cp LC8234xx_17S_start_data.boot_bin /tmp/</p><p>To write the IPL2 (LC8234xx_17S_start_data.boot_bin), firstly build USB configuration image.</p><p>$ make distclean $ ./tools/configure.sh lc823450-xgevk:usb $ make V=1</p><p>Load the nuttx.bin with openocd + gdb</p><p>$ cd openocd-nuttx $ ./bootstrap $ ./configure $ make $ sudo ./src/openocd -s ./tcl -f ./tcl/board/lc823450_xgevk.cfg -c init -c &quot;reset halt&quot;</p><p>$ arm-none-eabi-gdb (gdb) target extended-remote :3333 (gdb) load ./nuttx (gdb) symbol-file ./nuttx (gdb) c</p><p>Start USB MSC to copy nuttx.bin and the IPL2 to the FAT32 partition (/dev/mtdblock0p10) then dd the files to the kernel partition (/dev/mtdblock0p4) and the IPL2 partition (/dev/mtdblock0p1) respectively.</p><p>nsh&gt; mkfatfs -F 32 /dev/mtdblock0p10 nsh&gt; msconn</p><p>$ sudo cp ./nuttx.bin /media/usb0/ $ sudo cp /tmp/LC8234xx_17S_start_data.boot_bin /media/usb0/ $ sudo sync</p><p>nsh&gt; msdis nsh&gt; mount -t vfat /dev/mtdblock0p10 /mnt/sd0 nsh&gt; dd if=/mnt/sd0/nuttx.bin of=/dev/mtdblock0p4 nsh&gt; dd if=/mnt/sd0/LC8234xx_17S_start_data.boot_bin of=/dev/mtdblock0p1 nsh&gt; reboot</p><ol start="10"><li>Audio playback (WAV/44.1k/16bit/2ch only)</li></ol><p>Firstly, please make sure that the jumper pins are set as follows.</p><p>JP1, JP2 =&gt; short JP3, JP4 =&gt; open</p><p>To play WAV file on uSD card,</p><p>nsh&gt; mount -t vfat /dev/mtdblock1 /mnt/sd1 nsh&gt; nxplayer nxplayer&gt; play /mnt/sd1/sample.wav nxplayer&gt; volume 50</p><p>Please note that a WAV file which contains sub-chunks other than &quot;fmt&quot; and &quot;data&quot; is not supported in pcm_decode.c So, if your wav file contains meta-data, please remove the sub-chunks before playing.</p><ol start="11"><li>Networking</li></ol><p>lc823450/rndis configuration supports networking features with RNDIS. To use this feature, you have to connect the board to a RNDIS host. Currently Linux host is only tested but Windows host should work.</p><p>If DHCP server is available, you would see ifconfig results like:</p><p>nsh&gt; ifconfig eth0 Link encap:Ethernet HWaddr 00:e0🇩🇪ad:be:ff at UP inet addr:192.168.1.244 DRaddr:192.168.1.1 Mask:255.255.255.0</p><p>lo Link encap:Local Loopback at UP inet addr:127.0.0.1 DRaddr:127.0.0.1 Mask:255.0.0.0</p><pre><code>         IPv4   TCP   UDP  ICMP
</code></pre><p>Received 0007 0000 0006 0000 Dropped 0001 0000 0000 0000 IPv4 VHL: 0000 Frg: 0001 Checksum 0000 0000 0000 ---- TCP ACK: 0000 SYN: 0000 RST: 0000 0000 Type 0000 ---- ---- 0000 Sent 0003 0000 0003 0000 Rexmit ---- 0000</p><hr><ol start="12"><li>DVFS (Dynamic Voltage and Frequency Scaling)</li></ol><p>lc823450-xgevk/audio and rndis configurations support DVFS. You can check the status via /proc/dvfs</p><p>nsh&gt; cat /proc/dvfs cur_freq 160 enable 0</p><p>By default, DVFS is disabled. To enable,</p><p>nsh&gt; echo &quot;enable 1&quot; &gt; /proc/dvfs</p><p>In addition, you can change CPU frequency to 160/80/40 manually. To change the frequency, enable the DVFS first then do the following.</p><p>nsh&gt; echo &quot;cur_freq 80&quot; &gt; /proc/dvfs.</p><p>If you want to run in autonomous mode,</p><p>nsh&gt; echo &quot;auto 1&quot; &gt; /proc/dvfs.</p><p>In autonomous mode, you don&#39;t need to set cur_freq. Instead, cur_freq will show the current CPU frequency.</p><p>NOTE: Currently Vdd1 is fixed to 1.2V which will be changed in the future version.</p><p>TODO ^^^^</p><p>The following features will be supported. Accelerometer, etc.</p>`,64))])}const T=l(p,[["render",d]]);export{b as __pageData,T as default};
