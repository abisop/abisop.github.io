import{_ as t,c as a,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Adafruit NRF52 Feather","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf52/boards/nrf52-feather/intex.md","filePath":"en/platforms/arm/nrf52/boards/nrf52-feather/intex.md"}'),n={name:"en/platforms/arm/nrf52/boards/nrf52-feather/intex.md"};function i(s,e,l,h,d,c){return r(),a("div",null,e[0]||(e[0]=[o(`<h1 id="adafruit-nrf52-feather" tabindex="-1">Adafruit NRF52 Feather <a class="header-anchor" href="#adafruit-nrf52-feather" aria-label="Permalink to &quot;Adafruit NRF52 Feather&quot;">​</a></h1><p>chip:nrf52, chip:nrf52832</p><p>The <a href="https://www.adafruit.com/product/3406" target="_blank" rel="noreferrer">Adafruit NRF52 Feather</a> is a development board for the nRF52832 SoC from Nordic.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The Feather nRF52 default console is the UART0.</p><p>The Feather nRF52 have USB serial bridge chip on board and UART0 is connected to micro USB connector through the bridge chip.</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The Feather has 2 user-controllable LEDs:</p><p>LED MCU</p><hr><p>LED1 PIN0-17 LED2 PIN0-19</p><p>A high output illuminates the LED.</p><h3 id="config-arch-leds" tabindex="-1">CONFIG_ARCH_LEDS <a class="header-anchor" href="#config-arch-leds" aria-label="Permalink to &quot;CONFIG\\_ARCH\\_LEDS&quot;">​</a></h3><p>If CONFIG_ARCH_LEDS is not defined, then the LEDs are completely under control of the application. The following interfaces are then available for application control of the LEDs:</p><pre><code>uint32_t board_userled_initialize(void);
void board_userled(int led, bool ledon);
void board_userled_all(uint32_t ledset);
</code></pre><h3 id="pushbuttons" tabindex="-1">Pushbuttons <a class="header-anchor" href="#pushbuttons" aria-label="Permalink to &quot;Pushbuttons&quot;">​</a></h3><p>The Feather nRF52 does not have user-controllable buttons. The reset button on the board is connected to nRF52832 reset pin directly.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nrf52-feather:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>This configuration is the NuttShell (NSH) example at examples/nsh/.</p><p>NOTES:</p><blockquote><ol><li>This configuration uses the mconf-based configuration tool. To change this configurations using that tool, you should:</li></ol><blockquote><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></blockquote></blockquote>`,26)]))}const p=t(n,[["render",i]]);export{f as __pageData,p as default};
