import{_ as t,c as r,al as i,o}from"./chunks/framework.NFAqBSgQ.js";const _=JSON.parse('{"title":"README.txt","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm64/fvp-v8r/boards/fvp-armv8r/README.md","filePath":"en/platforms/arm64/fvp-v8r/boards/fvp-armv8r/README.md"}'),a={name:"en/platforms/arm64/fvp-v8r/boards/fvp-armv8r/README.md"};function n(s,e,l,d,p,c){return o(),r("div",null,e[0]||(e[0]=[i(`<h1 id="readme-txt" tabindex="-1">README.txt <a class="header-anchor" href="#readme-txt" aria-label="Permalink to &quot;README.txt&quot;">​</a></h1><p>This board configuration will use FVP_BaseR_AEMv8R to emulate generic ARM64v8-R (Cotex-R82) series hardware platform and provides support for these devices:</p><ul><li>GICv3 interrupt controllers for ARMv8-r</li><li>PL011 UART controller(FVP)</li></ul><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h1><ul><li>Getting Started</li><li>Status</li><li>Platform Features</li><li>References</li></ul><h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><ol><li>Compile Toolchain The FVP platform using same Compiler like qemu, read the following file for How to get the Tool: <a href="https://github.com/apache/nuttx/tree/master/boards/arm64/qemu/qemu-armv8a" target="_blank" rel="noreferrer">https://github.com/apache/nuttx/tree/master/boards/arm64/qemu/qemu-armv8a</a></li></ol><p>Note: 1 My host environment is Ubuntu 22.04.1 LTS, Ubuntu 18.04 will work too 2 The newest GNU toolchain is 12.2, available from: <a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads" target="_blank" rel="noreferrer">https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads</a></p><ol start="2"><li><p>Getting Armv8-R AEM FVP The Armv8-R AEM FVP is a free of charge Armv8-R Fixed Virtual Platform. It supports the latest Armv8-R feature set. we can get it from: <a href="https://developer.arm.com/downloads/-/arm-ecosystem-models" target="_blank" rel="noreferrer">https://developer.arm.com/downloads/-/arm-ecosystem-models</a></p><p>Please select to download Armv8-R AEM FVP product, extract the tool package the FVP tool is locate at: AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R</p></li><li><p>Configuring and building 3.1 FVP Overview Just like QEMU, Fixed Virtual Platforms (FVP) are complete simulations of an Arm system, including processor, memory and peripherals. These are set out in a &quot;programmer&#39;s view&quot;, which gives you a comprehensive model on which to build and test your software.</p><p>The FVP tools simulate 4 serial port and implement them to wait on local socket port:</p><p>$ /home/qinwei/workdir/tools/AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R<br> -f boards/arm64/fvp-v8r/fvp-armv8r/scripts/fvp_cfg.txt -a ./nuttx terminal_0: Listening for serial connection on port 5000 terminal_1: Listening for serial connection on port 5001 terminal_2: Listening for serial connection on port 5002 terminal_3: Listening for serial connection on port 5003</p><p>FVP has four UART port and I choice UART1 as tty, so just telnet to port 5001 will enter nsh: telnet localhost 5001</p></li></ol><p>3.1 Single Core Configuring NuttX and compile: $ ./tools/configure.sh -l fvp-armv8r:nsh $ make</p><p>3.2 SMP Configuring NuttX and compile: $ ./tools/configure.sh -l fvp-armv8r:nsh_smp $ make</p><ol start="4"><li>Running</li></ol><p>4.1 Single Core</p><p>Step1: Booting NuttX</p><p>$ AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R<br> -f boards/arm64/fvp-v8r/fvp-armv8r/scripts/fvp_cfg.txt<br> -a ./nuttx terminal_0: Listening for serial connection on port 5000 terminal_1: Listening for serial connection on port 5001 terminal_2: Listening for serial connection on port 5002 terminal_3: Listening for serial connection on port 5003 - Ready to Boot Primary CPU - Boot from EL2 - Boot from EL1 - Boot to C runtime for OS Initialize [ 0] (null): arm64_chip_boot: Main CPU 0x80000000 [ 0] (null): nx_start: Entry [ 0] (null): up_allocate_heap: heap_start=0x0x3c000, heap_size=0x7fc4000 [ 0] Idle Task: gic_validate_dist_version: GICv3 version detect [ 0] Idle Task: gic_validate_dist_version: GICD_TYPER = 0x490067 [ 0] Idle Task: gic_validate_dist_version: 224 SPIs implemented [ 0] Idle Task: gic_validate_dist_version: 0 Extended SPIs implemented [ 0] Idle Task: gic_validate_dist_version: Distributor has no Range Selector support [ 0] Idle Task: gic_validate_dist_version: MBIs is present, But No support [ 0] Idle Task: gic_validate_redist_version: GICR_TYPER = 0x0 [ 0] Idle Task: gic_validate_redist_version: 16 PPIs implemented [ 0] Idle Task: gic_validate_redist_version: no VLPI support, no direct LPI support [ 0] Idle Task: up_timer_initialize: up_timer_initialize: cp15 timer(s) running at 100.00MHz, cycle 100000 [ 0] Idle Task: uart_register: Registering /dev/console [ 0] Idle Task: uart_register: Registering /dev/ttyS0 [ 0] Idle Task: work_start_highpri: Starting high-priority kernel worker thread(s) [ 0] Idle Task: nx_start_application: Starting init thread [ 0] Idle Task: task_spawn: name=nsh_main entry=0xa590 file_actions=0 attr=0x3bf88 argv=0x3bf80 nsh: mkfatfs: command not found</p><pre><code>NuttShell (NSH) NuttX-12.0.0
nsh&gt; [ 0] Idle Task: nx_start: CPU0: Beginning Idle Loop
</code></pre><p>Step2: telnet to UART1 Starting another terminal and enter: $ telnet localhost 5001 Trying 127.0.0.1... Connected to localhost. Escape character is &#39;^]&#39;. nsh: mkfatfs: command not found NuttShell (NSH) NuttX-12.0.0 nsh&gt;</p><p>4.2 SMP $ AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R<br> -f boards/arm64/fvp-v8r/fvp-armv8r/scripts/fvp_cfg_smp.txt<br> -a ./nuttx terminal_0: Listening for serial connection on port 5000 terminal_1: Listening for serial connection on port 5001 terminal_2: Listening for serial connection on port 5002 terminal_3: Listening for serial connection on port 5003 - Ready to Boot Primary CPU - Boot from EL2 - Boot from EL1 - Boot to C runtime for OS Initialize [CPU0] [ 0] (null): arm64_chip_boot: Main CPU 0x80000000 [CPU0] [ 0] (null): nx_start: Entry [CPU0] [ 0] (null): up_allocate_heap: heap_start=0x0x4a000, heap_size=0x7fb6000 [CPU0] [ 0] CPU0 IDLE: gic_validate_dist_version: GICv3 version detect [CPU0] [ 0] CPU0 IDLE: gic_validate_dist_version: GICD_TYPER = 0x490067 [CPU0] [ 0] CPU0 IDLE: gic_validate_dist_version: 224 SPIs implemented [CPU0] [ 0] CPU0 IDLE: gic_validate_dist_version: 0 Extended SPIs implemented [CPU0] [ 0] CPU0 IDLE: gic_validate_dist_version: Distributor has no Range Selector support [CPU0] [ 0] CPU0 IDLE: gic_validate_dist_version: MBIs is present, But No support [CPU0] [ 0] CPU0 IDLE: gic_validate_redist_version: GICR_TYPER = 0x0 [CPU0] [ 0] CPU0 IDLE: gic_validate_redist_version: 16 PPIs implemented [CPU0] [ 0] CPU0 IDLE: gic_validate_redist_version: no VLPI support, no direct LPI support [CPU0] [ 0] CPU0 IDLE: up_timer_initialize: up_timer_initialize: cp15 timer(s) running at 100.00MHz, cycle 100000 [CPU0] [ 0] CPU0 IDLE: uart_register: Registering /dev/console [CPU0] [ 0] CPU0 IDLE: uart_register: Registering /dev/ttyS0 - Ready to Boot Second CPU - Boot from EL2 - Boot from EL1 - Boot to C runtime for OS Initialize [CPU1] [ 1] CPU1 IDLE: gic_validate_redist_version: GICR_TYPER = 0x100000100 [CPU1] [ 1] CPU1 IDLE: gic_validate_redist_version: 16 PPIs implemented [CPU1] [ 1] CPU1 IDLE: gic_validate_redist_version: no VLPI support, no direct LPI support [CPU1] [ 1] CPU1 IDLE: nx_idle_trampoline: CPU1: Beginning Idle Loop - Ready to Boot Second CPU - Boot from EL2 - Boot from EL1 - Boot to C runtime for OS Initialize [CPU2] [ 2] CPU2 IDLE: gic_validate_redist_version: GICR_TYPER = 0x200000200 [CPU2] [ 2] CPU2 IDLE: gic_validate_redist_version: 16 PPIs implemented [CPU2] [ 2] CPU2 IDLE: gic_validate_redist_version: no VLPI support, no direct LPI support [CPU2] [ 2] CPU2 IDLE: nx_idle_trampoline: CPU2: Beginning Idle Loop - Ready to Boot Second CPU - Boot from EL2 - Boot from EL1 - Boot to C runtime for OS Initialize [CPU3] [ 3] CPU3 IDLE: gic_validate_redist_version: GICR_TYPER = 0x300000310 [CPU3] [ 3] CPU3 IDLE: gic_validate_redist_version: 16 PPIs implemented [CPU3] [ 3] CPU3 IDLE: gic_validate_redist_version: no VLPI support, no direct LPI support [CPU3] [ 3] CPU3 IDLE: nx_idle_trampoline: CPU3: Beginning Idle Loop [CPU0] [ 0] CPU0 IDLE: work_start_highpri: Starting high-priority kernel worker thread(s) [CPU0] [ 0] CPU0 IDLE: nx_start_application: Starting init thread [CPU0] [ 0] CPU0 IDLE: task_spawn: name=nsh_main entry=0xc41c file_actions=0 attr=0x43f68 argv=0x43f60 [CPU0] [ 0] CPU0 IDLE: nx_start: CPU0: Beginning Idle Loop nsh: mkfatfs: command not found</p><pre><code>NuttShell (NSH) NuttX-12.0.0
nsh&gt;
</code></pre><p>Step2: telnet to UART1 Starting another terminal and enter: $ telnet localhost 5001 Trying 127.0.0.1... Connected to localhost. Escape character is &#39;^]&#39;. nsh: mkfatfs: command not found NuttShell (NSH) NuttX-12.0.0 nsh&gt;</p><h1 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h1><p>2023-2-18: 1. Release the first version for ARMv8-R, Single Core and SMP is supported OS test is passed.</p><h1 id="platform-features" tabindex="-1">Platform Features <a class="header-anchor" href="#platform-features" aria-label="Permalink to &quot;Platform Features&quot;">​</a></h1><p>The following hardware features are supported: +--------------+------------+----------------------+ | Interface | Controller | Driver/Component | +==============+============+======================+ | GICv3 | on-chip | interrupt controller | +--------------+------------+----------------------+ | PL011 UART | on-chip | serial port | +--------------+------------+----------------------+ | ARM TIMER | on-chip | system clock | +--------------+------------+----------------------+</p><h1 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h1><ol><li>(ID050815) ARM® Cortex®-A Series - Programmer&#39;s Guide for ARMv8-A</li><li>(ID020222) Arm® Architecture Reference Manual - for A profile architecture</li><li>(ARM062-948681440-3280) Armv8-A Instruction Set Architecture</li><li>AArch64 Exception and Interrupt Handling</li><li>AArch64 Programmer&#39;s Guides Generic Timer</li><li>Arm Generic Interrupt Controller v3 and v4 Overview</li><li>Arm® Generic Interrupt Controller Architecture Specification GIC architecture version 3 and version 4</li><li>(DEN0022D.b) Arm Power State Coordination Interface Platform Design Document</li><li>Arm® Architecture Reference Manual Supplement, Armv8, for R-profile AArch64 architecture, ARM DDI 0600B.a (ID062922) 10.Arm® Cortex®-R82 Processor Technical Reference Manual, Revision: r0p2</li></ol>`,26)]))}const u=t(a,[["render",n]]);export{_ as __pageData,u as default};
