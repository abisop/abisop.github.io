import{_ as a,c as s,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const p="/assets/coredump-overview.LwBZyyn9.png",o="/assets/coredump-hexdump.JOHJYXPq.png",i="/assets/coredump-gdb.BIIanWEQ.png",g=JSON.parse('{"title":"Core Dump","description":"","frontmatter":{},"headers":[],"relativePath":"en/debugging/coredump.md","filePath":"en/debugging/coredump.md"}'),l={name:"en/debugging/coredump.md"};function c(r,e,d,u,h,m){return t(),s("div",null,e[0]||(e[0]=[n('<h1 id="core-dump" tabindex="-1">Core Dump <a class="header-anchor" href="#core-dump" aria-label="Permalink to &quot;Core Dump&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p><img src="'+p+`" alt="image"></p><h3 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to use&quot;">​</a></h3><ol><li>Enable NuttX Core dump</li></ol><p>Enable Kconfig</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIG_COREDUMP=y                   /* Enable Coredump */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CONFIG_BOARD_COREDUMP_SYSLOG=y      /* Enable Board Coredump, if exceptions and assertions occur, */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CONFIG_SYSTEM_COREDUMP=y            /* Enable coredump in user command, which can capture the current</span></span>
<span class="line"><span>                                       state of one or all threads when the system is running, the</span></span>
<span class="line"><span>                                       output can be redirect to console or file */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CONFIG_BOARD_COREDUMP_COMPRESSION=y /* Default y, enable Coredump compression to</span></span>
<span class="line"><span>                                       reduce the size of the original core image */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CONFIG_BOARD_COREDUMP_FULL=y        /* Default y, save all task information */</span></span></code></pre></div></blockquote><ol start="2"><li>Run Coredump on nsh (CONFIG_SYSTEM_COREDUMP=y)</li></ol><p>Parameters of coredump tool</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> coredump &lt;pid&gt;        /* If pid is specified, coredump will only capture the thread with the</span></span>
<span class="line"><span>                           specified pid, otherwise all threads will be captured */</span></span>
<span class="line"><span></span></span>
<span class="line"><span> coredump &lt;filename&gt;   /* If filename is specified, then coredump will be output to the specified</span></span>
<span class="line"><span>                           file by default, otherwise it will be redirect in stdout stream */</span></span></code></pre></div></blockquote><ol start="3"><li>Capture coredump from stdout</li></ol><p>Save the print of the red frame part in the figure as file</p><blockquote><p><img src="`+o+`" alt="image"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cat elf.dump</span></span>
<span class="line"><span>[CPU0] [ 6] 5A5601013D03FF077F454C4601010100C0000304002800C00D003420036000070400053400200008200A4000000420030034C024200001D8092004E00200601A</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[CPU0] [ 6] 401B018D37814720005A5601000800090100006000010000</span></span></code></pre></div></blockquote><ol start="4"><li>Convert the dump file</li></ol><p>If the core file is post-processed by lzf compress and hexdump stream, execute the coredump script (<a href="https://github.com/apache/nuttx/blob/master/tools/coredump.py" target="_blank" rel="noreferrer">tools/coredump.py</a>) to convert hex to binary and lzf decompression, If the -o parameter is not added in commandline, the output of &lt;original file name&gt;.core will be automatically generated:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./nuttx/tools/coredump.py elf.dump</span></span>
<span class="line"><span>Core file conversion completed: elf.core</span></span></code></pre></div></blockquote><ol start="5"><li>Analysis by gdb</li></ol><p>After generating elf.core, combined with compiled nuttx.elf, you can view the call stack and related register information of all threads directly through gdb:</p><p>(NOTE: Toolchain version must be newer than 11.3)</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> prebuilts/gcc/linux/arm/bin/arm-none-eabi-gdb -c elf.core nuttx</span></span></code></pre></div><p><img src="`+i+'" alt="image"></p></blockquote>',20)]))}const f=a(l,[["render",c]]);export{g as __pageData,f as default};
