import{_ as a,c as i,al as r,o}from"./chunks/framework.NFAqBSgQ.js";const t="/assets/icicle.C49Qb9nl.png",b=JSON.parse('{"title":"PolarFire SoC Icicle Kit","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/mpfs/boards/icicle/index.md","filePath":"en/platforms/risc-v/mpfs/boards/icicle/index.md"}'),l={name:"en/platforms/risc-v/mpfs/boards/icicle/index.md"};function n(s,e,d,c,h,u){return o(),i("div",null,e[0]||(e[0]=[r('<h1 id="polarfire-soc-icicle-kit" tabindex="-1">PolarFire SoC Icicle Kit <a class="header-anchor" href="#polarfire-soc-icicle-kit" aria-label="Permalink to &quot;PolarFire SoC Icicle Kit&quot;">​</a></h1><hr><h2 id="" tabindex="-1"><img src="'+t+'" alt="" class="align-center"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![](icicle.png){.align-center}&quot;">​</a></h2><h2 id="cpu" tabindex="-1">CPU <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;CPU&quot;">​</a></h2><p>PolarFire SoC FPGA (MPFS250T-FCVG484EES)</p><ul><li>SiFive E51 Monitor core (1 x RV64IMAC)</li><li>SiFive U54 Application cores (4 x RV64GC)</li><li>and Secure boot</li></ul><h2 id="memory-and-storage" tabindex="-1">Memory and storage <a class="header-anchor" href="#memory-and-storage" aria-label="Permalink to &quot;Memory and storage&quot;">​</a></h2><ul><li>2 GB LPDDR4 x 32</li><li>1 Gb SPI flash</li><li>8 GB eMMC flash &amp; SD card slot (multiplexed)</li></ul><h2 id="programming-debugging" tabindex="-1">Programming &amp; Debugging <a class="header-anchor" href="#programming-debugging" aria-label="Permalink to &quot;Programming &amp; Debugging&quot;">​</a></h2><p>Onboard JTAG connector or onboard embedded FlashPro (multiplexed)</p><ul><li>UART via micro USB</li><li>52 x test points</li></ul><h2 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li>4 x 12.7 Gbps SERDES</li><li>PCIe Gen2 Rootport</li><li>2 x Gigabit Ethernet</li><li>Micro USB 2.0 Hi-Speed OTG</li><li>4 x UART (via single micro USB)</li><li>2 x CAN</li><li>2 x SPI</li><li>2 x I²C</li></ul><h2 id="expansion" tabindex="-1">Expansion <a class="header-anchor" href="#expansion" aria-label="Permalink to &quot;Expansion&quot;">​</a></h2><ul><li>Raspberry Pi compatible 40-pin header</li><li>mikroBUS socket</li></ul><h2 id="sensor" tabindex="-1">Sensor <a class="header-anchor" href="#sensor" aria-label="Permalink to &quot;Sensor&quot;">​</a></h2><ul><li>Power sensor (pac1934)</li></ul><h3 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h3><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>There are 3 buttons and reset button. The Reset button is not available to software by default.</p><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>There is 4 user controlled on-board LEDs.</p><h3 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h3><h2 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h2><p>Basic configuration to run the NuttShell (nsh).</p><p>hwtest ---</p><p>Configuration to run the NuttShell (nsh) and enabling the peripherals.</p><p>The following peripherals are configured: - I2C0 &amp; I2C1 - Ethernet on MAC 1, configured to 1Gbit speed - USB (high speed) + CDCACM - SDCard - SPI0 &amp; SPI1 - UART0-4 - CorePWM (nb. needs the FPGA IP installed to work) - CoreSPI (nb. needs the FPGA IP installed to work)</p><p>The following applications are available: - TelnetD (at address 10.0.0.2) - tcpblaster &amp; udpblaster - ostest</p>',29)]))}const m=a(l,[["render",n]]);export{b as __pageData,m as default};
