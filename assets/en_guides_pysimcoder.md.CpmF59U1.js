import{_ as o,c as t,al as i,o as a}from"./chunks/framework.NFAqBSgQ.js";const n="/assets/interface.gElMRumo.png",c="/assets/menu.BDkqOl2N.png",r="/assets/template.sTaVV6ao.png",N=JSON.parse('{"title":"pysimCoder integration with NuttX","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/pysimcoder.md","filePath":"en/guides/pysimcoder.md"}'),s={name:"en/guides/pysimcoder.md"};function d(p,e,l,u,h,_){return a(),t("div",null,e[0]||(e[0]=[i('<h1 id="pysimcoder-integration-with-nuttx" tabindex="-1">pysimCoder integration with NuttX <a class="header-anchor" href="#pysimcoder-integration-with-nuttx" aria-label="Permalink to &quot;pysimCoder integration with NuttX&quot;">​</a></h1><p><a href="https://github.com/robertobucher/pysimCoder" target="_blank" rel="noreferrer">PysimCoder</a> is as an open source Rapid Control Application Development Tool which is able to transfer block diagrams into C code. Combined with NuttX, it can be used in real time control application and as an alternative to expensive licensed programs and prototyping platforms. Example of <a href="https://www.youtube.com/watch?v=6HlGk3ecPNQ" target="_blank" rel="noreferrer">DC motor control application</a> with PID controller and blocks for encoder, PWM, GPIO and sending data over TCP to real time plotter can be seen on <a href="https://www.youtube.com/channel/UC0QciIlcUnjJkL5yJJBmluw" target="_blank" rel="noreferrer">NuttX Channel</a>.</p><p>This documentation describes the steps that are needed to run application generated by pysimCoder on NuttX and also keeps the track of peripherals that are supported by pysimCoder for NuttX RTOS.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list shows the peripherals and functionalities supported in pysimCoder for NuttX RTOS.</p><p>Peripheral Notes</p><hr><p>ADC<br> CAN DAC ENC GPIO Including SocketCAN PWM Multichannel support UART Serial output Sensors TCP UDP Basic support for DHTXX</p><p>Please note that the actual support for NuttX peripherals can be wider that what is mentioned here in case this documentation was not updated when new functionalities were added to pysimCoder.</p><h2 id="nuttx-configuration" tabindex="-1">NuttX Configuration <a class="header-anchor" href="#nuttx-configuration" aria-label="Permalink to &quot;NuttX Configuration&quot;">​</a></h2><p>Several configuration options are necessary to be set in order to successfully compile pysimCoder with NuttX. The list is the following:</p><hr><p><code>CONFIG_ARCH_RAMVECTORS=y</code> <code>CONFIG_NSH_FILE_APPS=y</code><code>CONFIG_BOARDCTL_APP_SYMTAB=y</code> <code>CONFIG_LINE_MAX=64</code><code>CONFIG_BOARDCTL_OS_SYMTAB=y</code> <code>CONFIG_NSH_READLINE=y</code><code>CONFIG_BUILTIN=y</code> <code>CONFIG_ETC_ROMFS=y</code><code>CONFIG_ELF=y</code> <code>CONFIG_PSEUDOTERM=y</code><code>CONFIG_FS_BINFS=y</code> <code>CONFIG_TLS_NCLEANUP=1</code><code>CONFIG_FS_PROCFS=y</code> <code>CONFIG_PTHREAD_MUTEX_TYPES=y</code><code>CONFIG_FS_PROCFS_REGISTER=y</code> <code>CONFIG_PTHREAD_STACK_MIN=1024</code><code>CONFIG_FS_ROMFS=y</code> <code>CONFIG_LIBM=y</code><code>CONFIG_FS_TMPFS=y</code> <code>CONFIG_RR_INTERVAL=10</code><code>CONFIG_IDLETHREAD_STACKSIZE=2048</code> <code>CONFIG_SCHED_WAITPID=y</code><code>CONFIG_LIBC_EXECFUNCS=y</code> <code>CONFIG_SERIAL_TERMIOS=y</code><code>CONFIG_LIBC_STRERROR=y</code> <code>CONFIG_SYMTAB_ORDEREDBYNAME=y</code><code>CONFIG_MAX_TASKS=16</code> <code>CONFIG_SYSTEM_NSH=y</code><code>CONFIG_NSH_BUILTIN_APPS=y</code> <code>CONFIG_SYSTEM_NSH_STACKSIZE=4096</code><code>CONFIG_NSH_FILEIOSIZE=512</code> <code>CONFIG_INIT_ENTRYPOINT=&quot;nsh_main&quot;</code></p><hr><p>Note that <code>CONFIG_LIBM=y</code> might not be required for toolchains that already include standard math library. However it is recommended to add <code>CONFIG_LIBM=y</code> to ensure math library is included. Subsequently <code>CONFIG_LIBC_FLOATINGPOINT=y</code> is needed if double values are to be printed on terminal.</p><p>In case you want to use Network and blocks like TCP or UDP, following configuration options are required:</p><hr><p><code>CONFIG_NET=y</code> <code>CONFIG_NET_ROUTE=y</code><code>CONFIG_NETDB_DNSCLIENT=y</code> <code>CONFIG_NET_SOLINGER=y</code><code>CONFIG_NETDEV_LATEINIT=y</code> <code>CONFIG_NET_STATISTICS=y</code><code>CONFIG_NETDEV_STATISTICS=y</code> <code>CONFIG_NET_TCP=y</code><code>CONFIG_NETINIT_DHCPC=y</code> <code>CONFIG_NET_TCPBACKLOG=y</code><code>CONFIG_NETINIT_NOMAC=y</code> <code>CONFIG_NET_TCP_KEEPALIVE=y</code><code>CONFIG_NETUTILS_FTPC=y</code> <code>CONFIG_NET_TCP_WRITE_BUFFERS=y</code><code>CONFIG_NETUTILS_TELNETD=y</code> <code>CONFIG_NET_UDP=y</code><code>CONFIG_NETUTILS_TFTPC=y</code> <code>CONFIG_SYSTEM_DHCPC_RENEW=y</code><code>CONFIG_NET_ARP_SEND=y</code> <code>CONFIG_SYSTEM_NTPC=y</code><code>CONFIG_NET_BROADCAST=y</code> <code>CONFIG_SYSTEM_PING6=y</code><code>CONFIG_NET_IPv6=y</code> <code>CONFIG_SYSTEM_PING=y</code><code>CONFIG_NET_LOOPBACK=y</code> <code>CONFIG_NET_PKT=y</code> <code>CONFIG_SYSTEM_TEE=y</code></p><hr><p>Board and application specific configuration like setting up peripherals or boot options might also be required, please refer to board and platform documentation for those information. Once NuttX is configured it can be build by simply running:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make</span></span></code></pre></div></blockquote><p>Then we need to export build NuttX which can be done by executing command</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make export</span></span></code></pre></div></blockquote><p>This creates a zip file nuttx-export-xx.x.x.zip where xx.x.x is the version of NuttX. This file then have to be moved to pysimCoder directory pysimCoder/CodeGen/nuttx, unzip there and then renamed just to nuttx-export. Then enter the pysimCoder/CodeGen/nuttx/device directory and execute</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make</span></span></code></pre></div></blockquote><p>This compiles pysimCoder files that controls functions of separate blocks. PysimCoder can be either installed on the system (please refer to the <a href="https://github.com/robertobucher/pysimCoder/blob/master/README.md" target="_blank" rel="noreferrer">pysimCoder manual</a>) or script pysim-run.sh can be used to run pysimCoder without the installation. This script can be found in pysimCoder root directory and is run by executing command</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./pysim-run.sh</span></span></code></pre></div></blockquote><p>Please note that PYSUPSICTRL variable has to be set/exported in order to successfully compile NuttX application designed with pysimCoder.</p><h2 id="using-pysimcoder-to-design-nuttx-application" tabindex="-1">Using pysimCoder to design NuttX application <a class="header-anchor" href="#using-pysimcoder-to-design-nuttx-application" aria-label="Permalink to &quot;Using pysimCoder to design NuttX application&quot;">​</a></h2><p>After running pysimCoder, separate blocks can be selected from the library menu on the left hand side. The menu contains several libraries, NuttX specific blocks can be found in library &quot;NuttX&quot;. It is also possible to use blocks from other libraries like &quot;input&quot;, &quot;output&quot;, &quot;math&quot; and so on. Several blocks can have specific parameter options and various number of inputs/outputs. Double left click on the block openes parameter settings while single right click on the block leads to number of inputs/outputs setup. The pysimCoder interface can be seen in the picture below.</p><p><img src="'+n+`" alt="pysimCoder interface: library menu can be seen on the left hand
side" class="align-center" width="100.0%"></p><p>The NuttX template Makefile nuttx.tmf has to be selected in order to generate code for NuttX target. This can be done in the top menu by clicking on Block settings icon which is highlighted in the red circle.</p><p><img src="`+c+`" alt="pysimCoder menu: red block settings, green generate
C-code" class="align-center" width="100.0%"></p><p>Block settings option open the following window (showed in the picture below) where you can set template Makefile and also Python skript with parameters for the controllers.</p><p><img src="`+r+`" alt="pysimCoder Block settings menu">{.align-center width=&quot;100.0%&quot;}</p><p>C code can be generated by selecting Generate C-code icon (highlighted in the green circle). Executable files are then generated and can be flashed into the target. The flashing procedure can be target specific, please refer to platform´s documentation. The generated application can be then run from NuttX command line by executing:</p><pre><code>nsh&gt; main
</code></pre>`,37)]))}const m=o(s,[["render",d]]);export{N as __pageData,m as default};
