import{_ as o,c as a,j as e,a as r,al as n,o as c}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"Note Driver Interface","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/note.md","filePath":"en/components/drivers/character/note.md"}'),d={name:"en/components/drivers/character/note.md"};function i(l,t,s,h,u,v){return c(),a("div",null,t[0]||(t[0]=[e("h1",{id:"note-driver-interface",tabindex:"-1"},[r("Note Driver Interface "),e("a",{class:"header-anchor",href:"#note-driver-interface","aria-label":'Permalink to "Note Driver Interface"'},"​")],-1),e("p",null,"Note driver is the interface to access the instrumentation data. The following devices are provided.",-1),e("ul",null,[e("li",null,[e("code",{class:"interpreted-text",role:"ref"},"notectl")]),e("li",null,[e("code",{class:"interpreted-text",role:"ref"},"noteram")])],-1),n('<h2 id="notectl-device-dev-notectl" tabindex="-1">Notectl Device (<code>/dev/notectl</code>) <a class="header-anchor" href="#notectl-device-dev-notectl" aria-label="Permalink to &quot;Notectl Device (`/dev/notectl`)&quot;">​</a></h2><blockquote><p><code>/dev/notectl</code> is the device to control an instrumentation filter in NuttX kernel. The device has only ioctl function to control the filter.</p></blockquote><h3 id="dev-notectl-header-files" tabindex="-1"><code>/dev/notectl</code> Header Files <a class="header-anchor" href="#dev-notectl-header-files" aria-label="Permalink to &quot;`/dev/notectl` Header Files&quot;">​</a></h3><blockquote><p>The header file <code>include/nuttx/note/notectl_driver.h</code> provides the interface definitions of the device.</p></blockquote><h3 id="dev-notectl-data-structures" tabindex="-1"><code>/dev/notectl</code> Data Structures <a class="header-anchor" href="#dev-notectl-data-structures" aria-label="Permalink to &quot;`/dev/notectl` Data Structures&quot;">​</a></h3><h3 id="dev-notectl-ioctls" tabindex="-1"><code>/dev/notectl</code> Ioctls <a class="header-anchor" href="#dev-notectl-ioctls" aria-label="Permalink to &quot;`/dev/notectl` Ioctls&quot;">​</a></h3><h2 id="noteram-device-dev-note" tabindex="-1">Noteram Device (<code>/dev/note</code>) <a class="header-anchor" href="#noteram-device-dev-note" aria-label="Permalink to &quot;Noteram Device (`/dev/note`)&quot;">​</a></h2><blockquote><p><code>/dev/note</code> is the device to get the trace (instrumentation) data. The device has read function to get the data and ioctl function to control the buffer mode.</p></blockquote><h3 id="dev-note-header-files" tabindex="-1"><code>/dev/note</code> Header Files <a class="header-anchor" href="#dev-note-header-files" aria-label="Permalink to &quot;`/dev/note` Header Files&quot;">​</a></h3><blockquote><p>The header file <code>include/nuttx/note/noteram_driver.h</code> provides the interface definitions of the device.</p></blockquote><h3 id="dev-note-data-structures" tabindex="-1"><code>/dev/note</code> Data Structures <a class="header-anchor" href="#dev-note-data-structures" aria-label="Permalink to &quot;`/dev/note` Data Structures&quot;">​</a></h3><h3 id="dev-note-ioctls" tabindex="-1"><code>/dev/note</code> Ioctls <a class="header-anchor" href="#dev-note-ioctls" aria-label="Permalink to &quot;`/dev/note` Ioctls&quot;">​</a></h3><h2 id="filter-control-apis" tabindex="-1">Filter control APIs <a class="header-anchor" href="#filter-control-apis" aria-label="Permalink to &quot;Filter control APIs&quot;">​</a></h2><p>The following APIs are the functions to control note filters directly. These are kernel APIs and application can use them only in FLAT build.</p><p>The header file <code>include/nuttx/sched_note.h</code> is needed to use the following APIs.</p><h3 id="api-description" tabindex="-1">API description <a class="header-anchor" href="#api-description" aria-label="Permalink to &quot;API description&quot;">​</a></h3>',16)]))}const m=o(d,[["render",i]]);export{p as __pageData,m as default};
