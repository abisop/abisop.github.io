import{_ as o,c as i,al as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"unionfs Union File System","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/unionfs/index.md","filePath":"en/applications/examples/unionfs/index.md"}'),s={name:"en/applications/examples/unionfs/index.md"};function d(l,e,a,c,r,_){return n(),i("div",null,e[0]||(e[0]=[t('<h1 id="unionfs-union-file-system" tabindex="-1"><code>unionfs</code> Union File System <a class="header-anchor" href="#unionfs-union-file-system" aria-label="Permalink to &quot;`unionfs` Union File System&quot;">â€‹</a></h1><p>This is at trivial test of the Union File System. See <code>nuttx/fs/unionfs/README.txt</code>. Dependencies:</p><ul><li><code>CONFIG_DISABLE_MOUNTPOINT</code> -- Mountpoint support must not be disabled.</li><li><code>CONFIG_FS_ROMFS</code> -- ROMFS support is required.</li><li><code>CONFIG_FS_UNIONFS</code> -- Union File System support is required.</li></ul><p>Configuration options. Use the defaults if you are unsure of what you are doing:</p><ul><li><code>CONFIG_EXAMPLES_UNIONFS</code> -- Enables the example.</li><li><code>CONFIG_EXAMPLES_UNIONFS_MOUNTPT</code> -- Mountpoint path for the Union File System.</li><li><code>CONFIG_EXAMPLES_UNIONFS_TMPA</code> -- Temporary mount point for file system <code>1</code>.</li><li><code>CONFIG_EXAMPLES_UNIONFS_TMPB</code> -- Temporary mount point for file system <code>2</code>.</li><li><code>CONFIG_EXAMPLES_UNIONFS_RAMDEVNO_A</code> -- ROMFS file system <code>1</code> RAM disk device number.</li><li><code>CONFIG_EXAMPLES_UNIONFS_RAMDEVNO_B</code> -- ROMFS file system <code>2</code> RAM disk device number.</li><li><code>CONFIG_EXAMPLES_UNIONFS_SECTORSIZE</code> -- ROM disk sector size.</li></ul><p>See [[/platform](]{.title-ref}/platform.md)s/sim/sim/boards/sim/index` page for a walk-through of the output of this text.</p>',6)]))}const f=o(s,[["render",d]]);export{u as __pageData,f as default};
