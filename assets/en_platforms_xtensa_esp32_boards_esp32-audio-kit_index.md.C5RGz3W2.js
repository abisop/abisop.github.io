import{_ as t,c as a,al as o,o as i}from"./chunks/framework.NFAqBSgQ.js";const n="/assets/esp32-audio-kit.BTTB9eN2.png",r="/assets/esp32-audio-config-file.BWOmnNZB.png",b=JSON.parse('{"title":"ESP32-AUDIO-KIT","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/xtensa/esp32/boards/esp32-audio-kit/index.md","filePath":"en/platforms/xtensa/esp32/boards/esp32-audio-kit/index.md"}'),s={name:"en/platforms/xtensa/esp32/boards/esp32-audio-kit/index.md"};function d(l,e,p,h,c,u){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="esp32-audio-kit" tabindex="-1">ESP32-AUDIO-KIT <a class="header-anchor" href="#esp32-audio-kit" aria-label="Permalink to &quot;ESP32-AUDIO-KIT&quot;">​</a></h1><p>chip:esp32, chip:esp32a1s</p><p>The <a href="https://docs.ai-thinker.com/en/esp32-audio-kit" target="_blank" rel="noreferrer">Ai-Thinker ESP32 Audio Kit</a> is a development board for the ESP32 SoC from Espressif, based on Ai-Thinker ESP32-A1S audio module.</p><hr><h2 id="" tabindex="-1"><img src="'+n+`" alt="Ai-Thinker ESP32 Audio Kit board" class="align-center"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![Ai-Thinker ESP32 Audio Kit board](esp32-audio-kit.png){.align-center}&quot;">​</a></h2><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><blockquote><ul><li>ESP32-A1S module</li><li>Audio Earphones Output</li><li>Audio LINEIN Input</li><li>2 Microphones in the board (stereo audio input)</li><li>8 Buttons in the boards (1 RST Button and 7 user buttons)</li><li>MicroSD card slot</li></ul></blockquote><p>Some of the ESP32 I/O pins are broken out to the board&#39;s pin header.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>UART0 is, by default, the serial console. It connects to the on-board Silabs CP2102 converter and is available on the USB connector (UART label).</p><p>It will show up as /dev/ttyUSB[n] where [n] normally is 0 if you don&#39;t have another USB/Serial adapter connected in your computer.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><h3 id="board-buttons" tabindex="-1">Board Buttons <a class="header-anchor" href="#board-buttons" aria-label="Permalink to &quot;Board Buttons&quot;">​</a></h3><p>There are eight buttons labeled as RST, BOOT, KEY1..KEY6. The RST button is not available to software.</p><p>The BOOT button is connected to IO0. On reset it is used as a strapping pin to determine whether the chip boots normally or into the serial bootloader. After reset, however, the BOOT button can be used for software input.</p><h3 id="board-leds" tabindex="-1">Board LEDs <a class="header-anchor" href="#board-leds" aria-label="Permalink to &quot;Board LEDs&quot;">​</a></h3><p>There are several on-board LEDs for that indicate the presence of power and USB activity.</p><h2 id="i-o-mapping" tabindex="-1">I/O Mapping <a class="header-anchor" href="#i-o-mapping" aria-label="Permalink to &quot;I/O Mapping&quot;">​</a></h2><p>I/O Signal Notes</p><hr><p>0 2 4 5 12 BOOT Button DATA0 SDCard DATA1 SDCard KEY6 Button DATA2 SDCard<br> 13 14 KEY2 Button/DATA3 SDCard CLK SDCard (DIP Switch) 15 18 19 21 22 23 34 36 CMD SDCard/JTAG MTDO KEY5 Button KEY3 Button/LED5 CTRL Audio AMP LED4 KEY4 Button SDCard Detect KEY1 Button (DIP Switch)</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>All of the configurations presented below can be tested by running the following commands:</p><pre><code> ./tools/configure.sh esp32-audio-kit:&lt;config_name&gt;
 make flash ESPTOOL_PORT=/dev/ttyUSB0 -j
</code></pre><p>Where &lt;config_name&gt; is the name of board configuration you want to use, i.e.: nsh, buttons, wifi... Then use a serial console terminal like <code>minicom</code> or <code>picocom</code> configured to 115200 8N1.</p><h3 id="audio" tabindex="-1">audio <a class="header-anchor" href="#audio" aria-label="Permalink to &quot;audio&quot;">​</a></h3><p>This configuration uses the I2S0 peripheral and the ES8388 audio codec present on the ESP32-Audio-Kit board to play an audio file streamed over HTTP while connected to a Wi-Fi network.</p><p><strong>Simple HTTP server</strong></p><p>Prepare a PCM-encoded ([.wav]{.title-ref}) audio file with 16 bits/sample (sampled at 44.1kHz). This file must be placed into a folder in a computer that could be accessed on the same Wi-Fi network the ESP32 will be connecting to.</p><p>Python provides a simple HTTP server. [cd]{.title-ref} to the audio file folder on the PC and run:</p><pre><code> python3 -m http.server

Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/)
</code></pre><p>Look for your PC IP address and test playing the prepared audio on your browser:</p><p><img src="`+r+`" alt="" class="align-center"></p><p>After successfully built and flashed, connect the board to the Wi-Fi network:</p><pre><code> nsh&gt; wapi psk wlan0 mypasswd 3
 nsh&gt; wapi essid wlan0 myssid 1
 nsh&gt; renew wlan0
</code></pre><p>Once connected, open NuttX&#39;s player and play the file according to its file name and the IP address of the HTTP server (For example [tone.wav]{.title-ref} and [192.168.1.239:8000]{.title-ref}, respectively):</p><pre><code> nsh&gt; nxplayer
 nxplayer&gt; play http://192.168.1.239:8000/tone.wav
</code></pre><p>Note</p><p>The codec implementation on the LyraT board was validated using 16-bit, 44.1kHz WAV files. Other configurations might not work as expected.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, exposed via USB connection by means of FT2232HL converter, at 115200 bps).</p><h3 id="wifi" tabindex="-1">wifi <a class="header-anchor" href="#wifi" aria-label="Permalink to &quot;wifi&quot;">​</a></h3><p>Enables Wi-Fi support. You can define your credentials this way:</p><pre><code> make menuconfig
-&gt; Application Configuration
    -&gt; Network Utilities
        -&gt; Network initialization (NETUTILS_NETINIT [=y])
            -&gt; WAPI Configuration
</code></pre><p>Or if you don&#39;t want to keep it saved in the firmware you can do it at runtime:</p><pre><code>nsh&gt; wapi psk wlan0 mypasswd 3
nsh&gt; wapi essid wlan0 myssid 1
nsh&gt; renew wlan0
</code></pre><p>Tip</p><p>Please refer to <code>ESP32 Wi-Fi Station Mode &lt;esp32_wi-fi_sta&gt;</code>{.interpreted-text role=&quot;ref&quot;} for more information.</p>`,48)]))}const m=t(s,[["render",d]]);export{b as __pageData,m as default};
