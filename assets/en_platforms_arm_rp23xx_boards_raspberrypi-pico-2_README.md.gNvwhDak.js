import{_ as t,c as a,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"README","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp23xx/boards/raspberrypi-pico-2/README.md","filePath":"en/platforms/arm/rp23xx/boards/raspberrypi-pico-2/README.md"}'),i={name:"en/platforms/arm/rp23xx/boards/raspberrypi-pico-2/README.md"};function s(n,e,l,p,c,h){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="readme" tabindex="-1">README <a class="header-anchor" href="#readme" aria-label="Permalink to &quot;README&quot;">​</a></h1><p>This directory contains the porting of NuttX to the Raspberry Pi Pico 2. See <a href="https://www.raspberrypi.org/products/raspberry-pi-pico-2/" target="_blank" rel="noreferrer">https://www.raspberrypi.org/products/raspberry-pi-pico-2/</a> for information about Raspberry Pi Pico 2.</p><p>NuttX supports the following RP2350 capabilities: - UART (console port)</p><ul><li>GPIO 0 (UART0 TX) and GPIO 1 (UART0 RX) are used for the console. - ADC - USB device - CDC/ACM serial device can be used for the console. - Flash ROM Boot - SRAM Boot</li></ul><h1 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h1><ol><li>Configure and build NuttX</li></ol><p>$ git clone <a href="https://github.com/apache/nuttx.git" target="_blank" rel="noreferrer">https://github.com/apache/nuttx.git</a> nuttx $ git clone <a href="https://github.com/apache/nuttx-apps.git" target="_blank" rel="noreferrer">https://github.com/apache/nuttx-apps.git</a> apps $ cd nuttx $ make distclean $ ./tools/configure.sh raspberrypi-pico-2:nsh $ make -j</p><ol start="4"><li><p>Connect Raspberry Pi Pico 2 board to the USB port while pressing BOOTSEL. The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device. (Same manner as the standard Pico SDK applications installation.)</p></li><li><p>To access the console, GPIO 0 and 1 pins must be connected to the device such as a USB-serial converter.</p><p><code>usbnsh</code> configuration provides the console access by USB CDC/ACM serial device. The console is available by using a terminal software on the USB host.</p></li></ol><h1 id="defconfigs" tabindex="-1">Defconfigs <a class="header-anchor" href="#defconfigs" aria-label="Permalink to &quot;Defconfigs&quot;">​</a></h1><ul><li><p>nsh Minimum configuration with NuttShell</p></li><li><p>usbnsh USB CDC/ACM serial console with NuttShell</p></li></ul>',10)]))}const b=t(i,[["render",s]]);export{u as __pageData,b as default};
