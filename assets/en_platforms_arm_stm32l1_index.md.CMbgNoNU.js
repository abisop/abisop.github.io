import{_ as i,c as r,al as t,j as a,o}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"ST STM32L1","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32l1/index.md","filePath":"en/platforms/arm/stm32l1/index.md"}'),s={name:"en/platforms/arm/stm32l1/index.md"};function n(l,e,d,u,p,h){return o(),r("div",null,e[0]||(e[0]=[t(`<h1 id="st-stm32l1" tabindex="-1">ST STM32L1 <a class="header-anchor" href="#st-stm32l1" aria-label="Permalink to &quot;ST STM32L1&quot;">​</a></h1><h2 id="supported-mcus" tabindex="-1">Supported MCUs <a class="header-anchor" href="#supported-mcus" aria-label="Permalink to &quot;Supported MCUs&quot;">​</a></h2><p>TODO</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates peripherals supported in NuttX:</p><p>Peripheral Support Notes</p><hr><p>FLASH PM RCC GPIO SYSCFG EXTI DMA ADC DAC COMP OPAMP LCD TIM RTC IWDG WWDG AES USB FSMC I2C USART SPI SDIO Yes ? Yes Yes ? Yes Yes Yes Yes ? ? ? Yes Yes Yes Yes ? ? ? Yes Yes Yes Yes</p><h3 id="memory" tabindex="-1">Memory <a class="header-anchor" href="#memory" aria-label="Permalink to &quot;Memory&quot;">​</a></h3><ul><li>CONFIG_RAM_SIZE - Describes the installed DRAM (SRAM in this case)</li><li>CONFIG_RAM_START - The start address of installed DRAM</li><li>CONFIG_STM32_CCMEXCLUDE - Exclude CCM SRAM from the HEAP</li><li>CONFIG_ARCH_INTERRUPTSTACK - This architecture supports an interrupt stack. If defined, this symbol is the size of the interrupt stack in bytes. If not defined, the user task stacks will be used during interrupt handling.</li><li>CONFIG_ARCH_STACKDUMP - Do stack dumps after assertions</li></ul><h3 id="clock" tabindex="-1">Clock <a class="header-anchor" href="#clock" aria-label="Permalink to &quot;Clock&quot;">​</a></h3><ul><li><p>CONFIG_ARCH_BOARD_STM32_CUSTOM_CLOCKCONFIG - Enables special STM32 clock configuration features.:</p><pre><code>CONFIG_ARCH_BOARD_STM32_CUSTOM_CLOCKCONFIG=n
</code></pre></li><li><p>CONFIG_ARCH_LOOPSPERMSEC - Must be calibrated for correct operation of delay loops</p></li></ul><h3 id="timers" tabindex="-1">Timers <a class="header-anchor" href="#timers" aria-label="Permalink to &quot;Timers&quot;">​</a></h3><p>Timer devices may be used for different purposes. One special purpose is to generate modulated outputs for such things as motor control. If CONFIG_STM32_TIMn is defined (as above) then the following may also be defined to indicate that the timer is intended to be used for pulsed output modulation, ADC conversion, or DAC conversion. Note that ADC/DAC require two definition: Not only do you have to assign the timer (n) for used by the ADC or DAC, but then you also have to configure which ADC or DAC (m) it is assigned to.</p><ul><li>CONFIG_STM32_TIMn_PWM Reserve timer n for use by PWM, n=1,..,14</li><li>CONFIG_STM32_TIMn_ADC Reserve timer n for use by ADC, n=1,..,14</li><li>CONFIG_STM32_TIMn_ADCm Reserve timer n to trigger ADCm, n=1,..,14, m=1,..,3</li><li>CONFIG_STM32_TIMn_DAC Reserve timer n for use by DAC, n=1,..,14</li><li>CONFIG_STM32_TIMn_DACm Reserve timer n to trigger DACm, n=1,..,14, m=1,..,2</li></ul><p>For each timer that is enabled for PWM usage, we need the following additional configuration settings:</p>`,16),a("blockquote",{"1,..,4":""},[a("p",null,"CONFIG_STM32_TIMx_CHANNEL - Specifies the timer output channel")],-1),t(`<p>NOTE: The STM32 timers are each capable of generating different signals on each of the four channels with different duty cycles. That capability is not supported by this driver: Only one output channel per timer.</p><h3 id="jtag" tabindex="-1">JTAG <a class="header-anchor" href="#jtag" aria-label="Permalink to &quot;JTAG&quot;">​</a></h3><p>JTAG Enable settings (by default JTAG-DP and SW-DP are disabled):</p><ul><li>CONFIG_STM32_JTAG_FULL_ENABLE - Enables full SWJ (JTAG-DP + SW-DP)</li><li>CONFIG_STM32_JTAG_NOJNTRST_ENABLE - Enables full SWJ (JTAG-DP + SW-DP) but without JNTRST.</li><li>CONFIG_STM32_JTAG_SW_ENABLE - Set JTAG-DP disabled and SW-DP enabled</li></ul><h3 id="usart" tabindex="-1">USART <a class="header-anchor" href="#usart" aria-label="Permalink to &quot;USART&quot;">​</a></h3><p>Options:</p><ul><li>CONFIG_U[S]ARTn_SERIAL_CONSOLE - selects the USARTn (n=1,2,3) or UARTm (m=4,5) for the console and ttys0 (default is the USART1).</li><li>CONFIG_U[S]ARTn_RXBUFSIZE - Characters are buffered as received. This specific the size of the receive buffer</li><li>CONFIG_U[S]ARTn_TXBUFSIZE - Characters are buffered before being sent. This specific the size of the transmit buffer</li><li>CONFIG_U[S]ARTn_BAUD - The configure BAUD of the UART. Must be</li><li>CONFIG_U[S]ARTn_BITS - The number of bits. Must be either 7 or 8.</li><li>CONFIG_U[S]ARTn_PARTIY - 0=no parity, 1=odd parity, 2=even parity</li><li>CONFIG_U[S]ARTn_2STOP - Two stop bits</li></ul><h3 id="spi" tabindex="-1">SPI <a class="header-anchor" href="#spi" aria-label="Permalink to &quot;SPI&quot;">​</a></h3><ul><li>CONFIG_STM32_SPI_INTERRUPTS - Select to enable interrupt driven SPI support. Non-interrupt-driven, poll-waiting is recommended if the interrupt rate would be to high in the interrupt driven case.</li><li>CONFIG_STM32_SPIx_DMA - Use DMA to improve SPIx transfer performance. Cannot be used with CONFIG_STM32_SPI_INTERRUPT.</li></ul><h3 id="usb" tabindex="-1">USB <a class="header-anchor" href="#usb" aria-label="Permalink to &quot;USB&quot;">​</a></h3><p>TODO</p><h3 id="slcd" tabindex="-1">SLCD <a class="header-anchor" href="#slcd" aria-label="Permalink to &quot;SLCD&quot;">​</a></h3><p>To enable SLCD support:</p><pre><code>Board Selection:
  CONFIG_ARCH_LEDS=n                      : Disable board LED support

Library Routines:
  CONFIG_LIBC_SLCDCODEC=y                  : Enable the SLCD CODEC

System Type -&gt; STM32 Peripheral Support:
  CONFIG_STM32_LCD=y                      : Enable the Segment LCD
</code></pre><p>To enable LCD debug output:</p><pre><code>Device Drivers:
  CONFIG_LCD=y                            : (Needed to enable LCD debug)

Build Setup -&gt; Debug Options:
  CONFIG_DEBUG_FEATURES=y                 : Enable debug features
  CONFIG_DEBUG_INFO=y                     : Enable LCD debug
</code></pre><p>NOTE: At this point in time, testing of the SLCD is very limited because there is not much in apps/examples/slcd. Certainly there are more bugs to be found. There are also many segment-encoded glyphs in stm32_lcd.c But there is a basically functional driver with a working test setup that can be extended if you want a fully functional SLCD driver.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,19)]))}const C=i(s,[["render",n]]);export{c as __pageData,C as default};
