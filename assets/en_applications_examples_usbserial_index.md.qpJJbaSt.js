import{_ as t,c as a,al as o,o as i}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"usbserial USB Serial Hello World","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/usbserial/index.md","filePath":"en/applications/examples/usbserial/index.md"}'),l={name:"en/applications/examples/usbserial/index.md"};function s(r,e,d,n,c,h){return i(),a("div",null,e[0]||(e[0]=[o(`<h1 id="usbserial-usb-serial-hello-world" tabindex="-1"><code>usbserial</code> USB Serial Hello World <a class="header-anchor" href="#usbserial-usb-serial-hello-world" aria-label="Permalink to &quot;\`usbserial\` USB Serial Hello World&quot;">​</a></h1><h2 id="target-configuration" tabindex="-1">Target configuration <a class="header-anchor" href="#target-configuration" aria-label="Permalink to &quot;Target configuration&quot;">​</a></h2><p>This is another implementation of &quot;Hello, World&quot; but this one uses a USB serial driver. Configuration options can be used to simply the test. These options include:</p><ul><li><code>CONFIG_EXAMPLES_USBSERIAL_INONLY</code> – Only verify IN (device-to-host) data transfers. Default: both.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_OUTONLY</code> – Only verify OUT (host-to-device) data transfers. Default: both.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_ONLYSMALL</code> – Send only small, single packet messages. Default: Send large and small.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_ONLYBIG</code> – Send only large, multi-packet messages. Default: Send large and small.</li></ul><p>If <code>CONFIG_USBDEV_TRACE</code> is enabled (or <code>CONFIG_DEBUG_FEATURES</code> and <code>CONFIG_DEBUG_USB</code>), then the example code will also manage the USB trace output. The amount of trace output can be controlled using:</p><ul><li><code>CONFIG_EXAMPLES_USBSERIAL_TRACEINIT</code> – Show initialization events.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_TRACECLASS</code> – Show class driver events.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_TRACETRANSFERS</code> – Show data transfer events.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_TRACECONTROLLER</code> – Show controller events.</li><li><code>CONFIG_EXAMPLES_USBSERIAL_TRACEINTERRUPTS</code> – Show interrupt-related events.</li></ul><p>Error results are always shown in the trace output.</p><h2 id="host-side-test-program" tabindex="-1">Host-side test program <a class="header-anchor" href="#host-side-test-program" aria-label="Permalink to &quot;Host-side test program&quot;">​</a></h2><p>In additional to the target device-side example, there is also a host-side application in this directory. This host side application must be executed on a Linux host in order to perform the <code>USBSERIAL</code> test. The host application can be compiled under Linux (or Cygwin?) as follows:</p><pre><code>cd examples/usbserial
make -f Makefile.host TOPDIR=&lt;nuttx-directory&gt;
</code></pre><h2 id="running-the-test" tabindex="-1">Running the test <a class="header-anchor" href="#running-the-test" aria-label="Permalink to &quot;Running the test&quot;">​</a></h2><p>This will generate a small program called <code>host</code>. Usage:</p><ol><li><p>Build the <code>examples/usbserial</code> target program and start the target.</p></li><li><p>Wait a bit, then do enter:</p><pre><code>dmesg
</code></pre><p>At the end of the dmesg output, you should see the serial device was successfully identified and assigned to a tty device, probably <code>/dev/ttyUSB0</code> or <code>/dev/ttyACM0</code> (depending on the configured USB serial driver).</p></li><li><p>Then start the host application:</p><pre><code>./host [&lt;tty-dev&gt;]
</code></pre><p>Where:</p><ul><li><code>&lt;tty-dev&gt;</code> is the USB TTY device to use. The default is <code>/dev/ttyUSB0</code> (for the PL2303 emulation) or <code>/dev/ttyACM0</code> (for the CDC/ACM serial device).</li></ul></li></ol><p>The host and target will exchange are variety of very small and very large serial messages.</p>`,14)]))}const S=t(l,[["render",s]]);export{u as __pageData,S as default};
