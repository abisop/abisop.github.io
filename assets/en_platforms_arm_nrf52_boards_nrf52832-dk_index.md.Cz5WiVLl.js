import{_ as a,c as o,al as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"nRF52832-DK","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf52/boards/nrf52832-dk/index.md","filePath":"en/platforms/arm/nrf52/boards/nrf52832-dk/index.md"}'),r={name:"en/platforms/arm/nrf52/boards/nrf52832-dk/index.md"};function s(i,e,l,d,h,c){return n(),o("div",null,e[0]||(e[0]=[t(`<h1 id="nrf52832-dk" tabindex="-1">nRF52832-DK <a class="header-anchor" href="#nrf52832-dk" aria-label="Permalink to &quot;nRF52832-DK&quot;">​</a></h1><p>chip:nrf52, chip:nrf52832</p><p>The <a href="https://www.nordicsemi.com/Products/Development-hardware/nrf52-dk" target="_blank" rel="noreferrer">NRF52832-DK (PCA10040)</a> is a development board for the nRF52832 SoC from Nordic.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The PCA10040 default console is the UART0.</p><p>The PCA10040 does not have RS-232 drivers or serial connectors on board. UART0 is connected to the virtual COM port:</p><p>Signal PIN</p><hr><p>UART0-RX P0.08 UART0-TX P0.06</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The PCA10040 has 4 user-controllable LEDs:</p><p>LED MCU</p><hr><p>LED1 P0.17 LED2 P0.18 LED3 P0.19 LED4 P0.20</p><p>A low output illuminates the LED.</p><h3 id="config-arch-leds" tabindex="-1">CONFIG_ARCH_LEDS <a class="header-anchor" href="#config-arch-leds" aria-label="Permalink to &quot;CONFIG\\_ARCH\\_LEDS&quot;">​</a></h3><p>If CONFIG_ARCH_LEDS is not defined, then the LEDs are completely under control of the application. The following interfaces are then available for application control of the LEDs:</p><pre><code>uint32_t board_userled_initialize(void);
void board_userled(int led, bool ledon);
void board_userled_all(uint32_t ledset);
</code></pre><h3 id="pushbuttons" tabindex="-1">Pushbuttons <a class="header-anchor" href="#pushbuttons" aria-label="Permalink to &quot;Pushbuttons&quot;">​</a></h3><p>BUTTON MCU</p><hr><p>BUTTON1 P0.13 BUTTON2 P0.14 BUTTON3 P0.15 BUTTON4 P0.16</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nrf52832-dk:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="jumbo" tabindex="-1">jumbo <a class="header-anchor" href="#jumbo" aria-label="Permalink to &quot;jumbo&quot;">​</a></h3><p>This configuration enables many Apache NuttX features. This is mostly to help provide additional code coverage in CI, but also allows for a users to see a wide range of features that are supported by the OS.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, exposed via J-Link VCOM connection, at 115200 bps).</p><h3 id="ostest-tickless" tabindex="-1">ostest_tickless <a class="header-anchor" href="#ostest-tickless" aria-label="Permalink to &quot;ostest\\_tickless&quot;">​</a></h3><p>This is a NSH configuration that includes <code>apps/testing/ostest</code> as a builtin and enable support for the tick-less OS.</p><h3 id="sdc" tabindex="-1">sdc <a class="header-anchor" href="#sdc" aria-label="Permalink to &quot;sdc&quot;">​</a></h3><p>Enables Nordic&#39;s SoftDevice controller and uses NuttX BLE stack for the host-layer. The <code>btsak</code> application is included as a builtin.</p><h3 id="sdc-nimble" tabindex="-1">sdc_nimble <a class="header-anchor" href="#sdc-nimble" aria-label="Permalink to &quot;sdc\\_nimble&quot;">​</a></h3><p>Enables Nordic&#39;s SoftDevice controller and uses nimBLE for the host-layer. The <code>nimble</code> test application can be used to enable a simple GATT server.</p>`,37)]))}const f=a(r,[["render",s]]);export{u as __pageData,f as default};
