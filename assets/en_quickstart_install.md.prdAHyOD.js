import{_ as a,c as t,al as s,o as n}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Installing","description":"","frontmatter":{},"headers":[],"relativePath":"en/quickstart/install.md","filePath":"en/quickstart/install.md"}'),o={name:"en/quickstart/install.md"};function i(l,e,p,r,c,d){return n(),t("div",null,e[0]||(e[0]=[s(`<h1 id="installing" tabindex="-1">Installing <a class="header-anchor" href="#installing" aria-label="Permalink to &quot;Installing&quot;">​</a></h1><p>The first step to get started with NuttX is to install a series of required tools, a toolchain for the architecture you will be working with and, finally, download NuttX source code itself.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>First, install the following set of system dependencies according to your Operating System:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo apt install \\</span></span>
<span class="line"><span> bison flex gettext texinfo libncurses5-dev libncursesw5-dev xxd \\</span></span>
<span class="line"><span> git gperf automake libtool pkg-config build-essential gperf genromfs \\</span></span>
<span class="line"><span> libgmp-dev libmpc-dev libmpfr-dev libisl-dev binutils-dev libelf-dev \\</span></span>
<span class="line"><span> libexpat1-dev gcc-multilib g++-multilib picocom u-boot-tools util-linux</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo dnf install \\</span></span>
<span class="line"><span> bison flex gettext texinfo ncurses-devel ncurses ncurses-compat-libs \\</span></span>
<span class="line"><span> git gperf automake libtool pkgconfig @development-tools gperf genromfs \\</span></span>
<span class="line"><span> gmp-devel mpfr-devel libmpc-devel isl-devel binutils-devel elfutils-libelf-devel \\</span></span>
<span class="line"><span> expat-devel gcc-c++ g++ picocom uboot-tools util-linux</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> brew tap discoteq/discoteq</span></span>
<span class="line"><span> brew install flock</span></span>
<span class="line"><span> brew install x86_64-elf-gcc  # Used by simulator</span></span>
<span class="line"><span> brew install u-boot-tools  # Some platform integrate with u-boot</span></span></code></pre></div><p>that installation guide for Linux. This has been verified against the Ubuntu 18.04 version.</p><p>There may be complications interacting with programming tools over USB. Recently support for USBIP was added to WSL 2 which has been used with the STM32 platform, but it is not trivial to configure: <a href="https://learn.microsoft.com/en-us/windows/wsl/connect-usb" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/windows/wsl/connect-usb</a></p><p>installation in addition to these packages:</p><pre><code>make              bison             libmpc-devel
gcc-core          byacc             automake-1.15
gcc-g++           gperf             libncurses-devel
flex              gdb               libmpfr-devel
git               unzip             zlib-devel
</code></pre></blockquote><h3 id="kconfig-frontend" tabindex="-1">KConfig frontend <a class="header-anchor" href="#kconfig-frontend" aria-label="Permalink to &quot;KConfig frontend&quot;">​</a></h3><p>NuttX configuration system uses <a href="https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt" target="_blank" rel="noreferrer">KConfig</a> which is exposed via a series of interactive menu-based <em>frontends</em>, part of the <code>kconfig-frontends</code> package. Depending on your OS you may use a precompiled package or you will have to build it from source, which is available in the <a href="https://bitbucket.org/nuttx/tools/src/master/kconfig-frontends/" target="_blank" rel="noreferrer">NuttX tools repository</a>:</p><blockquote><p>\\ cd tools/kconfig-frontends \\ ./configure --enable-mconf --disable-nconf --disable-gconf --disable-qconf \\ make \\ make install</p><p>\\ cd tools/kconfig-frontends \\ ./configure --enable-mconf --disable-nconf --disable-gconf --disable-qconf \\ aclocal <br> automake \\ make \\ sudo make install</p><p>\\ cd tools/kconfig-frontends \\ patch &lt; ../kconfig-macos.diff -p 1 \\ ./configure --enable-mconf --disable-shared --enable-static --disable-gconf --disable-qconf --disable-nconf \\ make \\ sudo make install</p></blockquote><p>NuttX also supports <a href="https://github.com/ulfalizer/Kconfiglib" target="_blank" rel="noreferrer">kconfiglib</a> by default, which is a Kconfig tool implemented in Python 2/3. Compared with <code>kconfig-frontends</code>, kconfiglib provides NuttX with the possibility of multi-platform support(configure NuttX in Windows native/Visual Studio), and also <code>kconfiglib</code> has a stronger Kconfig syntax check, this will help developers to avoid some Kconfig syntax errors. Install kconfiglib via following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt install python3-kconfiglib</span></span></code></pre></div><p>If you are a working on Windows, which also need the support of windows-curses:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pip install windows-curses</span></span></code></pre></div><h2 id="toolchain" tabindex="-1">Toolchain <a class="header-anchor" href="#toolchain" aria-label="Permalink to &quot;Toolchain&quot;">​</a></h2><p>To build Apache NuttX you need the appropriate toolchain according to your target platform. Some Operating Systems such as Linux distribute toolchains for various architectures. This is usually an easy choice however you should be aware that in some cases the version offered by your OS may have problems and it may be better to use a widely used build from another source.</p><p>The following example shows how to install a toolchain for ARM architecture:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> brew install --cask gcc-arm-embedded</span></span></code></pre></div><p>For 64 bit ARM targets, such as Allwinner A64:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> brew install --cask gcc-aarch64-embedded</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> usermod -a -G users USER</span></span>
<span class="line"><span> # get a login shell that knows we&#39;re in this group:</span></span>
<span class="line"><span> su - USER</span></span>
<span class="line"><span> sudo mkdir /opt/gcc</span></span>
<span class="line"><span> sudo chgrp -R users /opt/gcc</span></span>
<span class="line"><span> sudo chmod -R u+rw /opt/gcc</span></span>
<span class="line"><span> cd /opt/gcc</span></span></code></pre></div><p>Download and extract toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> HOST_PLATFORM=x86_64-linux   # use &#39;aarch64-linux&#39; for ARM64 Linux, or &#39;mac&#39; for Intel macOS</span></span>
<span class="line"><span> # For Windows there is a zip instead (gcc-arm-none-eabi-10.3-2021.10-win32.zip)</span></span>
<span class="line"><span> curl -L -O https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-{HOST_PLATFORM}.tar.bz2</span></span>
<span class="line"><span> tar xf gcc-arm-none-eabi-10.3-2021.10-{HOST_PLATFORM}.tar.bz2</span></span></code></pre></div><p>Add the toolchain to your \`PATH\`:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> echo &quot;export PATH=/opt/gcc/gcc-arm-none-eabi-10.3-2021.10/bin:PATH&quot; &gt;&gt; ~/.bashrc</span></span></code></pre></div><p>You can edit your shell&#39;s rc files if you don&#39;t use bash.</p></blockquote><p>Tip</p><p>There are hints on how to get the latest tool chains for most supported architectures in the Apache NuttX CI helper <a href="https://github.com/apache/nuttx/tree/master/tools/ci/cibuild.sh" target="_blank" rel="noreferrer">script</a> and Docker <a href="https://github.com/apache/nuttx/tree/master/tools/ci/docker/linux/Dockerfile" target="_blank" rel="noreferrer">container</a></p><p>Required toolchain should be part of each arch documentation (see <a href="https://github.com/apache/nuttx/issues/2409" target="_blank" rel="noreferrer">relevant issue</a>).</p><h2 id="download-nuttx" tabindex="-1">Download NuttX <a class="header-anchor" href="#download-nuttx" aria-label="Permalink to &quot;Download NuttX&quot;">​</a></h2><p>Apache NuttX is actively developed on GitHub. There are two main repositories, <a href="https://github.com/apache/nuttx" target="_blank" rel="noreferrer">nuttx</a> and <a href="https://github.com/apache/nuttx-apps" target="_blank" rel="noreferrer">apps</a>, where the latter is technically optional (but recommended for complete set of features). If you intend to contribute changes, you need the absolute latest version or you simply prefer to work using git, you should clone these repositories (recommended). Otherwise you can choose to download any <a href="https://nuttx.apache.org/download/" target="_blank" rel="noreferrer">stable release</a> archive.</p><blockquote><p>\\ mkdir nuttxspace \\ cd nuttxspace \\ git clone <a href="https://github.com/apache/nuttx.git" target="_blank" rel="noreferrer">https://github.com/apache/nuttx.git</a> nuttx \\ git clone <a href="https://github.com/apache/nuttx-apps" target="_blank" rel="noreferrer">https://github.com/apache/nuttx-apps</a> apps</p><p>The development source code is also available as a compressed archive, should you need it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div><p>\\ mkdir nuttxspace \\ cd nuttxspace \\ curl -L <a href="https://github.com/apache/nuttx/tarball/master" target="_blank" rel="noreferrer">https://github.com/apache/nuttx/tarball/master</a> -o nuttx.tar.gz <br> curl -L <a href="https://github.com/apache/nuttx-apps/tarball/master" target="_blank" rel="noreferrer">https://github.com/apache/nuttx-apps/tarball/master</a> -o apps.tar.gz \\ tar zxf nuttx.tar.gz --one-top-level=nuttx --strip-components 1 \\ tar zxf apps.tar.gz --one-top-level=apps --strip-components 1</p><p>There are also <code>.zip</code> archives available (useful for Windows users): just replace <code>tarball</code> with <code>zipball</code>.</p><p>example uses version 12.2.1:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div><p>\\ mkdir nuttxspace \\ cd nuttxspace \\ curl -L <a href="https://www.apache.org/dyn/closer.lua/nuttx/12.2.1/apache-nuttx-12.2.1.tar.gz?action=download" target="_blank" rel="noreferrer">https://www.apache.org/dyn/closer.lua/nuttx/12.2.1/apache-nuttx-12.2.1.tar.gz?action=download</a> -o nuttx.tar.gz \\ curl -L <a href="https://www.apache.org/dyn/closer.lua/nuttx/12.2.1/apache-nuttx-apps-12.2.1.tar.gz?action=download" target="_blank" rel="noreferrer">https://www.apache.org/dyn/closer.lua/nuttx/12.2.1/apache-nuttx-apps-12.2.1.tar.gz?action=download</a> -o apps.tar.gz \\ tar zxf nuttx.tar.gz \\ tar zxf apps.tar.gz</p></blockquote>`,22)]))}const g=a(o,[["render",i]]);export{h as __pageData,g as default};
