import{_ as t,c as o,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Bouffalo Lab BL602","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/bl602/index.md","filePath":"en/platforms/risc-v/bl602/index.md"}'),n={name:"en/platforms/risc-v/bl602/index.md"};function s(l,e,r,d,p,c){return i(),o("div",null,e[0]||(e[0]=[a(`<h1 id="bouffalo-lab-bl602" tabindex="-1">Bouffalo Lab BL602 <a class="header-anchor" href="#bouffalo-lab-bl602" aria-label="Permalink to &quot;Bouffalo Lab BL602&quot;">​</a></h1><p>BL602/BL604 is Wi-Fi + BLE combo chipset for ultra-low-cost and low-power application. Wireless subsystem contains 2.4G radio, Wi-Fi 802.11b/g/n and BLE 5.0 baseband/MAC designs. Microcontroller subsystem contains a low-power 32-bit RISC CPU, high-speed cache and memories. Power Management Unit controls low-power modes. Moreover, variety of security features are supported.</p><ul><li>32-bit RISC CPU with FPU (floating point unit)</li><li>276KB RAM</li><li>128KB ROM</li><li>1Kb eFuse</li><li>Embedded Flash (Optional)</li><li>Four DMA channels</li></ul><h2 id="bl602-toolchain" tabindex="-1">BL602 Toolchain <a class="header-anchor" href="#bl602-toolchain" aria-label="Permalink to &quot;BL602 Toolchain&quot;">​</a></h2><p>Toolchain can be obtained from <a href="https://github.com/bouffalolab/bl_iot_sdk/tree/master/toolchain/riscv/Linux" target="_blank" rel="noreferrer">bl_iot_sdk/toolchain/riscv</a></p><p>In addition, SiFive&#39;s toolchain can be downloaded from:</p><p><a href="https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz" target="_blank" rel="noreferrer">https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz</a></p><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>First make sure the <code>riscv-gnu-toolchain</code> has been installed correctly.</p><p>Configure the NuttX project: <code>./tools/configure.sh bl602evb:nsh</code>. Run <code>make</code> to build the project.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@pc:~/nuttx tools/configure.sh bl602evb:nsh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>root@pc:~/nuttx make</span></span></code></pre></div><h3 id="wifi" tabindex="-1">wifi <a class="header-anchor" href="#wifi" aria-label="Permalink to &quot;wifi&quot;">​</a></h3><p>Configure the NuttX project: <code>./tools/configure.sh bl602evb:wifi</code>. Run <code>make</code> to build the project.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@pc:~/nuttx tools/configure.sh bl602evb:wifi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>root@pc:~/nuttx make</span></span></code></pre></div><h2 id="flashing" tabindex="-1">Flashing <a class="header-anchor" href="#flashing" aria-label="Permalink to &quot;Flashing&quot;">​</a></h2><p>Dev Cube is a chip integrated development tool provided by Bouffalolab, which includes three functions: IOT program download, MCU program download and RF performance test.</p><p>Dev Cube provides users with the function of downloading programs, and supports the configuration of parameters such as clock and flash. Users can decide whether to encrypt the program, add signatures, and replace the information file, user resource file, partition table and other functional configurations according to their own needs when the program is started.</p><p>Users can get the latest version of Dev Cube through <a href="https://dev.bouffalolab.com/download" target="_blank" rel="noreferrer">Bouffalo Lab Dev</a>.</p><h3 id="config-download" tabindex="-1">Config download <a class="header-anchor" href="#config-download" aria-label="Permalink to &quot;Config download&quot;">​</a></h3><p><strong>Configuration parameters include:</strong></p><ul><li><strong>Interface</strong>: Select the communication interface for flashing, here select Uart to download</li><li><strong>COM Port</strong>: When select UART for downloading, select the COM port number connected to the chip, and you can click the Refresh button to refresh the COM port</li><li><strong>Uart Rate</strong>: When select UART for downloading, fill in the baud rate. The recommended download baud rate is 2MHz,</li><li><strong>Xtal</strong>: Select the crystal oscillator frequency when downloading. If the board does not have a soldered crystal oscillator, the internal RC32M clock source should be selected here,default is 40M</li><li><strong>Chip Erase</strong>: default setting is False</li></ul><p><strong>Configuration parameters include:</strong></p><ul><li><p><strong>Factory Params</strong>: Use the dts file in the device_tree folder of the corresponding chip model in the Dev Cube directory. The default selection is 40M.</p></li><li><p><strong>Partition Table</strong>: Use the partition table in the partition folder of the corresponding chip model in the Dev Cube directory, and 2M files are selected by default for BL602</p><p><strong>For the nuttx, BL602 has a dedicated partition file. It is placed in</strong> <code>nuttx/tools/bl602</code></p></li><li><p><strong>Boot2 Bin</strong>: It is the first Flash program that runs after the system is started. It is responsible for establishing the BLSP security environment and guiding the main program to run. It uses the Boot2 file in the builtin_imgs folder of the corresponding chip model in the Dev Cube directory.</p></li><li><p><strong>Firmware Bin</strong>: Bin file path generated by user compilation</p></li><li><p><strong>Media/Romfs</strong>: Choose one of Media and Romfs. If you check media, you should provide a file. If you check Romfs, a folder should be provided.</p></li><li><p><strong>MFG Bin</strong>: Select MFG file</p></li><li><p><strong>AES-Encrypt</strong>: If you use the encryption function, you need to select the AES-Encrypt option, and enter the Key and IV used for encryption. Hexadecimal characters should be entered, and a Byte is composed of two characters, so the Key and IV require 32 characters to be input respectively. It should be noted that the last 8 characters of the IV (ie 4Bytes) must be all 0</p></li><li><p><strong>Single Download Config</strong>: you can download a single file. Fill in the starting address of the download, starting with 0x</p></li></ul><p>For details, please refer to <a href="https://bouffalolab.github.io/bl_iot_sdk/Developer_Environment/BLFlashEnv/BLFlashEnv.html#iot" target="_blank" rel="noreferrer">BLFlashEnv --- BL602 IoT SDK</a></p><h2 id="debugging-with-openocd" tabindex="-1">Debugging with OpenOCD <a class="header-anchor" href="#debugging-with-openocd" aria-label="Permalink to &quot;Debugging with OpenOCD&quot;">​</a></h2><p>Download OpenOCD <a href="https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.12/riscv-openocd-0.10.0-2020.12.1-x86_64-linux-ubuntu14.tar.gz" target="_blank" rel="noreferrer">RISC‑V OpenOCD</a>.</p><p>Start OpenOCD:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@pc:~ openocd -f ~/bl_iot_sdk/tools/debug/if_bflb_link.cfg -f ~/bl_iot_sdk/tools/debug/tgt_602_xip.cfg</span></span></code></pre></div><p>Start GDB:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@pc:~ riscv64-unknown-elf-gdb ~/nuttx/nuttx -x ~/bl_iot_sdk/tools/debug/602.init</span></span></code></pre></div><p>Connect OpenOCD:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(gdb) target remote :3333</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(gdb) c</span></span></code></pre></div><h2 id="bl602-peripheral-support" tabindex="-1">BL602 Peripheral Support <a class="header-anchor" href="#bl602-peripheral-support" aria-label="Permalink to &quot;BL602 Peripheral Support&quot;">​</a></h2><ul><li>One SDIO 2.0 slave</li><li>One SPI master/slave</li><li>Two UART</li><li>One I2C master</li><li>Five PWM channels</li><li>10-bit general DAC</li><li>12-bit general ADC</li><li>Two general analog comparators (ACOMP)</li><li>PIR (Passive Infra-Red) detection</li><li>IR remote HW accelerator</li><li>16 or 23 GPIOs</li></ul><p>Peripheral Support NOTES</p><hr><p>GPIO UART SPI I2C DMA Wifi SPI FLASH Timers Watchdog RTC RNG AES eFuse ADC Bluetooth LED_PWM SHA RSA Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes No No Yes No No No No No</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,40)]))}const g=t(n,[["render",s]]);export{u as __pageData,g as default};
