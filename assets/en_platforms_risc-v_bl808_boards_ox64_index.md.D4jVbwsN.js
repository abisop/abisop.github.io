import{_ as a,c as t,al as n,o}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"PINE64 Ox64","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/bl808/boards/ox64/index.md","filePath":"en/platforms/risc-v/bl808/boards/ox64/index.md"}'),i={name:"en/platforms/risc-v/bl808/boards/ox64/index.md"};function s(r,e,l,p,d,c){return o(),t("div",null,e[0]||(e[0]=[n(`<h1 id="pine64-ox64" tabindex="-1">PINE64 Ox64 <a class="header-anchor" href="#pine64-ox64" aria-label="Permalink to &quot;PINE64 Ox64&quot;">​</a></h1><p><a href="https://wiki.pine64.org/wiki/Ox64" target="_blank" rel="noreferrer">Ox64</a> is a RISC-V Single-Board Computer based on the Bouffalo Lab BL808 RISC-V SoC with C906 64-bit CPU Core and E907 / E902 32-bit CPU Cores supported by 64 MB of embedded PSRAM memory, with built-in WiFi, Bluetooth and Zigbee radio interfaces.</p><p>Ox64 comes in a breadboard-friendly form factor. It has a microSD Card slot, USB 2.0 Type-C port and other peripheral interfaces.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>**System on Chip:** Bouffalo Lab BL808

:   -   

        **CPU:**

        :   -   64-bit T-Head C906 \\&quot;D0\\&quot; (RV64IMAFCV)
            -   32-bit T-Head E907 \\&quot;M0\\&quot; (RV32IMAFCP)
            -   32-bit T-Head E902 \\&quot;LP\\&quot; (RV32E\\[M\\]C)

    -   **RAM:** Embedded 64 MB PSRAM
</code></pre><ul><li><p><strong>Wireless:</strong> 2.4 GHz 1T1R WiFi 802.11 b/g/n, Bluetooth 5.2, Zigbee</p></li><li><p><strong>Ethernet:</strong> 10 / 100 Mbps (optional)</p></li><li><p><strong>Storage:</strong> On-board 128 Mbit (16 MB) XSPI NOR Flash Memory, microSD (SDHC and SDXC)</p></li><li><p><strong>USB:</strong> USB 2.0 OTG</p></li><li><p><strong>Audio:</strong> Microphone and Speaker (optional)</p></li><li><p><strong>Video Input:</strong> Dual-lane MIPI CSI port for Camera Module (USB-C)</p></li><li><p><strong>Expansion Ports:</strong> 26 GPIO pins (including SPI, I2C and UART)</p></li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>A <strong>USB Serial Adapter</strong> that supports 2 Mbps (like <a href="https://lupyuen.github.io/articles/ox64#test-the-usb-serial-adapter" target="_blank" rel="noreferrer">CH340G Serial Adapter</a>) is required to run NuttX on Ox64.</p><p>Connect the USB Serial Adapter to Ox64 Serial Console at:</p><p>USB Serial Ox64 Pin</p><hr><p>TX Pin 31 (GPIO 17 / UART3 RX) RX Pin 32 (GPIO 16 / UART3 TX) GND Pin 33 (GND)</p><p>On the USB Serial Adapter, set the <strong>Voltage Level</strong> to 3V3.</p><p>Connect Ox64 to our computer with the USB Serial Adapter. On our computer, start a Serial Terminal and connect to the USB Serial Port at <strong>2 Mbps</strong>.</p><p>NuttX will appear in the Serial Console when it boots on Ox64.</p><h2 id="risc-v-toolchain" tabindex="-1">RISC-V Toolchain <a class="header-anchor" href="#risc-v-toolchain" aria-label="Permalink to &quot;RISC-V Toolchain&quot;">​</a></h2><p>Before building NuttX for Ox64, download the <strong>RISC-V Toolchain riscv64-unknown-elf</strong> from <a href="https://github.com/sifive/freedom-tools/releases/tag/v2020.12.0" target="_blank" rel="noreferrer">SiFive RISC-V Tools</a>.</p><p>Add the downloaded toolchain <code>riscv64-unknown-elf-toolchain-.../bin</code> to the <code>PATH</code> Environment Variable.</p><p>Check the RISC-V Toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> riscv64-unknown-elf-gcc -v</span></span></code></pre></div><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>To build NuttX for Ox64, [[in](\`in.md)stall the prerequisites &lt;/quickstart/install&gt;]{.title-ref} and [[clone the git repo](\`clone the git repo.md)sitories &lt;/quickstart/install&gt;]{.title-ref} for <code>nuttx</code> and <code>apps</code>.</p><p>Configure the NuttX project and build the project:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> tools/configure.sh ox64:nsh</span></span>
<span class="line"><span> make</span></span>
<span class="line"><span> riscv64-unknown-elf-objcopy -O binary nuttx nuttx.bin</span></span></code></pre></div><p>This produces the NuttX Kernel <code>nuttx.bin</code>. Next, build the NuttX Apps Filesystem:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make export</span></span>
<span class="line"><span> pushd ../apps</span></span>
<span class="line"><span> tools/mkimport.sh -z -x ../nuttx/nuttx-export-*.tar.gz</span></span>
<span class="line"><span> make import</span></span>
<span class="line"><span> popd</span></span>
<span class="line"><span> genromfs -f initrd -d ../apps/bin -V &quot;NuttXBootVol&quot;</span></span></code></pre></div><p>This generates the Initial RAM Disk <code>initrd</code>.</p><p>Package the NuttX Kernel and Initial RAM Disk into a NuttX Image:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> head -c 65536 /dev/zero &gt;/tmp/nuttx.pad</span></span>
<span class="line"><span> cat nuttx.bin /tmp/nuttx.pad initrd &gt;Image</span></span></code></pre></div><p>The NuttX Image <code>Image</code> will be copied to a microSD Card in the next step.</p><h2 id="booting" tabindex="-1">Booting <a class="header-anchor" href="#booting" aria-label="Permalink to &quot;Booting&quot;">​</a></h2><p>To boot NuttX on Ox64, flash <a href="https://lupyuen.github.io/articles/ox64" target="_blank" rel="noreferrer">OpenSBI and U-Boot Bootloader</a> to Ox64.</p><p>NuttX boots on Star64 via a microSD Card. Prepare a <a href="https://lupyuen.github.io/articles/ox64" target="_blank" rel="noreferrer">Linux microSD Card</a> for Ox64.</p><p>Copy the file <code>Image</code> from the previous section and overwrite the file on the microSD Card.</p><p>Check that Ox64 is connected to our computer via a USB Serial Adapter at 2 Mbps.</p><p>Insert the microSD Card into Ox64 and power up Ox64 via the Micro USB Port. NuttX boots on Ox64 and NuttShell (nsh) appears in the Serial Console.</p><p>To see the available commands in NuttShell:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> help</span></span></code></pre></div><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic configuration that runs NuttShell (nsh). This configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. Serial Console is enabled on UART3 at 2 Mbps.</p><h3 id="adc" tabindex="-1">adc <a class="header-anchor" href="#adc" aria-label="Permalink to &quot;adc&quot;">​</a></h3><p>This configuration enables support for the general purpose ADC and the adc example app. By default, the ADC will scan external channels 3, 4, 6, 7 and 9 (GPIO pins 11, 6, 12, 13 and 18). Serial Console is enabled on UART3 at 2 Mbps.</p><h3 id="spi" tabindex="-1">spi <a class="header-anchor" href="#spi" aria-label="Permalink to &quot;spi&quot;">​</a></h3><p>This configuration enables support for SPI0 and spitool. By default, GPIO14 is MISO, 13 is MOSI, 15 is SCLK and 12 is SS. Serial Console is enabled on UART3 at 2 Mbps.</p><h3 id="timer" tabindex="-1">timer <a class="header-anchor" href="#timer" aria-label="Permalink to &quot;timer&quot;">​</a></h3><p>This configuration enables support for general purpose and watchdog timers, as well as the timer and watchdog examples. Serial Console is enabled on UART3 at 2 Mbps.</p>`,48)]))}const b=a(i,[["render",s]]);export{u as __pageData,b as default};
