import{_ as t,c as o,al as n,o as a}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/nsh/nsh.md","filePath":"en/applications/nsh/nsh.md"}'),s={name:"en/applications/nsh/nsh.md"};function i(c,e,l,d,r,p){return a(),o("div",null,e[0]||(e[0]=[n(`<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h1><p><strong>The NSH Library</strong>. The <code>apps/nshlib</code> sub-directory contains the NuttShell (NSH) library. This library can easily to linked to produce a NSH application (See as an example <code>apps/examples/nsh</code>). The NSH Library provides a simple shell application for NuttX.</p><h2 id="console-nsh-front-end" tabindex="-1">Console/NSH Front End <a class="header-anchor" href="#console-nsh-front-end" aria-label="Permalink to &quot;Console/NSH Front End&quot;">â€‹</a></h2><p><strong>NSH Consoles</strong>. Using settings in the configuration file, NSH may be configured to use (1) the serial stdin/out, (2) a USB serial device (such as CDC/ACM), or (3) a telnet connection as the console. Or, perhaps even all at once since or BOTH. An indefinite number of telnet sessions are supported.</p><p><strong>Start-Up prompt</strong>. When NSH is started, you will see the a welcome message such the following on the selected console:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH)</span></span>
<span class="line"><span>nsh&gt;</span></span></code></pre></div><p>The greeting may also include NuttX versioning information if you are using a versioned copy of NuttX. <code>nsh&gt;</code> is the NSH prompt and indicates that you may enter a command from the console.</p><p><strong>USB console startup</strong>. When using a USB console, the start-up sequence differs a little: In this case, you are required to press <em>ENTER</em> three times. Then NSH prompt will appear as described above. This is required for the following reasons:</p><blockquote><ol><li>This assures that the USB connection is stable. The USB connection may be made, broken, and re-established a few times if the USB cable is not yet fully seated. Waiting for <em>ENTER</em> to be pressed three times assures that the connection is stable.</li><li>The establishment of the connection is two step process: First, the USB serial connection is made with the host PC. Then the application that uses the serial interface is started on the host. When the serial connection is established on the host, the host operating system may send several <em>AT</em> modem commands to the host depending upon how the host serial port is configured. By waiting for <em>ENTER</em> to be pressed three consecutive times, all of these modem commands will go to the bit-bucket and will not be interpreted as NSH command input.</li><li>Similarly, in the second step when the applications is started, there may be additional <em>AT</em> modem commands sent out the serial port. Most serial terminal programs will do this unless they are specifically configured to suppress the modem command output. Waiting for the <em>ENTER</em> input eliminates the invalid command errors from both (2) and (3).</li><li>Finally, if NSH did not wait for some positive indication that the serial terminal program is up and running, then the output of the NSH greeting and initial NSH prompt would be lost.</li></ol></blockquote><p><strong>Extended Command Line Editing</strong>. By default, NuttX uses a simple command line editor that allows command entry after the <code>nsh&gt;</code> and supports only the <em>backspace</em> key for editing. However, a more complete command line editor can be selected by setting <code>CONFIG_NSH_CLE=y</code> in the NuttX configuration file. When that option is selected, the following EMACS-like line editing commands are supported:</p><p>Key Binding Editor Action</p><hr><p><code>^A</code> Move cursor to start of the line <code>^B</code> Move left one character <code>^D</code> or <em>Del</em> Delete a single character at the cursor position <code>^E</code> Move cursor to end of current line <code>^F</code> Move right one character <code>^H</code> or <em>Backspace</em> Delete character, left (backspace) <code>^K</code> Delete to the end of the line <code>^U</code> Delete the entire line</p><h2 id="command-overview" tabindex="-1">Command Overview <a class="header-anchor" href="#command-overview" aria-label="Permalink to &quot;Command Overview&quot;">â€‹</a></h2><p><strong>Simple, Re-directed, and Background Commands</strong>. The NuttShell (NSH) is a simple shell application. NSH supports the following commands forms:</p><hr><p>Simple command <code>&lt;cmd&gt;</code> Command with re-directed output <code>&lt;cmd&gt; &gt; &lt;file&gt; &lt;cmd&gt; &gt;&gt; &lt;file&gt;</code> Background command <code>&lt;cmd&gt; &amp;</code> Re-directed background command <code>&lt;cmd&gt; &gt; &lt;file&gt; &amp; &lt;cmd&gt; &gt;&gt; &lt;file&gt; &amp;</code></p><hr><p>Where:</p><blockquote><ul><li><code>&lt;cmd&gt;</code> is any one of the simple commands listed later.</li><li><code>&lt;file&gt;</code> is the full or relative path to any writable object in the file system name space (file or character driver). Such objects will be referred to simply as files throughout this document.</li></ul></blockquote><p><code>nice</code> <strong>&#39;d Background Commands</strong>. NSH executes at the mid-priority (128). Backgrounded commands can be made to execute at higher or lower priorities using <code>nice</code>:</p><pre><code>[nice [-d &lt;niceness&gt;&gt;]] &lt;cmd&gt; [&gt; &lt;file&gt;|&gt;&gt; &lt;file&gt;] [&amp;]
</code></pre><p>Where <code>&lt;niceness&gt;</code> is any value between -20 and 19 where lower (more negative values) correspond to higher priorities. The default niceness is 10.</p><p><strong>Multiple commands per line</strong>. NSH will accept multiple commands per command line with each command separated with the semi-colon character (ðŸ˜‰.</p><p><strong>Optional Syntax Extensions</strong> Because these features commit significant resources, they are disabled by default.</p><blockquote><ul><li><p><code>CONFIG_NSH_CMDPARMS</code>: If selected, then the output from commands, from file applications, and from NSH built-in commands can be used as arguments to other commands. The entity to be executed is identified by enclosing the command line in back quotes. For example,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set FOO \`myprogram BAR\`</span></span></code></pre></div><p>Will execute the program named <code>myprogram</code> passing it the value of the environment variable <code>BAR</code>. The value of the environment variable <code>FOO</code> is then set output of <code>myprogram</code> on <code>stdout</code>.</p></li><li><p><code>CONFIG_NSH_ARGCAT</code>: Support concatenation of strings with environment variables or command output. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set FOO XYZ</span></span>
<span class="line"><span>set BAR 123</span></span>
<span class="line"><span>set FOOBAR ABC_{FOO}_{BAR}</span></span></code></pre></div><p>would set the environment variable <code>FOO</code> to <code>XYZ</code>, <code>BAR</code> to <code>123</code> and <code>FOOBAR</code> to <code>ABC_XYZ_123</code>. If <code>CONFIG_NSH_ARGCAT</code> is not selected, then a slightly smaller FLASH footprint results but then also only simple environment variables like <code>FOO</code> can be used on the command line.</p></li><li><p><code>CONFIG_NSH_QUOTE</code>: Enables back-slash quoting of certain characters within the command. This option is useful for the case where an NSH script is used to dynamically generate a new NSH script. In that case, commands must be treated as simple text strings without interpretation of any special characters. Special characters such as <code>, </code> \` \`\`, <code>&quot;</code>, and others must be retained intact as part of the test string. This option is currently only available is <code>CONFIG_NSH_ARGCAT</code> is also selected.</p></li></ul></blockquote><h2 id="conditional-command-execution" tabindex="-1">Conditional Command Execution <a class="header-anchor" href="#conditional-command-execution" aria-label="Permalink to &quot;Conditional Command Execution&quot;">â€‹</a></h2><p>An <code>if-then[-else]-fi</code> construct is also supported in order to support conditional execution of commands. This works from the command line but is primarily intended for use within NSH scripts (see the <code>\`sh</code> &lt;#cmdsh&gt;\`__ command). The syntax is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if [!] &lt;cmd&gt;</span></span>
<span class="line"><span>then</span></span>
<span class="line"><span>  [sequence of &lt;cmd&gt;]</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  [sequence of &lt;cmd&gt;]</span></span>
<span class="line"><span>fi</span></span></code></pre></div><p>Where <code>&lt;cmd&gt;</code> is a <a href="#command-overview">simple command</a>. The command success value of zero is treated true; a non-zero command failure value is treated false. The <code>\`test</code> &lt;#cmdtest&gt;\`__ command is frequently used for comparisons.</p><p>Examples:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; if test 1 -eq 1; then echo &quot;1 is equal 1&quot;; else echo &quot;1 is not equal 1&quot;; fi</span></span>
<span class="line"><span>1 is equal 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nsh&gt; if test 1 -eq 0; then echo &quot;1 is equal 0&quot;; else echo &quot;1 is not equal 0&quot;; fi</span></span>
<span class="line"><span>1 is not equal 0</span></span></code></pre></div><h2 id="looping" tabindex="-1">Looping <a class="header-anchor" href="#looping" aria-label="Permalink to &quot;Looping&quot;">â€‹</a></h2><p><strong>Looping Constructs</strong>. <code>while-do-done</code> and <code>until-do-done</code> looping constructs are also supported. These work from the command line but are primarily intended for use within NSH scripts (see the <code>\`sh</code> &lt;#cmdsh&gt;\`__ command).</p><blockquote><ul><li><p><code>while-do-done</code>: Execute <code>[sequence of &lt;cmd&gt;]</code> as long as <code>&lt;cmd&gt;</code> has an exit status of zero. The syntax is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>while &lt;cmd&gt;</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>  [sequence of &lt;cmd&gt;]</span></span>
<span class="line"><span>done</span></span></code></pre></div></li><li><p><code>until-do-done</code>: Execute <code>[sequence of &lt;cmd&gt;]</code> as long as <code>&lt;cmd&gt;</code> has a non-zero exit status. The syntax is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>until &lt;cmd&gt;</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>  [sequence of &lt;cmd&gt;]</span></span>
<span class="line"><span>done</span></span></code></pre></div></li></ul></blockquote><p>Where <code>&lt;cmd&gt;</code> is a <a href="#command-overview">simple command</a>. The command success value of zero is treated true; a non-zero command failure value is treated false. The <code>\`test</code> &lt;#cmdtest&gt;\`__ command is frequently used for comparisons.</p><p><strong>The</strong> <code>break</code> <strong>Command</strong>. A <code>break</code> command is also supported. The <code>break</code> command is only meaningful within the body of the a <code>while</code> or <code>until</code> loop, between the <code>do</code> and <code>done</code> tokens. If the <code>break</code> command is executed within the body of a loop, the loop will immediately terminate and execution will continue with the next command immediately following the <code>done</code> token.</p><h2 id="built-in-variables" tabindex="-1">Built-In Variables <a class="header-anchor" href="#built-in-variables" aria-label="Permalink to &quot;Built-In Variables&quot;">â€‹</a></h2><hr><p><code>?</code> The result of the last simple command execution. On backgrounded commands, this variable holds only the result of spawning the background command.</p><hr><h2 id="current-working-directory" tabindex="-1">Current Working Directory <a class="header-anchor" href="#current-working-directory" aria-label="Permalink to &quot;Current Working Directory&quot;">â€‹</a></h2><p><code>cd</code> <strong>and</strong> <code>pwd</code>. All path arguments to commands may be either an absolute path or a path relative to the current working directory. The current working directory is set using the <code>cd</code> command and can be queried either by using the <code>pwd</code> command or by using the <code>echo PWD</code> command.</p><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">â€‹</a></h2><hr><p><code>PATH</code> The default path in the file systems to look for executable, binary programs working directory <code>PWD</code> The current working directory <code>OLDPWD</code> The previous working directory</p><hr>`,47)]))}const u=t(s,[["render",i]]);export{m as __pageData,u as default};
