import{_ as o,c as a,al as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"ST Nucleo H745ZI","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32h7/boards/nucleo-h745zi/index.md","filePath":"en/platforms/arm/stm32h7/boards/nucleo-h745zi/index.md"}'),i={name:"en/platforms/arm/stm32h7/boards/nucleo-h745zi/index.md"};function r(s,e,c,l,d,h){return n(),a("div",null,e[0]||(e[0]=[t(`<h1 id="st-nucleo-h745zi" tabindex="-1">ST Nucleo H745ZI <a class="header-anchor" href="#st-nucleo-h745zi" aria-label="Permalink to &quot;ST Nucleo H745ZI&quot;">​</a></h1><p>chip:stm32, chip:stm32h7, chip:stm32h745</p><h2 id="dual-core-support" tabindex="-1">Dual core support <a class="header-anchor" href="#dual-core-support" aria-label="Permalink to &quot;Dual core support&quot;">​</a></h2><p>It is recommended to use CMake to build firmware consisting of multiple images. The commands to build <code>nsh_xxx_rptun</code> configurations are as follows:</p><pre><code>cmake -B build_h7m7 -DBOARD_CONFIG=nucleo-h745zi:nsh_cm7_rptun -GNinja
cmake -B build_h7m4 -DBOARD_CONFIG=nucleo-h745zi:nsh_cm4_rptun -GNinja

cmake --build build_h7m7
cmake --build build_h7m4
</code></pre><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The STLINK virtual console uses Serial Port 3 (USART3) with TX on PD8 and RX on PD9 and is used by the Cortex-M7 core by default.</p><p>VCOM Signal Pin</p><hr><p>SERIAL_RX PD9 SERIAL_TX PD8</p><p>Access to the Cortex-M4 core can be achieved using an additional UART port or via RPMSG UART by setting <code>CONFIG_RPMSG_UART_CONSOLE=y</code> in CM4 configuration.</p><p>If the RPMSG UART console is enabled, we can connect to it from CM7 using <code>cu</code>:</p><pre><code>nsh-cm7&gt; cu -l /dev/ttyproxy
NuttShell (NSH) NuttX-10.4.0
nsh-cm4&gt;
</code></pre><h2 id="tools" tabindex="-1">Tools <a class="header-anchor" href="#tools" aria-label="Permalink to &quot;Tools&quot;">​</a></h2><p>Support for the board was tested using an external JLink interface. Openocd with built-in ST-LINK didn&#39;t work well.</p><p>Image flashing was accomplished using <code>JFlashLiteExe</code>, with the device set to <code>STM32H745ZI_M7</code>.</p>`,16)]))}const m=o(i,[["render",r]]);export{p as __pageData,m as default};
