import{_ as t,c as a,al as n,o}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"i.MX RT1050 EVK","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/imxrt/boards/imxrt1050-evk/index.md","filePath":"en/platforms/arm/imxrt/boards/imxrt1050-evk/index.md"}'),r={name:"en/platforms/arm/imxrt/boards/imxrt1050-evk/index.md"};function i(s,e,l,h,d,c){return o(),a("div",null,e[0]||(e[0]=[n(`<h1 id="i-mx-rt1050-evk" tabindex="-1">i.MX RT1050 EVK <a class="header-anchor" href="#i-mx-rt1050-evk" aria-label="Permalink to &quot;i.MX RT1050 EVK&quot;">​</a></h1><p><a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/i-mx-rt1050-evaluation-kit:MIMXRT1050-EVK" target="_blank" rel="noreferrer">i.MX RT1050 EVK</a> is an evaluation kit by NXP company. This kit uses the i.MX RT1050 crossover MCU with ARM Cortex M7 core.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>Processor

:   -   MIMXRT1052DVL6A processor
</code></pre><ul><li></li></ul><pre><code>Memory

:   -   256 Mb SDRAM memory
    -   512 Mb Hyper Flash
    -   Footprint for QSPI Flash
    -   TF socket for SD card
</code></pre><ul><li></li></ul><pre><code>Display and Audio

:   -   Parallel LCD connector
    -   Camera connector
    -   Audio CODEC
    -   4-pole audio headphone jack
    -   External speaker connection
    -   Microphone
    -   SPDIF connector
</code></pre><ul><li></li></ul><pre><code>Connectivity

:   -   Micro USB host and OTG connectors
    -   Ethernet (10/100T) connector
    -   CAN transceivers
    -   Arduino® interface
</code></pre><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Virtual console port provided by OpenSDA:</p><hr><p>UART1_TXD GPIO_AD_B0_12 LPUART1_TX UART1_RXD GPIO_AD_B0_13 LPUART1_RX</p><hr><p>Arduino RS-232 Shield:</p><hr><p>J22 D0 UART_RX GPIO_AD_B1_07 LPUART3_RX J22 D1 UART_TX GPIO_AD_B1_06 LPUART3_TX</p><hr><h2 id="leds-and-buttons" tabindex="-1">LEDs and buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>There are four LED status indicators located on the EVK Board. The functions of these LEDs include:</p><p>Pin Description</p><hr><p>D3 Power Supply D15 Reset LED D16 OpenSDA D18 User LED</p><p>Only a single LED, D18, is under software control. It connects to GPIO_AD_B0_09 which is shared with JTAG_TDI and ENET_RST</p><p>This LED is not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/imxrt_autoleds.c. The LED is used to encode OS-related events as follows:</p><p>SYMBOL Meaning LED</p><hr><p>LED_STARTED NuttX has been started OFF LED_HEAPALLOCATE Heap has been allocated OFF LED_IRQSENABLED Interrupts enabled OFF LED_STACKCREATED Idle stack created ON LED_INIRQ In an interrupt N/C LED_SIGNAL In a signal handler N/C LED_ASSERTION An assertion failed N/C LED_PANIC The system has crashed FLASH</p><p>Thus if the LED is statically on, NuttX has successfully booted and is, apparently, running normally. If the LED is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>There are four user interface switches on the MIMXRT1050 EVK Board:</p><blockquote><ul><li>SW1: Power Switch (slide switch)</li><li>SW2: ON/OFF Button</li><li>SW3: Reset button</li><li>SW8: User button</li></ul></blockquote><p>Only the user button is available to the software. It is sensed on the WAKEUP pin which will be pulled low when the button is pressed.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="knsh" tabindex="-1">knsh <a class="header-anchor" href="#knsh" aria-label="Permalink to &quot;knsh&quot;">​</a></h3><p>This is identical to the nsh configuration below except that NuttX is built as a protected mode, monolithic module and the user applications are built separately. For further information about compiling and running this configuration please refer to imxrt1064-evk documentation.</p><h3 id="netnsh" tabindex="-1">netnsh <a class="header-anchor" href="#netnsh" aria-label="Permalink to &quot;netnsh&quot;">​</a></h3><p>This configuration is similar to the nsh configuration except that is has networking enabled, both IPv4 and IPv6. This NSH configuration is focused on network-related testing.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh. This NSH configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. This configuration does not support a network.</p>`,43)]))}const b=t(r,[["render",i]]);export{p as __pageData,b as default};
