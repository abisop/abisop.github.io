import{_ as o,c as t,al as a,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse(`{"title":"Microchip PolarFire® SoC FPGA's (MPFS)","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/mpfs/index.md","filePath":"en/platforms/risc-v/mpfs/index.md"}`),i={name:"en/platforms/risc-v/mpfs/index.md"};function s(n,e,p,l,d,c){return r(),t("div",null,e[0]||(e[0]=[a(`<h1 id="microchip-polarfire®-soc-fpga-s-mpfs" tabindex="-1">Microchip PolarFire® SoC FPGA&#39;s (MPFS) <a class="header-anchor" href="#microchip-polarfire®-soc-fpga-s-mpfs" aria-label="Permalink to &quot;Microchip PolarFire® SoC FPGA\\&#39;s (MPFS)&quot;">​</a></h1><p>RV64 64-bit RISC-V multiprocessor-based Microcontroller Subsystem (MPFS025T, MPFS095T, MPFS160T, MPFS250T, MPFS460T)</p><h2 id="mpfs-toolchain" tabindex="-1">MPFS Toolchain <a class="header-anchor" href="#mpfs-toolchain" aria-label="Permalink to &quot;MPFS Toolchain&quot;">​</a></h2><p>A generic RISC-V toolchain can be used to build MPFS projects. Like: <a href="https://xpack.github.io/riscv-none-embed-gcc" target="_blank" rel="noreferrer">https://xpack.github.io/riscv-none-embed-gcc</a> or <a href="https://github.com/sifive/freedom-tools/releases" target="_blank" rel="noreferrer">https://github.com/sifive/freedom-tools/releases</a></p><h2 id="booting" tabindex="-1">Booting <a class="header-anchor" href="#booting" aria-label="Permalink to &quot;Booting&quot;">​</a></h2><p>The NuttX works as a standalone operating system that may initialize all the required clocks and peripherals including DDR memory. Alternatively, the vendor&#39;s HSS bootloader may be used instead to perform all the initialization steps.</p><h2 id="building-and-flashing" tabindex="-1">Building and flashing <a class="header-anchor" href="#building-and-flashing" aria-label="Permalink to &quot;Building and flashing&quot;">​</a></h2><p>Configure the NuttX project: <code>./tools/configure.sh icicle:nsh</code> Run <code>make</code> to build the project.</p><p>If NuttX is built as a standalone OS with the config option CONFIG_MPFS_BOOTLOADER set, it&#39;s important to note that the image size is very limited: only (128K - 256) bytes. 256 bytes are reserved for the header that must be prepended into the NuttX binary. This binary is called hss-envm-wrapper-bm1-dummySbic.bin and may be found from the vendor&#39;s HSS implementation. Moreover, after prepending the 256-byte header, the LMA section needs to be adjusted, for example:</p><pre><code>riscv64-unknown-elf-objcopy -I binary -O ihex --change-section-lma *+0x20220000 nuttx.bin nuttx.hex
</code></pre><p>The output binary nuttx.hex may be flashed with the LiberoSoc tool. The tool is available from: <a href="https://www.microchip.com/en-us/products/fpgas-and-plds/fpga-and-soc-design-tools/fpga/libero-software-later-versions#Documents%20and%20Downloads" target="_blank" rel="noreferrer">https://www.microchip.com/en-us/products/fpgas-and-plds/fpga-and-soc-design-tools/fpga/libero-software-later-versions#Documents and Downloads</a></p><p>There&#39;s an alternative way to use NuttX, without the CONFIG_MPFS_BOOTLOADER option set. This expects the HSS bootloader sets up the system (memories, caches, initializes clocks etc.). First make sure that <code>hss-payload-generator</code> is installed. Available from: <a href="https://github.com/polarfire-soc/hart-software-services" target="_blank" rel="noreferrer">https://github.com/polarfire-soc/hart-software-services</a></p><p>This tool is used to convert the ELF/bin to a compatible HSS payload image</p><p>Create HSS payload bin:</p><pre><code>hss-payload-generator -v -c hss-nuttx.yml payload.bin
</code></pre><h2 id="debugging-with-openocd" tabindex="-1">Debugging with OpenOCD <a class="header-anchor" href="#debugging-with-openocd" aria-label="Permalink to &quot;Debugging with OpenOCD&quot;">​</a></h2><p>Compatible OpenOCD and configs can be downloaded from: <a href="https://www.microsemi.com/product-directory/design-tools/4879-softconsole#downloads" target="_blank" rel="noreferrer">https://www.microsemi.com/product-directory/design-tools/4879-softconsole#downloads</a></p><p>OpenOCD can then be used:</p><pre><code>openocd -c &quot;set DEVICE MPFS&quot; --file board/microsemi-riscv.cfg
</code></pre><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates the state of peripherals&#39; support in NuttX:</p><p>Peripheral Support NOTES</p><hr><p>GPIO Yes<br> MMUART SPI I2C Yes Yes Yes Uart mode only eMMC SD/SDIO USB Ethernet MAC Timers Watchdog RTC CAN eNVM Yes Yes Yes No No No No No No PHY training</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,26)]))}const m=o(i,[["render",s]]);export{u as __pageData,m as default};
