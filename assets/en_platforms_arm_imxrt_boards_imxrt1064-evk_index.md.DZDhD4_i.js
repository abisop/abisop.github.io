import{_ as a,c as n,al as t,o as s}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"i.MX RT1064 EVK","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/imxrt/boards/imxrt1064-evk/index.md","filePath":"en/platforms/arm/imxrt/boards/imxrt1064-evk/index.md"}'),i={name:"en/platforms/arm/imxrt/boards/imxrt1064-evk/index.md"};function o(r,e,l,p,h,d){return s(),n("div",null,e[0]||(e[0]=[t(`<h1 id="i-mx-rt1064-evk" tabindex="-1">i.MX RT1064 EVK <a class="header-anchor" href="#i-mx-rt1064-evk" aria-label="Permalink to &quot;i.MX RT1064 EVK&quot;">​</a></h1><p><a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/mimxrt1064-evk-i-mx-rt1064-evaluation-kit:MIMXRT1064-EVK" target="_blank" rel="noreferrer">i.MX RT1064 EVK</a> is an evaluation kit by NXP company. This kit uses the i.MX RT1064 crossover MCU with ARM Cortex M7 core.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>Processor

:   -   MIMXRT1066DVL6A processor
</code></pre><ul><li></li></ul><pre><code>Memory

:   -   1 Mb OCRAM memory
    -   256 Mb SDRAM memory
    -   512 Mb Hyper Flash - Populated but 0 ohm DNP
    -   64 Mb QSPI Flash
    -   TF socket for SD card
</code></pre><ul><li></li></ul><pre><code>Display and Audio

:   -   Parallel LCD connector
    -   Camera connector
    -   Audio CODEC
    -   4-pole audio headphone jack
    -   External speaker connection
    -   Microphone
    -   SPDIF connector
</code></pre><ul><li></li></ul><pre><code>Connectivity

:   -   Micro USB host and OTG connectors
    -   Ethernet (10/100T) connector
    -   CAN transceivers
    -   Arduino® interface
</code></pre><ul><li></li></ul><pre><code>Sensors

:   -   FXOS8700CQ 6-Axis Ecompass (3-Axis Mag, 3-Axis Accel)
</code></pre><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Virtual console port provided by OpenSDA:</p><hr><p>UART1_TXD GPIO_AD_B0_12 LPUART1_TX UART1_RXD GPIO_AD_B0_13 LPUART1_RX</p><hr><p>Arduino RS-232 Shield:</p><hr><p>J22 D0 UART_RX GPIO_AD_B1_07 LPUART3_RX J22 D1 UART_TX GPIO_AD_B1_06 LPUART3_TX</p><hr><h2 id="leds-and-buttons" tabindex="-1">LEDs and buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>There are four LED status indicators located on the EVK Board. The functions of these LEDs include:</p><p>Pin Description</p><hr><p>D3 Power Supply D18 User LED D20 OpenSDA D21 Reset LED</p><p>Only a single LED, D18, is under software control. It connects to GPIO_AD_B0_09 which is shared with JTAG_TDI and ENET_RST</p><p>This LED is not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/imxrt_autoleds.c. The LED is used to encode OS-related events as follows:</p><p>SYMBOL Meaning LED</p><hr><p>LED_STARTED NuttX has been started OFF LED_HEAPALLOCATE Heap has been allocated OFF LED_IRQSENABLED Interrupts enabled OFF LED_STACKCREATED Idle stack created ON LED_INIRQ In an interrupt N/C LED_SIGNAL In a signal handler N/C LED_ASSERTION An assertion failed N/C LED_PANIC The system has crashed FLASH</p><p>Thus if the LED is statically on, NuttX has successfully booted and is, apparently, running normally. If the LED is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>There are five user interface switches on the MIMXRT1050 EVK Board:</p><blockquote><ul><li>SW1: Power Switch (slide switch fir power from J2)</li><li>SW2: ON/OFF Button</li><li>SW3: Power-on Reset button state forces to reset the system power except SNVS domain</li><li>SW9: Reset button</li><li>SW8: User button GPIO5-00</li></ul></blockquote><p>Only the user button is available to the software. It is sensed on the WAKEUP pin which will be pulled low when the button is pressed.</p><h2 id="j-link-external-debug-probe" tabindex="-1">J-Link External Debug Probe <a class="header-anchor" href="#j-link-external-debug-probe" aria-label="Permalink to &quot;J-Link External Debug Probe&quot;">​</a></h2><p>Install the J-Link Debug Host Tools and make sure they are in your search path.</p><p>Attach a J-Link 20-pin connector to J21. Check that jumpers J47 and J48 are off (they are on by default when boards ship from the factory) to ensure SWD signals are disconnected from the OpenSDA microcontroller.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="can" tabindex="-1">can <a class="header-anchor" href="#can" aria-label="Permalink to &quot;can&quot;">​</a></h3><p>This is an nsh configuration (see below) with added support of CAN driver. FlexCAN3 is chosen as default, the change can be made at System type peripheral selection. Please note that only FlexCAN3 and FlexCAN2 is available on this board.</p><p>Bitrate and sample point can be also changed at System type peripheral selection, basic values are 1 MHz for bitrate and 0.80 for sample point. The FlexCAN driver for imxrt runs at 80 MHz clock frequency.</p><p>The configuration also includes CAN utilities as candump and cansend.</p><h3 id="canfd" tabindex="-1">canfd <a class="header-anchor" href="#canfd" aria-label="Permalink to &quot;canfd&quot;">​</a></h3><p>This is an nsh configuration (see below) with added support of CAN_FD driver. FlexCAN3 is chosen as default, please note that only FlexCAN3 is capable of providing CAN_FD support.</p><p>Bitrate and sample point can be also changed at System type peripheral selection, basic values are 1 MHz for bitrate and 0.80 for sample point for arbitration phase and 4 MHz (bitrate) and 0.90 (sample point) for data phase. The FlexCAN driver for imxrt runs at 80 MHz clock frequency.</p><p>The configuration also includes CAN utilities as candump and cansend.</p><h3 id="knsh" tabindex="-1">knsh <a class="header-anchor" href="#knsh" aria-label="Permalink to &quot;knsh&quot;">​</a></h3><p>This is identical to the nsh configuration below except that NuttX is built as a protected mode, monolithic module and the user applications are built separately. It is recommends to use a special make command; not just &#39;make&#39; but make with the following two arguments:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make pass1 pass2</span></span></code></pre></div><p>In the normal case (just &#39;make&#39;), make will attempt to build both user-and kernel-mode blobs more or less interleaved. This actual works! However, for me it is very confusing so I prefer the above make command: Make the user-space binaries first (pass1), then make the kernel-space binaries (pass2)</p><p>NOTES:</p><p>At the end of the build, there will be several files in the top-level NuttX build directory:</p><p>PASS1:</p><p>: - nuttx_user.elf - The pass1 user-space ELF file - nuttx_user.hex - The pass1 Intel HEX format file (selected in defconfig) - User.map - Symbols in the user-space ELF file</p><p>PASS2:</p><p>: - nuttx - The pass2 kernel-space ELF file - nuttx.hex - The pass2 Intel HEX file (selected in defconfig) - System.map - Symbols in the kernel-space ELF file</p><p>The J-Link programmer will accept files in .hex, .mot, .srec, and .bin formats.</p><p>Combining .hex files. If you plan to use the .hex files with your debugger or FLASH utility, then you may need to combine the two hex files into a single .hex file. Here is how you can do that.</p><p>The &#39;tail&#39; of the nuttx.hex file should look something like this (with my comments added beginning with #):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> tail nuttx.hex</span></span>
<span class="line"><span>#xx xxxx 00 data records</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>:10 C93C 00 000000000040184000C2010000000000 90</span></span>
<span class="line"><span>:10 C94C 00 2400080000801B4000C01B4000001C40 5D</span></span>
<span class="line"><span>:10 C95C 00 00401C4000000C4050BF0060FF000100 74</span></span>
<span class="line"><span>#xx xxxx 05 Start Linear Address Record</span></span>
<span class="line"><span>:04 0000 05 6000 02C1 D4</span></span>
<span class="line"><span>#xx xxxx 01 End Of File record</span></span>
<span class="line"><span>:00 0000 01 FF</span></span></code></pre></div><p>Use an editor such as vi to remove the 05 and 01 records.</p><p>The &#39;head&#39; of the nuttx_user.hex file should look something like this (again with my comments added beginning with #):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> head nuttx_user.hex</span></span>
<span class="line"><span>#xx xxxx 04 Extended Linear Address Record</span></span>
<span class="line"><span>:02 0000 04 6020 7A</span></span>
<span class="line"><span>#xx xxxx 00 data records</span></span>
<span class="line"><span>:10 0000 00 8905206030002060F2622060FC622060 80</span></span>
<span class="line"><span>:10 0010 00 0000242008002420080024205C012420 63</span></span>
<span class="line"><span>:10 0020 00 140024203D0020603100206071052060 14</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>Nothing needs to be done here. The nuttx_user.hex file should be fine.</p><p>Combine the edited nuttx.hex and un-edited nuttx_user.hex file to produce a single combined hex file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cat nuttx.hex nuttx_user.hex &gt;combined.hex</span></span></code></pre></div><p>Then use the combined.hex file with the to write the FLASH image. If you do this a lot, you will probably want to invest a little time to develop a tool to automate these steps.</p><p>STATUS: This configuration was added on 8 June 2018 primarily to assure that all of the components are in place to support the PROTECTED mode build. This configuration, however, has not been verified as of this writing.</p><h3 id="netnsh" tabindex="-1">netnsh <a class="header-anchor" href="#netnsh" aria-label="Permalink to &quot;netnsh&quot;">​</a></h3><p>This configuration is similar to the nsh configuration except that is has networking enabled, both IPv4 and IPv6. This NSH configuration is focused on network-related testing.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh. This NSH configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. This configuration does not support a network.</p><h3 id="lvgl" tabindex="-1">lvgl <a class="header-anchor" href="#lvgl" aria-label="Permalink to &quot;lvgl&quot;">​</a></h3><p>Configures the Littlev graphic library (lvgl) demo located under examples/lvgldemo. This configuration needs the optional LCD model RK043FN02H-CT from NXP. The LCD panel comes with the integrated capacitive touchscreen sensor FT5336GQQ connected to the LPI2C1 bus, address 0x38. NuttX support such touchscreen device via the driver ft5x06 (drivers/input/ft5x06.c). At the moment only the polling method is available, the board features an interrupt line connected to the touchscreen sensor IC.</p><p>IMXRT1064 MCU provides the integrated LCD driver.</p><p>The LCD panel features:</p><p>: - size 4.3&quot; - resolution 480×272 RGB - backlight driver - dimensions [mm]: 105.5 (W) x 67.2(H) x 4.35(D) Max.</p><p>To run the lvgl demo please type &quot;lvgldemo&quot; at nsh prompt:</p><pre><code>nsh&gt; lvgldemo
</code></pre>`,83)]))}const m=a(i,[["render",o]]);export{u as __pageData,m as default};
