import{_ as n,c as e,al as s,o as p}from"./chunks/framework.NFAqBSgQ.js";const i="/assets/xiao-rp2350.Wob17sye.jpg",g=JSON.parse('{"title":"Seeed Studio XIAO RP2350","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp23xx/boards/xiao-rp2350/index.md","filePath":"en/platforms/arm/rp23xx/boards/xiao-rp2350/index.md"}'),t={name:"en/platforms/arm/rp23xx/boards/xiao-rp2350/index.md"};function l(o,a,r,d,c,h){return p(),e("div",null,a[0]||(a[0]=[s('<h1 id="seeed-studio-xiao-rp2350" tabindex="-1">Seeed Studio XIAO RP2350 <a class="header-anchor" href="#seeed-studio-xiao-rp2350" aria-label="Permalink to &quot;Seeed Studio XIAO RP2350&quot;">​</a></h1><p>chip:rp2350</p><p>The <a href="https://wiki.seeedstudio.com/getting-started-xiao-rp2350/" target="_blank" rel="noreferrer">Seeed Studio XIAO RP2350</a> is a general purpose board supplied by Seeed Studio and it is compatible with the Rapiberry RP2350 ecosystem, sharing the same MCU as Rapiberry Pi Pico 2.</p><p><img src="'+i+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>Raspberry Pi RP2350, ARM® Dual Cortex-M33 @ 150MHz, FPU</li><li>520kB SRAM, 2MB Flash</li><li>Security: OTP, Secure Boot, Arm TrustZone</li><li>USB Type-C interface</li><li>19 Pins:3x Analog,19x Digital, 2x I²C, 2x UART, 2x SPI, All PWM</li><li>1 user LED, 1 power LED，1 RGB LED (WS2812)</li><li>1 RESET button, 1 BOOT button</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default, a serial console appears on pins 6 (TX GPIO) and pin 7 (RX GPIO). This console runs a 115200-8N1. The board can be configured to use the USB connection as the serial console.</p><h2 id="user-led" tabindex="-1">User LED <a class="header-anchor" href="#user-led" aria-label="Permalink to &quot;User LED&quot;">​</a></h2><p>The USER LED, the yellow LED on the XIAO RP2350, is connected to GPIO25/D19 according to the schematic diagram. The USER LED will light up when set to a low level and turn off when set to a high level.</p><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>The RESET and BOOT buttons can be used to enter bootloader mode by press and hold BOOT buttons and then press and release RESET button. Then, the board will enumerate as a storage device to a computer connected via USB. Saving a .UF2 file to this device will replace the Flash ROM contents on the RP2350.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pads numbered anticlockwise from USB connector.</p><p>Pad Signal Notes</p><hr><p>0 GPIO26 D0/A0 1 GPIO27 D1/A1 2 GPIO28 D2/A2 3 GPIO5 D3/A3 4 GPIO6 D4/SDA 5 GPIO7 D5/SCL 6 GPIO0 D6/Default TX for UART0 serial console 7 GPIO1 D7/Default RX for UART0 serial console 8 GPIO2 D8/SCK 9 GPIO4 D9/MISO 10 GPIO3 D10/MOSI 11 12 3V3 Ground Power output to peripherals 13 VIN +5V Supply to board</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>The working voltage of the MCU is 3.3V. Voltage input connected to general I/O pins may cause chip damage if it&#39;s higher than 3.3V.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li>Configure and build NuttX:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/apache/nuttx.git nuttx</span></span>
<span class="line"><span> git clone https://github.com/apache/nuttx-apps.git apps</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh xiao-rp2350:nsh</span></span>
<span class="line"><span> make V=1</span></span></code></pre></div><p>2. Connect the Seeed Studio XIAO RP2350, and enter bootloader mode, once the board is detected as a USB Mass Storage Device, copy &quot;nuttx.uf2&quot; into the device.</p><ol start="3"><li>To access the console, TX and RX pins must be connected to the device such as USB-serial converter.</li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps).</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>Basic NuttShell configuration using CDC/ACM serial (console enabled in USB Port, at 115200 bps).</p><h3 id="combo" tabindex="-1">combo <a class="header-anchor" href="#combo" aria-label="Permalink to &quot;combo&quot;">​</a></h3><p>This configuration enabled NuttShell via Serial and enabled led, gpio and ws2812 examples:</p><p>Testing leds:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; leds</span></span>
<span class="line"><span>leds_main: Starting the led_daemon</span></span>
<span class="line"><span>leds_main: led_daemon started</span></span>
<span class="line"><span></span></span>
<span class="line"><span>led_daemon (pid# 3): Running</span></span>
<span class="line"><span>led_daemon: Opening /dev/userleds</span></span>
<span class="line"><span>led_daemon: Supported LEDs 0x01</span></span>
<span class="line"><span>led_daemon: LED set 0x01</span></span>
<span class="line"><span>nsh&gt; led_daemon: LED set 0x00</span></span>
<span class="line"><span>led_daemon: LED set 0x01</span></span>
<span class="line"><span>led_daemon: LED set 0x00</span></span>
<span class="line"><span>led_daemon: LED set 0x01</span></span>
<span class="line"><span>led_daemon: LED set 0x00</span></span></code></pre></div><p>Testing gpios:</p><p>PIN/GPIO Mode Device</p><hr><p>D0/P0.02 Input /dev/gpio0 D2/P0.28 Output /dev/gpio1 D1/P0.03 Input /dev/gpio2</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; gpio -w 1 /dev/gpio26</span></span>
<span class="line"><span>Driver: /dev/gpio26</span></span>
<span class="line"><span>  Interrupt pin: Value=0</span></span>
<span class="line"><span>  Verify:        Value=0</span></span>
<span class="line"><span>nsh&gt; gpio /dev/gpio27</span></span>
<span class="line"><span>Driver: /dev/gpio27</span></span>
<span class="line"><span>  Input pin:     Value=0</span></span>
<span class="line"><span>nsh&gt; gpio /dev/gpio27</span></span>
<span class="line"><span>Driver: /dev/gpio27</span></span>
<span class="line"><span>  Input pin:     Value=1</span></span>
<span class="line"><span>nsh&gt; gpio -o 1 /dev/gpio28</span></span>
<span class="line"><span>Driver: /dev/gpio28</span></span>
<span class="line"><span>  Output pin:    Value=0</span></span>
<span class="line"><span>  Writing:       Value=1</span></span>
<span class="line"><span>  Verify:        Value=1</span></span>
<span class="line"><span>nsh&gt; gpio -o 0 /dev/gpio28</span></span>
<span class="line"><span>Driver: /dev/gpio28</span></span>
<span class="line"><span>  Output pin:    Value=1</span></span>
<span class="line"><span>  Writing:       Value=0</span></span>
<span class="line"><span>  Verify:        Value=0</span></span></code></pre></div><p>Testing ws2812:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; ws2812</span></span></code></pre></div>`,40)]))}const b=n(t,[["render",l]]);export{g as __pageData,b as default};
