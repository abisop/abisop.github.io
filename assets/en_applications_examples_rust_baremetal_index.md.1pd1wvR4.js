import{_ as e,c as a,al as n,o as s}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"baremetal Hello World in Rust","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/rust/baremetal/index.md","filePath":"en/applications/examples/rust/baremetal/index.md"}'),r={name:"en/applications/examples/rust/baremetal/index.md"};function i(l,t,o,p,c,d){return s(),a("div",null,t[0]||(t[0]=[n('<h1 id="baremetal-hello-world-in-rust" tabindex="-1"><span class="title-ref">baremetal</span> Hello World in Rust <a class="header-anchor" href="#baremetal-hello-world-in-rust" aria-label="Permalink to &quot;&lt;span class=&quot;title-ref&quot;&gt;baremetal&lt;/span&gt; Hello World in Rust&quot;">â€‹</a></h1><p>This example demonstrates how to create a simple &quot;Hello World&quot; program in Rust for a bare-metal environment. The program is compiled using the <span class="title-ref">rustc</span> compiler directly, without relying on any operating system or standard library.</p><p>The key aspects of this example include:</p><ul><li><strong>No Standard Library</strong>: The program uses the <span class="title-ref">#![no_std]</span> attribute, which means it does not link against the standard library. This is essential for bare-metal programming where the standard library is not available.</li><li><strong>No Main Function</strong>: The program uses the <span class="title-ref">#![no_main]</span> attribute, which indicates that the program does not have a standard <span class="title-ref">main</span> function. Instead, it defines a custom entry point.</li><li><strong>Panic Handler</strong>: A custom panic handler is defined using the <span class="title-ref">#[panic_handler]</span> attribute. This handler is called when a panic occurs, and in this case, it enters an infinite loop to halt the program.</li><li><strong>C Interoperability</strong>: The program uses the <span class="title-ref">extern &quot;C&quot;</span> block to declare the <span class="title-ref">printf</span> function from the C standard library. This allows the Rust program to call C functions directly.</li><li><strong>Entry Point</strong>: The <span class="title-ref">hello_rust_main</span> function is the entry point of the program. It is marked with <span class="title-ref">#[no_mangle]</span> to prevent the Rust compiler from mangling its name, making it callable from C.</li><li><strong>Printing</strong>: The program uses the <span class="title-ref">printf</span> function to print &quot;Hello, Rust!!&quot; to the console. The <span class="title-ref">printf</span> function is called using the <span class="title-ref">unsafe</span> block because it involves calling a C function.</li></ul><p>This example is a great starting point for understanding how to write and compile Rust programs for bare-metal environments, where you have full control over the hardware and no operating system overhead.</p>',5)]))}const u=e(r,[["render",i]]);export{m as __pageData,u as default};
