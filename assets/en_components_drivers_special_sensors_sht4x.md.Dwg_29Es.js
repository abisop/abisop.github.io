import{_ as s,c as a,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"SHT4X","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/sensors/sht4x.md","filePath":"en/components/drivers/special/sensors/sht4x.md"}'),i={name:"en/components/drivers/special/sensors/sht4x.md"};function o(r,e,p,c,l,d){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="sht4x" tabindex="-1">SHT4X <a class="header-anchor" href="#sht4x" aria-label="Permalink to &quot;SHT4X&quot;">​</a></h1><p>Contributed by Matteo Golin.</p><p>The SHT4x is a family of temperature and humidity sensors created by Sensirion which operates over I2C. They include a small heating element.</p><p>The driver provided allows interfacing with the sensor over I2C. It has been tested against the SHT41. This driver uses the [[uorb](\`uorb.md) &lt;/components/drivers/special/sensors/sensors_uorb&gt;]{.title-ref} interface.</p><h2 id="application-programming-interface" tabindex="-1">Application Programming Interface <a class="header-anchor" href="#application-programming-interface" aria-label="Permalink to &quot;Application Programming Interface&quot;">​</a></h2><p>The header file for the SHT4X driver interface can be included using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;nuttx/sensors/sht4x.h&gt;</span></span></code></pre></div><p>The SHT4x registration function allows the driver to be registered as a UORB driver.</p><p>The SHT4x measures both ambient temperature and humidity, so registering this driver will cause two new UORB topics to appear: <code>sensor_humi&lt;n&gt;</code> and <code>sensor_temp&lt;n&gt;</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int err;</span></span>
<span class="line"><span>err = sht4x_register(i2c_master, 0, 0x44);</span></span>
<span class="line"><span>if (err &lt; 0)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  syslog(LOG_ERR, &quot;Couldn&#39;t register SHT4X driver at 0x44: %d\\n&quot;, err);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>To debug this device, you can include the <code>uorb_listener</code> in your build with debugging enabled. Running it will show the sensor measurements.</p><p>This sensor also offers some addition control commands for using the onboard heater and checking the serial number. These control commands can be used on either topic (humidity or temperature), since they control the device as a whole.</p><h3 id="snioc-reset" tabindex="-1"><code>SNIOC_RESET</code> <a class="header-anchor" href="#snioc-reset" aria-label="Permalink to &quot;\`SNIOC_RESET\`&quot;">​</a></h3><p>This will perform the SHT4X&#39;s soft reset command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = orb_ioctl(sensor, SNIOC_RESET);</span></span>
<span class="line"><span>if (err) {</span></span>
<span class="line"><span>  fprintf(stderr, &quot;SNIOC_RESET: %s\\n&quot;, strerror(errno));</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>  puts(&quot;RESET success!&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="snioc-who-am-i" tabindex="-1"><code>SNIOC_WHO_AM_I</code> <a class="header-anchor" href="#snioc-who-am-i" aria-label="Permalink to &quot;\`SNIOC_WHO_AM_I\`&quot;">​</a></h3><p>This command reads the serial number of the SHT4X sensor. The serial number is returned in the argument to the command, which must be a [uint32_t]{.title-ref} pointer.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint32_t serialno = 0;</span></span>
<span class="line"><span>err = orb_ioctl(sensor, SNIOC_WHO_AM_I, &amp;serialno);</span></span></code></pre></div><h3 id="snioc-heat" tabindex="-1"><code>SNIOC_HEAT</code> <a class="header-anchor" href="#snioc-heat" aria-label="Permalink to &quot;\`SNIOC_HEAT\`&quot;">​</a></h3><p>This command will instruct the SHT4X to turn on its heater unit for the specified time.</p><p>The argument to this command must be of type [enum sht4x_heater_e]{.title-ref}, which will indicate the duration the heater is on and the power used.</p><p>Heating commands are not allowed more than once per second to avoid damaging the sensor. If a command is issued before this one second cool-down period is over, [EAGAIN]{.title-ref} is returned.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = orb_ioctl(sensor, SNIOC_HEAT, SHT4X_HEATER_200MW_1);</span></span></code></pre></div><h3 id="snioc-configure" tabindex="-1"><code>SNIOC_CONFIGURE</code> <a class="header-anchor" href="#snioc-configure" aria-label="Permalink to &quot;\`SNIOC_CONFIGURE\`&quot;">​</a></h3><p>This command allows the caller to configure the precision of the SHT4X sensor used by subsequent measurement commands. By default, the sensor starts at high precision.</p><p>The argument to this command is one of the values in [enum sht4x_precision_e]{.title-ref}.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = orb_ioctl(sensor, SNIOC_CONFIGURE, SHT4X_PREC_LOW);</span></span></code></pre></div>`,27)]))}const m=s(i,[["render",o]]);export{u as __pageData,m as default};
