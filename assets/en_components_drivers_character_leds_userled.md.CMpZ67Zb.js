import{_ as s,c as a,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"USERLED Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/leds/userled.md","filePath":"en/components/drivers/character/leds/userled.md"}'),l={name:"en/components/drivers/character/leds/userled.md"};function i(o,e,r,p,d,c){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="userled-drivers" tabindex="-1">USERLED Drivers <a class="header-anchor" href="#userled-drivers" aria-label="Permalink to &quot;USERLED Drivers&quot;">â€‹</a></h1><p>The USERLED is a NuttX subsystem to control LEDs on the user board. Using it is possible for applications to control each LED individually or as a group.</p><p>There is an application called &quot;leds&quot; that will test all LEDs in your board (counting in binary, turning ON and OFF each LED).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH)</span></span>
<span class="line"><span>nsh&gt; leds</span></span>
<span class="line"><span>nsh&gt;</span></span>
<span class="line"><span>leds_main: Starting the led_daemon</span></span>
<span class="line"><span>leds main: led daemon started</span></span>
<span class="line"><span>led_daemon: Running</span></span>
<span class="line"><span>led_daemon: Opening /dev/userleds</span></span>
<span class="line"><span>led_daemon: Supported LEDs 0xff</span></span>
<span class="line"><span>led daemon: LED set 0x01</span></span>
<span class="line"><span>led daemon: LED set 0x02</span></span>
<span class="line"><span>led daemon: LED set 0x03</span></span>
<span class="line"><span>led daemon: LED set 0x04</span></span>
<span class="line"><span>led daemon: LED set 0x05</span></span></code></pre></div><p>Also is possible for users to control the LEDs from &quot;nsh&gt;&quot; using the &quot;printf&quot; command to send data to it in hexa code:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH)</span></span>
<span class="line"><span>nsh&gt; printf \\x000000a5 &gt; /dev/userleds</span></span></code></pre></div><p>This command will turn ON the LEDs mapped to bits 0, 2, 5 and 7.</p><p>It is important to note that USERLED and ARCH_LEDS will not work together, so in order to use USERLED please disable CONFIG_ARCH_LEDS.</p><p>The NuttX USERLED driver is split into two parts:</p><ol><li>An &quot;upper half&quot; (userled_upper.c), generic driver that provides the common interface to application level code, and</li><li>A &quot;lower half&quot; (userled_lower.c), that calls the platform-specific board functions (board_userled_initialize(), board_userled(), board_userled_all(), etc) that implements the low-level control of the LEDs.</li></ol><p>Files supporting USERLED can be found in the following locations:</p><ul><li><strong>Interface Definition</strong>. The header file for the NuttX USERLED driver resides at <code>include/nuttx/leds/userled.h</code>. This header file includes both the application level interface to the USERLED driver as well as the interface between the &quot;upper half&quot; and &quot;lower half&quot; drivers. The USERLED module uses a standard character driver framework.</li><li><strong>&quot;Upper Half&quot; Driver</strong>. The generic, &quot;upper half&quot; USERLED driver resides at <code>drivers/leds/userled_upper.c</code>.</li><li><strong>&quot;Lower Half&quot; Drivers</strong>. Lower Half of the USERLED driver resides in <code>drivers/leds/userled_lower.c</code> and the directory for the board specific functions will be at <code>boards/&lt;arch&gt;/&lt;family&gt;/&lt;boardname&gt;/src/&lt;arch&gt;_userleds.c</code>.</li></ul><p>Something important to note is that your board initialization code (normally named <code>&lt;arch&gt;_bringup.c</code> should call the function to register the driver.</p><p>For stm32f4discovery board this initialization code is placed at <code>boards/arm/stm32/stm32f4discovery/src/stm32_bringup.c</code> and this is the block responsible to initialize the subsystem:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#ifdef CONFIG_USERLED</span></span>
<span class="line"><span>  /* Register the LED driver */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ret = userled_lower_initialize(&quot;/dev/userleds&quot;);</span></span>
<span class="line"><span>  if (ret &lt; 0)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      syslog(LOG_ERR, &quot;ERROR: userled_lower_initialize() failed: %d\\n&quot;, ret);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>#endif</span></span></code></pre></div>`,15)]))}const m=s(l,[["render",i]]);export{h as __pageData,m as default};
