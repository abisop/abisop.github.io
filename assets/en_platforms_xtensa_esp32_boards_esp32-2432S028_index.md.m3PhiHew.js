import{_ as a,c as t,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const s="/assets/esp32-2432S028-front.vj2o1Wh4.png",r="/assets/esp32-2432s028-back.DUNJtE0M.png",f=JSON.parse('{"title":"ESP32-2432S028","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/xtensa/esp32/boards/esp32-2432S028/index.md","filePath":"en/platforms/xtensa/esp32/boards/esp32-2432S028/index.md"}'),i={name:"en/platforms/xtensa/esp32/boards/esp32-2432S028/index.md"};function l(d,e,h,p,c,u){return n(),t("div",null,e[0]||(e[0]=[o('<h1 id="esp32-2432s028" tabindex="-1">ESP32-2432S028 <a class="header-anchor" href="#esp32-2432s028" aria-label="Permalink to &quot;ESP32-2432S028&quot;">​</a></h1><p>chip:esp32, chip:esp32wrover32</p><p>The ESP32-2432S028 is a development board based on an ESP32-WROVER-32 module. It is designed for a wide range of applications, particularly in the field of the Internet of Things (IoT).</p><hr><p><img src="'+s+'" alt="ESP32-2432S028 board layout - front" class="align-center"> <img src="'+r+`" alt="ESP32-2432S028 board layout - back" class="align-center"></p><hr><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><blockquote><ul><li>LCD screen (2.8 inch)</li><li>MicroSD card slot</li><li>RGB LED</li><li>Audio</li><li>Light Dependent Resistor (LDR)</li></ul></blockquote><p>Most of I/O pins are broken out to the boards, but from the back side of the board, there are some pins available are separated into two connectors femme JST 1.28 mm 4P.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>UART0 is, by default, the serial console. It connects to the on-board CH340 converter.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><h3 id="board-buttons" tabindex="-1">Board Buttons <a class="header-anchor" href="#board-buttons" aria-label="Permalink to &quot;Board Buttons&quot;">​</a></h3><p>There are two buttons labeled BOOT and RST. The RST button is not available to software. It pulls the chip enable line that doubles as a reset line.</p><p>The BOOT button is connected to IO0. On reset it is used as a strapping pin to determine whether the chip boots normally or into the serial bootloader. After reset, however, the BOOT button can be used for software input.</p><h3 id="board-leds" tabindex="-1">Board LEDs <a class="header-anchor" href="#board-leds" aria-label="Permalink to &quot;Board LEDs&quot;">​</a></h3><p>There is one RGB LED available.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pin Signal Notes</p><hr><p>0 2 4 12 13 14 15 16 17 21 26 34 BOOT Button LCD Reset RGB LED Green LCD MISO LCD MOSI LCD Clock LCD CS RGB LED Blue RGB LED Red LCD Backlight Audio Out LDR</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>All of the configurations presented below can be tested by running the following commands:</p><pre><code> ./tools/configure.sh esp32-2432S028:&lt;config_name&gt;
 make flash ESPTOOL_PORT=/dev/ttyUSB0 -j
</code></pre><p>Where &lt;config_name&gt; is the name of board configuration you want to use, i.e.: nsh, buttons, wifi... Then use a serial console terminal like <code>picocom</code> configured to 115200 8N1.</p><h3 id="lvgl" tabindex="-1">lvgl <a class="header-anchor" href="#lvgl" aria-label="Permalink to &quot;lvgl&quot;">​</a></h3><p>This is a demonstration of the LVGL graphics library running on the NuttX LCD driver. You can find LVGL here:</p><pre><code>https://www.lvgl.io/
https://github.com/lvgl/lvgl
</code></pre><p>This configuration uses the LVGL demonstration at [apps/examples/lvgldemo]{.title-ref}.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, exposed via USB connection by means of CH340 converter, at 115200 bps).</p>`,31)]))}const m=a(i,[["render",l]]);export{f as __pageData,m as default};
