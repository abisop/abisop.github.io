import{_ as a,c as n,al as t,o}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Teensy-4.x","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/imxrt/boards/teensy-4.x/index.md","filePath":"en/platforms/arm/imxrt/boards/teensy-4.x/index.md"}'),s={name:"en/platforms/arm/imxrt/boards/teensy-4.x/index.md"};function i(r,e,l,d,c,h){return o(),n("div",null,e[0]||(e[0]=[t(`<h1 id="teensy-4-x" tabindex="-1">Teensy-4.x <a class="header-anchor" href="#teensy-4-x" aria-label="Permalink to &quot;Teensy-4.x&quot;">​</a></h1><p>The <a href="https://www.pjrc.com/store/teensy40.html" target="_blank" rel="noreferrer">Teensy 4.0</a> and <a href="https://www.pjrc.com/store/teensy41.html" target="_blank" rel="noreferrer">Teensy 4.1</a> are development boards from PJRC. Both boards use i.MX RT1060 MCU, feature several I/Os pins and on-board LED.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>Processor

:   -   MIMXRT1062DVL6A processor
</code></pre><ul><li></li></ul><pre><code>Memory

:   -   1 MB RAM memory
    -   2 MB Flash (Teensy 4.0)
    -   8 MB Flash (Teensy 4.1)
    -   1 SDIO (4 bit) native SD
</code></pre><ul><li></li></ul><pre><code>Connectivity

:   -   Micro USB host
    -   CAN transceivers
    -   UART, SPI, I2C
    -   PWM output pins
    -   10/100 Mb Ethernet (Teensy 4.1 only)
    -   Digital audio in/out
</code></pre><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>There are two LED status indicators located on the Teensy-4.x board. The functions of these LEDs include:</p><ul><li></li></ul><pre><code>RED LED (loading status)

:   -   dim: ready
    -   bright: writing
    -   blink: no USB
</code></pre><ul><li>USER LED (D3)</li></ul><p>Only a single LED, D3, is under software control.</p><p>This LED is not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/imxrt_autoleds.c. The LED is used to encode OS-related events as follows:</p><p>SYMBOL Meaning LED</p><hr><p>LED_STARTED NuttX has been started OFF LED_HEAPALLOCATE Heap has been allocated OFF LED_IRQSENABLED Interrupts enabled OFF LED_STACKCREATED Idle stack created ON LED_INIRQ In an interrupt N/C LED_SIGNAL In a signal handler N/C LED_ASSERTION An assertion failed N/C LED_PANIC The system has crashed FLASH</p><p>Thus if the LED is statically on, NuttX has successfully booted and is, apparently, running normally. If the LED is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh-4-0" tabindex="-1">nsh-4.0 <a class="header-anchor" href="#nsh-4-0" aria-label="Permalink to &quot;nsh-4.0&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh for Teensy 4.0. This NSH configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. NutShells then runs on USB console.</p><h3 id="nsh-4-1" tabindex="-1">nsh-4.1 <a class="header-anchor" href="#nsh-4-1" aria-label="Permalink to &quot;nsh-4.1&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh for Teensy 4.1. This NSH configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. NutShells then runs USB console.</p><h3 id="can-4-1" tabindex="-1">can-4.1 <a class="header-anchor" href="#can-4-1" aria-label="Permalink to &quot;can-4.1&quot;">​</a></h3><p>This is an nsh configuration (see above) for Teensy-4.x with added support of CAN driver. All FlexCANs (CAN1, CAN2, CAN3) are chosen as default. FlexCAN3 is FD capable. Please note that device driver name if counted from zero. That means for CAN1 -&gt; can0, CAN2 -&gt; can1 and CAN3 -&gt; can2</p><p>Bitrate and sample point can be also changed at System type peripheral selection, basic values are 1 MHz for bitrate and 0.80 for sample point. The FlexCAN driver for imxrt runs at 80 MHz clock frequency.</p><p>The configuration also includes CAN utilities as candump and cansend.</p><p>This configuration can be easily changed to work with Teensy 4.0 by selecting <code>CONFIG_TEENSY_40=y</code>.</p><p>This configuration runs over LPUART1 (pins 24 and 25 on Teensy). Communication over USB console can be turn on, but it causes problems with FlexCAN.</p><h3 id="enc-4-1" tabindex="-1">enc-4.1 <a class="header-anchor" href="#enc-4-1" aria-label="Permalink to &quot;enc-4.1&quot;">​</a></h3><p>This is an nsh configuration (see above) with added support of incremental encoder. Phase A is connected to GPIO_EMC_07 (pin 33), phase B to GPIO_EMC_06 (pin 4) and INDEX to GPIO_B0_12 (pin 32). Only encoder 1 is connected to those pins.</p><p>Function of the encoder can be tested by application &quot;qe&quot;.</p><h3 id="netnsh-4-1" tabindex="-1">netnsh-4.1 <a class="header-anchor" href="#netnsh-4-1" aria-label="Permalink to &quot;netnsh-4.1&quot;">​</a></h3><p>This configuration is similar to the nsh configuration except that is has networking enabled, both IPv4 and IPv6. This NSH configuration is focused on network-related testing.</p><p>This configuration cannot be changed to Teensy 4.0 as this board does not have Ethernet capability.</p><h3 id="pikron-bb" tabindex="-1">pikron-bb <a class="header-anchor" href="#pikron-bb" aria-label="Permalink to &quot;pikron-bb&quot;">​</a></h3><p>This is a configuration that compiles the NuttX for use with open source/hardware <a href="https://gitlab.com/pikron/projects/imxrt-devel/-/wikis/teensy_bb" target="_blank" rel="noreferrer">Base Board for Teensy 4.1</a>. It includes CAN drivers, communication over serial port, Ethernet support, support for 240 x 320 pixels LCD display and configuration options for using NuttX with pysimCoder. NuttX also runs in tickless mode with the resolution 10 usec.</p><p>This configuration cannot be changed to Teensy 4.0 as base board is not designed for that.</p><h3 id="pwm-4-1" tabindex="-1">pwm-4.1 <a class="header-anchor" href="#pwm-4-1" aria-label="Permalink to &quot;pwm-4.1&quot;">​</a></h3><p>This configuration is similar to the nsh configuration with enabled FlexPWM driver. Submodules 1 (pin 4) and 2 (pin 5) of FlexPWM2 are turned on as well as multiple channel PWM output. Functionality can be tested with example application &quot;pwm&quot;. Each channel runs different duty cycle.</p><p>This configuration can be easily changed to work with Teensy 4.0 by selecting <code>CONFIG_TEENSY_40=y</code>.</p><h3 id="sd-4-1" tabindex="-1">sd-4.1 <a class="header-anchor" href="#sd-4-1" aria-label="Permalink to &quot;sd-4.1&quot;">​</a></h3><p>This is an nsh configuration (see above) for Teensy-4.x with added support of connecting micro SD card.</p><p>You can mount micro SD card by:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> mount -t vfat /dev/mmcsd0 /mnt</span></span></code></pre></div><p>This configuration cannot be changed to Teensy 4.0 as this board does not have micro SD card slot.</p><h3 id="lcd-4-1" tabindex="-1">lcd-4.1 <a class="header-anchor" href="#lcd-4-1" aria-label="Permalink to &quot;lcd-4.1&quot;">​</a></h3><p>This is an nsh configuration (see above) for Teensy-4.x with added support of connecting LCD TFT display with ST7789 controller. You can run framebuffer demo by starting &quot;fb&quot; in console. The LCD display is connected via SPI4.</p><p>This configuration can be easily changed to work with Teensy 4.0 by selecting <code>CONFIG_TEENSY_40=y</code>.</p><h2 id="flash" tabindex="-1">Flash <a class="header-anchor" href="#flash" aria-label="Permalink to &quot;Flash&quot;">​</a></h2><p>Teensy 4.x boards does not have debugger therefore external firmware has to be used to load NuttX. <a href="https://www.pjrc.com/teensy/loader_cli.html" target="_blank" rel="noreferrer">Teensy Loader</a> can be installed and then NuttX can be loaded by:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> teensy_loader_cli --mcu=TEENSY41 -v -w nuttx.hex</span></span></code></pre></div><p>For Teensy 4.0 board, switch <code>--mcu=TEENSY41</code> to <code>--mcu=TEENSY40</code>.</p>`,55)]))}const b=a(s,[["render",i]]);export{u as __pageData,b as default};
