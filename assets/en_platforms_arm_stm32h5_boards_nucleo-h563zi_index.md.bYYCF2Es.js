import{_ as o,c as t,al as i,o as n}from"./chunks/framework.NFAqBSgQ.js";const a="/assets/nucleo-h563zi.Dv5AIbet.png",f=JSON.parse('{"title":"ST Nucleo-H563ZI","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32h5/boards/nucleo-h563zi/index.md","filePath":"en/platforms/arm/stm32h5/boards/nucleo-h563zi/index.md"}'),r={name:"en/platforms/arm/stm32h5/boards/nucleo-h563zi/index.md"};function s(l,e,c,h,u,d){return n(),t("div",null,e[0]||(e[0]=[i('<h1 id="st-nucleo-h563zi" tabindex="-1">ST Nucleo-H563ZI <a class="header-anchor" href="#st-nucleo-h563zi" aria-label="Permalink to &quot;ST Nucleo-H563ZI&quot;">​</a></h1><p>chip:stm32, chip:stm32h5, chip:stm32h563</p><p><img src="'+a+`" alt="" class="align-center"></p><h2 id="board-information" tabindex="-1">Board Information <a class="header-anchor" href="#board-information" aria-label="Permalink to &quot;Board Information&quot;">​</a></h2><p>This page discusses issues unique to NuttX configurations for the STMicro NUCLEO-H563ZI development board featuring the STM32H563ZI MCU. The STM32H563ZI is a 250MHz Cortex-M33 operation with 2MBytes Flash memory and 640KByte SRAM. The board features:</p><ul><li>On-board ST-LINK-V3EC for programming and debugging</li><li>3 user LEDs</li><li>Two pushbuttons (user and reset)</li><li>32.768 kHz crystal oscillator</li><li>USB Type-C connectors</li><li>Ethernet connector compliant with IEEE-802.3-2002</li><li>Board connectors: <ul><li>2x USB-C</li><li>Ethernet RJ45</li><li>ST Zio connector including Arduino Uno V3</li><li>ST morpho</li></ul></li></ul><p>Refer to the <a href="http://www.st.com" target="_blank" rel="noreferrer">http://www.st.com</a> website for further information about this board (search keyword: NUCLEO-H563ZI)</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Many options are available for a serial console via the Morpho connector. Here two common serial console options are suggested:</p><ol><li><p>Nucleo Virtual Console.</p><p>The virtual console uses Serial Port 3 (USART3) with TX on PD8 and RX on PD9.</p><blockquote><p>VCOM Signal Pin</p><hr><p>SERIAL_RX PD9 SERIAL_TX PD8</p></blockquote><p>These signals are internally connected to the on board ST-Link.</p><p>The Nucleo virtual console is the default serial console in all configurations unless otherwise stated in the description of the configuration.</p></li><li><p>Arduino Serial Shield.</p><p>If you are using a standard Arduino RS-232 shield with the serial interface with RX on pin D0 and TX on pin D1 from LPUART1:</p><blockquote><p>ARDUINO FUNCTION GPIO</p><hr><p>DO RX LPUART1_RX PB7 D1 TX LPUART1_TX PB6</p></blockquote></li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h3><p>Each Nucleo-H563ZI configuration is maintained in a sub-directory and can be selected as follows:</p><pre><code>tools/configure.sh [options] nucleo-h563zi:&lt;subdir&gt;
</code></pre><p>Where options should specify the host build platform (-l for Linux, -c for Cygwin under Windows, etc.). Try &#39;tools/configure.sh -h&#39; for the complete list of options.</p><p>Before starting the build, make sure that (1) your PATH environment variable includes the correct path to your toolchain, and (2) you have the correct toolchain selected in the configuration.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.:</p><pre><code>make
</code></pre><p>The &lt;subdir&gt; that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li><p>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>Unless stated otherwise, all configurations generate console output on the ST-Link VCOM, USART3.</p></li><li><p>Unless otherwise stated, the configurations are setup for Linux by default:</p><p>Build Setup:</p><pre><code>CONFIG_HOST_LINUX=y                     : Linux host operating system
</code></pre></li><li><p>All of these configurations use the general arm-none-eabi toolchain for Linux That toolchain selection can easily be reconfigured using &#39;make menuconfig&#39;.</p></li><li><p>These configurations all assume that you are loading code using something like the ST-Link v3 JTAG. None of these configurations are setup to use the DFU bootloader but should be easily reconfigured to use that bootloader if so desired.</p></li></ol><h2 id="configuration-sub-directories" tabindex="-1">Configuration Sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration Sub-directories&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>This configuration provides a basic NuttShell configuration (NSH) for the Nucleo-H563ZI. The default console is the VCOM on USART3.</p><h3 id="adc" tabindex="-1">adc: <a class="header-anchor" href="#adc" aria-label="Permalink to &quot;adc:&quot;">​</a></h3><p>This configuration configures ADC1_IN3 and ADC1_IN10, which can be accessed at the CN9 A0 and A1 pins respectively. Modify nucleo-h563zi/src/stm32_adc.c to enable more channels.</p><h3 id="usbnsh" tabindex="-1">usbnsh: <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh:&quot;">​</a></h3><p>This configuration provides a basic NuttShell through the USB User interface.</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><p>[UM3115] - STM32H5 Nucleo-144 board (MB1404)</p>`,30)]))}const m=o(r,[["render",s]]);export{f as __pageData,m as default};
