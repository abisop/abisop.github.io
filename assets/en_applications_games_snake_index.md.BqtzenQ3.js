import{_ as a,c as t,al as n,o as s}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"snake Snake","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/games/snake/index.md","filePath":"en/applications/games/snake/index.md"}'),o={name:"en/applications/games/snake/index.md"};function i(r,e,p,l,c,d){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="snake-snake" tabindex="-1"><code>snake</code> Snake <a class="header-anchor" href="#snake-snake" aria-label="Permalink to &quot;\`snake\` Snake&quot;">​</a></h1><p>Snake is a classic game, especially popular on old phones. The game is played on a matrix (e.g., 6x6, 8x8) with blocks (cells) of different colors to represent the snake and food objects.</p><p>The goal of the game is to eat food as much as possible without running into yourself. After eating food, the snake&#39;s tail increases by one until the size of the snake equals the size of the game board.</p><p>The game starts with a one-length snake, and the player can move through the board&#39;s edges. When the snake reaches the edge, it reappears on the opposite side.</p><h2 id="basic-test" tabindex="-1">Basic Test <a class="header-anchor" href="#basic-test" aria-label="Permalink to &quot;Basic Test&quot;">​</a></h2><p>To play game, you need to have a led matrix (e.g. ws2812) for output and four gpio pins to input.</p><p>Alternatively, you can give inputs using serial console by changing settings.</p><p>Then you can configure and compile the game to play in your board, i.e. for ESP32-Devkitc there is already an example:</p><pre><code> ./tools/configure.sh esp32-devkitc:snake
 make -j flash ESPTOOL_PORT=/dev/ttyUSB0
 minicom
nsh&gt; snake
</code></pre>`,9)]))}const g=a(o,[["render",i]]);export{m as __pageData,g as default};
