import{_ as t,c as a,al as s,o as i}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"SLIP","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/net/slip.md","filePath":"en/components/net/slip.md"}'),n={name:"en/components/net/slip.md"};function o(l,e,p,d,r,c){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="slip" tabindex="-1">SLIP <a class="header-anchor" href="#slip" aria-label="Permalink to &quot;SLIP&quot;">​</a></h1><h2 id="slip-configuration" tabindex="-1">SLIP Configuration <a class="header-anchor" href="#slip-configuration" aria-label="Permalink to &quot;SLIP Configuration&quot;">​</a></h2><ol><li><p>Configure and build NuttX with SLIP enabled in the configuration. Load this into FLASH and start the device.</p></li><li><p>Connect to a Linux box using a serial cable. This discussion assumes that the serial device is <code>/dev/ttyS0</code> on both the target and the Linux box.</p></li><li><p>Reset on the target side and attach SLIP on the Linux side:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> modprobe slip</span></span>
<span class="line"><span> slattach -L -p slip -s 57600 /dev/ttyS0 &amp;</span></span></code></pre></div><p>This should create an interface with a name like sl0, or sl1, etc. Add -d to get debug output. This will show the interface name.</p><p>NOTE: The -L option is included to suppress use of hardware flow control. This is necessary only if you are not supporting hardware flow control on the target.</p><p>NOTE: The Linux slip module hard-codes its MTU size to 296. So you might as well set <code>CONFIG_NET_ETH_MTU</code> to 296 as well.</p></li><li><p>After turning over the line to the SLIP driver, you must configure the network interface. Again, you do this using the standard ifconfig and route commands. Assume that we have connected to a host PC with address 192.168.0.101 from your target with address 10.0.0.2. On the Linux PC you would execute the following as root (assuming the SLIP is attached to device sl0):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ifconfig sl0 10.0.0.1 pointopoint 10.0.0.2 up</span></span>
<span class="line"><span> route add 10.0.0.2 dev sl0</span></span></code></pre></div></li><li><p>For monitoring/debugging traffic:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> tcpdump -n -nn -i sl0 -x -X -s 1500</span></span></code></pre></div><p>NOTE: If hardware handshake is not available, then you might try the slattach option-L which is supposed to enable &quot;3-wire operation.&quot;</p></li></ol>`,3)]))}const g=t(n,[["render",o]]);export{u as __pageData,g as default};
