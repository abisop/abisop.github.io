import{_ as a,c as t,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const d=JSON.parse('{"title":"Nordic nRF5340 DK","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf53/boards/nrf5340-dk/index.md","filePath":"en/platforms/arm/nrf53/boards/nrf5340-dk/index.md"}'),n={name:"en/platforms/arm/nrf53/boards/nrf5340-dk/index.md"};function p(i,e,c,s,l,h){return r(),t("div",null,e[0]||(e[0]=[o(`<h1 id="nordic-nrf5340-dk" tabindex="-1">Nordic nRF5340 DK <a class="header-anchor" href="#nordic-nrf5340-dk" aria-label="Permalink to &quot;Nordic nRF5340 DK&quot;">​</a></h1><p>chip:nrf53, chip:nrf5340</p><p>The <a href="https://www.nordicsemi.com/Products/Development-hardware/nrf5340-dk" target="_blank" rel="noreferrer">nRF5340-DK (PCA10092)</a> is a development board based on the nRF5340 from Nordic.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Serial console for the application core:</p><p>Pin Signal Notes</p><hr><p>P1.01 APP UART0 TX virtual COM 0 P1.00 APP UART0 RX virtual COM 0</p><p>Serial console for the network core:</p><p>Pin Signal Notes</p><hr><p>P0.20 NET UART0 TX virtual COM 1 P0.22 NET UART0 RX virtual COM 1</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The PCA10092 has 4 user-controllable LEDs:</p><p>LED MCU</p><hr><p>LED1 P0.28 LED2 P0.29 LED3 P0.30 LED4 P0.31</p><p>A low output illuminates the LED.</p><h3 id="config-arch-leds" tabindex="-1">CONFIG_ARCH_LEDS <a class="header-anchor" href="#config-arch-leds" aria-label="Permalink to &quot;CONFIG\\_ARCH\\_LEDS&quot;">​</a></h3><p>If CONFIG_ARCH_LEDS is not defined, then the LEDs are completely under control of the application. The following interfaces are then available for application control of the LEDs:</p><pre><code>uint32_t board_userled_initialize(void);
void board_userled(int led, bool ledon);
void board_userled_all(uint32_t ledset);
</code></pre><h3 id="pushbuttons" tabindex="-1">Pushbuttons <a class="header-anchor" href="#pushbuttons" aria-label="Permalink to &quot;Pushbuttons&quot;">​</a></h3><p>BUTTON MCU</p><hr><p>BUTTON1 P0.23 BUTTON2 P0.24 BUTTON3 P0.08 BUTTON4 P0.09</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nrf5340-dk:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="adc-cpuapp" tabindex="-1">adc_cpuapp <a class="header-anchor" href="#adc-cpuapp" aria-label="Permalink to &quot;adc\\_cpuapp&quot;">​</a></h3><p>This configuration shows the use of the ADC peripheral.</p><h3 id="composite-cpuapp" tabindex="-1">composite_cpuapp <a class="header-anchor" href="#composite-cpuapp" aria-label="Permalink to &quot;composite\\_cpuapp&quot;">​</a></h3><p>NuttShell configuration for the application core with support for CDC/ACM with RNDIS composite driver.</p><h3 id="nsh-cpuapp" tabindex="-1">nsh_cpuapp <a class="header-anchor" href="#nsh-cpuapp" aria-label="Permalink to &quot;nsh\\_cpuapp&quot;">​</a></h3><p>Basic NuttShell configuration for the application core (console enabled in UART0, exposed via J-Link VCOM0, at 115200 bps).</p><h3 id="nsh-cpunet" tabindex="-1">nsh_cpunet <a class="header-anchor" href="#nsh-cpunet" aria-label="Permalink to &quot;nsh\\_cpunet&quot;">​</a></h3><p>Basic NuttShell configuration for the network core (console enabled in UART0, exposed via J-Link VCOM1, at 115200 bps).</p><h3 id="ostest-tickless-cpuapp" tabindex="-1">ostest_tickless_cpuapp <a class="header-anchor" href="#ostest-tickless-cpuapp" aria-label="Permalink to &quot;ostest\\_tickless\\_cpuapp&quot;">​</a></h3><p>This is a NSH configuration that includes <code>apps/testing/ostest</code> as a builtin and enable support for the tick-less OS.</p><h3 id="pwm-cpuapp" tabindex="-1">pwm_cpuapp <a class="header-anchor" href="#pwm-cpuapp" aria-label="Permalink to &quot;pwm\\_cpuapp&quot;">​</a></h3><p>This configuration shows the use of the PWM peripheral.</p><h3 id="qspi-cpuapp" tabindex="-1">qspi_cpuapp <a class="header-anchor" href="#qspi-cpuapp" aria-label="Permalink to &quot;qspi\\_cpuapp&quot;">​</a></h3><p>NuttShell configuration with enabled support for on-board MX25R QSPI memory.</p><h3 id="rpmsghci-bt-cpuapp" tabindex="-1">rpmsghci_bt_cpuapp <a class="header-anchor" href="#rpmsghci-bt-cpuapp" aria-label="Permalink to &quot;rpmsghci\\_bt\\_cpuapp&quot;">​</a></h3><p>This configuration enables RPMSG Bluetooth HCI client on the application core and uses NuttX BLE stack for the host-layer</p><h3 id="rpmsghci-nimble-cpuapp" tabindex="-1">rpmsghci_nimble_cpuapp <a class="header-anchor" href="#rpmsghci-nimble-cpuapp" aria-label="Permalink to &quot;rpmsghci\\_nimble\\_cpuapp&quot;">​</a></h3><p>This configuration enables RPMSG Bluetooth HCI client on the application core and uses nimBLE for the host-layer</p><h3 id="rpmsghci-sdc-cpunet" tabindex="-1">rpmsghci_sdc_cpunet <a class="header-anchor" href="#rpmsghci-sdc-cpunet" aria-label="Permalink to &quot;rpmsghci\\_sdc\\_cpunet&quot;">​</a></h3><p>This configuration enables RPMSG Bluetooth HCI server on the network core which can be accessed using RPMSG Bluetooth HCI client on the application core.</p><h3 id="rptun-cpuapp" tabindex="-1">rptun_cpuapp <a class="header-anchor" href="#rptun-cpuapp" aria-label="Permalink to &quot;rptun\\_cpuapp&quot;">​</a></h3><p>This configuration enables basic RPTUN support on the application core. The <code>rptun</code> command will be available from NSH.</p><h3 id="rptun-cpunet" tabindex="-1">rptun_cpunet <a class="header-anchor" href="#rptun-cpunet" aria-label="Permalink to &quot;rptun\\_cpunet&quot;">​</a></h3><p>This configuration enables basic RPTUN support on the network core. The <code>rptun</code> command will be available from NSH.</p><h3 id="sdc-cpunet" tabindex="-1">sdc_cpunet <a class="header-anchor" href="#sdc-cpunet" aria-label="Permalink to &quot;sdc\\_cpunet&quot;">​</a></h3><p>Enables Nordic&#39;s SoftDevice controller on the network core and uses NuttX BLE stack for the host-layer. The <code>btsak</code> application is included as a builtin.</p><h3 id="sdc-nimble-cpunet" tabindex="-1">sdc_nimble_cpunet <a class="header-anchor" href="#sdc-nimble-cpunet" aria-label="Permalink to &quot;sdc\\_nimble\\_cpunet&quot;">​</a></h3><p>Enables Nordic&#39;s SoftDevice controller on the network core and uses nimBLE for the host-layer. The <code>nimble</code> test application can be used to enable a simple GATT server.</p><h3 id="timer-cpuapp" tabindex="-1">timer_cpuapp <a class="header-anchor" href="#timer-cpuapp" aria-label="Permalink to &quot;timer\\_cpuapp&quot;">​</a></h3><p>This configuration shows the use of the TIMER peripheral.</p>`,60)]))}const b=a(n,[["render",p]]);export{d as __pageData,b as default};
