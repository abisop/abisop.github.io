import{_ as r,c as o,al as t,j as e,a,o as s}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Quadrature Encoder Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/quadrature.md","filePath":"en/components/drivers/character/quadrature.md"}'),i={name:"en/components/drivers/character/quadrature.md"};function c(d,n,p,l,u,h){return s(),o("div",null,n[0]||(n[0]=[t('<h1 id="quadrature-encoder-drivers" tabindex="-1">Quadrature Encoder Drivers <a class="header-anchor" href="#quadrature-encoder-drivers" aria-label="Permalink to &quot;Quadrature Encoder Drivers&quot;">​</a></h1><p>NuttX supports a low-level, two-part Quadrature Encoder driver.</p><ol><li>An &quot;upper half&quot;, generic driver that provides the common Quadrature Encoder interface to application level code, and</li><li>A &quot;lower half&quot;, platform-specific driver that implements the low-level timer controls to implement the Quadrature Encoder functionality.</li></ol><p>Files supporting the Quadrature Encoder can be found in the following locations:</p><ul><li><strong>Interface Definition</strong>. The header file for the NuttX Quadrature Encoder driver reside at <code>include/nuttx/sensors/qencoder.h</code>. This header file includes both the application level interface to the Quadrature Encoder driver as well as the interface between the &quot;upper half&quot; and &quot;lower half&quot; drivers. The Quadrature Encoder module uses a standard character driver framework.</li><li><strong>&quot;Upper Half&quot; Driver</strong>. The generic, &quot;upper half&quot; Quadrature Encoder driver resides at <code>drivers/sensors/qencoder.c</code>.</li><li><strong>&quot;Lower Half&quot; Drivers</strong>. Platform-specific Quadrature Encoder drivers reside in <code>arch/&lt;architecture&gt;/src/&lt;hardware&gt;</code> directory for the specific processor <code>&lt;architecture&gt;</code> and for the specific <code>&lt;chip&gt;</code> Quadrature Encoder peripheral devices.</li></ul><h2 id="application-programming-interface" tabindex="-1">Application Programming Interface <a class="header-anchor" href="#application-programming-interface" aria-label="Permalink to &quot;Application Programming Interface&quot;">​</a></h2><p>The first thing to be done in order to use the quadrature encoder driver from an application is to include the correct header filer. It contains the Application Programming Interface to the driver. To do so, include</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;nuttx/sensors/qencoder.h&gt;</span></span></code></pre></div><p>Quadrature encoder driver is registered as a POSIX character device file into <code>/dev</code> namespace. It is necessary to open the device to get a file descriptor for further operations. This can be done with standard POSIX <code>open()</code> call.</p><p>The driver is accessed only through <code>ioctl</code> interface, functions <code>read</code> and <code>write</code> does not have any affect. Following <code>ioctl</code> commands are available:</p>',10),e("blockquote",null,[e("ul",null,[e("li",null,[a(":c"),e("code",{class:"interpreted-text",role:"macro"},"QEIOC_POSITION")]),e("li",null,[a(":c"),e("code",{class:"interpreted-text",role:"macro"},"QEIOC_RESET")]),e("li",null,[a(":c"),e("code",{class:"interpreted-text",role:"macro"},"QEIOC_SETPOSMAX")]),e("li",null,[a(":c"),e("code",{class:"interpreted-text",role:"macro"},"QEIOC_SETINDEX")]),e("li",null,[a(":c"),e("code",{class:"interpreted-text",role:"macro"},"QEIOC_GETINDEX")])])],-1),t(`<p>This call gets the current position from the encoder driver. Argument of the call is a pointer to <code>int32_t</code> variable.</p><p>This command resets the current encoder positition to zero.</p><p>The <code>QEIOC_SETPOSMAX</code> call sets the maximum position for the encoder. An argument is an <code>uint32_t</code> variable with the maximum position value.</p><p>This ioctl sets the index position of the encoder. An argument is an <code>uint32_t</code> variable with the maximum position value.</p><p>This ioctl gets the index position of the encoder. An argument is a pointer to <code>qe_index_s</code> structure.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct qe_index_s</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   /* Qencoder actual position */</span></span>
<span class="line"><span>   int32_t qenc_pos;</span></span>
<span class="line"><span>   /* Index last position */</span></span>
<span class="line"><span>   int32_t indx_pos;</span></span>
<span class="line"><span>   /* Number of index occurrences */</span></span>
<span class="line"><span>   int16_t indx_cnt;</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>The pointer to this structure is used as an argument to <code>QEIOC_GETINDEX</code> ioctl command. It gets the current encoder position, the last position of index and the number of index occurrences.</p><h3 id="application-example" tabindex="-1">Application Example <a class="header-anchor" href="#application-example" aria-label="Permalink to &quot;Application Example&quot;">​</a></h3><p>An example application can be found in <code>nuttx-apps</code> repository under path <code>examples/qencoder</code>. It demonstrates the basic data read from an encoder device.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; qe</span></span>
<span class="line"><span>1.  0</span></span>
<span class="line"><span>2.  0</span></span>
<span class="line"><span>3.  0</span></span>
<span class="line"><span>4.  1</span></span>
<span class="line"><span>5.  1</span></span>
<span class="line"><span>6.  1</span></span>
<span class="line"><span>7.  2</span></span>
<span class="line"><span>8.  2</span></span>
<span class="line"><span>9.  3</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>This section describes qencoder driver configuration in <code>Kconfig</code>. The reader should refer to target documentation for target specific configuration.</p><p>The <code>CONFIG_SENSORS</code> option has to be enabled in order to use the qencoder peripheral. The peripheral itself is enabled by <code>CONFIG_SENSORS_QENCODER</code> option.</p>`,13)]))}const g=r(i,[["render",c]]);export{f as __pageData,g as default};
