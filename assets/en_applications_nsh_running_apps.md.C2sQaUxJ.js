import{_ as i,c as a,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"Running Applications from NSH","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/nsh/running_apps.md","filePath":"en/applications/nsh/running_apps.md"}'),e={name:"en/applications/nsh/running_apps.md"};function l(p,s,h,o,k,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="running-applications-from-nsh" tabindex="-1">Running Applications from NSH <a class="header-anchor" href="#running-applications-from-nsh" aria-label="Permalink to &quot;Running Applications from NSH&quot;">â€‹</a></h1><p>This page describes current and planned features for the NuttX NuttShell (NSH). Think of this page as a roadmap. Most of the features have been implemented and incorporated into NSH; others are just ideas that are being tossed around (noted as NOT implemented). The NSH document will be updated as new features are included.</p><p>There are currently be three ways to execute applications from NSH:</p><ol><li><p>Executing Builtin Applications</p><p><strong>Builtin Applications</strong> The current implementation of NSH allows for the execution of &quot;named&quot; or &quot;builtin&quot; applications. The applications are simply task entry points in the common FLASH image that have names assigned to them. Simply entering that name from the NSH command line will cause the associated application to run.</p><p>See the NSH documentation for further details.</p><p><strong>Example</strong></p><p>For example:</p><blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NuttShell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NSH) NuttX-6.24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></blockquote><p><strong>Configuration Settings</strong></p><p>This functionality depends on these configuration settings:</p><blockquote><ul><li><code>CONFIG_BUILTIN=y</code> Enables NuttX support for builtin applications, and</li><li><code>CONFIG_NSH_BUILTIN_APPS=y</code> Enables NSH support for builtin applications</li></ul></blockquote><p>In additional to other configuration needed by NSH.</p></li><li><p>Executing Application from a File System</p><p><strong>OS Interfaces</strong></p><p>NuttX supports running applications that reside on a file system as well. The standard interfaces used to do this include:</p><blockquote><ul><li><code>execv()</code></li><li><code>execl()</code></li><li><code>posix_spawn()</code></li></ul></blockquote><p><strong>Configuration Settings</strong></p><p>Execution of applications on a file system is currently supported by Nuttx. This feature is enabled with:</p><blockquote><ul><li><code>CONFIG_LIBC_EXECFUNCS=y</code> Enable support for <code>execv()</code>, <code>execl()</code>, and <code>posix_spawn()</code>, and</li><li><code>CONFIG_NSH_FILE_APPS=y</code> Enable execution of programs in a file system by NSH.</li></ul></blockquote><p><strong>Example</strong></p><p>When this feature is enabled, you will be able to do the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NuttShell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NSH) NuttX-6.24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vfat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/mmcsd0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/sdcard</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/sdcard</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/mnt/sdcard:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rw-r--r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  198</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mnt/sdcard/hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>The PATH Variable</strong></p><p>Notice that the absolute path to the hello program was used. This can be simplified by setting the following in your configuration:</p><blockquote><ul><li><code>CONFIG_BINFMT_EXEPATH=y</code> Enable use of the path variable to find executable programs.</li></ul></blockquote><p><strong>Example</strong></p><p>Then, the example becomes:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NuttShell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NSH) NuttX-6.24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vfat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/mmcsd0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/sdcard</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/sdcard</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/mnt/sdcard:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -rw-r--r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  198</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/sdcard</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Pre-initialized PATH Variables</strong></p><p>One final simplification: The initial PATH variable can be configured so that the PATH to your executable programs is already defined when NSH starts. This is down with:</p><blockquote><ul><li><code>CONFIG_PATH_INITIAL=&quot;/mnt/sdcard&quot;</code></li></ul></blockquote><p>This functionality is already in place.</p></li><li><p>Executing Builtin Applications from a File System</p><p><strong>Namespace Management</strong></p><p>NuttX supports a virtual file system (VFS) that may used to manage namespaces. Linux uses its VFS to manage nearly all named objects (pipes, locks, message queues, etc.). And it is a good policy for NuttX to do this too. NuttX already does this for things like drivers and mountpoints. Why not extend this mechanism to handle named, builtin applications too?</p><p><strong>Proposed Configuration Options</strong></p><p>The following configuration options are planned:</p><blockquote><ul><li><code>CONFIG_BUILTIN=y</code> Will still be needed to enable NuttX support for builtin applications, and</li><li><code>CONFIG_NSH_BUILTIN_APPS=y</code> Will still be needed enable to stimulate programs to register themselves as builtin applications.</li></ul></blockquote><p>And in addition:</p><blockquote><ul><li><code>CONFIG_FS_BINFS=y</code> Enable the BINFS file system that is used to access builtin applications as files,</li><li><code>CONFIG_LIBC_EXECFUNCS=y</code> Enable support for <code>execv()</code>, <code>execl()</code>, and <code>posix_spawn()</code>,</li><li><code>CONFIG_NSH_FILE_APPS=y</code> Enable execution of programs in a file system by NSH,</li><li><code>CONFIG_BINFMT_EXEPATH=y</code> Enable the (optional) use of the path variable to find executable programs, and</li><li><code>CONFIG_PATH_INITIAL=&quot;/mnt/sdcard:/bin&quot;</code> Optional initial value of the PATH variable.</li></ul></blockquote><p><strong>Example</strong></p><p>When this feature is enable, will will be able to do this (where myapplication is the name of some, arbitrary &quot;built-in&quot; application):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NuttShell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NSH) NuttX-6.24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binfs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/bin:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -rw-r--r--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myapplication</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/mnt/sdcard:/bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">myapplication</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FLASH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> based</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Auto-Mounting BINFS</strong></p><p>BINFS, like any file system, could be mounted by an startup script at <code>/etc/init.d/rcS</code>.</p><p>But since BINFS may be used in many configurations that don&#39;t otherwise need a startup script, perhaps some configurations would be helpful:</p><blockquote><ul><li><code>CONFIG_NSH_AUTOMOUNT_BINFS=y</code> Automatically mount the BINFS file system on startup (<strong>NOT implemented</strong>)</li><li><code>CONFIG_NSH_BINFS_MOUNTPOINT=&quot;/bin&quot;</code> The BINFS mountpoint (NOT implemented).</li></ul></blockquote><p>Or perhaps a better thing to do would just be to make it easier to add a startup script?</p><p><strong>Next Steps</strong></p><p>In the longer term, I would like to see an option to move most of the larger NSH commands out of RAM and built them as standalone programs that can reside, for example, on an SD card (<strong>NOT implemented</strong>).</p></li></ol>`,4)]))}const F=i(e,[["render",l]]);export{c as __pageData,F as default};
