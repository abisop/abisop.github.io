import{_ as t,c as o,al as n,o as a}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"README","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/tms570/boards/launchxl-tms57004/README.md","filePath":"en/platforms/arm/tms570/boards/launchxl-tms57004/README.md"}'),i={name:"en/platforms/arm/tms570/boards/launchxl-tms57004/README.md"};function s(r,e,l,h,d,u){return a(),o("div",null,e[0]||(e[0]=[n(`<h1 id="readme" tabindex="-1">README <a class="header-anchor" href="#readme" aria-label="Permalink to &quot;README&quot;">​</a></h1><p>This README provides some information about the port of NuttX to the TI Hercules TMS570LS04x/03x LaunchPad Evaluation Kit (LAUNCHXL-TMS57004) featuring the Hercules TMS570LS0432PZ chip.</p><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h1><ul><li>Status</li><li>Toolchain</li><li>LEDs and Buttons</li><li>Serial Console</li><li>Debugging</li><li>Configurations</li></ul><h1 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h1><p>2015-12-29: The basic port to the TMS570 is complete. After a few debug attempts, I think I may have damaged my board or at least put it into a state where I can no longer use it: The CPU NERROR LED illuminates and can&#39;t I re- program the FLASH.</p><p>I was never able to use Code Composer Studio or UniFlash with the board. But I was initially able to load FLASH and debug using a Segger J-Link connected to the board as described below. But I think that some of my initial code loads put the TMS570 in bad state (or worse). Now the NERROR LED is on. When I attempt to program the FLASH, the J-Link software complains that the CPU is running too slowly and then times out trying to erase the FLASH.</p><p>I have made several important code fixes since them (some of which might improve this situation). But I have been unable to test them. At this point I will have to give up on this port OR perhaps order a new card.</p><h1 id="toolchain" tabindex="-1">Toolchain <a class="header-anchor" href="#toolchain" aria-label="Permalink to &quot;Toolchain&quot;">​</a></h1><h2 id="build-platform" tabindex="-1">Build Platform <a class="header-anchor" href="#build-platform" aria-label="Permalink to &quot;Build Platform&quot;">​</a></h2><p>All of these configurations are set up to build with Cygwin under Windows (unless stated otherwise in the description of the configuration).</p><h2 id="endian-ness-issues" tabindex="-1">Endian-ness Issues <a class="header-anchor" href="#endian-ness-issues" aria-label="Permalink to &quot;Endian-ness Issues&quot;">​</a></h2><p>I started using the &quot;GNU Tools for ARM Embedded Processors&quot; that is maintained by ARM.</p><pre><code>https://developer.arm.com/open-source/gnu-toolchain/gnu-rm
</code></pre><p>However, that tool chain will not support the TMS570 big-endian mode. Certainly the -mbig-endian options will compiler for big-endian, but the final link fails because there is no big-endian version lib libgcc.</p><p>There are patches available here if you want to build that toolchain from scratch:</p><pre><code>https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/+question/27995
</code></pre><p>I now use a version of the NuttX buildroot toolchain that can be built like this:</p><pre><code>cd buildroot/
cp boards/cortexr4-armeb-eabi-4.8.3-defconfig .config
make oldconfig
make
</code></pre><p>You have to have several obscure packages installed on your Linux or Cygwin system to build the toolchain like this: GMP, MPFR, MPC, and probably others. See the buildroot/README.txt file for additional important information about building the toolchain.</p><h2 id="reconfiguring" tabindex="-1">Reconfiguring <a class="header-anchor" href="#reconfiguring" aria-label="Permalink to &quot;Reconfiguring&quot;">​</a></h2><p>The build configuration selections can easily be reconfigured using &#39;make menuconfig&#39;. Here are the relevant current settings:</p><pre><code> Build Setup:
   CONFIG_HOST_WINDOWS=y               : Window environment
   CONFIG_WINDOWS_CYGWIN=y             : Cywin under Windows

 System Type -&gt; Toolchain:
   CONFIG_ARM_TOOLCHAIN_GNU_EABI=y  : GNU ARM EABI toolchain
</code></pre><h1 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h1><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>The launchpad has several LEDs:</p><pre><code>- LEd D1 (white) that connects to the USB +5V supply,
- LED D10 (red) that connects to the TMS570&#39;s NERROR pin,
- D5 (blue), D6 (blue), and D8 (blue) connect to the XDS100 FT2322,
- D7 (blue) connects to the XSD100 CPLD, and
- Two white, user LEDs labeled D12 that connects to the NHET08
  pin and D11 that connects to GIOA2.
</code></pre><p>NHET08 is one of 32 N2HET pins than can be available to the user if not used by N2HET. This implementation, however, uses only the single LED driven by GIOA2. That LED is tied to ground and illuminated with a high level output value.</p><p>This LED is not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/tms570_autoleds.c. The LED is used to encode OS-related events as follows:</p><hr><p>SYMBOL Meaning LED</p><hr><p>LED_STARTED NuttX has been started OFF OFF OFF ON LED_HEAPALLOCATE Heap has been allocated N/C N/C N/C LED_IRQSENABLED Interrupts enabled Idle FLASH LED_STACKCREATED stack created In an<br> LED_INIRQ interrupt In a signal<br> LED_SIGNAL handler An assertion<br> LED_ASSERTION failed The system has<br> LED_PANIC crashed</p><p>Thus if the LED is tatically on, NuttX has successfully s apparently, normally. If the LED is booted and is, running 2Hz, then a ror has been detected flashing at fatal er an approximately d the system has halted.</p><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>The launchpad has three mechanical buttons. Two of these are reset buttons: One button is labeled PORRST performs a power-on reset and one labeled RST performs an MCU reset. Only one button is available for general software usage. That button is labeled GIOA7 and is, obviously, sensed on GIOA7.</p><p>GIOA7 is tied to ground, but will be pulled high if the GIOA7 button is depressed.</p><h1 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h1><p>This TMS570 has a single SCI. The SCI_RX and TX pins are connected to the FTDI chip which provides a virtual COM port for the launchpad.</p><h1 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h1><p>I used a Segger J-Link connected to the Launchpad via the JTAG connector. The following table shows how I connected the 14-pin JTAG connector on the Launchpad to the Segger 20-pin JTAG connector:</p><pre><code>--- ----------- ------ ------------- --- ---------- ------ -------
J12  LAUCHPAD   J-LINK J-LINK        J12 LAUCHPAD   J-LINK J-LINK
PIN  SIGNAL     PIN    SIGNAL        PIN SIGNAL     PIN    SIGNAL
--- ----------- ------ ------------- --- ---------- ------ -------
1   TMS         7      TMS           2   TRTSN      3      nTRST
3   TDI         5      TDI           4   GND        2      GND
5   PD (+3V3)   1      VTref         6   N/C        -      N/C
7   TDO         13     TDO           8   JTAG_SEL** 4      GND
9   RTCK        11     RTCK          10  GND        6      GND
11  TCK         9      TCK           12  GND        8      GND
13  EMU0*       -      N/C           14  EMU1*      -      N/C
--- ----------- ------ ------------- --- ---------- ------ -------

* Pulled high on board
** Needs to be grounded to select JTAG
</code></pre><h1 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h1><h2 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h2><p>Each LaunchXL-TMS50704 configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh launchxl-tms57004:&lt;subdir&gt;
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.</p><pre><code>make oldconfig
make
</code></pre><p>The <code>&lt;subdir&gt;</code> that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- --&gt;</span></span></code></pre></div><pre><code>a. Build and install the kconfig-mconf tool.  See nuttx/README.txt
   see additional README.txt files in the NuttX tools repository.

b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the
   reconfiguration process.
</code></pre><ol start="2"><li><p>All of these configurations are set up to build under Windows using the &quot;GNU Tools for ARM Embedded Processors&quot; that is maintained by ARM (unless stated otherwise in the description of the configuration).</p><p><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm" target="_blank" rel="noreferrer">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm</a></p><p>That toolchain selection can easily be reconfigured using &#39;make menuconfig&#39;. Here are the relevant current settings:</p><p>Build Setup: CONFIG_HOST_WINDOWS=y : Window environment CONFIG_WINDOWS_CYGWIN=y : Cywin under Windows</p><p>System Type -&gt; Toolchain: CONFIG_ARM_TOOLCHAIN_GNU_EABI=y : GNU ARM EABI toolchain</p></li></ol><h2 id="configuration-sub-directories" tabindex="-1">Configuration sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration sub-directories&quot;">​</a></h2><p>nsh:</p><pre><code>Configures the NuttShell (nsh) located at examples/nsh.
</code></pre>`,58)]))}const b=t(i,[["render",s]]);export{p as __pageData,b as default};
