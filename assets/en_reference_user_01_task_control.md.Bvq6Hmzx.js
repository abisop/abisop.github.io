import{_ as n,c as s,al as r,j as e,a as t,o as a}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Task Control Interfaces","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/user/01_task_control.md","filePath":"en/reference/user/01_task_control.md"}'),o={name:"en/reference/user/01_task_control.md"};function c(i,l,d,p,u,f){return a(),s("div",null,l[0]||(l[0]=[r('<h1 id="task-control-interfaces" tabindex="-1">Task Control Interfaces <a class="header-anchor" href="#task-control-interfaces" aria-label="Permalink to &quot;Task Control Interfaces&quot;">​</a></h1><p><strong>Tasks</strong>. NuttX is a flat address OS. As such it does not support <em>processes</em> in the way that, say, Linux does. NuttX only supports simple threads running within the same address space. However, the programming model makes a distinction between <em>tasks</em> and <em>pthreads</em>:</p><blockquote><ul><li><em>tasks</em> are threads which have a degree of independence</li><li><a href="#Pthread">pthreads</a> share some resources.</li></ul></blockquote><p><strong>File Descriptors and Streams</strong>. This applies, in particular, in the area of opened file descriptors and streams. When a task is started using the interfaces in this section, it will be created with at most three open files.</p><p>If <code>CONFIG_DEV_CONSOLE</code> is defined, the first three file descriptors (corresponding to stdin, stdout, stderr) will be duplicated for the new task. Since these file descriptors are duplicated, the child task can free close them or manipulate them in any way without effecting the parent task. File-related operations (open, close, etc.) within a task will have no effect on other tasks. Since the three file descriptors are duplicated, it is also possible to perform some level of redirection.</p><p>pthreads, on the other hand, will always share file descriptors with the parent thread. In this case, file operations will have effect only all pthreads the were started from the same parent thread.</p><p><strong>Executing Programs within a File System</strong>. NuttX also provides internal interfaces for the execution of separately built programs that reside in a file system. These internal interfaces are, however, non-standard and are documented with the NuttX binary loader and NXFLAT documentation.</p><p><strong>Task Control Interfaces</strong>. The following task control interfaces are provided by NuttX:</p><p>Note</p><p>Maybe this can be converted into a table, or could otherwise be replaced by the index if these are sectioned in this way.</p><p>Non-standard task control interfaces inspired by VxWorks interfaces:</p>',11),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_create")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_delete")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_restart")])])],-1),e("p",null,[t("Non-standard extensions to VxWorks-like interfaces to support POSIX "),e("a",{href:"https://cwiki.apache.org/confluence/display/NUTTX/Cancellation+Points",target:"_blank",rel:"noreferrer"},"Cancellation Points"),t(".")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_setcancelstate")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_setcanceltype")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_testcancel")])])],-1),e("p",null,"Standard interfaces",-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"exit")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"getpid")])])],-1),e("p",null,[t("Standard "),e("code",null,"vfork"),t(" and "),e("code",null,"exec[v|l]"),t(" interfaces:")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"vfork")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"exec")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"execv")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"execl")])])],-1),e("p",null,[t("Standard "),e("code",null,"posix_spawn"),t(" interfaces:")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawn"),t(" and :c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnp")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawn_file_actions_init")]),e("li",null,[t(":c"),e("code",null,"posix_spawn_file_actions_destroy"),t('{.interpreted-text role="func"}')]),e("li",null,[t(":c"),e("code",null,"posix_spawn_file_actions_addclose"),t('{.interpreted-text role="func"}')]),e("li",null,[t(":c"),e("code",null,"posix_spawn_file_actions_adddup2"),t('{.interpreted-text role="func"}')]),e("li",null,[t(":c"),e("code",null,"posix_spawn_file_actions_addopen"),t('{.interpreted-text role="func"}')]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_getflags")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_getschedparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_getschedpolicy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_getsigmask")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_setflags")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_setschedparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_setschedpolicy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_setsigmask")])])],-1),e("p",null,[t("Non-standard task control interfaces inspired by "),e("code",null,"posix_spawn"),t(":")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"task_spawn")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_getstacksize")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"posix_spawnattr_setstacksize")])])],-1),e("h2",{id:"functions",tabindex:"-1"},[t("Functions "),e("a",{class:"header-anchor",href:"#functions","aria-label":'Permalink to "Functions"'},"​")],-1)]))}const x=n(o,[["render",c]]);export{h as __pageData,x as default};
