import{_ as i,c as o,al as t,j as e,a as r,o as n}from"./chunks/framework.NFAqBSgQ.js";const S=JSON.parse('{"title":"Microchip SAM V7","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/samv7/index.md","filePath":"en/platforms/arm/samv7/index.md"}'),s={name:"en/platforms/arm/samv7/index.md"};function l(c,a,d,p,h,u){return n(),o("div",null,a[0]||(a[0]=[t('<h1 id="microchip-sam-v7" tabindex="-1">Microchip SAM V7 <a class="header-anchor" href="#microchip-sam-v7" aria-label="Permalink to &quot;Microchip SAM V7&quot;">​</a></h1><p>This page contains information regarding MCUs series SAM E70, SAM S70, SAM V70 and SAMV71 made by Microchip. The series is based around and ARM Cortex-M7 core running up to 300 MHz.</p><p>Microchip distinguishes those MCUs into three series SAM E, SAM S SAM V but NuttX source code uses the same files and functions for all of those series and therefore they can be merged into one category and named as SAM V7.</p><h2 id="supported-mcus" tabindex="-1">Supported MCUs <a class="header-anchor" href="#supported-mcus" aria-label="Permalink to &quot;Supported MCUs&quot;">​</a></h2><p>The following list includes MCUs from SAM x7 series and indicates whether they are supported in NuttX</p><p>MCU Support Core Frequency</p><hr><p>SAM E70 Yes Cortex-M7 300 MHz SAM S70 No Cortex-M7 300 MHz SAM V70 No Cortex-M7 300 MHz SAM V71 Yes Cortex-M7 300 MHz</p><h2 id="data-and-instruction-cache" tabindex="-1">Data and Instruction Cache <a class="header-anchor" href="#data-and-instruction-cache" aria-label="Permalink to &quot;Data and Instruction Cache&quot;">​</a></h2><p>MCUs in this series have separated caches for instructions and data, both 16 kB. Data cache is initially set as write-back but sometimes the configuration automatically switch it to write-through mode. While write-back gives better performance, the reason of the switch are the issues in some drivers that can arise because this mode is not correctly supported yet. This happens for example when selecting <code>CONFIG_SAMV7_EMAC</code> (Ethernet MAC driver).</p><p>Data cache can also be switched to write-through mode manually by setting ARMV7M_DCACHE_WRITETHROUGH.</p><h2 id="tickless-os" tabindex="-1">Tickless OS <a class="header-anchor" href="#tickless-os" aria-label="Permalink to &quot;Tickless OS&quot;">​</a></h2><p>With Tickless OS, the periodic, timer interrupt is eliminated and replaced with a one-shot, interval timer, that becomes event driven instead of polled. This allows to run the MCU with higher resolution without using more of the CPU bandwidth processing useless interrupts.</p>',13),e("p",null,[r("Current implementation only supports version with two timers: a one-shot that provides the timed events and a free running timer that provides the current time. Therefore two channels has to be used for tickless mode. "),e("code",null,"CONFIG_USEC_PER_TICK"),r(" option determines the resolution of time reported by :c"),e("code",{class:"interpreted-text",role:"func"},"clock_systime_ticks()"),r(" and the resolution of times that can be set for certain delays including watchdog timers and delayed work.")],-1),t('<p>The version (selected by <code>CONFIG_SCHED_TICKLESS_ALARM</code>) with single free running timer that provides current time and a capture/compare channel for timed events is not currently supported. This would require just one channel, which can be useful in some MCUs that does not have many channels.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates peripherals supported in NuttX:</p><p>Peripheral Support</p><hr><p>1Wire Yes ACC No AES No AFEC Yes DACC Yes EEFC Yes GMAC Yes HSMCI Yes I2SC No ICM No ISI No MCAN Yes MLB No PMC No PWM Yes QSPI Yes SMC No SPI Yes SSC Yes TWIHS Yes TC Yes USART Yes WDT Yes XDMAC Yes</p><h3 id="analog-comparator-controller-acc" tabindex="-1">Analog Comparator Controller (ACC) <a class="header-anchor" href="#analog-comparator-controller-acc" aria-label="Permalink to &quot;Analog Comparator Controller (ACC)&quot;">​</a></h3><p>Analog Comparator Controller generates an interrupt based on user settings. It can also generate a compare event which can be used by the PWM driver.</p><p>This peripheral is currently not supported.</p><h3 id="advanced-encryption-standard-aes" tabindex="-1">Advanced Encryption Standard (AES) <a class="header-anchor" href="#advanced-encryption-standard-aes" aria-label="Permalink to &quot;Advanced Encryption Standard (AES)&quot;">​</a></h3><p>The standard complies with the American FIPS Publication 197 specification. It is not currently supported.</p><h3 id="analog-front-end-controller-afec" tabindex="-1">Analog Front-End Controller (AFEC) <a class="header-anchor" href="#analog-front-end-controller-afec" aria-label="Permalink to &quot;Analog Front-End Controller (AFEC)&quot;">​</a></h3><p>This controller combines a 12 bit ADC, DAC and two 6 to 1 analog multiplexers. The current support in NuttX implements the controller as an analog/digital converter that can be trigger either via software trigger from the application or by timer/counter that runs on a defined frequency. Triggering by PWM is also supported by the MCUs but not currently implemented in NuttX. The lower-half of this driver is initialize by calling :c<code>sam_afec_initialize</code>{.interpreted-text role=&quot;func&quot;}</p><p>Software trigger can be selected by <code>CONFIG_SAMV7_AFECn_SWTRIG</code>, timer/counter trigger by <code>CONFIG_SAMV7_AFECn_TIOATRIG</code>. It is also necessary to select corresponding timer/counter (0 for AFEC0 and 1 for AFEC1) and enable corresponding channels. Triggering from PWM driver is also supported and can be configured by <code>CONFIG_SAMV7_AFECn_PWMTRIG</code>. In this case subsequental configuration of PWM driver is required (see below in PWM section).</p><p>The 12 bit resolution mode can be extended up to a 16 bit resolution by digital averaging. The averaging can be set by <code>CONFIG_SAMV7_AFECn_RES</code>.</p><p>The controller supports data transfer with DMA support which can be enabled by <code>CONFIG_SAMV7_AFEC_DMA</code>. Option <code>CONFIG_SAMV7_AFEC_DMASAMPLES</code> then sets the number of samples to be transferred.</p><h3 id="digital-analog-converter-controller-dacc" tabindex="-1">Digital/Analog Converter Controller (DACC) <a class="header-anchor" href="#digital-analog-converter-controller-dacc" aria-label="Permalink to &quot;Digital/Analog Converter Controller (DACC)&quot;">​</a></h3><p>Digital/Analog Converter supports 12 bit resolution and can operate in free-running mode, maximum speed mode, trigger mode from timer/counter and interpolation mode. Trigger mode is set by enabling <code>CONFIG_SAMV7_DAC_TRIGGER</code> option. The lower-half of this driver is initialize by calling :c<code>sam_dac_initialize</code>{.interpreted-text role=&quot;func&quot;}.</p><p>DMA data transfer is supported by the controller but currently not implemented in NuttX.</p><h3 id="ethernet-mac-gmac" tabindex="-1">Ethernet MAC (GMAC) <a class="header-anchor" href="#ethernet-mac-gmac" aria-label="Permalink to &quot;Ethernet MAC (GMAC)&quot;">​</a></h3><p>This module implements a 10/100 Mbps Ethernet MAC which is compatible with the IEEE 802.3 standard. Number of RR and TX buffers can be configured by <code>CONFIG_SAMV7_EMAC0_NRXBUFFERS</code> and <code>CONFIG_SAMV7_EMAC0_NTXBUFFERS</code> respectively. Option <code>CONFIG_SAMV7_EMAC0_PHYINIT</code> may be selected when board specific initialization (GPIOs configuration, PHY reset etc.) is required prior to module usage.</p><h3 id="high-speed-multimedia-card-interface-hsmci" tabindex="-1">High Speed Multimedia Card Interface (HSMCI) <a class="header-anchor" href="#high-speed-multimedia-card-interface-hsmci" aria-label="Permalink to &quot;High Speed Multimedia Card Interface (HSMCI)&quot;">​</a></h3><p>This module supports a high speed connection to MultiMedia Cards (MMC). Support for the SD slots can be enabled with the following settings:</p><ul><li></li></ul><pre><code>System Type -\\&gt; SAMV7 Peripheral Selection\n\n:   -   `CONFIG_SAMV7_HSMCI0=y` : To enable HSMCI0 support\n    -   `CONFIG_SAMV7_XDMAC=y` : XDMAC is needed by HSMCI0/1\n</code></pre><ul><li></li></ul><pre><code>System Type\n\n:   -   `CONFIG_SAMV7_GPIO_IRQ=y` : PIO interrupts needed\n    -   `CONFIG_SAMV7_GPIOn_IRQ=y` : Interrupt to corresponding pin\n        gate\n</code></pre><ul><li></li></ul><pre><code>Device Drivers -\\&gt; MMC/SD Driver Support\n\n:   -   `CONFIG_MMCSD=y` : Enable MMC/SD support\n    -   `CONFIG_MMSCD_NSLOTS=1` : One slot per driver instance\n    -   `CONFIG_MMCSD_MULTIBLOCK_DISABLE=y` : (REVISIT)\n    -   `CONFIG_MMCSD_HAVE_CARDDETECT=y` : Supports card-detect PIOs\n    -   `CONFIG_MMCSD_MMCSUPPORT=n` : Interferes with some SD cards\n    -   `CONFIG_MMCSD_SPI=n` : No SPI-based MMC/SD support\n    -   `CONFIG_MMCSD_SDIO=y` : SDIO-based MMC/SD support\n    -   `CONFIG_SDIO_DMA=y` : Use SDIO DMA\n    -   `CONFIG_SDIO_BLOCKSETUP=y` : Needs to know block sizes\n</code></pre><ul><li></li></ul><pre><code>RTOS Features -\\&gt; Work Queue Support\n\n:   -   `CONFIG_SCHED_WORKQUEUE=y` : Driver needs work queue support\n</code></pre><ul><li></li></ul><pre><code>Application Configuration -\\&gt; NSH Library\n\n:   -   `CONFIG_NSH_ARCHINIT=y` : NSH board-initialization, OR\n    -   `CONFIG_BOARD_LATE_INITIALIZE=y`\n</code></pre>',33),e("p",null,[r("The lower-half of this driver is initialized by calling :c"),e("code",{class:"interpreted-text",role:"func"},"sdio_initialize"),r(".")],-1),t('<h3 id="inter-ic-sound-interface-i2cs" tabindex="-1">Inter-IC Sound Interface (I2CS) <a class="header-anchor" href="#inter-ic-sound-interface-i2cs" aria-label="Permalink to &quot;Inter-IC Sound Interface (I2CS)&quot;">​</a></h3><p>This controller provides a 5 wire digital audio link to external audio devices. The link is bidirectional and synchronous. The interface is compliant vit I2C specification.</p><p>This peripheral is currently not supported.</p><h3 id="integrity-check-monitor-icm" tabindex="-1">Integrity Check Monitor (ICM) <a class="header-anchor" href="#integrity-check-monitor-icm" aria-label="Permalink to &quot;Integrity Check Monitor (ICM)&quot;">​</a></h3><p>Integrity Check Monitor is a DMA controller that performs hash calculation over memory regions.</p><p>This peripheral is currently not supported.</p><h3 id="image-sensor-interface-isi" tabindex="-1">Image Sensor Interface (ISI) <a class="header-anchor" href="#image-sensor-interface-isi" aria-label="Permalink to &quot;Image Sensor Interface (ISI)&quot;">​</a></h3><p>This controller connects a CMOS type sensor to the MCU and provides image captures is selected formatrs.</p><p>This peripheral is currently not supported.</p><h3 id="controller-area-network-mcan" tabindex="-1">Controller Area Network (MCAN) <a class="header-anchor" href="#controller-area-network-mcan" aria-label="Permalink to &quot;Controller Area Network (MCAN)&quot;">​</a></h3><p>Provides support for communication according to ISO 11898-1:2015 and to Bosch CAN-FD specification. It is possible to select CAN FD communication in NuttX configuration.</p>',11),e("p",null,[r("The lower-half of the peripheral is initialized by function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_mcan_initialize")],-1),t('<h3 id="media-local-bus-mlb" tabindex="-1">Media Local Bus (MLB) <a class="header-anchor" href="#media-local-bus-mlb" aria-label="Permalink to &quot;Media Local Bus (MLB)&quot;">​</a></h3><p>This peripheral maps all the MOST Network data types into a single interface.</p><p>This peripheral is currently not supported.</p><h3 id="power-management-controller-pmc" tabindex="-1">Power Management Controller (PMC) <a class="header-anchor" href="#power-management-controller-pmc" aria-label="Permalink to &quot;Power Management Controller (PMC)&quot;">​</a></h3><p>Peripheral used to optimize power consumption of MCU.</p><p>Not yet supported.</p><h3 id="pulse-width-modulation-controller-pwm" tabindex="-1">Pulse Width Modulation Controller (PWM) <a class="header-anchor" href="#pulse-width-modulation-controller-pwm" aria-label="Permalink to &quot;Pulse Width Modulation Controller (PWM)&quot;">​</a></h3><p>Pulse Width Modulation Controller provides a PWM output on 4 independent channels. Each channel can control two complementary outputs. PWM can also be used to generate a signal that triggers ADC conversion. The trigger is generated from configurable comparison units. These units can be set by config option <code>CONFIG_SAMV7_PWMn_TRIGx</code> where n is number of PWM instance and x is the number of comparison unit.</p><p>The peripheral has integrated fault protection that drives the output to zero when activated. The protection activation can be trigger from various peripherals (ADC, PMC) or from GPIO inputs.</p><p>Furthermore PWM can implement a dead time delays before the activation of complementary outputs. These delays are turn on by <code>CONFIG_PWM_DEADTIME</code> while dead time values are provided from application level the same way as duty cycle is set.</p>',10),e("p",null,[r("The lower-half is initialized by function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_pwminitialize"),r(".")],-1),e("h3",{id:"quad-serial-peripheral-interface-qspi",tabindex:"-1"},[r("Quad Serial Peripheral Interface (QSPI) "),e("a",{class:"header-anchor",href:"#quad-serial-peripheral-interface-qspi","aria-label":'Permalink to "Quad Serial Peripheral Interface (QSPI)"'},"​")],-1),e("p",null,[r("This peripheral provides communication with external devices in host mode through synchronous serial data link. It is possible to use QSPI peripheral in SPI mode if this is supported by MCU (config option "),e("code",null,"CONFIG_SAMV7_QSPI_SPI_MODE"),r(").")],-1),e("p",null,[r("The lower-half is initialized by function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_qspi_initialize"),r(" in case of QSPI mode and by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_qspi_spi_initialize"),r(" in case of SPI mode.")],-1),e("h3",{id:"static-memory-controller-smc",tabindex:"-1"},[r("Static Memory Controller (SMC) "),e("a",{class:"header-anchor",href:"#static-memory-controller-smc","aria-label":'Permalink to "Static Memory Controller (SMC)"'},"​")],-1),e("p",null,"This peripheral is a part of External Bus Interface (EBI) which is designed to ensure the successful data transfer between several external devices and the microcontroller.",-1),e("p",null,"This controller is currently not supported.",-1),e("h3",{id:"serial-peripheral-interface-spi",tabindex:"-1"},[r("Serial Peripheral Interface (SPI) "),e("a",{class:"header-anchor",href:"#serial-peripheral-interface-spi","aria-label":'Permalink to "Serial Peripheral Interface (SPI)"'},"​")],-1),e("p",null,"This is a synchronous serial data link that provides communication with external devices in host or client mode.",-1),e("p",null,[r("The peripheral is initialized by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_spibus_initialize"),r(" function.")],-1),e("h3",{id:"synchronous-serial-controller-ssc",tabindex:"-1"},[r("Synchronous Serial Controller (SSC) "),e("a",{class:"header-anchor",href:"#synchronous-serial-controller-ssc","aria-label":'Permalink to "Synchronous Serial Controller (SSC)"'},"​")],-1),e("p",null,"This controller provides a synchronous communication link with external devices.",-1),e("p",null,[r("The controller is initialized by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_ssc_initialize"),r(" function.")],-1),t('<h3 id="two-wire-interface-twihs" tabindex="-1">Two Wire Interface (TWIHS) <a class="header-anchor" href="#two-wire-interface-twihs" aria-label="Permalink to &quot;Two Wire Interface (TWIHS)&quot;">​</a></h3><p>It interconnects components on a two-wire bus. The bus is made up of one clock line and one data line.</p><h3 id="timer-counter-tc" tabindex="-1">Timer Counter (TC) <a class="header-anchor" href="#timer-counter-tc" aria-label="Permalink to &quot;Timer Counter (TC)&quot;">​</a></h3><p>The peripheral implements four timer counter modules, each supporting three independent channels.</p><h3 id="universal-synchronous-asynchronous-receiver-transceiver-usart" tabindex="-1">Universal Synchronous Asynchronous Receiver Transceiver (USART) <a class="header-anchor" href="#universal-synchronous-asynchronous-receiver-transceiver-usart" aria-label="Permalink to &quot;Universal Synchronous Asynchronous Receiver Transceiver (USART)&quot;">​</a></h3>',5),e("p",null,[r("The MCU supports both UART and USART controllers. These peripheral can be used with TX and RX DMA support. For RX DMA on USART, it is possible to configure idle bus timeout value in "),e("code",null,"CONFIG_SAMV7_SERIAL_DMA_TIMEOUT"),r(". This option ensures data are read from the DMA buffer even if it is not full yet. UART peripherals do not have this timeout support, therefore function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_serial_dma_poll"),r(" should be called periodically to flush the DMA buffers. Boards can use common :c"),e("code",{class:"interpreted-text",role:"func"},"board_uart_rxdma_poll_init"),r(" function to initialize a timer triggering the poll.")],-1),e("p",null,"There are several modes in which USART peripheral can operate (ISO7816, IrDA, RS485, SPI, LIN and LON). Currently RS485 and SPI master are supported by NuttX.",-1),e("p",null,[r("RS-485 mode is enabled by "),e("code",null,"CONFIG_SAMV7_USARTx_RS485MODE"),r(" option ("),e("code",null,"CONFIG_SAMV7_USART2_SERIALDRIVER"),r(" has to be true). In this case RTS pin is set to logical 1 before the serial driver is opened and board specific logic is required to set it to logical zero. This has to be done in board initialization. Once the driver is opened for the first time, architecture layer takes care of correct settings of RTS pin. There is no additional requirement for driver initialization, the process is the same as with serial mode.")],-1),e("p",null,[r("SPI master (host) mode is enabled by "),e("code",null,"CONFIG_SAMV7_USARTx_SPI_MASTER"),r(" option. In this mode USART emulates SPI peripheral with one slave (client) device (more slaves are not supported by the peripheral). The interface with the driver is the same as with other SPI drivers but BSP layer does not have to support chip selection. Command/data transfers are also not supported by the peripheral. Driver for SPI master mode is initialized by :c"),e("code",null,"sam_serial_spi_initialize"),r('{.interpreted-text role="func"} with port number as an argument.')],-1),e("p",null,[r("USART/UART can be also used to emulate 1 wire interface. SAMv7 MCUs do not have build in support for 1 wire, therefore external hardware as TX/RX connection or optical isolation might be required. Selecting "),e("code",null,"CONFIG_SAMV7_UARTx_1WIREDRIVER"),r(" enables 1 wire driver and sets USART/UART peripheral to this mode. Output pins are configured as if serial mode was selected plus TX is open drain. SAMv7 part of the driver is initialized by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_1wireinitialize"),r(" with port number as an argument.")],-1),t('<h3 id="watchdog-timer-wdt" tabindex="-1">Watchdog Timer (WDT) <a class="header-anchor" href="#watchdog-timer-wdt" aria-label="Permalink to &quot;Watchdog Timer (WDT)&quot;">​</a></h3><p>The timer is used to prevent system lock-up if the software is trapped in a deadlock.</p><h3 id="dma-controller-xdmac" tabindex="-1">DMA Controller (XDMAC) <a class="header-anchor" href="#dma-controller-xdmac" aria-label="Permalink to &quot;DMA Controller (XDMAC)&quot;">​</a></h3><p>This peripheral provides a central direct memory access controller which can perform peripheral to memory or memory to memory transfers.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>',6)]))}const C=i(s,[["render",l]]);export{S as __pageData,C as default};
