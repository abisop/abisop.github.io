import{_ as a,c as t,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"NXP UCANS32K146","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/s32k1xx/boards/ucans32k146/index.md","filePath":"en/platforms/arm/s32k1xx/boards/ucans32k146/index.md"}'),s={name:"en/platforms/arm/s32k1xx/boards/ucans32k146/index.md"};function r(i,e,l,d,c,h){return n(),t("div",null,e[0]||(e[0]=[o(`<h1 id="nxp-ucans32k146" tabindex="-1">NXP UCANS32K146 <a class="header-anchor" href="#nxp-ucans32k146" aria-label="Permalink to &quot;NXP UCANS32K146&quot;">​</a></h1><p><a href="https://www.nxp.com/design/development-boards/automotive-development-platforms/s32k-mcu-platforms/s32k146-uavcan-v1-and-mavcan-development-system:UCANS32K146" target="_blank" rel="noreferrer">NXP UCANS32K146</a> is a CAN Node reference design and development platform for mobile robotics applications, such as drones and rovers. It features the <a href="https://www.nxp.com/products/processors-and-microcontrollers/s32-automotive-platform/s32k-general-purpose-mcus/s32k1-microcontrollers-for-general-purpose:S32K1" target="_blank" rel="noreferrer">NXP S32K146 MCU</a> based on an Arm Cortex-M4F core. There exist a few different revisions/variants of this board. All variants with the S32K146 microcontroller are supported.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>NXP FS32K146UAT0VLHT MCU

:   -   112 MHz Clock (Max.)
    -   1024 Kb Flash
    -   128 Kb SRAM
    -   4 Kb EEPROM
</code></pre><ul><li><p>NXP UJA1169TK/F System Basis Chip</p></li><li></li></ul><pre><code>Connectivity:

:   -   Console UART (Console @ 115,200 baud)
    -   2x CAN FD
    -   I/O headers with GPIO, I2C, SPI, etc.
</code></pre><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default, the serial console will be provided on the DCD-LZ UART (available on the 7-pin DCD-LZ debug connector P6):</p><hr><p>DCD-LZ UART RX PTC6 LPUART1_RX DCD-LZ UART TX PTC7 LPUART1_TX</p><hr><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">Leds <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;Leds&quot;">​</a></h3><p>The UCANS32K146 has one RGB LED:</p><hr><p>RedLED PTD15 FTM0 CH0 GreenLED PTD16 FTM0 CH1 BlueLED PTD0 FTM0 CH2</p><hr><p>An output of &#39;0&#39; illuminates the LED.</p><p>If CONFIG_ARCH_LEDS is not defined, then the user can control the LEDs in any way. The following definitions are used to access individual RGB components (see ucans32k146.h):</p><ul><li>GPIO_LED_R</li><li>GPIO_LED_G</li><li>GPIO_LED_B</li></ul><p>The RGB components could, alternatively, be controlled through PWM using the common RGB LED driver.</p><p>If CONFIG_ARCH_LEDs is defined, then NuttX will control the LEDs on board the UCANS32K146. The following definitions describe how NuttX controls the LEDs:</p><p>State Description RED GREEN BLUE</p><hr><p>LED_STARTED NuttX has been started OFF OFF OFF LED_HEAPALLOCATE Heap has been allocated OFF OFF ON LED_IRQSENABLED Interrupts enabled OFF OFF ON LED_STACKCREATED LED_INIRQ LED_SIGNAL LED_ASSERTION Idle stack created In an interrupt In a signal handler An assertion failed OFF ON OFF LED_PANIC LED_IDLE The system has crashed S32K146 in sleep mode FLASH OFF OFF</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>The UCANS32K146 supports one button:</p><p>SW3 PTC14</p><hr><p>Confi gurations</p><p>Each UCANS32K146 configuration is maintained in a sub-directory and can be selected as follows:</p><pre><code>tools/configure.sh ucans32k146:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the sub-directories listed in the next paragraph.</p><p>NOTES (common for all configurations):</p><ol><li></li></ol><pre><code>This configuration uses the mconf-based configuration tool. To change this configuration using that tool, you should:

:   a.  Build and install the kconfig-mconf tool. See
        nuttx/README.txt. Also see additional README.txt files in
        the NuttX tools repository.
    b.  Execute \\&#39;make menuconfig\\&#39; in nuttx/ in order to start the
        reconfiguration process.
</code></pre><ol start="2"><li>Unless otherwise stated, the serial console used is LPUART1 at 115,200 8N1.</li></ol><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at apps/examples/nsh. Support for builtin applications is enabled, but in the base configuration the only application selected is the &quot;Hello, World!&quot; example.</p><h3 id="can" tabindex="-1">can <a class="header-anchor" href="#can" aria-label="Permalink to &quot;can&quot;">​</a></h3><p>Besides the NuttShell this configuration also enables (Socket)CAN support, as well as I2C and SPI support. It includes the SLCAN and can-utils applications for monitoring and debugging CAN applications.</p>`,42)]))}const f=a(s,[["render",r]]);export{u as __pageData,f as default};
