import{_ as o,c as e,al as i,o as a}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"README.txt","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm64/imx9/boards/imx93-evk/README.md","filePath":"en/platforms/arm64/imx9/boards/imx93-evk/README.md"}'),n={name:"en/platforms/arm64/imx9/boards/imx93-evk/README.md"};function p(l,t,r,s,d,u){return a(),e("div",null,t[0]||(t[0]=[i(`<h1 id="readme-txt" tabindex="-1">README.txt <a class="header-anchor" href="#readme-txt" aria-label="Permalink to &quot;README.txt&quot;">​</a></h1><p>The kit i.MX93 Evaluation Kit has a pre-installed Linux image which contains u-boot and the i.MX93 reference Linux installation.</p><p>NuttX may work as the bootloader, replacing u-boot completely. Currently it doesn&#39;t initialize the DDR memory yet. In other words, DDR training is still missing.</p><p>==========================================</p><p>How to run nuttx on i.MX93 Evaluation Kit.</p><p>==========================================</p><p>Below is a set of instructions on how to run NuttX on the i.MX93 EVK, on top of the u-boot. Also, instructions on running NuttX as the bootloader will follow.</p><p>==========================================</p><p>Pre-requisites</p><p>==========================================</p><ul><li>imx93_ca55.JLinkScript which is a custom file, put it wherever you want</li></ul><p>==========================================</p><p>U-Boot configuration</p><p>==========================================</p><p>Two things need to be configured on u-boot before NuttX can be loaded:</p><ul><li>u-boot data cache must be turned off</li><li>u-boot must stop to the u-boot console, i.e. the Linux payload must not be loaded</li></ul><p>Manual option:</p><ol><li><p>Disable u-boot autostart (needs to be done only once):</p><p>Hit any key to stop autoboot: 0 u-boot=&gt; setenv bootdelay -1 u-boot=&gt; saveenv Saving Environment to MMC... Writing to MMC(0)... OK u-boot=&gt; reset</p></li><li><p>On every boot, the data cache must be disabled for options 2 and 3 to work</p><p>u-boot=&gt; dcache off</p></li></ol><p>Automated option:</p><ol><li><p>Replace the default bootcmd to disable dcache automatically:</p><p>u-boot=&gt; setenv bootdelay 0 u-boot=&gt; setenv bootcmd dcache off u-boot=&gt; saveenv Saving Environment to MMC... Writing to MMC(0)... OK u-boot=&gt; reset</p></li></ol><p>To restore the default bootcmd which starts Linux automatically:</p><pre><code>u-boot=&gt; setenv bootcmd run distro_bootcmd;run bsp_bootcmd
u-boot=&gt; saveenv
Saving Environment to MMC... Writing to MMC(0)... OK
u-boot=&gt; reset
</code></pre><p>The default bootcmd is:</p><p>u-boot=&gt; env print bootcmd bootcmd=run distro_bootcmd;run bsp_bootcmd</p><p>==========================================</p><p>Loading and running the NuttX image</p><p>==========================================</p><p>You have four options:</p><p>1 - Load via u-boot from SD-card 2 - Load via gdb 3 - Load via JLink 4 - Run from SD-card, without u-boot 5 - Kernel build, via AHAB boot</p><p>==========================================</p><p>Option 1: load via u-boot from SD-card:</p><p>==========================================</p><ol><li><p>Build nuttx, and move nuttx.bin to SD-card</p></li><li><p>Load from SD-card and start nuttx payload</p><p>u-boot=&gt; dcache off; fatload mmc 1 0x80000000 nuttx.bin; go 0x80000000</p></li></ol><p>==========================================</p><p>Option 2: start via gdb:</p><p>==========================================</p><ol><li><p>Start JLinkGDBServer</p><p>JLinkGDBServer -device CORTEX-A55 -JLinkScriptFile <code>&lt;path_to&gt;</code>/imx93_ca55.JLinkScript</p></li><li><p>Start gdb</p><p>$ aarch64-none-elf-gdb</p></li></ol><p>2.1 Attach and load nuttx</p><pre><code>(gdb) target remote localhost:2331
(gdb) set mem inaccessible-by-default off
(gdb) load &lt;path_to&gt;/nuttx
(gdb) monitor go
</code></pre><p>==========================================</p><p>Option 3: load with JLink:</p><p>==========================================</p><ol><li><p>Start JLink</p><p>$ JLinkExe -device CORTEX-A55 -if JTAG -jtagconf -1,-1 -speed 4000 -JLinkScriptFile <code>&lt;path_to&gt;</code>/imx93_ca55.JLinkScript</p></li></ol><p>1.1 Add -AutoConnect 1 to connect automatically</p><pre><code>$ JLinkExe -device CORTEX-A55 -if JTAG -jtagconf -1,-1 -speed 4000 -JLinkScriptFile &lt;path_to&gt;/imx93_ca55.JLinkScript -AutoConnect 1
</code></pre><ol start="2"><li>Connect JLink</li></ol><p>2.1 Connect to the debugger</p><pre><code>Type &quot;connect&quot; to establish a target connection, &#39;?&#39; for help
J-Link&gt;connect

You should now have a JLink prompt.

Cortex-A55 identified.
J-Link&gt;
</code></pre><ol start="3"><li><p>Load nuttx. Note that JLink expects the .elf extension, the default build output of nuttx is just &quot;nuttx&quot; without the extension, so it must be added to the file...</p><p>J-Link&gt;LoadFile <code>&lt;path_to&gt;</code>/nuttx.elf</p></li></ol><p>==========================================</p><p>Option 4: Run from SD-card, without u-boot</p><p>==========================================</p><ol><li>Make sure CONFIG_IMX9_BOOTLOADER is set and system is configured properly for bootloader operation:</li></ol><p>tools/configure.sh imx93-evk:bootloader</p><ol start="2"><li>The build outputs a file &quot;imx9-sdimage.img&quot;. This image also contains the Ahab container. It&#39;s required to grant Trusted Resource Domain Controller (TRDC) permissions. Flash it to an SD-card, where sdX may be sda or something else; verify the block device name properly (eg. /dev/sda, /dev/sdb etc):</li></ol><p>sudo dd if=imx9-sdimage.img of=/dev/sdX bs=1k &amp;&amp; sync</p><ol start="3"><li>Insert the SD-card into the imx93-evk, make sure BMODE switch is [1,2,3,4] = [Off, On, Off, Off] so that it boots from the SD-card.</li></ol><p>This should boot into NuttShell in EL3 level.</p><p>==========================================</p><p>Option 5: Kernel build, via AHAB boot</p><p>==========================================</p><ol><li><p>Follow the instructions at: <a href="https://spsdk.readthedocs.io/en/latest/examples/ahab/imx93/imx93%5C_ahab%5C_uboot.html" target="_blank" rel="noreferrer">https://spsdk.readthedocs.io/en/latest/examples/ahab/imx93/imx93\\_ahab\\_uboot.html</a> to create an eMMC-bootable image (latest version of instructions tested is v2.6.1). We will be replacing the u-boot binary in step 2.3 with NuttX.</p></li><li><p>Clone both NuttX and NuttX-Apps in same level directories <code>nuttx</code> and <code>apps</code> respectively.</p></li><li><p>Configure and build NuttX:</p></li></ol><p>cd nuttx tools/configure.sh imx93-evk:knsh make make export</p><ol start="4"><li>Build NuttX apps and prepare the /bin ROMFS image:</li></ol><p>pushd ../apps tools/mkimport.sh -z -x ../nuttx/nuttx-export-*.tar.gz make import tools/mkromfsimg.sh mv boot_romfsimg.h ../nuttx/boards/arm64/imx9/imx93-evk/include/bin_romfsimg.h popd</p><ol start="5"><li>Re-build NuttX embedding the generated /bin ROMFS image:</li></ol><p>make clean clean_context make</p><ol start="6"><li>Replace the value of the <code>u-boot:</code> entry in workspace/ahab_template.yaml created in step 1 above with the path to nuttx.bin.</li></ol>`,68)]))}const b=o(n,[["render",p]]);export{m as __pageData,b as default};
