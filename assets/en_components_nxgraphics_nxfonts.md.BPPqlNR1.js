import{_ as e,c as o,al as n,o as a}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"NX Fonts Support (NXFONTS)","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/nxgraphics/nxfonts.md","filePath":"en/components/nxgraphics/nxfonts.md"}'),s={name:"en/components/nxgraphics/nxfonts.md"};function i(r,t,l,h,d,p){return a(),o("div",null,t[0]||(t[0]=[n(`<h1 id="nx-fonts-support-nxfonts" tabindex="-1">NX Fonts Support (<code>NXFONTS</code>) <a class="header-anchor" href="#nx-fonts-support-nxfonts" aria-label="Permalink to &quot;NX Fonts Support (\`NXFONTS\`)&quot;">​</a></h1><h2 id="nxfonts-types" tabindex="-1">NXFONTS types <a class="header-anchor" href="#nxfonts-types" aria-label="Permalink to &quot;NXFONTS types&quot;">​</a></h2><h2 id="wide-font-support" tabindex="-1">Wide Font Support <a class="header-anchor" href="#wide-font-support" aria-label="Permalink to &quot;Wide Font Support&quot;">​</a></h2><p>Question:</p><pre><code>&gt; My team is trying the nuttx graphics with chinese fonts, but nx seems not
&gt; support fonts quantity more than 256 chars, right?
</code></pre><p>Answer:</p><pre><code>NuttX currently only uses fonts with 7-bit and 8-bit character sets. But
I believe that that limitation is mostly arbitrary. It should be a simple
extension to the font subsystem to use 16-bit fonts.
</code></pre><h3 id="adding-16-bit-font-support" tabindex="-1">Adding 16-Bit Font support <a class="header-anchor" href="#adding-16-bit-font-support" aria-label="Permalink to &quot;Adding 16-Bit Font support&quot;">​</a></h3><h4 id="current-7-8-bit-font-implementation" tabindex="-1">Current 7/8-bit Font Implementation <a class="header-anchor" href="#current-7-8-bit-font-implementation" aria-label="Permalink to &quot;Current 7/8-bit Font Implementation&quot;">​</a></h4><p>All of critical font interfaces allow for 16-bit character sets:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FAR const struct nx_fontbitmap_s *nxf_getbitmap(NXHANDLE handle, uint16_t ch)</span></span></code></pre></div><p>The character code is only used to look-up of a glyph in a table. There is a definition that controls the width of the character set: CONFIG_NXFONTS_CHARBITS. This currently defaults to 7 but all existing fonts support 8-bits.</p><p>My first guess is that the only thing that would have to change is that single file nxfonts_bitmaps.c (and the function nxf_getglyphset() in the file nxfonts_getfont.c) . nxfonts_bitmaps.c is used to auto-generate 7/8-bit font data sents. Here is how that works:</p><ul><li>Each 7-8 bit file is described by a header file like, for example, nxfonts_sans17x22.h.</li><li>At build time each of these header files is used to create a C file, like, nxfonts_bitmaps_sans17x22.c.</li><li>It creates the C file (like nxfonts_bitmaps_sans17x22.c) by compiling nxfonts_bitmaps.c and including nxfonts_sans17x22.h to create the font dataset at build time.</li></ul><p>The function nxf_getglyphset() in the file nxfonts_getfont.c selects the 7-bit font range (codes &lt; 128) or the 8-bit range (code &gt;= 128 &gt; 256). The fonts are kept in simple arrays splitting the data up into ranges of values lets you above the non-printable codes at the beginning and end of each range. There is even a comment in the code there &quot;Someday, perhaps 16-bit fonts will go here&quot;.</p><h4 id="adding-wide-fonts" tabindex="-1">Adding Wide Fonts <a class="header-anchor" href="#adding-wide-fonts" aria-label="Permalink to &quot;Adding Wide Fonts&quot;">​</a></h4><p>To add a single wide font, the easiest way would be to simply add the final .C file without going through the C auto-generation step. That should be VERY easy. (But since it has never been used with larger character sets, I am sure that there are bugs and things that need to be fixed).</p><p>If you want to add many wide fonts, then perhaps you would have to create a new version of the C auto-generation logic. That would require more effort.</p><p>I am willing to help and advise. Having good wide character support in the NuttX graphics would be an important improvement to NuttX. This is not a lot of code nor is it very difficult code so you should not let it be an obstacle for you.</p><h3 id="font-storage-issues" tabindex="-1">Font Storage Issues <a class="header-anchor" href="#font-storage-issues" aria-label="Permalink to &quot;Font Storage Issues&quot;">​</a></h3><p>One potential problem may be the amount of memory required by fonts with thousands of characters. If you have a lot of flash, it may not be a problem, but on many microcontrollers it will be quite limiting.</p><p>Options are:</p><ul><li><strong>Font Compression</strong> Addition of some font compression algorithm in NuttX. However, Chinese character bitmaps do not compress well: Many of them contain so much data that there is not much of anything to compress. Some actually expand under certain compression algorithms.</li><li><strong>Mass Storage</strong> A better option would be put the wide the fonts in file system, in NAND or serial FLASH or on an SD card. In this case, additional logic would be required to (1) format a font binary file and to (2) access the font binary from the file system as needed.</li></ul>`,23)]))}const f=e(s,[["render",i]]);export{u as __pageData,f as default};
