import{_ as a,c as o,al as t,o as i}from"./chunks/framework.NFAqBSgQ.js";const n="/assets/seeed-xiao-samd21.9RSxM_Nr.jpg",g=JSON.parse('{"title":"Seeed Studio XIAO SAMD21","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/samd2l2/boards/xiao-seeeduino/index.md","filePath":"en/platforms/arm/samd2l2/boards/xiao-seeeduino/index.md"}'),s={name:"en/platforms/arm/samd2l2/boards/xiao-seeeduino/index.md"};function l(r,e,d,p,h,c){return i(),o("div",null,e[0]||(e[0]=[t('<h1 id="seeed-studio-xiao-samd21" tabindex="-1">Seeed Studio XIAO SAMD21 <a class="header-anchor" href="#seeed-studio-xiao-samd21" aria-label="Permalink to &quot;Seeed Studio XIAO SAMD21&quot;">​</a></h1><p>The <a href="https://wiki.seeedstudio.com/Seeeduino-XIAO/" target="_blank" rel="noreferrer">Seeed Studio Xiao SAM21</a> is the first of the XIAO family, and is a general purpose, low-power and tiny board. It can be referred to as the &quot;Seeed Studio Xiao SAMD21&quot; or the &quot;Xiao Seeeduino&quot;.</p><p><img src="'+n+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>ATSAMD21G18A-MU microcontroller chip @48MHz</li><li>256KB flash</li><li>32KB SRAM</li><li>14 pins (11 analog, 11 digital)</li><li>10 PWM interfaces</li><li>1 DAC output pin</li><li>Serial wire debug interface</li><li>1 I2C interface</li><li>1 SPI interface</li><li>1 UART interface</li><li>USBC interface</li><li>Serial communication indicator LEDs for TX and RX (blue)</li><li>Power indicator LED (green)</li><li>Blinkable LED (yellow)</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default, the serial console appears on the board&#39;s UART interface. Pin 9 is TX and pin 7 is RX.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pins are numbered anticlockwise from the USB connector.</p><p>Pin Signal Notes</p><hr><p>0 PA2 A0/D0/DAC 1 PA4 A1/D1 2 PA10 A2/D2 3 PA11 A3/D3 4 PA8 A4/D4/SDA (I2C) 5 PA9 A5/D5/SCL (I2C) 6 PB08 A6/D6/TX (UART) 7 PB09 A7/D7/RX (UART) 8 PA7 A8/D8/SCK (SPI) 9 PA5 A9/D9/MISO (SPI) 10 11 12 PA6 3V3 GND A10/D10/MOSI (SPI) 13 5V You can supply 5V power on this pin too.</p><p>There are also four pads on the back side of the board. SWCLK, SWDIO for serial wire debugging, and RST and GND for resetting the board. These same two pins are also exposed on the top of the board.</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>The board can be powered through a USB-C connection. It can also be supplied 5V power through it&#39;s 5V power pin.</p><p>There is an additional two pads for powering the board (VIN and GND) on the back side. The board accepts anywhere between 3.3V and 5V.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>To build NuttX for the Xiao Seeduino, you can use the following configuration commands within the cloned <code>nuttx</code> repository:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./tools/configure.sh xiao-seeeduino:nsh</span></span>
<span class="line"><span> make</span></span></code></pre></div><p>This will generate a <code>nuttx.hex</code> file. To put the program on your board, you can choose from one of the following:</p><ol><li><p>Convert the hex file to a uf2 file using the <a href="https://github.com/microsoft/uf2/" target="_blank" rel="noreferrer">Microsoft uf2 tool</a>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/microsoft/uf2.git</span></span>
<span class="line"><span> cd uf2/utils</span></span>
<span class="line"><span> python uf2conv.py -f 0x68ed2b88 -b 0x2000 nuttx.hex -o nuttx.uf2</span></span></code></pre></div><p>Then, plug your board into the host computer using the USB-C interface. Short the RST (reset) pad with ground twice in a row quickly. The board will be detected as mass storage under the name &quot;Arduino&quot;, and its orange LED will be pulsing slowly. You can then copy the UF2 file to the drive/storage device which appears. Once the file is done copying, the board will auto-eject and you will have an NSH console on the UART pins!</p><p>Maybe this process should be part of the post-build scripts, since the Microsoft UF2 tools is MIT licensed.</p></li><li><p>Flash the hex file using the <code>bossac</code> tool. You can find the source for it <a href="https://github.com/shumatech/BOSSA/" target="_blank" rel="noreferrer">here</a>, or you can install it on Arch Linux via the AUR with this command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> yay -S bossa</span></span></code></pre></div><p>Then, plug your Seeduino in via USB-C to the host computer and short the RST (reset) and ground pins twice in a row quickly. The board will be detected as mass storage under the name &quot;Arduino&quot;, and its orange LED should be pulsing. You can then run the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo stty -F &lt;path/to/xiao-USB-port&gt; 1200</span></span>
<span class="line"><span> sudo bossac -i -d --port=&lt;path/to/xiao-USB-port&gt; -i -w -v nuttx.hex -R</span></span></code></pre></div><p>The <code>bossac</code> utility doesn&#39;t actually work for programming in my testing yet. It is what the Arduino IDE uses but I haven&#39;t managed to get the command line working. Using the commands listed above does actually detect the board but the programming itself fails with &quot;Flash command failed&quot;. This needs more debugging.</p></li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration with the console enabled on the UART interface at 115200 bps. Comes with &quot;Hello world&quot; demo.</p>`,24)]))}const b=a(s,[["render",l]]);export{g as __pageData,b as default};
