import{_ as i,c as s,al as a,o as t}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"spislv SPI slave example","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/spislv_test/index.md","filePath":"en/applications/examples/spislv_test/index.md"}'),n={name:"en/applications/examples/spislv_test/index.md"};function l(p,e,o,r,d,h){return t(),s("div",null,e[0]||(e[0]=[a('<h1 id="spislv-spi-slave-example" tabindex="-1"><code>spislv</code> SPI slave example <a class="header-anchor" href="#spislv-spi-slave-example" aria-label="Permalink to &quot;`spislv` SPI slave example&quot;">​</a></h1><p>A simple example for the device functioning as an SPI slave. This example can be used to validate communication with another device operating as an SPI master. This example contains a hardcoded buffer, which is: {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}. Whenever data is received, this example will send the same number of bytes received, consuming the hardcoded buffer in a circular manner. and the following command is sent:</p><p><code>spi exch -x 4 deadbeef</code></p><p>The expected response in device running spislv_test app is:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Queued</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sending</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 02</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 03</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 04</span></span></code></pre></div><p>This test requires the device to be configured in SPI slave mode.(your specific spi slave hardware settings might require additional settings).</p><p>Specific configuration options for this example include: Configs inside &lt;&gt; are the options that you need to find, It are arch de-pendent and might be different for your board.</p><ul><li><code>&lt;Enable SPI Peripheral Support&gt;</code> – Enables SPI peripheral support in System Type-&gt;Peripheral Support.</li><li><code>&lt;Configure SPI&gt;</code> – Configures SPI peripheral in System Type-&gt;SPI configuration. Set here the right pins to be used for SPI communication.</li><li><code>CONFIG_SPI</code> – In the SPI driver support, enable SPI Slave support.</li><li><code>CONFIG_SPI_SLAVE</code> – Enables SPI Slave support.</li><li><code>SPI_SLAVE_DRIVER</code> – Enables SPI Slave character driver.</li><li><code>&lt;Configure SPI&gt;</code> – Return to this option and enable SPI Slave mode.</li></ul>',8)]))}const m=i(n,[["render",l]]);export{u as __pageData,m as default};
