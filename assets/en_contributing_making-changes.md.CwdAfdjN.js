import{_ as s,c as e,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const d=JSON.parse('{"title":"Making Changes Using Git","description":"","frontmatter":{},"headers":[],"relativePath":"en/contributing/making-changes.md","filePath":"en/contributing/making-changes.md"}'),i={name:"en/contributing/making-changes.md"};function p(o,a,l,c,r,h){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="making-changes-using-git" tabindex="-1">Making Changes Using Git <a class="header-anchor" href="#making-changes-using-git" aria-label="Permalink to &quot;Making Changes Using Git&quot;">​</a></h1><p>The Apache NuttX project uses the <a href="https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control" target="_blank" rel="noreferrer">Git version control system</a> to track changes, and the source code is hosted on <a href="https://www.github.com" target="_blank" rel="noreferrer">GitHub</a>.</p><p>If you want to make changes to NuttX, for your own personal use, or to submit them back to project to improve NuttX, that&#39;s easy. For the purposes of this guide, you&#39;ll need a <a href="https://www.github.com" target="_blank" rel="noreferrer">GitHub</a> account, since the Apache NuttX team uses GitHub. (You could also use git locally, or save your changes to other sites like <a href="https://about.gitlab.com/" target="_blank" rel="noreferrer">GitLab</a> or <a href="https://bitbucket.org" target="_blank" rel="noreferrer">BitBucket</a>, but that&#39;s beyond the scope of this guide).</p><p>Here&#39;s how to do it:</p><ol><li><p>Set your git user name and email</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx/</span></span>
<span class="line"><span> git config --global user.name &quot;Your Name&quot;</span></span>
<span class="line"><span> git config --global user.email &quot;yourname@somedomaincom&quot;</span></span></code></pre></div></blockquote></li><li><p>Sign in to GitHub</p><p>If you don&#39;t have a <a href="https://www.github.com" target="_blank" rel="noreferrer">GitHub</a> account, it&#39;s free to sign up.</p></li><li><p>Fork the Projects</p><p>Visit both these links and hit the Fork button in the upper right of the page:</p><ul><li><a href="https://github.com/apache/nuttx/" target="_blank" rel="noreferrer">NuttX</a></li><li><a href="https://github.com/apache/nuttx-apps/" target="_blank" rel="noreferrer">NuttX Apps</a></li></ul></li><li><p>Clone the Repositories</p><p>On the GitHub web page for your forked <code>nuttx</code> project, copy the clone url -- get it by hitting the green <code>Clone or Download</code> button in the upper right. Then do this:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone &lt;your forked nuttx project clone url&gt; nuttx</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> git remote add upstream https://github.com/apache/nuttx.git</span></span></code></pre></div></blockquote><p>Do the same for your forked <code>nuttx-apps</code> project:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd ..</span></span>
<span class="line"><span> git clone &lt;your forked nuttx-apps project clone url&gt; apps</span></span>
<span class="line"><span> cd apps</span></span>
<span class="line"><span> git remote add upstream https://github.com/apache/nuttx-apps.git</span></span></code></pre></div></blockquote></li><li><p>Create a Local Git Branch</p><p>Now you can create local git branches and push them to GitHub:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git checkout -b test/my-new-branch</span></span>
<span class="line"><span> git push</span></span></code></pre></div></blockquote></li></ol><h2 id="git-workflow-with-an-upstream-repository" tabindex="-1">Git Workflow With an Upstream Repository <a class="header-anchor" href="#git-workflow-with-an-upstream-repository" aria-label="Permalink to &quot;Git Workflow With an Upstream Repository&quot;">​</a></h2><p>The main NuttX git repository is called an &quot;upstream&quot; repository - this is because it&#39;s the main source of truth, and its changes flow downstream to people who&#39;ve forked that repository, like us.</p><p>Working with an upstream repo is a bit more complex, but it&#39;s worth it since you can submit fixes and features to the main NuttX repos. One of the things you need to do regularly is keep your local repo in sync with the upstream. I work with a local branch, make changes, pull new software from the upstream and merge it in, maybe doing that several times. Then when everything works, I get my branch ready to do a Pull Request. Here&#39;s how:</p><ol><li><p>Fetch upstream changes and merge into my local master:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git checkout master</span></span>
<span class="line"><span> git fetch upstream</span></span>
<span class="line"><span> git merge upstream/master</span></span>
<span class="line"><span> git push</span></span></code></pre></div></blockquote></li><li><p>Merge my local master with my local branch:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git checkout my-local-branch</span></span>
<span class="line"><span> git merge master</span></span>
<span class="line"><span> git push</span></span></code></pre></div></blockquote></li><li><p>Make changes and push them to my fork</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> vim my-file.c</span></span>
<span class="line"><span> git add my-file.c</span></span>
<span class="line"><span> git commit my-file.c</span></span>
<span class="line"><span> git push</span></span></code></pre></div></blockquote></li><li><p>Repeat 1-3 as necessary</p></li><li><p>Run the <code>tools/checkpatch.sh</code> script on your files</p><p>When your code runs, then you&#39;re almost ready to submit it. But first you need to check the code to ensure that it conforms to the NuttX <code>contributing/coding_style:C Coding Standard</code>{.interpreted-text role=&quot;ref&quot;}. The <code>tools/checkpatch.sh</code> script will do that. Here&#39;s the usage info:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./tools/checkpatch.sh -h</span></span>
<span class="line"><span>USAGE: ./tools/checkpatch.sh [options] [list|-]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>-h</span></span>
<span class="line"><span>-c spell check with codespell(install with: pip install codespell</span></span>
<span class="line"><span>-r range check only (used with -p and -g)</span></span>
<span class="line"><span>-p &lt;patch list&gt; (default)</span></span>
<span class="line"><span>-g &lt;commit list&gt;</span></span>
<span class="line"><span>-f &lt;file list&gt;</span></span>
<span class="line"><span>-  read standard input mainly used by git pre-commit hook as below:</span></span>
<span class="line"><span>   git diff --cached | ./tools/checkpatch.sh -</span></span></code></pre></div></blockquote><p>Run it against your files and correct all the errors in the code you added, so that <code>tools/checkpatch.sh</code> reports no errors. Then commit the result. For example:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./tools/checkpatch.sh -f my-file.c</span></span>
<span class="line"><span>arch/arm/src/sama5/hardware/my-file.c:876:82: warning: Long line found</span></span>
<span class="line"><span> # fix errors</span></span>
<span class="line"><span> vim my-file.c</span></span>
<span class="line"><span> # run again</span></span>
<span class="line"><span> ./tools/checkpatch.sh -f my-file.c</span></span></code></pre></div></blockquote><p>If you have made a lot of changes, you can also use this bash commandline to see the errors for all the changed C files in your branch (assumes you are currently on the branch that has the changed files):</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git diff --name-only master | egrep &quot;\\.c|\\.h&quot; | xargs echo | xargs ./tools/checkpatch.sh -f | less</span></span></code></pre></div></blockquote><p>Note that there are some bugs in the <code>nxstyle</code> program that <code>checkpatch.sh</code> uses, so it may report a few errors that are not actually errors. The committers will help you find these. (Or view the <a href="https://github.com/apache/nuttx/issues?q=is%3Aissue+is%3Aopen+nxstyle" target="_blank" rel="noreferrer">nxstyle Issues</a>.)</p></li><li><p>Commit the fixed files</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git add my-file.c</span></span>
<span class="line"><span> git commit my-file.c</span></span>
<span class="line"><span> git push</span></span></code></pre></div></blockquote></li></ol><h2 id="submitting-your-changes-to-nuttx" tabindex="-1">Submitting Your Changes to NuttX <a class="header-anchor" href="#submitting-your-changes-to-nuttx" aria-label="Permalink to &quot;Submitting Your Changes to NuttX&quot;">​</a></h2><blockquote><p>Pull requests let you tell others about changes you&#39;ve pushed to a branch in a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch.</p><p>(from GitHub&#39;s <a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests" target="_blank" rel="noreferrer">About pull requests</a> page)</p></blockquote><p>Before you do a Pull Request, the NuttX team will usually want all the changes you made in your branch &quot;squashed&quot; into a single commit, so that when they review your changes, there&#39;s a clean view of the history. If there are changes after Pull Request review feedback, they can be separate commits. Here&#39;s the easiest way I found to do that initial squash before submitting the Pull Request:</p><ol><li><p>Check out my branch</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git checkout my-branch</span></span></code></pre></div></blockquote></li><li><p>Fetch the upstream code</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git fetch upstream</span></span></code></pre></div></blockquote></li><li><p>Rebase onto the upstream code</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git rebase upstream/master</span></span></code></pre></div></blockquote></li><li><p>Push to your remote</p><p>This needs to a force push with <code>-f</code>.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git push -u my-branch -f</span></span></code></pre></div></blockquote></li><li><p>Create a GitHub Pull Request</p><p>A Pull Request is how you ask your upstream to review and merge your changes.</p><p>Here&#39;s <a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request" target="_blank" rel="noreferrer">GitHub&#39;s instructions for creating a Pull Request</a>.</p><p>It is important to include an informative commit title and a commit message.</p><p>In the commit title please include the subsystem/area related to your contribution, followed by a descriptive message. Some examples:</p><blockquote><p>Adding or fixing a platform</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arch/arm/stm32/: Add arch support for stm32 platform</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This patch adds initial support for stm32 platform. Please read</span></span>
<span class="line"><span>the documentation included for more details how to wire the display.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Signed-off-by: Your Name &lt;you@whoareyou.com&gt;</span></span></code></pre></div><p>Adding or fixing a board</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arm/stm32f4discover: Add board initialization for SSD1306 OLED Display</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This patch adds support to use the display SSD1306 on I2C1, please read</span></span>
<span class="line"><span>the documentation included for more details how to wire the display.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Signed-off-by: Your Name &lt;you@whoareyou.com&gt;</span></span></code></pre></div></blockquote><p>Another example, submitting a commit to fix an issue in the fictional sensor xyz123:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sensors/xyz123: Fix a pressure conversion resolution issue</span></span>
<span class="line"><span></span></span>
<span class="line"><span>I found an issue in the XYZ123 sensor when converting the</span></span>
<span class="line"><span>pressure. The raw value should be divided by 4.25 instead</span></span>
<span class="line"><span>of 4.52.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Signed-off-by: Your Name &lt;you@whoareyou.com&gt;</span></span></code></pre></div></blockquote><p>You can search in the github commit history for more examples.</p></li><li><p>Get Pull Request feedback and implement changes</p><p>Get suggestions for improvements from reviewers, make changes, and push them to the branch. Once the reviewers are happy, they may suggest squashing and merging again to make a single commit. In this case you would repeat steps 1 through 6.</p></li></ol><h2 id="how-to-include-the-suggestions-on-your-pull-request" tabindex="-1">How to Include the Suggestions on Your Pull Request? <a class="header-anchor" href="#how-to-include-the-suggestions-on-your-pull-request" aria-label="Permalink to &quot;How to Include the Suggestions on Your Pull Request?&quot;">​</a></h2><p>If you submitted your first PR (Pull Request) and received some feedbacks to modify your commit, then probably you already modified it and created a new commit with these modifications and submitted it.</p><p>Also probably you saw that this new commit appeared on your Pull Request at NuttX&#39;s github page (at Commits tab).</p><p>So, someone will ask you some enigmatic thing: &quot;Please rebase and squash these commits!&quot;</p><p>Basically what they are saying is that you need to update your repository and fuse your commits in a single commit.</p><p>Let walk through the steps to do it!</p><p>Move to upstream branch and pull the new commits from there:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git checkout upstream</span></span>
<span class="line"><span> git pull</span></span></code></pre></div></blockquote><p>Return to your working branch and rebase it with upstream:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git checkout my-branch</span></span>
<span class="line"><span> git rebase upstream</span></span></code></pre></div></blockquote><p>If you run git log will see that your commits still there:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git log</span></span>
<span class="line"><span>commit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (HEAD -&gt; firstpr, upstream/master, upstream)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Author: Me Myself</span></span>
<span class="line"><span>Date: Today few seconds ago</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Fix suggestions from mainline</span></span>
<span class="line"><span></span></span>
<span class="line"><span>commit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Author: Me Myself</span></span>
<span class="line"><span>Date: Today few minutes ago</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Initial support for something fantastic</span></span>
<span class="line"><span></span></span>
<span class="line"><span>commit 6aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span>
<span class="line"><span>Author: Xiang Xiao &lt;xiaoxiang@xiaomi.com&gt;</span></span>
<span class="line"><span>Date:   Sun Dec 18 00:00:00 2022 +0800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Some existing commit from mainline</span></span></code></pre></div></blockquote><p>See, you have two commits (Fix suggestions... and Initial support...), we can squash both in a single commit!</p><p>You can use the git rebase interactive command to squash both commits:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git rebase -i HEAD~2</span></span></code></pre></div></blockquote><p>Note: case you had 3 commits, then you should replace HEAD~2 with HEAD~3 and so on.</p><p>This command will open the nano editor with this screen:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pick 10ef3900b2 Initial support for something fantastic</span></span>
<span class="line"><span>pick 9431582586 Fix suggestions from mainline</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Rebase 9b0e1659ea..9431582586 onto 9b0e1659ea (2 commands)</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Commands:</span></span>
<span class="line"><span># p, pick &lt;commit&gt; = use commit</span></span>
<span class="line"><span>...</span></span></code></pre></div></blockquote><p>Here you can control the actions that git will execute over your commits.</p><p>Because we want to squash the second commit with the first you need to replace the &#39;pick&#39; of the second line with a &#39;squash&#39; (or just a &#39;s&#39;) this way:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pick 10ef3900b2 Initial support for something fantastic</span></span>
<span class="line"><span>squash 9431582586 Fix suggestions from mainline</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Rebase 9b0e1659ea..9431582586 onto 9b0e1659ea (2 commands)</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Commands:</span></span>
<span class="line"><span># p, pick &lt;commit&gt; = use commit</span></span>
<span class="line"><span>...</span></span></code></pre></div></blockquote><p>Now just press [Ctrl + X]{.title-ref} to save this modification. In the next screen you can edit your git commit messages. After that press Ctrl</p><ul><li>X again to save.</li></ul><p>If you run git log again will see that now there is one a single commit:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git log</span></span>
<span class="line"><span>commit xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (HEAD -&gt; firstpr, upstream/master, upstream)</span></span>
<span class="line"><span>Author: Me Myself</span></span>
<span class="line"><span>Date: Right now baby, right now</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Initial support for something fantastic</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This commit includes the suggestions from mainline</span></span>
<span class="line"><span></span></span>
<span class="line"><span>commit 6aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span>
<span class="line"><span>Author: Xiang Xiao &lt;xiaoxiang@xiaomi.com&gt;</span></span>
<span class="line"><span>Date:   Sun Dec 18 00:00:00 2022 +0800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Some existing commit from mainline</span></span></code></pre></div></blockquote><p>Just push forced this new commit to your repository:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git push -f</span></span></code></pre></div></blockquote><p>Now you can look at your PR at NuttX&#39;s github to confirm that this squashed commit is there.</p><h2 id="git-resources" tabindex="-1">Git Resources <a class="header-anchor" href="#git-resources" aria-label="Permalink to &quot;Git Resources&quot;">​</a></h2><ul><li><a href="https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf" target="_blank" rel="noreferrer">Git Cheat Sheet (by GitHub)</a></li><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noreferrer">Git Book (online)</a></li><li><a href="https://cwiki.apache.org/confluence/display/NUTTX/Code+Contribution+Workflow" target="_blank" rel="noreferrer">NuttX Code Contribution Workflow (draft)</a> -- All the details are here if you need them!</li></ul>`,43)]))}const g=s(i,[["render",p]]);export{d as __pageData,g as default};
