import{_ as a,c as t,al as s,o as n}from"./chunks/framework.NFAqBSgQ.js";const i="/assets/nxflat-addressing.B7ySCBRq.png",f=JSON.parse('{"title":"NuttX FLAT Binary Format (NXFLAT)","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/filesystem/nxflat.md","filePath":"en/components/filesystem/nxflat.md"}'),o={name:"en/components/filesystem/nxflat.md"};function r(l,e,p,c,d,h){return n(),t("div",null,e[0]||(e[0]=[s('<h1 id="nuttx-flat-binary-format-nxflat" tabindex="-1">NuttX FLAT Binary Format (NXFLAT) <a class="header-anchor" href="#nuttx-flat-binary-format-nxflat" aria-label="Permalink to &quot;NuttX FLAT Binary Format (NXFLAT)&quot;">​</a></h1><p>Warning</p><p>Migrated from: <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139630111" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139630111</a></p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>NuttX supports a configurable [[binary loader &lt;../binfmt&gt;]{.title-ref} .]([binary loader &lt;../binfmt&gt;]{.title-ref} ..md) This binary loader supports loading and executing binary objects from the file system. The NuttX binary loader is capable of supporting multiple binary formats. One of of those binary formats is NXFLAT, the top of this Wiki page.</p><p>NXFLAT is a customized and simplified version of binary format implemented a few years ago called XFLAT. With the NXFLAT binary format you will be able to do the following:</p><ul><li>Place separately linked programs in a file system, and</li><li>Execute those programs by dynamically linking them to the base NuttX code.</li></ul><p>This allows you to extend the NuttX base code after it has been written into FLASH. One motivation for implementing NXFLAT is support clean CGI under an HTTPD server.</p><p>This feature is especially attractive when combined with the NuttX ROMFS support: ROMFS allows you to execute programs in place (XIP) in flash without copying anything other than the .data section to RAM. In fact, the initial NXFLAT release only worked on ROMFS. Later extensions also support execution NXFLAT binaries from an SRAM copy as well.</p><p>This NuttX feature includes:</p><ul><li>A dynamic loader that is built into the NuttX core (See SVN).</li><li>Minor changes to RTOS to support position independent code, and</li><li>A linker to bind ELF binaries to produce the NXFLAT binary format (See SVN).</li></ul><h2 id="toolchain-compatibility-problem" tabindex="-1">Toolchain Compatibility Problem <a class="header-anchor" href="#toolchain-compatibility-problem" aria-label="Permalink to &quot;Toolchain Compatibility Problem&quot;">​</a></h2><h3 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h3><p>NXFLAT flat requires a specific kind of position independence. The ARM family of GCC toolchains has historically supported this method of position independence: All code addresses are accessed relative to the Program Counter (PC) and a special, [PIC register]{.title-ref} (usually <code>r10</code>) is used to access all data. To load or store a data value, the contents of <code>r10</code>, the PIC base, is added to a constant, position-independent offset to produce the absolute address of the data.</p><p><img src="'+i+`" alt="image"></p><p>The [Global Offset Table]{.title-ref} (GOT) is a special data structure that resides in D-Space. So PIC-base relative addressing may also be specified as GOT-Relative addressing (or <code>GOTOFF</code>). The older GCC 4.3.3 GCC compiler, for example, generates <code>GOTOFF</code> relocations to the constant strings, like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.L3:</span></span>
<span class="line"><span>        .word   .LC0(GOTOFF)</span></span>
<span class="line"><span>        .word   .LC1(GOTOFF)</span></span>
<span class="line"><span>        .word   .LC2(GOTOFF)</span></span>
<span class="line"><span>        .word   .LC3(GOTOFF)</span></span>
<span class="line"><span>        .word   .LC4(GOTOFF)</span></span></code></pre></div><p>Where <code>.LC0</code>, <code>.LC1</code>, <code>.LC2</code>, <code>.LC3</code>, and <code>.LC4</code> are the labels corresponding to strings in the <code>.rodata.str1.1</code> section. One consequence of this is that <code>.rodata</code> must reside in D-Space since it will addressed relative to the GOT (see the section entitled &quot;Read-Only Data in RAM&quot; here).</p><p>The newer 4.6.3 GCC compiler, however, generated PC relative relocations to these same strings:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.L2:</span></span>
<span class="line"><span>    .word   .LC0-(.LPIC0+4)</span></span>
<span class="line"><span>    .word   .LC1-(.LPIC1+4)</span></span>
<span class="line"><span>    .word   .LC2-(.LPIC2+4)</span></span>
<span class="line"><span>    .word   .LC3-(.LPIC4+4)</span></span>
<span class="line"><span>    .word   .LC4-(.LPIC5+4)</span></span></code></pre></div><p>These are [PC-Relative]{.title-ref} relocations. This means that the string data is address not by an offset relative to the PIC register (<code>r10</code>) but to the program count (PC). This is good and bad. This is good because it means that <code>.rodata.str1.1</code> must now can now reside in FLASH with <code>.text</code> and can be accessed using PC-relative addressing. That can be accomplished by simply moving the <code>.rodata</code> from the <code>.data</code> section to the <code>.text</code> section in the linker script. The NXFLAT linker script is located at <code>nuttx/binfmt/libnxflat/gnu-nxflat-?.ld</code>. <strong>NOTE</strong>: There are two linker scripts located at <code>nuttx/binfmt/libnxflat/</code>:</p><ol><li><code>binfmt/libnxflat/gnu-nxflat-gotoff.ld.</code> Older versions of GCC (at least up to GCC 4.3.3), use GOT-relative addressing to access RO data. In that case, read-only data (<code>.rodata</code>) must reside in D-Space and this linker script should be used.</li><li><code>binfmt/libnxflat/gnu-nxflat-pcrel.ld.</code> Newer versions of GCC (at least as of GCC 4.6.3), use PC-relative addressing to access RO data. In that case, read-only data (<code>.rodata</code>) must reside in I-Space and this linker script should be used.</li></ol><p>But this is very bad because a lot of NXFLAT is now broken. For it appears that not just constant strings, but that all data may now be referenced using PC-relative addressing to .bss and .data values. I do not yet know the extent of this problem or the direction that GCC is going but certainly version 4.6.3 cannot be used with NXFLAT.</p><p>The workaround for now is to use the older, 4.3.3 OABI compiler. In the long run, this might spell the end to NXFLAT.</p><h3 id="update-restored-gcc-support" tabindex="-1">Update: Restored GCC Support <a class="header-anchor" href="#update-restored-gcc-support" aria-label="Permalink to &quot;Update: Restored GCC Support&quot;">​</a></h3><p>This post was pointed out by Michael Jung:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MCU: STM32F4 (ARM Cortex M4)</span></span>
<span class="line"><span>Build environment: arm-none-eabi-gcc 4.8.4 20140725</span></span>
<span class="line"><span></span></span>
<span class="line"><span>My goal is to build an image that can be run from any properly-aligned</span></span>
<span class="line"><span>offset in internal flash (i.e., position-independent).  I found the</span></span>
<span class="line"><span>following set of gcc flags that achieves this goal:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Generate position independent code.</span></span>
<span class="line"><span>    -fPIC</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Access bss via the GOT.</span></span>
<span class="line"><span>    -mno-pic-data-is-text-relative</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # GOT is not PC-relative; store GOT location in a register.</span></span>
<span class="line"><span>    -msingle-pic-base</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Store GOT location in r9.</span></span>
<span class="line"><span>    -mpic-register=r9</span></span></code></pre></div><p>Reference: <a href="https://gcc.gnu.org/ml/gcc-help/2015-07/msg00027.html" target="_blank" rel="noreferrer">https://gcc.gnu.org/ml/gcc-help/2015-07/msg00027.html</a></p><p>Michael has verified that <code>-mno-pic-data-is-text-relative</code> is, indeed, a solution to the above NXFLAT problem in newer compilers. You simply need to modify the board Make.defs file like:</p><ol><li>ARCHPICFLAGS = -fpic -msingle-pic-base -mpic-register=r10</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+ARCHPICFLAGS = -fpic -msingle-pic-base -mpic-register=r10 -mno-pic-data-is-text-relative</span></span></code></pre></div><p>NOTE the minor difference from the post: NuttX uses <code>r10</code> as the PIC base register by default in all configurations.</p><p>See this <a href="https://groups.google.com/forum/" target="_blank" rel="noreferrer">thread</a> for additional information.</p><h3 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h3><ul><li>[[NXFLAT &lt;../nxflat&gt;]{.title-ref}]([NXFLAT &lt;../nxflat&gt;]{.title-ref}.md)</li><li><a href="http://xflat.sourceforge.net/" target="_blank" rel="noreferrer">XFLATFLAT</a></li><li><a href="http://retired.beyondlogic.org/uClinux/bflt.htm" target="_blank" rel="noreferrer">FLAT</a></li><li><a href="http://romfs.sourceforge.net/" target="_blank" rel="noreferrer">ROMFS</a></li></ul>`,35)]))}const g=a(o,[["render",r]]);export{f as __pageData,g as default};
