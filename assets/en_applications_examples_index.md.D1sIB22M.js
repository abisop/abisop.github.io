import{_ as a,c as t,al as o,o as l}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Examples","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/index.md","filePath":"en/applications/examples/index.md"}'),n={name:"en/applications/examples/index.md"};function i(s,e,r,c,p,d){return l(),t("div",null,e[0]||(e[0]=[o(`<h1 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h1><h2 id="selecting-examples" tabindex="-1">Selecting Examples <a class="header-anchor" href="#selecting-examples" aria-label="Permalink to &quot;Selecting Examples&quot;">​</a></h2><p>The examples directory contains several sample applications that can be linked with NuttX. The specific example is selected in the <code>boards/&lt;arch-name&gt;/&lt;chip-name&gt;/&lt;board-name&gt;/configs/&lt;config&gt;/defconfig</code> file via the <code>CONFIG_EXAMPLES_xyz</code> setting where <code>xyz</code> is the name of the example. For example:</p><pre><code>CONFIG_EXAMPLES_HELLO=y
</code></pre><p>Selects the <code>examples/hello</code> &quot;Hello, World!&quot; example.</p><h2 id="built-in-functions" tabindex="-1">Built-In Functions <a class="header-anchor" href="#built-in-functions" aria-label="Permalink to &quot;Built-In Functions&quot;">​</a></h2><p>Some of the examples may be built as built-in functions that can be executed at run time (rather than as NuttX main programs). These built-in examples can be also be executed from the NuttShell (NSH) command line. In order to configure these built-in NSH functions, you have to set up the following:</p><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> -- Enable support for external registered, named applications that can be executed from the NSH command line (see <code>apps/README.md</code> for more information).</li></ul><h2 id="supported-examples" tabindex="-1">Supported examples <a class="header-anchor" href="#supported-examples" aria-label="Permalink to &quot;Supported examples&quot;">​</a></h2>`,9)]))}const u=a(n,[["render",i]]);export{h as __pageData,u as default};
