import{_ as t,c as o,al as a,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"ST Nucleo L552ZE-Q","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32l5/boards/nucleo-l552ze/index.md","filePath":"en/platforms/arm/stm32l5/boards/nucleo-l552ze/index.md"}'),i={name:"en/platforms/arm/stm32l5/boards/nucleo-l552ze/index.md"};function r(s,e,l,u,h,d){return n(),o("div",null,e[0]||(e[0]=[a(`<h1 id="st-nucleo-l552ze-q" tabindex="-1">ST Nucleo L552ZE-Q <a class="header-anchor" href="#st-nucleo-l552ze-q" aria-label="Permalink to &quot;ST Nucleo L552ZE-Q&quot;">​</a></h1><p>chip:stm32, chip:stm32l5, chip:stm32l552</p><p>This page discusses the port of NuttX to the STMicro Nucleo-L552ZE board. That board features the STM32L552ZET6Q MCU with 512KiB of FLASH and 256KiB of SRAM.</p><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>2021-03-03: The board now boots and the basic NSH configuration works without problem.</p><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>The Board provides a 3 user LEDs, LD1-LD3 LED1 (Green) PC_7 LED2 (Blue) PB_7 LED3 (Red) PA_9</p><ul><li>When the I/O is HIGH value, the LEDs are on.</li><li>When the I/O is LOW, the LEDs are off.</li></ul><p>These LEDs are not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/stm32_autoleds.c. The LEDs are used to encode OS related events as follows when the LEDs are available:</p><blockquote><p>SYMBOL Meaning RED GREEN Note</p><hr><p>LED_STARTED NuttX has been started OFF OFF OFF LED_HEAPALLOCATE Heap has been allocated OFF OFF ON LED_IRQSENABLED Interrupts enabled OFF ON OFF LED_STACKCREATED Idle stack created OFF ON ON LED_INIRQ In an interrupt NC NC ON (momentary) LED_SIGNAL In a signal handler NC ON OFF (momentary) LED_ASSERTION An assertion failed ON NC ON (momentary) LED_PANIC The system has crashed ON OFF OFF (flashing 2Hz) LED_IDLE MCU is is sleep mode ON OFF OFF</p></blockquote><p>OFF - means that the OS is still initializing. Initialization is very fast</p><p>: so if you see this at all, it probably means that the system is hanging up somewhere in the initialization phases.</p><p>GREEN - This means that the OS completed initialization.</p><p>BLUE - Whenever and interrupt or signal handler is entered, the BLUE LED is</p><p>: illuminated and extinguished when the interrupt or signal handler exits.</p><p>VIOLET - If a recovered assertion occurs, the RED and blue LED will be</p><p>: illuminated briefly while the assertion is handled. You will probably never see this.</p><p>Flashing RED - In the event of a fatal crash, all other LEDs will be</p><p>: extinguished and RED LED will FLASH at a 2Hz rate.</p><p>Thus if the GREEN LED is lit, NuttX has successfully booted and is, apparently, running normally. If the RED LED is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>B1 USER: the user button is connected to the I/O PC13 (pin 2) of the STM32 microcontroller.</p><h2 id="serial-consoles" tabindex="-1">Serial Consoles <a class="header-anchor" href="#serial-consoles" aria-label="Permalink to &quot;Serial Consoles&quot;">​</a></h2><h3 id="usart3" tabindex="-1">USART3 <a class="header-anchor" href="#usart3" aria-label="Permalink to &quot;USART3&quot;">​</a></h3><p>Default board is configured to use USART3 as console.</p><p>Pins and Connectors:</p><blockquote><p>FUNC GPIO Pin NAME</p><hr><p>TXD: PD8 CN10-14 D1 TX RXD: PD9 CN10-16 D0 RX</p></blockquote><p>You must use a 3.3 TTL to RS-232 converter or a USB to 3.3V TTL</p><blockquote><p>Nucleo 144 FTDI TTL-232R-3V3</p><hr><p>TXD - CN10-14 RXD - Pin 5 (Yellow) RXD - CN10-16 TXD - Pin 4 (Orange) GND GND Pin 1 (Black)</p><p>Note: you will be reverse RX/TX</p></blockquote><p>Use make menuconfig to configure USART3 as the console:</p><pre><code>CONFIG_STM32L5_USART3=y
CONFIG_USART3_SERIALDRIVER=y
CONFIG_USART3_SERIAL_CONSOLE=y
CONFIG_USART3_RXBUFSIZE=256
CONFIG_USART3_TXBUFSIZE=256
CONFIG_USART3_BAUD=115200
CONFIG_USART3_BITS=8
CONFIG_USART3_PARITY=0
CONFIG_USART3_2STOP=0
</code></pre><h3 id="virtual-com-port" tabindex="-1">Virtual COM Port <a class="header-anchor" href="#virtual-com-port" aria-label="Permalink to &quot;Virtual COM Port&quot;">​</a></h3><p>Yet another option is to use LPUART1 and the USB virtual COM port. This option may be more convenient for long term development, but is painful to use during board bring-up. However as LPUART peripheral has not been implemented for STM32L5, this cannot currently be used.</p><p>Solder Bridges. This configuration requires:</p><pre><code>PG7 LPUART1 TX SB127 ON and SB124 OFF (Default)
PG8 LPUART1 RX SB129 ON and SB126 OFF (Default)
</code></pre><p>You can also put USART3 on the virtual COM port by reworking the solder bridges as follows:</p><pre><code>PD8 USART3 TX SB127 OFF and SB124 ON
PD9 USART3 RX SB129 OFF and SB126 ON
</code></pre><h3 id="default" tabindex="-1">Default <a class="header-anchor" href="#default" aria-label="Permalink to &quot;Default&quot;">​</a></h3><p>As shipped, the virtual COM port is enabled.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h3><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nucleo-l552ze:&lt;subdir&gt;
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.:</p><pre><code>make oldconfig
make
</code></pre><p>The &lt;subdir&gt; that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li><p>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>Unless stated otherwise, all configurations generate console output on USART3, as described above under &quot;Serial Console&quot;. The elevant configuration settings are listed below:</p><pre><code>CONFIG_STM32L5_USART3=y
CONFIG_STM32L5_USART3_SERIALDRIVER=y
CONFIG_STM32L5_USART=y

CONFIG_USART3_SERIALDRIVER=y
CONFIG_USART3_SERIAL_CONSOLE=y

CONFIG_USART3_RXBUFSIZE=256
CONFIG_USART3_TXBUFSIZE=256
CONFIG_USART3_BAUD=115200
CONFIG_USART3_BITS=8
CONFIG_USART3_PARITY=0
CONFIG_USART3_2STOP=0
</code></pre></li><li><p>All of these configurations are set up to build under Linux using the &quot;GNU Tools for ARM Embedded Processors&quot; that is maintained by ARM (unless stated otherwise in the description of the configuration).</p><blockquote><p><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm" target="_blank" rel="noreferrer">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm</a></p></blockquote><p>That toolchain selection can easily be reconfigured using &#39;make menuconfig&#39;. Here are the relevant current settings:</p><pre><code>Build Setup:
  CONFIG_HOST_LINUX=y                 : Linux environment

System Type -&gt; Toolchain:
  CONFIG_ARM_TOOLCHAIN_GNU_EABI=y : GNU ARM EABI toolchain
</code></pre></li></ol><h2 id="configuration-sub-directories" tabindex="-1">Configuration sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration sub-directories&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at examples/nsh. This configuration is focused on low level, command-line driver testing.</p>`,52)]))}const f=t(i,[["render",r]]);export{p as __pageData,f as default};
