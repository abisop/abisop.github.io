import{_ as t,c as i,al as o,o as s}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"smart SMART File System","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/testing/smart/index.md","filePath":"en/applications/testing/smart/index.md"}'),a={name:"en/applications/testing/smart/index.md"};function d(c,e,l,T,_,n){return s(),i("div",null,e[0]||(e[0]=[o('<h1 id="smart-smart-file-system" tabindex="-1"><code>smart</code> SMART File System <a class="header-anchor" href="#smart-smart-file-system" aria-label="Permalink to &quot;`smart` SMART File System&quot;">​</a></h1><p>This is a test of the SMART file system that derives from <code>testing/nxffs</code>.</p><ul><li><code>CONFIG_TESTING_SMART</code> – Enable the SMART file system example.</li><li><code>CONFIG_TESTING_SMART_ARCHINIT</code> – The default is to use the RAM MTD device at <code>drivers/mtd/rammtd.c</code>. But an architecture-specific MTD driver can be used instead by defining <code>CONFIG_TESTING_SMART_ARCHINIT</code>. In this case, the initialization logic will call <code>smart_archinitialize()</code> to obtain the MTD driver instance.</li><li><code>CONFIG_TESTING_SMART_NEBLOCKS</code> – When <code>CONFIG_TESTING_SMART_ARCHINIT</code> is not defined, this test will use the RAM MTD device at <code>drivers/mtd/rammtd.c</code> to simulate FLASH. In this case, this value must be provided to give the number of erase blocks in MTD RAM device. The size of the allocated RAM drive will be: <code>CONFIG_RAMMTD_ERASESIZE * CONFIG_TESTING_SMART_NEBLOCKS</code>.</li><li><code>CONFIG_TESTING_SMART_MAXNAME</code> – Determines the maximum size of names used in the filesystem.</li><li><code>CONFIG_TESTING_SMART_MAXFILE</code> – Determines the maximum size of a file.</li><li><code>CONFIG_TESTING_SMART_MAXIO</code> – Max I/O, default <code>347</code>.</li><li><code>CONFIG_TESTING_SMART_MAXOPEN</code> – Max open files.</li><li><code>CONFIG_TESTING_SMART_MOUNTPT</code> – SMART mountpoint.</li><li><code>CONFIG_TESTING_SMART_NLOOPS</code> – Number of test loops. default <code>100</code>.</li><li><code>CONFIG_TESTING_SMART_VERBOSE</code> – Verbose output.</li></ul>',3)]))}const S=t(a,[["render",d]]);export{m as __pageData,S as default};
