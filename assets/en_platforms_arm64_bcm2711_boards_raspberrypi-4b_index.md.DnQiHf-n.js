import{_ as a,c as t,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const i="/assets/raspberrypi-4b.CJ-kOgfC.png",u=JSON.parse('{"title":"Raspberry Pi 4B","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm64/bcm2711/boards/raspberrypi-4b/index.md","filePath":"en/platforms/arm64/bcm2711/boards/raspberrypi-4b/index.md"}'),s={name:"en/platforms/arm64/bcm2711/boards/raspberrypi-4b/index.md"};function n(l,e,p,d,c,h){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="raspberry-pi-4b" tabindex="-1">Raspberry Pi 4B <a class="header-anchor" href="#raspberry-pi-4b" aria-label="Permalink to &quot;Raspberry Pi 4B&quot;">​</a></h1><p>chip:bcm2711, experimental</p><p>The <a href="https://www.raspberrypi.com/products/raspberry-pi-4-model-b/specifications/" target="_blank" rel="noreferrer">Raspberry Pi 4B</a> is an ARM64 hobbyist board created by Raspberry Pi.</p><p><img src="'+i+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>Broadcom BCM2711 @1.8GHz</li><li>1, 2, 4 and 8GB LPDDR4-3200 SDRAM models</li><li>2.4GHz and 5.0GHz IEEE 802.11ac wireless</li><li>Bluetooth 5.0</li><li>Gigabit Ethernet</li><li>2 USB 3.0 ports</li><li>2 USB 2.0 ports</li><li>2 micro-HDMI ports (4kp60)</li><li>2-lane MIPI DSI display port</li><li>2-lane MIPI CSI camera port</li><li>4-pole stereo audio and composite video port</li><li>Micro SD card slot</li></ul><h2 id="arm64-toolchain" tabindex="-1">ARM64 Toolchain <a class="header-anchor" href="#arm64-toolchain" aria-label="Permalink to &quot;ARM64 Toolchain&quot;">​</a></h2><p>Before building NuttX for the Raspberry Pi 4B, download the ARM64 Toolchain for <strong>AArch64 Bare-Metal Target</strong> <code>aarch64-none-elf</code> from <a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads" target="_blank" rel="noreferrer">Arm GNU Toolchain Downloads</a>. (Skip the section for Beta Releases.)</p><p>Add the downloaded toolchain <code>gcc-arm-...-aarch64-none-elf/bin</code> to the <code>PATH</code> Environment Variable.</p><p>If you are running Arch Linux, you can also get the toolchain by installing from the AUR:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> yay -S aarch64-none-elf-gcc-bin aarch64-none-elf-toolchain</span></span></code></pre></div><p>Check the ARM64 Toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> aarch64-none-elf-gcc -v</span></span></code></pre></div><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>To build NuttX for the Raspberry Pi 4B, [[in](\`in.md)stall the prerequisites &lt;/quickstart/install&gt;]{.title-ref} and [[clone the git](\`clone the git.md) repositories &lt;/quickstart/install&gt;]{.title-ref} for <code>nuttx</code> and <code>apps</code>.</p><p>Configure the NuttX project to use the Raspberry Pi 4B and build it (this example uses the <code>nsh</code> configuration).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nutxx</span></span>
<span class="line"><span> tools/configure.sh raspberrypi-4b:nsh</span></span>
<span class="line"><span> make</span></span></code></pre></div><h2 id="booting" tabindex="-1">Booting <a class="header-anchor" href="#booting" aria-label="Permalink to &quot;Booting&quot;">​</a></h2><p>In order to boot NuttX on the Raspberry Pi 4B, you will need to have a formatted micro SD card. The SD card should contain a FAT32 partition that is marked as bootable and which contains the generated <code>nuttx.bin</code> and <code>config.txt</code> files from the build process. In addition to those files, you will also need the following files from the Raspberry Pi repository for loading the image:</p><ul><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/bcm2711-rpi-4-b.dtb" target="_blank" rel="noreferrer">bcm2711-rpi-4-b.dtb</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/fixup4.dat" target="_blank" rel="noreferrer">fixup4.dat</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/fixup4cd.dat" target="_blank" rel="noreferrer">fixup4cd.dat</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/fixup4db.dat" target="_blank" rel="noreferrer">fixup4db.dat</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/fixup4x.dat" target="_blank" rel="noreferrer">fixup4x.dat</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/start4.elf" target="_blank" rel="noreferrer">start4.elf</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/start4cd.elf" target="_blank" rel="noreferrer">start4cd.elf</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/start4db.elf" target="_blank" rel="noreferrer">start4db.elf</a></li><li><a href="https://github.com/raspberrypi/firmware/blob/stable/boot/start4x.elf" target="_blank" rel="noreferrer">start4x.elf</a></li></ul><p>You can download all of these files with the shell script in <code>tools/bcm2711/bootfiles.sh</code>.</p><h3 id="sd-card-formatting" tabindex="-1">SD Card Formatting <a class="header-anchor" href="#sd-card-formatting" aria-label="Permalink to &quot;SD Card Formatting&quot;">​</a></h3><p>Here is a list of <code>fdisk</code> commands for formatting the SD card on Linux. The tutorial assumes the SD card is at <code>/dev/sda</code>, but you can find the location of your SD card with <code>lsblk</code>. <strong>Make very sure you verify that the name is correct, or you can lose data by formatting a different device.</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo fdisk /dev/sda</span></span></code></pre></div><p>Print the partition table on the card with <code>p</code> to see what&#39;s there. If anything appears, continue to use the <code>d</code> command to remove all partitions.</p><ul><li><code>o</code> to create a new, empty DOS partition table</li><li><code>n</code> to create a new partition</li><li><code>p</code> to make it primary</li><li>Hit enter to select the default partition of &quot;1&quot;</li><li>Hit enter for the default start and end sizes, which will use the full SD card size</li><li><code>t</code> to change the type of the partition (hit enter to select default of partition 1)</li><li><code>c</code> as the type, which is for Windows FAT32</li><li><code>a</code> to mark the partition as bootable</li><li><code>w</code> to write all the changes and save</li></ul><p>Now when you run <code>lsblk</code>, you should see <code>/dev/sda1</code> (or an equivalent for your SD card). That is the new partition just created. Running the following command will then format the SD card to an empty FAT32 file system.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo mkfs.vfat /dev/sda1</span></span></code></pre></div><p>Once this completes, you can copy all of the aforementioned boot files, <code>nuttx.bin</code> and <code>config.txt</code> to your SD card in your preferred way (through a file explorer or by using <code>mount</code>).</p><p>Once all the files are copied, you can then eject the SD card and insert it onto your Raspberry Pi. The default console is the Mini UART, which requires an adapter such as <a href="https://www.adafruit.com/product/954" target="_blank" rel="noreferrer">USB to TTL serial converter cable</a> to read. You should connect the ground to one of the Pi&#39;s ground pins, and then connect the RX to GPIO 14 and TX to GPIO 15. <strong>Do not connect the red power wire</strong>.</p><p>Once the converter is connected and plugged into your host computer, you can open up a serial terminal of your choice. I use Minicom. Then, power your Raspberry Pi 4B with a USB-C cable and wait for the Pi to boot and the NSH prompt to appear onscreen:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH) NuttX-12.6.0-RC0</span></span>
<span class="line"><span>nsh&gt; uname -a</span></span>
<span class="line"><span>NuttX 12.6.0-RC0 c4f3a42131-dirty Aug  6 2024 21:17:01 arm64 raspberrypi-4b</span></span>
<span class="line"><span>nsh&gt;</span></span></code></pre></div><h2 id="board-peripheral-support" tabindex="-1">Board Peripheral Support <a class="header-anchor" href="#board-peripheral-support" aria-label="Permalink to &quot;Board Peripheral Support&quot;">​</a></h2><p>SMP is currently unsupported.</p><p>NuttX for the Raspberry Pi 4 supports these on-board peripherals:</p><p>Peripheral Support</p><hr><p>I2C Partial (able to read, that&#39;s it) UART Mini UART yes, PL011 no GPIO Partial PWM No SPI No PCM No AV port No HDMI No WiFi No Ethernet No USB 3.0 No USB 2.0 No Bluetooth No</p>`,38)]))}const f=a(s,[["render",n]]);export{u as __pageData,f as default};
