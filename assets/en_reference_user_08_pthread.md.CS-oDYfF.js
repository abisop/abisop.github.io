import{_ as c,c as a,al as l,j as e,a as t,o as n}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Pthread Interfaces","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/user/08_pthread.md","filePath":"en/reference/user/08_pthread.md"}'),o={name:"en/reference/user/08_pthread.md"};function d(s,r,i,u,p,h){return n(),a("div",null,r[0]||(r[0]=[l('<h1 id="pthread-interfaces" tabindex="-1">Pthread Interfaces <a class="header-anchor" href="#pthread-interfaces" aria-label="Permalink to &quot;Pthread Interfaces&quot;">â€‹</a></h1><p>NuttX does not support <em>processes</em> in the way that, say, Linux does. NuttX only supports simple threads or tasks running within the same address space. However, NuttX does support the concept of a <em>task group</em>. A task group is the functional analog of a process: It is a group that consists of the main task thread and of all of the pthreads created by the main thread or any of the other pthreads within the task group. Members of a task group share certain resources such as environment variables, file descriptors, <code>FILE</code> streams, sockets, pthread keys and open message queues.</p><p>Note</p><p>Behavior of features related to task groups depend of NuttX configuration settings. See also the<a href="https://cwiki.apache.org/confluence/display/NUTTX/NuttX+Tasking" target="_blank" rel="noreferrer">NuttX Tasking</a>page and the<a href="https://cwiki.apache.org/confluence/display/NUTTX/Tasks+vs.+Threads+FAQ" target="_blank" rel="noreferrer">Tasks vs. Threads FAQ</a>for additional information on tasks and threads in NuttX.</p><p>The following pthread interfaces are supported in some form by NuttX:</p><p><strong>pthread control interfaces</strong>. Interfaces that allow you to create and manage pthreads.</p>',6),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_setschedpolicy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_getschedpolicy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_setschedparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_getschedparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_setinheritsched")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_getinheritsched")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_setstacksize")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_attr_getstacksize")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_create")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_detach")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_exit")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cancel")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_setcancelstate")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_setcanceltype")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_testcancel")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cleanup_pop")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cleanup_push")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_join")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_yield")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_self")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_getschedparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_setschedparam")])])],-1),e("p",null,[e("strong",null,"Thread Specific Data"),t(". These interfaces can be used to create pthread "),e("em",null,"keys"),t(" and then to access thread-specific data using these keys. Each "),e("em",null,"task group"),t(" has its own set of pthread keys. NOTES: (1) pthread keys create in one "),e("em",null,"task group"),t(" are not accessible in other task groups. (2) The main task thread does not have thread-specific data.")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_key_create")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_setspecific")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_getspecific")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_key_delete")])])],-1),e("p",null,[e("strong",null,"pthread Mutexes"),t(".")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_getpshared")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_setpshared")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_gettype")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_settype")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_getprotocol")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutexattr_setprotocol")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutex_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutex_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutex_lock")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutex_timedlock")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutex_trylock")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_mutex_unlock")])])],-1),e("p",null,[e("strong",null,"Condition Variables"),t(".")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_condattr_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_condattr_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cond_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cond_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cond_broadcast")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cond_signal")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cond_wait")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_cond_timedwait")])])],-1),e("p",null,[e("strong",null,"Barriers"),t(".")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrierattr_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrierattr_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrierattr_setpshared")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrierattr_getpshared")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrier_init")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrier_destroy")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_barrier_wait")])])],-1),e("p",null,[e("strong",null,"Initialization"),t(".")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_once")])])],-1),e("p",null,[e("strong",null,"Signals"),t(".")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_kill")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"pthread_sigmask")])])],-1),l("<p>No support for the following pthread interfaces is provided by NuttX:</p><blockquote><ul><li><code>pthread_attr_getguardsize</code>. get and set the thread guardsize attribute.</li><li><code>pthread_attr_getscope</code>. get and set the contentionscope attribute.</li><li><code>pthread_attr_setguardsize</code>. get and set the thread guardsize attribute.</li><li><code>pthread_attr_setscope</code>. get and set the contentionscope attribute.</li><li><code>pthread_getconcurrency</code>. get and set the level of concurrency.</li><li><code>pthread_getcpuclockid</code>. access a thread CPU-time clock.</li><li><code>pthread_mutex_getprioceiling</code>. get and set the priority ceiling of a mutex.</li><li><code>pthread_mutex_setprioceiling</code>. get and set the priority ceiling of a mutex.</li><li><code>pthread_mutexattr_getprioceiling</code>. get and set the prioceiling attribute of the mutex attributes object.</li><li><code>pthread_mutexattr_setprioceiling</code>. get and set the prioceiling attribute of the mutex attributes object.</li><li><code>pthread_setconcurrency</code>. get and set the level of concurrency.</li></ul></blockquote>",2)]))}const x=c(o,[["render",d]]);export{f as __pageData,x as default};
