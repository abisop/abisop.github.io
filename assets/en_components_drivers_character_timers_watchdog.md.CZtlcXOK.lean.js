import{_ as a,c as o,al as n,j as e,a as t,o as l}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Watchdog Timer Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/character/timers/watchdog.md","filePath":"en/components/drivers/character/timers/watchdog.md"}'),r={name:"en/components/drivers/character/timers/watchdog.md"};function s(c,i,d,h,p,u){return l(),o("div",null,i[0]||(i[0]=[n("",37),e("blockquote",null,[e("p",null,[t("To select the wdt browse in the "),e("code",null,"menuconfig"),t(" using the following path:")]),e("p",null,[t("Go into menu "),e("code",null,"System Type --> <Chip> Peripheral Selection"),t('{.interpreted-text role="menuselection"} and press '),e("code",{class:"interpreted-text",role:"kbd"},"Enter"),t(". Then select one watchdog timer.")])],-1),e("ol",{start:"2"},[e("li",null,[e("p",null,"Enable the Auto-monitor option"),e("p",null,[t("Go into menu "),e("code",null,"Device Drivers --> Timer Driver Support"),t('{.interpreted-text role="menuselection"} and press')]),e("ul",null,[e("li",null,"[x] Watchdog Timer Support")]),e("p",null,[t("Then press "),e("code",{class:"interpreted-text",role:"kbd"},"Enter"),t(" again to enter into the Watchdog Timer Support menu. And finally enable the Auto-monitor option:")]),e("ul",null,[e("li",null,"[x] Auto-monitor")]),e("p",null,"After selecting the option you may want to configure some parameters:"),e("ul",null,[e("li",null,[e("p",null,[e("strong",null,"Timeout"),t(": It is the watchdog timer expiration time in seconds.")])]),e("li",null,[e("p",null,[e("strong",null,"Keep a live interval"),t(": This is the interval in which the watchdog will be fed. It is in seconds. It can't be bigger than the timeout. If this interval is equal to timeout interval, than this interval will automatically change to half timeout.")])]),e("li",null,[e("p",null,[e("strong",null,"Keep alive by"),t(": This is a choice to determine who is going to feed the dog. There are 4 possible choices that are described as follows.")]),e("p",null,[e("code",null,"Capture callback"),t(": This choice registers a watchdog timer callback to reset the watchdog every time it expires, i.e., on timeout.")]),e("p",null,[e("code",null,"Timer callback"),t(': This choice also uses a timer callback to reset the watchdog, but it will reset the watchdog every "keep a live interval".')]),e("p",null,[e("code",null,"Worker callback"),t(': This choice uses a Work Queue to reset the watchdog every "keep a live interval". This choice depends on having the Low or High Priority Work Queue enabled. If only the High Priority Work Queue is enabled, this one will be used, otherwise Low Priority Work Queue is used.')]),e("p",null,[t("So, before enabling it, go into menu "),e("code",null,"RTOS Features --> Work queue support"),t('{.interpreted-text role="menuselection"} and press '),e("code",null,"Enter"),t('{.interpreted-text role="kbd"}.')]),e("ul",null,[e("li",null,"[x] Low priority (kernel) worker thread")]),e("p",null,[e("code",null,"Idle callback"),t(": This choice sets an Idle callback to feed the dog. It depends on the PM module, because this callback is triggered by the PM state change. To enable it do the following:")]),e("p",null,[t("Go into menu "),e("code",null,"Device Drivers"),t('{.interpreted-text role="menuselection"} and enable:')]),e("ul",null,[e("li",null,"[x] Power Management Support")]),e("p",null,"After selecting one of these choices, the chip will keep itself alive by one of these options.")])])])],-1)]))}const w=a(r,[["render",s]]);export{m as __pageData,w as default};
