import{_ as i,c as o,al as a,o as t}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Audio Subsystem","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/audio/index.md","filePath":"en/components/audio/index.md"}'),d={name:"en/components/audio/index.md"};function s(l,e,r,n,c,u){return t(),o("div",null,e[0]||(e[0]=[a('<h1 id="audio-subsystem" tabindex="-1">Audio Subsystem <a class="header-anchor" href="#audio-subsystem" aria-label="Permalink to &quot;Audio Subsystem&quot;">​</a></h1><p>This page discusses the audio subsystem support for NuttX which is only built if <code>CONFIG_AUDIO</code> is defined in the NuttX configuration file.</p><h2 id="files-in-nuttx-audio" tabindex="-1">Files in nuttx/audio <a class="header-anchor" href="#files-in-nuttx-audio" aria-label="Permalink to &quot;Files in nuttx/audio&quot;">​</a></h2><p>This directory holds the NuttX audio subsystem upper-half. The upper-half provides a common interface for applications to interface with and also defines a bind layer for specific lower-half audio device drivers.</p><ul><li><code>audio.c</code> - The upper-half driver that binds to a lower-half driver from the drivers/audio subdirectory. For each attached audio device, there will be an instance of this upper-half driver bound to the instance of the lower half driver context.</li><li><code>pcm_decode.c</code> - Routines to decode PCM / WAV type data.</li></ul><p>Portions of the audio system interface have application interfaces. Those portions reside in the <code>nuttx/libc/audio</code> directory where the will be built for access by both OS driver logic and user application logic. Those relevant files in <code>nuttx/libc/audio</code> include:</p><ul><li><code>buffer.c</code> - Routines to manage creattion and destruction of audio pipeline buffers (apb) used in the audio subsystem. Audio pipeline buffers are passed between user applications and the audio drivers to deliver audio content for playback (or possibly recording in the future).</li></ul><h2 id="related-header-files" tabindex="-1">Related Header Files <a class="header-anchor" href="#related-header-files" aria-label="Permalink to &quot;Related Header Files&quot;">​</a></h2><p><code>include/nuttx/audio/audio.h</code> - Top level include file defining the audio interface <code>include/nuttx/audio/vs1053.h</code> - Specific driver initialization prototypes</p><h2 id="configuration-settings" tabindex="-1">Configuration Settings <a class="header-anchor" href="#configuration-settings" aria-label="Permalink to &quot;Configuration Settings&quot;">​</a></h2><h3 id="general-audio-settings" tabindex="-1">General Audio Settings <a class="header-anchor" href="#general-audio-settings" aria-label="Permalink to &quot;General Audio Settings&quot;">​</a></h3><ul><li><code>CONFIG_AUDIO</code> Enables overall support for audio subsystem</li><li><code>CONFIG_AUDIO_MULTI_SESSION</code> Enables support for the audio subsystem to track multiple open sessions with lower-level audio devices.</li><li><code>CONFIG_AUDIO_LARGE_BUFFERS</code> Specifies that buffer size variables should be 32-bit vs. the normal 16-bit size. This allows buffers to be larger than 64K bytes on systems with an abundance of RAM.</li><li><code>CONFIG_AUDIO_NUM_BUFFERS</code> Sets the number of audio buffers to use for audio operations. If the configuration has set <code>CONFIG_AUDIO_DRIVER_SPECIFIC_BUFFERS</code>, and an audio device does not support the operation, then this becomes the default number of buffers to use.</li><li><code>CONFIG_AUDIO_BUFFER_SIZE</code> Sets the size of the audio buffers to use for audio operations. If the configuration has set <code>CONFIG_AUDIO_DRIVER_SPECIFIC_BUFFERS</code>, and an audio device does not support the operation, then this becomes the default size of buffers to use.</li><li><code>CONFIG_AUDIO_DRIVER_SPECIFIC_BUFFERS</code> Enables support for lower-level audio drivers to specify the number and size of buffers that should be allocated for best performance while interacting with that driver.</li><li><code>CONFIG_AUDIO_CUSTOM_DEV_PATH</code> Specifies that all audio devices should be registered in the filesystem at a location other than the standard <code>/dev/audio</code> directory.</li><li><code>CONFIG_AUDIO_DEV_ROOT</code> Specifies that all audio devices should be registered in the <code>/dev</code> directory. Saves a tiny bit of code and RAM space since an additional directory isn&#39;t needed, but at the expense of execution speed when searching for audio devices since all entries in <code>/dev</code> must be opened and tested if they provide audio support. Available only if <code>CONFIG_AUDIO_CUSTOM_DEV_PATH</code> is selected.</li><li><code>CONFIG_AUDIO_DEV_PATH</code> Specifies a custom directory where audio devices will be registered. Available if <code>CONFIG_AUDIO_CUSTOM_DEV_PATH</code> is selected and <code>CONFIG_AUDIO_DEV_ROOT</code> is not selected.</li></ul><h3 id="audio-format-support-selections" tabindex="-1">Audio Format Support Selections <a class="header-anchor" href="#audio-format-support-selections" aria-label="Permalink to &quot;Audio Format Support Selections&quot;">​</a></h3><ul><li><code>CONFIG_AUDIO_FORMAT_AC3</code> Specifies that AC3 support should be enabled if available by a lower-half driver.</li><li><code>CONFIG_AUDIO_FORMAT_DTS</code> Specifies that DTS support should be enabled if available by a lower-half driver.</li><li><code>CONFIG_AUDIO_FORMAT_PCM</code> Specifies that PCM support should be enabled if available by a lower-half driver.</li><li><code>CONFIG_AUDIO_FORMAT_MP3</code> Specifies that MP3 support should be enabled if available by a lower-half driver.</li><li><code>CONFIG_AUDIO_FORMAT_MIDI</code> Specifies that MIDI support should be enabled if available by a lower-half driver.</li><li><code>CONFIG_AUDIO_FORMAT_WMA</code> Specifies that WMA support should be enabled if available by a lower-half driver.</li><li><code>CONFIG_AUDIO_FORMAT_OGG_VORBIS</code> Specifies that Ogg Vorbis support should be enabled if available by a lower-half driver.</li></ul><h3 id="audio-feature-exclusion-selections" tabindex="-1">Audio feature exclusion Selections <a class="header-anchor" href="#audio-feature-exclusion-selections" aria-label="Permalink to &quot;Audio feature exclusion Selections&quot;">​</a></h3><ul><li><code>CONFIG_AUDIO_EXCLUDE_VOLUME</code> Disables support in all libraries and drivers for setting the playback volume. In this case, the device volume will depend on the default level defined by the lower-level driver, typically via a config setting.</li><li><code>CONFIG_AUDIO_EXCLUDE_BALANCE</code> Disables support in all libraries and drivers for setting the playback balance. Also, the volume support must not be excluded for balance to work or make sense.</li><li><code>CONFIG_AUDIO_EXCLUDE_TONE</code> Disables support for setting bass and treble.</li><li><code>CONFIG_AUDIO_EXCLUDE_PAUSE_RESUME</code> Disables support in all libraries and drivers for pausing and resuming playback.</li><li><code>CONFIG_AUDIO_EXCLUDE_STOP</code> Disables support in all libraries and drivers for stopping an audio playback once it has started. Typically selected if only short notification audio sounds are needed (vs. media playing type applications).</li></ul><h2 id="related-subdirectories" tabindex="-1">Related Subdirectories <a class="header-anchor" href="#related-subdirectories" aria-label="Permalink to &quot;Related Subdirectories&quot;">​</a></h2><ul><li><code>drivers/audio</code> - Contains the lower-level device specific drivers.</li><li><code>apps/system/nxplayer</code> - User-mode audio subsystem interface library.</li></ul>',18)]))}const p=i(d,[["render",s]]);export{f as __pageData,p as default};
