import{_ as t,c as a,al as l,o as r}from"./chunks/framework.NFAqBSgQ.js";const i="/assets/task-trace-internal.CNEHTvXD.png",s="/assets/syscall-flat-before.55zLlass.png",o="/assets/syscall-flat-after.DRVv0tgf.png",c="/assets/syscall-protected-before.BYAyYMGf.png",n="/assets/syscall-protected-after.h6vsZ8SQ.png",_=JSON.parse('{"title":"Task Trace Internals","description":"","frontmatter":{},"headers":[],"relativePath":"en/debugging/tasktraceinternal.md","filePath":"en/debugging/tasktraceinternal.md"}'),d={name:"en/debugging/tasktraceinternal.md"};function h(u,e,p,m,b,v){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="task-trace-internals" tabindex="-1">Task Trace Internals <a class="header-anchor" href="#task-trace-internals" aria-label="Permalink to &quot;Task Trace Internals&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p><img src="'+i+'" alt="image"></p><p>The Task Trace is constructed by the following functions.</p><h3 id="nuttx-kernel-events-collection" tabindex="-1">NuttX kernel events collection <a class="header-anchor" href="#nuttx-kernel-events-collection" aria-label="Permalink to &quot;NuttX kernel events collection&quot;">​</a></h3><p>The kernel events are collected by <code>sched_note_*()</code> API calls embedded in NuttX kernel.</p><blockquote><ul><li>For task switch events <ul><li><code>sched_note_start()</code></li><li><code>sched_note_stop()</code></li><li><code>sched_note_suspend()</code></li><li><code>sched_note_resume()</code></li></ul></li><li>For system call events <ul><li><code>sched_note_syscall_enter()</code></li><li><code>sched_note_syscall_leave()</code></li></ul></li><li>For interrupt event <ul><li><code>sched_note_irqhandler()</code></li></ul></li></ul></blockquote><h3 id="filter-logic-nuttx-sched-sched-note-c" tabindex="-1">Filter logic (<code>nuttx/sched/sched_note.c</code>) <a class="header-anchor" href="#filter-logic-nuttx-sched-sched-note-c" aria-label="Permalink to &quot;Filter logic (`nuttx/sched/sched_note.c`)&quot;">​</a></h3><ul><li>The <code>sched_note_*()</code> APIs are implemented here.</li><li>Filter the notes and pass them to noteram driver by <code>sched_note_add()</code> API.</li></ul><h3 id="noteram-device-driver-nuttx-drivers-note-noteram-driver-c" tabindex="-1">Noteram device driver (<code>nuttx/drivers/note/noteram_driver.c</code>) <a class="header-anchor" href="#noteram-device-driver-nuttx-drivers-note-noteram-driver-c" aria-label="Permalink to &quot;Noteram device driver (`nuttx/drivers/note/noteram_driver.c`)&quot;">​</a></h3><ul><li>Accumurate incoming note records into the buffer.</li><li>Read the note records from the buffer by user requests.</li><li>The notes are recorded in the binary format of <code>struct note_*_s</code>.</li><li>The detail function is described in [[../component](]{.title-ref}../component.md)s/drivers/character/note`.</li></ul><h3 id="notectl-device-driver-nuttx-drivers-note-notectl-driver-c" tabindex="-1">Notectl device driver (<code>nuttx/drivers/note/notectl_driver.c</code>) <a class="header-anchor" href="#notectl-device-driver-nuttx-drivers-note-notectl-driver-c" aria-label="Permalink to &quot;Notectl device driver (`nuttx/drivers/note/notectl_driver.c`)&quot;">​</a></h3><ul><li><code>/dev/notectl</code> device driver.</li><li>Control the filter logic in <code>sched_note.c</code> by calling note filter APIs.</li><li>The detail function is described in [[../component](]{.title-ref}../component.md)s/drivers/character/note`.</li></ul><h3 id="trace-built-in-application-apps-system-trace-trace-c" tabindex="-1">&quot;<code>trace</code>&quot; Built-In Application (<code>apps/system/trace/trace.c</code>) <a class="header-anchor" href="#trace-built-in-application-apps-system-trace-trace-c" aria-label="Permalink to &quot;\\&quot;`trace`\\&quot; Built-In Application (`apps/system/trace/trace.c`)&quot;">​</a></h3><ul><li><code>trace</code> Built-In Application to control the trace function interactively.</li><li>Read binary note records from <code>/dev/note</code> and convert into the ftrace text format which is acceptable by <a href="https://www.eclipse.org/tracecompass/" target="_blank" rel="noreferrer">&quot;Trace Compass&quot;</a>.</li><li>The command syntax is described in [[ta](`ta.md)sktraceuser]{.title-ref}.</li></ul><h2 id="getting-the-system-call-events" tabindex="-1">Getting the system call events <a class="header-anchor" href="#getting-the-system-call-events" aria-label="Permalink to &quot;Getting the system call events&quot;">​</a></h2><p>To get the system call events, two different methods are used for FLAT build and PROTECTED/KERNEL build.</p><h3 id="flat-build" tabindex="-1">FLAT build <a class="header-anchor" href="#flat-build" aria-label="Permalink to &quot;FLAT build&quot;">​</a></h3><p>In FLAT build, a system call is just a function call into the NuttX kernel.</p><p><img src="'+s+'" alt="image"></p><p>To get the system call events, <a href="https://sourceware.org/binutils/docs/ld/Options.html#index-_002d_002dwrap_003dsymbol" target="_blank" rel="noreferrer">wrapper function option</a> of the GNU Linker is used.</p><p>The mksyscall tool is fixed to generate the system call wrapper which call system call enter/leave hook. The wrapper supersedes the system call function call of the NuttX binary by passing <code>--wrap</code> linker option to the build system. The wrapper calls the system call hooks before and after calling the real system call function.</p><p><img src="'+o+'" alt="image"></p><h3 id="protected-kernel-build" tabindex="-1">PROTECTED/KERNEL build <a class="header-anchor" href="#protected-kernel-build" aria-label="Permalink to &quot;PROTECTED/KERNEL build&quot;">​</a></h3><p>Different to FLAT build, in PROTECTED and KERNEL build, a system call is issued by an user space is handled as the following steps.</p><ol><li>System call issued by an application code is handled by the system call proxy (automatically generated by mksyscall).</li><li>System call proxy issues the supervisor call instruction to enter into the kernel space.</li><li>System call handler in the kernel space calls the system call stub (automatically generated by mksyscall).</li><li>System call stub calls the API implementation in the NuttX kernel.</li></ol><p><img src="'+c+'" alt="image"></p><p>To get the system call events, the mksyscall tool is fixed to generate the system call wrapper which supersedes the system call function call in the system call stub.</p><p><img src="'+n+'" alt="image"></p>',29)]))}const y=t(d,[["render",h]]);export{_ as __pageData,y as default};
