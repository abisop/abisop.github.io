import{_ as a,c as i,al as o,o as t}from"./chunks/framework.NFAqBSgQ.js";const _=JSON.parse('{"title":"qencoder Quadrature Encoder","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/qencoder/index.md","filePath":"en/applications/examples/qencoder/index.md"}'),r={name:"en/applications/examples/qencoder/index.md"};function d(n,e,l,c,s,p){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="qencoder-quadrature-encoder" tabindex="-1"><code>qencoder</code> Quadrature Encoder <a class="header-anchor" href="#qencoder-quadrature-encoder" aria-label="Permalink to &quot;`qencoder` Quadrature Encoder&quot;">​</a></h1><p>This example is a simple test of a Quadrature Encoder driver. It simply reads positional data from the encoder and prints it.,</p><p>This test depends on these specific QE/NSH configurations settings (your specific PWM settings might require additional settings).</p><ul><li><code>CONFIG_SENSORS_QENCODER</code> – Enables quadrature encoder support (upper-half driver).</li><li><code>CONFIG_NSH_BUILTIN_APPS</code> – Build the QE test as an NSH built-in function. Default: Built as a standalone program.</li></ul><p>Additional configuration options will mostly likely be required for the board-specific lower-half driver. See the documentation page for your board.</p><p>Specific configuration options for this example include:</p><ul><li><code>CONFIG_EXAMPLES_QENCODER_DEVPATH</code> – The path to the QE device. Default: <code>/dev/qe0</code>.</li><li><code>CONFIG_EXAMPLES_QENCODER_NSAMPLES</code> – This number of samples is collected and the program terminates. Default: Samples are collected indefinitely.</li><li><code>CONFIG_EXAMPLES_QENCODER_DELAY</code> – This value provides the delay (in milliseconds) between each sample. Default: <code>100</code> milliseconds.</li></ul>',7)]))}const f=a(r,[["render",d]]);export{_ as __pageData,f as default};
