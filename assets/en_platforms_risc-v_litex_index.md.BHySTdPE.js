import{_ as t,c as o,al as i,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse(`{"title":"Enjoy Digital LiteX FPGA's","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/litex/index.md","filePath":"en/platforms/risc-v/litex/index.md"}`),a={name:"en/platforms/risc-v/litex/index.md"};function n(l,e,c,s,d,p){return r(),o("div",null,e[0]||(e[0]=[i(`<h1 id="enjoy-digital-litex-fpga-s" tabindex="-1">Enjoy Digital LiteX FPGA&#39;s <a class="header-anchor" href="#enjoy-digital-litex-fpga-s" aria-label="Permalink to &quot;Enjoy Digital LiteX FPGA\\&#39;s&quot;">​</a></h1><p>The LiteX framework provides a convenient and efficient infrastructure to create FPGA Cores/SoCs, to explore various digital design architectures and create full FPGA based systems.</p><p>Information specific to Litex and supported boards can be found on the project&#39;s homepage: <a href="https://github.com/enjoy-digital/litex" target="_blank" rel="noreferrer">https://github.com/enjoy-digital/litex</a></p><p>Nuttx has basic support for two softcores</p><blockquote><ul><li>vexriscv: FPGA friendly RISC-V ISA CPU implementation</li><li>vexriscv_smp: A more fully featured, Linux compatible core.</li></ul></blockquote><p>Currently, the only configured development board in the Arty A7 <a href="https://digilent.com/reference/programmable-logic/arty-a7/start" target="_blank" rel="noreferrer">https://digilent.com/reference/programmable-logic/arty-a7/start</a>. However, many Litex supported boards should work with either core, requiring minimal adjustment to the configuration.</p><h2 id="toolchain" tabindex="-1">Toolchain <a class="header-anchor" href="#toolchain" aria-label="Permalink to &quot;Toolchain&quot;">​</a></h2><p>Litex projects can be built with a generic RISC-V GCC toolchain. There are currently two options.</p><h3 id="prebuilt-toolchain" tabindex="-1">Prebuilt toolchain <a class="header-anchor" href="#prebuilt-toolchain" aria-label="Permalink to &quot;Prebuilt toolchain&quot;">​</a></h3><p>A prebuilt RISC-V toolchain from SiFive can be used to build Litex projects:</p><pre><code># Download the prebuilt toolchain
 curl https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14.tar.gz \\ 
                  &gt; riscv64-unknown-elf-gcc.tar.gz

# Unpack the archive
 tar -xf riscv64-unknown-elf-gcc.tar.gz 

# Add to path
 export PATH=&quot;HOME/path/to/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86_64-linux-ubuntu14/bin:PATH
</code></pre><h3 id="custom-built-toolchain" tabindex="-1">Custom built toolchain <a class="header-anchor" href="#custom-built-toolchain" aria-label="Permalink to &quot;Custom built toolchain&quot;">​</a></h3><p>The toolchain needs to be compiled locally in order to use a more modern version. At the time of writing, the source can be obtained from <a href="https://github.com/riscv-collab/riscv-gnu-toolchain" target="_blank" rel="noreferrer">https://github.com/riscv-collab/riscv-gnu-toolchain</a> and built with the following configuration:</p><pre><code> CFLAGS=&quot;-g0 -Os&quot;
 CXXFLAGS=&quot;-g0 -Os&quot;
 LDFLAGS=&quot;-s&quot;

 ./configure \\
  CFLAGS_FOR_TARGET=&#39;-O2 -mcmodel=medany&#39; \\
  CXXFLAGS_FOR_TARGET=&#39;-O2 -mcmodel=medany&#39; \\
  --prefix=path/to/install/to \\
  --with-system-zlib \\
  --with-arch=rv32ima \\
  --with-abi=ilp32

  make
</code></pre><p>Important</p><p>The vexriscv_smp core requires [with-arch=rv32imac]{.title-ref}.</p><p>Check the linked github repository for other options, including building with multilib enabled.</p><h2 id="device-tree-support" tabindex="-1">Device tree support <a class="header-anchor" href="#device-tree-support" aria-label="Permalink to &quot;Device tree support&quot;">​</a></h2><p>Currently, the litex port requires that the memory mapped peripheral addresses and IRQ numbers match those generated by LiteX. Although, this approach is being phased-out in favour of using a flattened device tree (FDT) to dynamically instantiate drivers.</p><p>Generating and compiling the device tree:</p><pre><code> ./litex/tools/litex_json2dts_linux.py path/to/built/gateware/csr.json &gt; board.dts
 dtc -@ -I dts -O dtb board.dts -o board.dtb
</code></pre><p>Ensure the board.dtb is placed in the NuttX root directory.</p><p>If a peripheral isn&#39;t working with the LiteX generated gateware, consider checking the addresses and IRQ numbers in</p><blockquote><ul><li>arch/risc-v/src/litex/hardware/litex_memorymap.h</li><li>arch/risc-v/include/litex/irq.h</li></ul></blockquote><h2 id="core-specific-information" tabindex="-1">Core specific information <a class="header-anchor" href="#core-specific-information" aria-label="Permalink to &quot;Core specific information&quot;">​</a></h2><blockquote><p>cores/<em>/</em></p></blockquote><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,28)]))}const m=t(a,[["render",n]]);export{u as __pageData,m as default};
