import{_ as t,c as o,al as a,j as e,a as n,o as p}from"./chunks/framework.NFAqBSgQ.js";const i="/assets/menuconfig-debug.GOHTUl5l.png",m=JSON.parse('{"title":"Debugging","description":"","frontmatter":{},"headers":[],"relativePath":"en/quickstart/debugging.md","filePath":"en/quickstart/debugging.md"}'),l={name:"en/quickstart/debugging.md"};function c(d,s,r,u,g,h){return p(),o("div",null,s[0]||(s[0]=[a("",4),e("p",null,[n("The debug options are available under "),e("code",{class:"interpreted-text",role:"menuselection"},"Build Setup --> Debug Options"),n(". You will most likely have to enable the following options:")],-1),e("ul",null,[e("li",null,[e("code",{class:"interpreted-text",role:"menuselection"},"Enable Debug Features"),n(" --- selecting this will turn on subsystem-level debugging options, they will become visible on the page below. You can then select the ones you want.")]),e("li",null,[e("code",{class:"interpreted-text",role:"menuselection"},"Enable Error Output"),n(" --- this will only log errors.")]),e("li",null,[e("code",{class:"interpreted-text",role:"menuselection"},"Enable Warnings Output"),n(" --- this will log warnings and errors.")]),e("li",null,[e("code",null,"Enable Informational Debug Output"),n('{.interpreted-text role="menuselection"} --- this will produce informational output, warnings, and errors.')])],-1),e("p",null,[n("You can then select from the subsystems that are available, Network, Scheduler, USB, etc. Note that you will need to separately enable the subsystem elsewhere in the "),e("code",null,"menuconfig"),n(" system. To see the "),e("code",null,"CONFIG"),n(" define that is set, use the arrow keys to highlight the subsystem (for instance, "),e("code",null,"Network Debug Features"),n('{.interpreted-text role="menuselection"}) and type '),e("code",{class:"interpreted-text",role:"kbd"},"?"),n(". This will show you that the C macro that is set is called "),e("code",null,"CONFIG_DEBUG_NET"),n(". "),e("code",null,"debug.h"),n(" defines the "),e("code",null,"netinfo()"),n(" logging function that will log output if this macro is set. You can search the source code for "),e("code",null,"netinfo"),n(" to see how it is used.")],-1),e("p",null,[e("img",{src:i,alt:"Screenshot of menuconfig system main screen"}),n('{.align-center width="800px"}')],-1),e("p",null,[n("Note that enabling all these will produce an incredible amount of logging output. Enable the level you want and the area you're interested in, and leave the rest disabled, save the config, and then recompile. You can see the full list of debug feature logging functions in the file "),e("a",{href:"https://github.com/apache/nuttx/blob/master/include/debug.h",target:"_blank",rel:"noreferrer"},"debug.h"),n(".")],-1),e("p",null,[n("Syslog timestamps can be enabled in the configuration in "),e("code",{class:"interpreted-text",role:"menuselection"},"Device Drivers --> System Logging --> Prepend timestamp to syslog message"),n(" ("),e("code",null,"CONFIG_SYSLOG_TIMESTAMP"),n(").")],-1),a("",46)]))}const f=t(l,[["render",c]]);export{m as __pageData,f as default};
