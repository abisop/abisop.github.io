import{_ as t,c as a,al as s,o as i}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"Network Support on Linux","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/sim/network_linux.md","filePath":"en/platforms/sim/network_linux.md"}'),o={name:"en/platforms/sim/network_linux.md"};function n(r,e,l,p,u,h){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="network-support-on-linux" tabindex="-1">Network Support on Linux <a class="header-anchor" href="#network-support-on-linux" aria-label="Permalink to &quot;Network Support on Linux&quot;">​</a></h1><p>The simulation uses the TUN/TAP driver under Linux to provide network support. It can operate in one of two modes: host routed, or bridged. In the host routed case no special configuration is necessary, but by default the simulation will only be accessible to the host on which it runs.</p><p>Bridge mode is recommended where possible. It requires slightly more effort to set up, but is much more flexible, and is likely to be easier to maintain in the end.</p><h2 id="host-route-mode" tabindex="-1">Host Route Mode <a class="header-anchor" href="#host-route-mode" aria-label="Permalink to &quot;Host Route Mode&quot;">​</a></h2><p>If CONFIG_SIM_NET_HOST_ROUTE is enabled, the simulation will create and maintain a host route from the assigned IP address to the instance&#39;s tap device. This route will be updated if the application changes the simulation&#39;s IP address. Note that you will not see the simulation&#39;s IP address on the TAP device if you run ifconfig on the host.</p><p>No special setup is required. Simply assign your simulation a free IP address on the same network as your host, and everything will Just Work. Note that if you assign an IP that is already in use on your network, your host won&#39;t be able to see it until the simulation is stopped. The host route will force all traffic destined for that IP to be sent to the tap interface.</p><p>Note</p><p>If you configure an IP address that is not on the same subnet as your host, additional manual setup will be required. A helper script, [tools/simhostroute.sh]{.title-ref} is provided that can do this setup on Linux. On Windows or macOS using host route mode is not recommended.</p><p>Recent versions of Linux require setting kernel capabilities to allow the nuttx executable access to the tap network driver. You can see more about the tun/tap driver requiring Linux capabilities here:</p><p><a href="https://github.com/torvalds/linux/blob/master/Documentation/networking/tuntap.txt" target="_blank" rel="noreferrer">https://github.com/torvalds/linux/blob/master/Documentation/networking/tuntap.txt</a></p><p>The [boards/sim/sim/sim/configs/tcpblaster/defconfig]{.title-ref} is known to work in this configuration.</p><p>To compile:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./tools/configure.sh sim:tcpblaster</span></span>
<span class="line"><span> make menuconfig  # optional, to adjust configuration</span></span>
<span class="line"><span> make clean; make</span></span></code></pre></div><p>You can do the following after compiling the NuttX simulator:</p><p>On Linux:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> # necessary on recent Linux distributions</span></span>
<span class="line"><span> sudo setcap cap_net_admin+ep ./nuttx</span></span>
<span class="line"><span> # set up the host route and IP tables rules</span></span>
<span class="line"><span> # replace ens33 with your Ethernet or wireless interface</span></span>
<span class="line"><span> sudo ./tools/simhostroute.sh ens33 on</span></span>
<span class="line"><span> # start the NuttX simulator</span></span>
<span class="line"><span> ./nuttx</span></span></code></pre></div><p>On the NuttX Simulator:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; # replace or omit dns if needed, IPv6 line is optional</span></span>
<span class="line"><span>nsh&gt; ifconfig eth0 inet6 fc00::2/112 dns 2001:4860:4860::8888</span></span>
<span class="line"><span>nsh&gt; ifconfig eth0 10.0.1.2 dns 8.8.8.8</span></span>
<span class="line"><span>nsh&gt; ifup eth0</span></span></code></pre></div><p>On Linux:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> # is nuttx up?</span></span>
<span class="line"><span> ping 10.0.1.2</span></span></code></pre></div><h2 id="bridge-mode" tabindex="-1">Bridge Mode <a class="header-anchor" href="#bridge-mode" aria-label="Permalink to &quot;Bridge Mode&quot;">​</a></h2><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h2><p>If CONFIG_SIM_NET_BRIDGE is enabled, the simulation&#39;s tap interface will automatically be added to the Linux bridge device specified by the CONFIG_SIM_NET_BRIDGE_DEVICE configuration option. Note that this MUST be a pre-existing bridge device, or the initialization will fail. The simulation will NOT create the bridge for you.</p><p>To create the bridge, first install the bridge utilities package for your platform (the net-tools RPM in RedHat, for example). Then execute a command like the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ip link add nuttx0 type bridge</span></span></code></pre></div><p>This will create the nuttx0 bridge. Once created, the bridge may be used by one or more simulations. You only need one bridge per host; if you start multiple simulations, they will all be added to the same bridge and can talk amongst themselves.</p><h2 id="option-1-routing-local-traffic-to-the-bridge" tabindex="-1">Option 1: Routing Local Traffic to the Bridge <a class="header-anchor" href="#option-1-routing-local-traffic-to-the-bridge" aria-label="Permalink to &quot;Option 1: Routing Local Traffic to the Bridge&quot;">​</a></h2><p>If you want the host to be able to talk to the simulator, you will also need to assign the bridge an IP address (this will be the default gateway you assign to the simulator) and add a network route. Note that the subnet chosen should not already be in use. For example, if you want to use the 172.26.23.0/24 subnet for your simluations, you would do something like the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ip link add nuttx0 type bridge</span></span>
<span class="line"><span># ifconfig nuttx0 172.26.23.1/24</span></span></code></pre></div><p>The standard Linux ifconfig utility will automatically add the appropriate network route, so no further effort is needed.</p><h2 id="option-2-live-network-access" tabindex="-1">Option 2: Live Network Access <a class="header-anchor" href="#option-2-live-network-access" aria-label="Permalink to &quot;Option 2: Live Network Access&quot;">​</a></h2><p>There are two main methods of giving the simulator access to your network at large. One is to set up your Linux host as a router and configure your network so that it knows where to find the appropriate subnet. This is far too complex for most use cases, so you can safely ignore it unless you have specific needs.</p><p>The recommended method is to add a real interface to the bridge you&#39;re using with NuttX. For example, if you have a secondary eth1 interface on your host, you can simply connect it to the network you want your simulations to access, and run the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ip link set eth1 master nuttx0</span></span></code></pre></div><p>From that point on, your simulations will be directly connected to the same network as your eth1 interface. Note that your bridge will generally not need an IP address in this case.</p><p>If you only have a single interface, you can configure your system so that eth0 (or other primary interface) is on the bridge. To do this, you would execute commands like the following from the system console:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ip link add nuttx0 type bridge</span></span>
<span class="line"><span># ip link set eth0 master nuttx0</span></span>
<span class="line"><span># ifconfig nuttx0 &lt;host-ip-address/netmask&gt;</span></span>
<span class="line"><span># route add -net default gw ...</span></span></code></pre></div><p>The rest of your network configuration would remain the same; your host&#39;s IP address has simply moved from being assigned directly to the ethernet interface, to being assigned to the bridge that contains that interface. The connection will operate as normal. NuttX simulations will join the bridge as with the previous example.</p><p>In either of the live access scenarios presented here, the default gateway you configure in your simluation should be the normal one for the network you&#39;re accessing, whether or not the bridge has an IP address. The bridge is acting as an ethernet hub; your simluation has direct access to the normal gateway as if the simluation were a device physically connected to the network.</p><h2 id="configuring-at-startup" tabindex="-1">Configuring at Startup <a class="header-anchor" href="#configuring-at-startup" aria-label="Permalink to &quot;Configuring at Startup&quot;">​</a></h2><p>Most Linux distributions have a mechanism for configuring a bridge at startup. See your distribution&#39;s documentation for more information.</p><h2 id="setup-script" tabindex="-1">Setup Script <a class="header-anchor" href="#setup-script" aria-label="Permalink to &quot;Setup Script&quot;">​</a></h2><p>There is a script, [tools/simbridge.sh]{.title-ref} that will do the setup for you.</p><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><blockquote><ul><li><p>Users of VMware ESXi should be aware that the bridge will place the contained ethernet interface into promiscuous mode (don&#39;t ask me why). ESXi will reject this by default, and nothing will work. To fix this, edit the properties of the relevant vSwitch or VLAN, select the Security tab, and set &quot;Promiscuous Mode&quot; to &quot;Accept&quot;.</p><p>If anyone knows a better way to deal with this, or if I&#39;m misunderstanding what&#39;s happening there, please do tell.</p><p>I don&#39;t know if VMware&#39;s consumer products have similar issues or not.</p></li><li><p>tools/simbridge.sh could make the bridge setup easier:</p><blockquote><p># tools/simbridge.sh eth0 on # tools/simbridge.sh eth0 off</p></blockquote></li></ul></blockquote><p>-- Steve &lt;<a href="mailto:steve@floating.io" target="_blank" rel="noreferrer">steve@floating.io</a>&gt;</p><p>: <a href="http://floating.io" target="_blank" rel="noreferrer">http://floating.io</a></p>`,47)]))}const g=t(o,[["render",n]]);export{c as __pageData,g as default};
