import{_ as e,c as o,al as r,o as t}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"Nordic nRF5340-Audio-DK","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf53/boards/nrf5340-audio-dk/index.md","filePath":"en/platforms/arm/nrf53/boards/nrf5340-audio-dk/index.md"}'),n={name:"en/platforms/arm/nrf53/boards/nrf5340-audio-dk/index.md"};function i(l,a,d,s,p,h){return t(),o("div",null,a[0]||(a[0]=[r(`<h1 id="nordic-nrf5340-audio-dk" tabindex="-1">Nordic nRF5340-Audio-DK <a class="header-anchor" href="#nordic-nrf5340-audio-dk" aria-label="Permalink to &quot;Nordic nRF5340-Audio-DK&quot;">​</a></h1><p>chip:nrf53, chip:nrf5340</p><p>The <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF5340-Audio-DK" target="_blank" rel="noreferrer">nRF5340-Audio-DK</a> is a development kit dedicated for Bluetooth LE Audio application based on the nRF5340 from Nordic.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>Peripheral Support NOTES</p><hr><p>UART QSPI Buttons LEDs USB SD Card NFC PDM Microphone (VM3011) Audio DSP (CS47L63) Yes No No No No No No No No</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Serial console for the application core:</p><p>Pin Signal Notes</p><hr><p>P1.05 APP UART0 TX virtual COM 0 P1.04 APP UART0 RX virtual COM 0</p><p>Serial console for the network core:</p><p>Pin Signal Notes</p><hr><p>P1.09 NET UART0 TX virtual COM 1 P1.08 NET UART0 RX virtual COM 1</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The nRF5340-Audio-DK has 4 user-controllable LEDs:</p><p>LED MCU</p><hr><p>LED1 P0.31 LED2 P1.01 LED3 P1.02</p><p>A low output illuminates the LED.</p><h3 id="config-arch-leds" tabindex="-1">CONFIG_ARCH_LEDS <a class="header-anchor" href="#config-arch-leds" aria-label="Permalink to &quot;CONFIG\\_ARCH\\_LEDS&quot;">​</a></h3><p>If CONFIG_ARCH_LEDS is not defined, then the LEDs are completely under control of the application. The following interfaces are then available for application control of the LEDs:</p><pre><code>uint32_t board_userled_initialize(void);
void board_userled(int led, bool ledon);
void board_userled_all(uint32_t ledset);
</code></pre><h3 id="pushbuttons" tabindex="-1">Pushbuttons <a class="header-anchor" href="#pushbuttons" aria-label="Permalink to &quot;Pushbuttons&quot;">​</a></h3><p>BUTTON MCU</p><hr><p>BUTTON1 P0.02 BUTTON2 P0.03 BUTTON3 P0.04 BUTTON4 P0.05 BUTTON5 P0.06</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nrf5340-audio-dk:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="nsh-cpuapp" tabindex="-1">nsh_cpuapp <a class="header-anchor" href="#nsh-cpuapp" aria-label="Permalink to &quot;nsh\\_cpuapp&quot;">​</a></h3><p>Basic NuttShell configuration for the application core (console enabled in UART0, exposed via J-Link VCOM0, at 115200 bps).</p>`,36)]))}const f=e(n,[["render",i]]);export{c as __pageData,f as default};
