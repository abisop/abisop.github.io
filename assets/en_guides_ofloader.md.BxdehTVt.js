import{_ as a,c as t,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"Open Flash Loader","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/ofloader.md","filePath":"en/guides/ofloader.md"}'),s={name:"en/guides/ofloader.md"};function i(r,e,l,d,p,u){return n(),t("div",null,e[0]||(e[0]=[o(`<h1 id="open-flash-loader" tabindex="-1">Open Flash Loader <a class="header-anchor" href="#open-flash-loader" aria-label="Permalink to &quot;Open Flash Loader&quot;">​</a></h1><h2 id="introduce" tabindex="-1">Introduce <a class="header-anchor" href="#introduce" aria-label="Permalink to &quot;Introduce&quot;">​</a></h2><p>Open Flash loader is an implementation in NuttX that bridges the device drivers in NuttX with the programming methods of a flash loader in J-Link. It allows J-Link to program any supported NuttX device driver.</p><h2 id="configuration" tabindex="-1">CONFIGURATION <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;CONFIGURATION&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIG_DISABLE_IDLE_LOOP=y</span></span>
<span class="line"><span>CONFIG_SYSTEM_OFLOADER=y</span></span>
<span class="line"><span>CONFIG_SYSTEM_OFLOADER_TABLE=&quot;/dev/flash,0x08000000,0x20000&quot;,0</span></span></code></pre></div><p><code>\`CONFIG_DISABLE_IDLE_LOOP</code> is used to disable the idle loop in NuttX. <code>\`CONFIG_SYSTEM_OFLOADER</code>[ is used to enable the Open Flash Loader. ]{.title-ref}<code>CONFIG_SYSTEM_OFLOADER_TABLE</code>\` is used to configure the flash device first parameter is the device name, second parameter is the start address.</p><p>The reference configuration &quot;stm32f429i-disco:ofloader&quot; is designed to be used with the STM32F429I-DISCO board in NuttX, enabling the Open Flash loader functionality. This configuration allows the J-Link flash loader to program the NuttX image onto the STM32F429I-DISCO board.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><ol><li>Build NuttX with Open Flash Loader.</li><li>Configure the Jlink xml file. like</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;Database&gt;</span></span>
<span class="line"><span>    &lt;Device&gt;</span></span>
<span class="line"><span>        &lt;ChipInfo Vendor=&quot;STM32NUTTX&quot; Name=&quot;NuttX&quot; Core=&quot;JLINK_CORE_CORTEX_M4&quot; WorkRAMAddr=&quot;0x20000000&quot; WorkRAMSize=&quot;0x10000000&quot; /&gt;</span></span>
<span class="line"><span>        &lt;FlashBankInfo Name=&quot;Storage&quot; BaseAddr=&quot;0x00000000&quot; MaxSize=&quot;0xffffffff&quot; Loader=&quot;/home/ajh/work/vela_all/nuttx/nuttx&quot; LoaderType=&quot;FLASH_ALGO_TYPE_OPEN&quot; AlwaysPresent=&quot;1&quot;/&gt;</span></span>
<span class="line"><span>    &lt;/Device&gt;</span></span>
<span class="line"><span>&lt;/Database&gt;</span></span></code></pre></div><ol start="3"><li>Use <code>JLinkExe -if SWD -speed 4000 -device STM32NUTTX</code>, then <code>loadbin /home/ajh/work/nuttx.bin 0x08000000</code>, we can flash nuttx.bin to /dev/flash</li></ol><h2 id="precautions" tabindex="-1">Precautions <a class="header-anchor" href="#precautions" aria-label="Permalink to &quot;Precautions&quot;">​</a></h2><p>1.If you need to implement the ofloader on a different board, you will need to read the [wiki &lt;<a href="https://wiki.segger.com/SEGGER%5C_Flash%5C_Loader%5C" target="_blank" rel="noreferrer">https://wiki.segger.com/SEGGER\\_Flash\\_Loader\\</a>&gt;]{.title-ref} and refer to the implementation of &quot;ofloader.ld&quot; linker script located in the &quot;boards/arm/stm32/stm32f429i-disco/scripts&quot; directory. This linker script defines how the different sections of the NuttX image are placed in memory. You should configure the corresponding sections to be located in RAM, where the J-Link can write the image correctly.</p><p>2.When running the ofloader, J-Link disables any interrupts by default. Therefore, currently, it does not support programming devices with interrupt-driven drivers.</p><p>3.Due to limitations of J-Link, the ofloader image file cannot exceed 64KB. It is essential to be mindful of this constraint during programming.</p>`,15)]))}const f=a(s,[["render",i]]);export{c as __pageData,f as default};
