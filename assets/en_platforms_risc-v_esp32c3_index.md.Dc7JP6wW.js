import{_ as t,c as o,al as a,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Espressif ESP32-C3","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/esp32c3/index.md","filePath":"en/platforms/risc-v/esp32c3/index.md"}'),i={name:"en/platforms/risc-v/esp32c3/index.md"};function s(r,e,c,l,d,p){return n(),o("div",null,e[0]||(e[0]=[a(`<h1 id="espressif-esp32-c3" tabindex="-1">Espressif ESP32-C3 <a class="header-anchor" href="#espressif-esp32-c3" aria-label="Permalink to &quot;Espressif ESP32-C3&quot;">​</a></h1><p>The ESP32-C3 is an ultra-low-power and highly integrated SoC with a RISC-V core and supports 2.4 GHz Wi-Fi and Bluetooth Low Energy.</p><ul><li>Address Space <ul><li>800 KB of internal memory address space accessed from the instruction bus</li><li>560 KB of internal memory address space accessed from the data bus</li><li>1016 KB of peripheral address space</li><li>8 MB of external memory virtual address space accessed from the instruction bus</li><li>8 MB of external memory virtual address space accessed from the data bus</li><li>480 KB of internal DMA address space</li></ul></li><li>Internal Memory <ul><li>384 KB ROM</li><li>400 KB SRAM (16 KB can be configured as Cache)</li><li>8 KB of SRAM in RTC</li></ul></li><li>External Memory <ul><li>Up to 16 MB of external flash</li></ul></li><li>Peripherals <ul><li>35 peripherals</li></ul></li><li>GDMA <ul><li>7 modules are capable of DMA operations.</li></ul></li></ul><h2 id="esp32-c3-toolchain" tabindex="-1">ESP32-C3 Toolchain <a class="header-anchor" href="#esp32-c3-toolchain" aria-label="Permalink to &quot;ESP32-C3 Toolchain&quot;">​</a></h2><p>A generic RISC-V toolchain can be used to build ESP32-C3 projects. It&#39;s recommended to use the same toolchain used by NuttX CI. Please refer to the Docker <a href="https://github.com/apache/nuttx/tree/master/tools/ci/docker/linux/Dockerfile" target="_blank" rel="noreferrer">container</a> and check for the current compiler version being used. For instance:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>###############################################################################</span></span>
<span class="line"><span># Build image for tool required by RISCV builds</span></span>
<span class="line"><span>###############################################################################</span></span>
<span class="line"><span>FROM nuttx-toolchain-base AS nuttx-toolchain-riscv</span></span>
<span class="line"><span># Download the latest RISCV GCC toolchain prebuilt by xPack</span></span>
<span class="line"><span>RUN mkdir riscv-none-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>curl -s -L &quot;https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases/download/v13.2.0-2/xpack-riscv-none-elf-gcc-13.2.0-2-linux-x64.tar.gz&quot; \\</span></span>
<span class="line"><span>| tar -C riscv-none-elf-gcc --strip-components 1 -xz</span></span></code></pre></div><p>It uses the xPack&#39;s prebuilt toolchain based on GCC 13.2.0-2.</p><h3 id="installing" tabindex="-1">Installing <a class="header-anchor" href="#installing" aria-label="Permalink to &quot;Installing&quot;">​</a></h3><p>First, create a directory to hold the toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> mkdir -p /path/to/your/toolchain/riscv-none-elf-gcc</span></span></code></pre></div><p>Download and extract toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> curl -s -L &quot;https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases/download/v13.2.0-2/xpack-riscv-none-elf-gcc-13.2.0-2-linux-x64.tar.gz&quot; \\</span></span>
<span class="line"><span>| tar -C /path/to/your/toolchain/riscv-none-elf-gcc --strip-components 1 -xz</span></span></code></pre></div><p>Add the toolchain to your \`PATH\`:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> echo &quot;export PATH=/path/to/your/toolchain/riscv-none-elf-gcc/bin:PATH&quot; &gt;&gt; ~/.bashrc</span></span></code></pre></div><p>You can edit your shell&#39;s rc files if you don&#39;t use bash.</p><h2 id="building-and-flashing-nuttx" tabindex="-1">Building and flashing NuttX <a class="header-anchor" href="#building-and-flashing-nuttx" aria-label="Permalink to &quot;Building and flashing NuttX&quot;">​</a></h2><h3 id="installing-esptool" tabindex="-1">Installing esptool <a class="header-anchor" href="#installing-esptool" aria-label="Permalink to &quot;Installing esptool&quot;">​</a></h3><p>Make sure that <code>esptool.py</code> is installed and up-to-date. This tool is used to convert the ELF to a compatible ESP32-C3 image and to flash the image into the board.</p><p>It can be installed with: <code>pip install esptool&gt;=4.8.1</code>.</p><p>Warning</p><p>Installing <code>esptool.py</code> may required a Python virtual environment on newer systems. This will be the case if the <code>pip install</code> command throws an error such as: <code>error: externally-managed-environment</code>.</p><p>If you are not familiar with virtual environments, refer to <a href="./.html">Managing esptool on virtual environment</a> for instructions on how to install <code>esptool.py</code>.</p><h3 id="bootloader-and-partitions" tabindex="-1">Bootloader and partitions <a class="header-anchor" href="#bootloader-and-partitions" aria-label="Permalink to &quot;Bootloader and partitions&quot;">​</a></h3><p>NuttX can boot the ESP32-C3 directly using the so-called &quot;Simple Boot&quot;. An externally-built 2nd stage bootloader is not required in this case as all functions required to boot the device are built within NuttX. Simple boot does not require any specific configuration (it is selectable by default if no other 2nd stage bootloader is used).</p><p>If other features, like <a href="#secure-boot-and-flash-encryption">Secure Boot and Flash Encryption</a>, are required, an externally-built 2nd stage bootloader is needed. The bootloader is built using the <code>make bootloader</code> command. This command generates the firmware in the <code>nuttx</code> folder. The <code>ESPTOOL_BINDIR</code> is used in the <code>make flash</code> command to specify the path to the bootloader. For compatibility among other SoCs and future options of 2nd stage bootloaders, the commands <code>make bootloader</code> and the <code>ESPTOOL_BINDIR</code> option (for the <code>make flash</code>) can be used even if no externally-built 2nd stage bootloader is being built (they will be ignored if Simple Boot is used, for instance):</p><pre><code> make bootloader
</code></pre><p>Note</p><p>It is recommended that if this is the first time you are using the board with NuttX to perform a complete SPI FLASH erase.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> esptool.py erase_flash</span></span></code></pre></div><h3 id="building-and-flashing" tabindex="-1">Building and Flashing <a class="header-anchor" href="#building-and-flashing" aria-label="Permalink to &quot;Building and Flashing&quot;">​</a></h3><p>This is a two-step process where the first step converts the ELF file into an ESP32-C3 compatible binary and the second step flashes it to the board. These steps are included in the build system and it is possible to build and flash the NuttX firmware simply by running:</p><pre><code> make flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=./
</code></pre><p>where:</p><ul><li><code>ESPTOOL_PORT</code> is typically <code>/dev/ttyUSB0</code> or similar.</li><li><code>ESPTOOL_BINDIR=./</code> is the path of the externally-built 2nd stage bootloader and the partition table (if applicable): when built using the <code>make bootloader</code>, these files are placed into <code>nuttx</code> folder.</li><li><code>ESPTOOL_BAUD</code> is able to change the flash baud rate if desired.</li></ul><h3 id="flashing-nsh-example" tabindex="-1">Flashing NSH Example <a class="header-anchor" href="#flashing-nsh-example" aria-label="Permalink to &quot;Flashing NSH Example&quot;">​</a></h3><p>This example shows how to build and flash the <code>nsh</code> defconfig for the ESP32-C3-DevKitC-02 board:</p><pre><code> cd nuttx
 make distclean
 ./tools/configure.sh esp32c3-generic:nsh
 make -j(nproc)
</code></pre><p>When the build is complete, the firmware can be flashed to the board using the command:</p><pre><code> make -j(nproc) flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=./
</code></pre><p>where <code>&lt;port&gt;</code> is the serial port where the board is connected:</p><pre><code> make flash ESPTOOL_PORT=/dev/ttyUSB0 ESPTOOL_BINDIR=./
CP: nuttx.hex
MKIMAGE: NuttX binary
esptool.py -c esp32c3 elf2image --ram-only-header -fs 4MB -fm dio -ff 80m -o nuttx.bin nuttx
esptool.py v4.8.1
Creating esp32c3 image...
Image has only RAM segments visible. ROM segments are hidden and SHA256 digest is not appended.
Merged 1 ELF section
Successfully created esp32c3 image.
Generated: nuttx.bin
esptool.py -c esp32c3 -p /dev/ttyUSB0 -b 921600  write_flash -fs 4MB -fm dio -ff 80m 0x0000 nuttx.bin
esptool.py v4.8.1
Serial port /dev/ttyUSB0
Connecting....
Chip is ESP32-C3 (QFN32) (revision v0.4)
[...]
Flash will be erased from 0x00000000 to 0x0003afff...
Compressed 240768 bytes to 104282...
Wrote 240768 bytes (104282 compressed) at 0x00000000 in 3.4 seconds (effective 568.4 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
</code></pre><p>Now opening the serial port with a terminal emulator should show the NuttX console:</p><pre><code> picocom -b 115200 /dev/ttyUSB0
NuttShell (NSH) NuttX-12.8.0
nsh&gt; uname -a
NuttX 12.8.0 759d37b97c-dirty Mar  5 2025 19:58:56 risc-v esp32c3-generic
</code></pre><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>This section describes debugging techniques for the ESP32-C3.</p><h3 id="debugging-with-openocd-and-gdb" tabindex="-1">Debugging with <code>openocd</code> and <code>gdb</code> <a class="header-anchor" href="#debugging-with-openocd-and-gdb" aria-label="Permalink to &quot;Debugging with \`openocd\` and \`gdb\`&quot;">​</a></h3><p>Espressif uses a specific version of OpenOCD to support ESP32-C3: <a href="https://github.com/espressif/" target="_blank" rel="noreferrer">openocd-esp32</a>.</p><p>Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32c3/api-guides/jtag-debugging/index.html#jtag-debugging-building-openocd" target="_blank" rel="noreferrer">Building OpenOCD from Sources</a> for more information on how to build OpenOCD for ESP32-C3.</p><p>ESP32-C3 has a built-in JTAG circuitry and can be debugged without any additional chip. Only an USB cable connected to the D+/D- pins is necessary:</p><p>ESP32-C3 Pin USB Signal</p><hr><p>GPIO18 D- GPIO19 D+ 5V V_BUS GND Ground</p><p>Note</p><p>One must configure the USB drivers to enable JTAG communication. Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32c3/api-guides/jtag-debugging/configure-builtin-jtag.html#configure-usb-drivers" target="_blank" rel="noreferrer">Configure USB Drivers</a> for more information.</p><p>OpenOCD can then be used:</p><pre><code>openocd -s &lt;tcl_scripts_path&gt; -c &#39;set ESP_RTOS hwthread&#39; -f board/esp32c3-builtin.cfg -c &#39;init; reset halt; esp appimage_offset 0x0&#39;
</code></pre><p>Note</p><p>- <code>appimage_offset</code> should be set to <code>0x0</code> when <code>Simple Boot</code> is used. For MCUboot, this value should be set to <code>CONFIG_ESPRESSIF_OTA_PRIMARY_SLOT_OFFSET</code> value (<code>0x10000</code> by default).</p><ul><li><code>-s &lt;tcl_scripts_path&gt;</code> defines the path to the OpenOCD scripts. Usually set to [tcl]{.title-ref} if running openocd from its source directory. It can be omitted if [openocd-esp32]{.title-ref} were installed in the system with [sudo make install]{.title-ref}.</li></ul><p>If you want to debug with an external JTAG adapter it can be connected as follows:</p><p>ESP32-C6 Pin JTAG Signal</p><hr><p>GPIO4 TMS GPIO5 TDI GPIO6 TCK GPIO7 TDO</p><p>Furthermore, an efuse needs to be burnt to be able to debug:</p><pre><code>espefuse.py -p &lt;port&gt; burn_efuse DIS_USB_JTAG
</code></pre><p>Warning</p><p>Burning eFuses is an irreversible operation, so please consider the above option before starting the process.</p><p>OpenOCD can then be used:</p><pre><code>openocd  -c &#39;set ESP_RTOS hwthread; set ESP_FLASH_SIZE 0&#39; -f board/esp32c3-ftdi.cfg
</code></pre><p>Once OpenOCD is running, you can use GDB to connect to it and debug your application:</p><pre><code>riscv-none-elf-gdb -x gdbinit nuttx
</code></pre><p>whereas the content of the <code>gdbinit</code> file is:</p><pre><code>target remote :3333
set remote hardware-watchpoint-limit 2
mon reset halt
flushregs
monitor reset halt
thb nsh_main
c
</code></pre><p>Note</p><p><code>nuttx</code> is the ELF file generated by the build process. Please note that <code>CONFIG_DEBUG_SYMBOLS</code> must be enabled in the <code>menuconfig</code>.</p><p>Please refer to [[/quick](]{.title-ref}/quick.md)start/debugging\` for more information about debugging techniques.</p><h3 id="stack-dump-and-backtrace-dump" tabindex="-1">Stack Dump and Backtrace Dump <a class="header-anchor" href="#stack-dump-and-backtrace-dump" aria-label="Permalink to &quot;Stack Dump and Backtrace Dump&quot;">​</a></h3><p>NuttX has a feature to dump the stack of a task and to dump the backtrace of it (and of all the other tasks). This feature is useful to debug the system when it is not behaving as expected, especially when it is crashing.</p><p>In order to enable this feature, the following options must be enabled in the NuttX configuration: <code>CONFIG_SCHED_BACKTRACE</code>, <code>CONFIG_DEBUG_SYMBOLS</code> and, optionally, <code>CONFIG_ALLSYMS</code>.</p><p>Note</p><p>The first two options enable the backtrace dump. The third option enables the backtrace dump with the associated symbols, but increases the size of the generated NuttX binary.</p><p>Espressif also provides a tool to translate the backtrace dump into a human-readable format. This tool is called <code>btdecode.sh</code> and is available at <code>tools/espressif/btdecode.sh</code> of NuttX repository.</p><p>Note</p><p>This tool is not necessary if <code>CONFIG_ALLSYMS</code> is enabled. In this case, the backtrace dump contains the function names.</p><h4 id="example-crash-dump" tabindex="-1">Example - Crash Dump <a class="header-anchor" href="#example-crash-dump" aria-label="Permalink to &quot;Example - Crash Dump&quot;">​</a></h4><p>A typical crash dump, caused by an illegal load with <code>CONFIG_SCHED_BACKTRACE</code> and <code>CONFIG_DEBUG_SYMBOLS</code> enabled, is shown below:</p><pre><code>riscv_exception: EXCEPTION: Store/AMO access fault. MCAUSE: 00000007, EPC: 42012df2, MT0
riscv_exception: PANIC!!! Exception = 00000007
_assert: Current Version: NuttX  10.4.0 2ae3246e40-dirty Sep 19 2024 14:34:41 risc-v
_assert: Assertion failed panic: at file: :0 task: backtrace process: backtrace 0x42012dac
up_dump_register: EPC: 42012df2
up_dump_register: A0: 0000005a A1: 3fc88a54 A2: 00000001 A3: 00000088
up_dump_register: A4: 00007fff A5: 00000001 A6: 00000000 A7: 00000000
up_dump_register: T0: 00000000 T1: 00000000 T2: ffffffff T3: 00000000
up_dump_register: T4: 00000000 T5: 00000000 T6: 00000000
up_dump_register: S0: 3fc87b16 S1: 3fc87b00 S2: 00000000 S3: 00000000
up_dump_register: S4: 00000000 S5: 00000000 S6: 00000000 S7: 00000000
up_dump_register: S8: 00000000 S9: 00000000 S10: 00000000 S11: 00000000
up_dump_register: SP: 3fc88ab0 FP: 3fc87b16 TP: 00000000 RA: 42012df2
dump_stack: User Stack:
dump_stack:   base: 0x3fc87b20
dump_stack:   size: 00004048
dump_stack:     sp: 0x3fc88ab0
stack_dump: 0x3fc88a90: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001800
stack_dump: 0x3fc88ab0: 00000000 3fc87718 42012dac 42006dd0 00000000 00000000 3fc87b00 00000002
stack_dump: 0x3fc88ad0: 00000000 00000000 00000000 42004d4c 00000000 00000000 00000000 00000000
stack_dump: 0x3fc88af0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
sched_dumpstack: backtrace| 2: 0x42012df2
dump_tasks:    PID GROUP PRI POLICY   TYPE    NPX STATE   EVENT      SIGMASK          STACKBASE  STACKSIZE   COMMAND
dump_tasks:   ----   --- --- -------- ------- --- ------- ---------- ---------------- 0x3fc845e0      1536   irq
dump_task:       0     0   0 FIFO     Kthread - Ready              0000000000000000 0x3fc85d18      2032   Idle_Task
dump_task:       1     1 100 RR       Task    - Waiting Semaphore  0000000000000000 0x3fc86c30      2000   nsh_main
dump_task:       2     2 255 RR       Task    - Running            0000000000000000 0x3fc87b20      4048   backtrace task
sched_dumpstack: backtrace| 0: 0x42008420
sched_dumpstack: backtrace| 1: 0x420089a8
sched_dumpstack: backtrace| 2: 0x42012df2
</code></pre><p>The lines starting with <code>sched_dumpstack</code> show the backtrace of the tasks. By checking it, it is possible to track the root cause of the crash. Saving this output to a file and using the <code>btdecode.sh</code>:</p><pre><code>./tools/btdecode.sh esp32c3 /tmp/backtrace.txt
Backtrace for task 2:
0x42012df2: assert_on_task at backtrace_main.c:158
 (inlined by) backtrace_main at backtrace_main.c:194

Backtrace dump for all tasks:

Backtrace for task 2:
0x42012df2: assert_on_task at backtrace_main.c:158
 (inlined by) backtrace_main at backtrace_main.c:194

Backtrace for task 1:
0x420089a8: sys_call2 at syscall.h:227
 (inlined by) up_switch_context at riscv_switchcontext.c:95

Backtrace for task 0:
0x42008420: up_idle at esp_idle.c:74
</code></pre><p>The above output shows the backtrace of the tasks. By checking it, it is possible to track the functions that were being executed when the crash occurred.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates the state of peripherals&#39; support in NuttX:</p><p>+----------------------+----------------------+----------------------+ | Peripheral | Support | NOTES | +======================+======================+======================+ | ADC AES Bluetooth | &gt; Yes No Yes Yes No | Oneshot | | CAN/TWAI DMA DS | &gt; No | | +----------------------+----------------------+----------------------+ | eFuse GPIO HMAC | &gt; Yes Yes No | Also virtual mode | | | | supported | +----------------------+----------------------+----------------------+ | I2C I2S LED/PWM RMT | &gt; Yes Yes Yes Yes | Master and Slave | | RNG RSA RTC SHA SPI | &gt; Yes No Yes No Yes | mode supported | | SPIFLASH SPIRAM | &gt; Yes No Yes Yes Yes | | | Timers UART USB | | | | Serial | | | +----------------------+----------------------+----------------------+ | Watchdog | &gt; Yes | &gt; XTWDT supported | +----------------------+----------------------+----------------------+ | Wi-Fi | &gt; Yes | &gt; WPA3-SAE supported | +----------------------+----------------------+----------------------+</p><h3 id="analog-to-digital-converter-adc" tabindex="-1">Analog-to-digital converter (ADC) <a class="header-anchor" href="#analog-to-digital-converter-adc" aria-label="Permalink to &quot;Analog-to-digital converter (ADC)&quot;">​</a></h3><p>Two ADC units are available for the ESP32-C3:</p><ul><li>ADC1 with 5 channels.</li><li>ADC2 with 1 channel and internal voltage reading. <strong>This unit is not implemented.</strong></li></ul><p>Those units are independent and can be used simultaneously. During bringup, GPIOs for selected channels are configured automatically to be used as ADC inputs. If available, ADC calibration is automatically applied (see <a href="https://docs.espressif.com/projects/esp-idf/en/v5.1/esp32c3/api-reference/peripherals/adc_calibration.html" target="_blank" rel="noreferrer">this page</a> for more details). Otherwise, a simple conversion is applied based on the attenuation and resolution.</p><p>The ADC unit is accessible using the ADC character driver, which returns data for the enabled channels.</p><p>The ADC1 unit can be enabled in the menu <code>System Type --&gt; Peripheral Support --&gt; Analog-to-digital converter (ADC)</code>{.interpreted-text role=&quot;menuselection&quot;}.</p><p>Then, it can be customized in the menu <code>System Type --&gt; ADC Configuration</code>{.interpreted-text role=&quot;menuselection&quot;}, which includes operating mode, gain and channels.</p><p>+---------+-----------+ | Channel | ADC1 GPIO | +=========+===========+ | 0 | &gt; 0 | +---------+-----------+ | 1 | &gt; 1 | +---------+-----------+ | 2 | &gt; 2 | +---------+-----------+ | 3 | &gt; 3 | +---------+-----------+ | 4 | &gt; 4 | +---------+-----------+</p><p>Warning</p><p>Maximum measurable voltage may saturate around 2900 mV.</p><h2 id="secure-boot-and-flash-encryption" tabindex="-1">Secure Boot and Flash Encryption <a class="header-anchor" href="#secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Secure Boot and Flash Encryption&quot;">​</a></h2><h3 id="secure-boot" tabindex="-1">Secure Boot <a class="header-anchor" href="#secure-boot" aria-label="Permalink to &quot;Secure Boot&quot;">​</a></h3><p>Secure Boot protects a device from running any unauthorized (i.e., unsigned) code by checking that each piece of software that is being booted is signed. On an ESP32-C3, these pieces of software include the second stage bootloader and each application binary. Note that the first stage bootloader does not require signing as it is ROM code thus cannot be changed. This is achieved using specific hardware in conjunction with MCUboot (read more about MCUboot <a href="https://docs.mcuboot.com/" target="_blank" rel="noreferrer">here</a>).</p><p>The Secure Boot process on the ESP32-C3 involves the following steps performed:</p><ol><li>The first stage bootloader verifies the second stage bootloader&#39;s RSA-PSS signature. If the verification is successful, the first stage bootloader loads and executes the second stage bootloader.</li><li>When the second stage bootloader loads a particular application image, the application&#39;s signature (RSA, ECDSA or ED25519) is verified by MCUboot. If the verification is successful, the application image is executed.</li></ol><p>Warning</p><p>Once enabled, Secure Boot will not boot a modified bootloader. The bootloader will only boot an application firmware image if it has a verified digital signature. There are implications for reflashing updated images once Secure Boot is enabled. You can find more information about the ESP32-C3&#39;s Secure boot <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/security/secure-boot-v2.html" target="_blank" rel="noreferrer">here</a>.</p><p>Note</p><p>As the bootloader image is built on top of the Hardware Abstraction Layer component of <a href="https://github.com/espressif/esp-idf" target="_blank" rel="noreferrer">ESP-IDF</a>, the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">API port by Espressif</a> will be used by MCUboot rather than the original NuttX port.</p><h3 id="flash-encryption" tabindex="-1">Flash Encryption <a class="header-anchor" href="#flash-encryption" aria-label="Permalink to &quot;Flash Encryption&quot;">​</a></h3><p>Flash encryption is intended for encrypting the contents of the ESP32-C3&#39;s off-chip flash memory. Once this feature is enabled, firmware is flashed as plaintext, and then the data is encrypted in place on the first boot. As a result, physical readout of flash will not be sufficient to recover most flash contents.</p><p>Warning</p><p>After enabling Flash Encryption, an encryption key is generated internally by the device and cannot be accessed by the user for re-encrypting data and re-flashing the system, hence it will be permanently encrypted. Re-flashing an encrypted system is complicated and not always possible. You can find more information about the ESP32-C3&#39;s Flash Encryption <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/security/flash-encryption.html" target="_blank" rel="noreferrer">here</a>.</p><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>First of all, we need to install <code>imgtool</code> (the MCUboot utility application to manipulate binary images):</p><pre><code> pip install imgtool
</code></pre><p>We also need to make sure that the python modules are added to <code>PATH</code>:</p><pre><code> echo &quot;PATH=PATH:/home/USER/.local/bin&quot; &gt;&gt; ~/.bashrc
</code></pre><p>Now, we will create a folder to store the generated keys (such as <code>~/signing_keys</code>):</p><pre><code> mkdir ~/signing_keys &amp;&amp; cd ~/signing_keys
</code></pre><p>With all set up, we can now generate keys to sign the bootloader and application binary images, respectively, of the compiled project:</p><pre><code> espsecure.py generate_signing_key --version 2 bootloader_signing_key.pem
 imgtool keygen --key app_signing_key.pem --type rsa-3072
</code></pre><p>Important</p><p>The contents of the key files must be stored securely and kept secret.</p><h3 id="enabling-secure-boot-and-flash-encryption" tabindex="-1">Enabling Secure Boot and Flash Encryption <a class="header-anchor" href="#enabling-secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Enabling Secure Boot and Flash Encryption&quot;">​</a></h3><p>To enable Secure Boot for the current project, go to the project&#39;s NuttX directory, execute <code>make menuconfig</code> and the following steps:</p><blockquote><ol><li>Enable experimental features in <code>Build Setup --&gt; Show experimental options</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable MCUboot in <code>Application Configuration --&gt; Bootloader Utilities --&gt; MCUboot</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Change image type to <code>MCUboot-bootable format</code> in <code>System Type --&gt; Application Image Configuration --&gt; Application Image Format</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable building MCUboot from the source code by selecting <code>Build binaries from source</code>; in <code>System Type --&gt; Application Image Configuration --&gt; Source for bootloader binaries</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable Secure Boot in <code>System Type --&gt; Application Image Configuration --&gt; Enable hardware Secure Boot in bootloader</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>If you want to protect the SPI Bus against data sniffing, you can enable Flash Encryption in <code>System Type --&gt; Application Image Configuration --&gt; Enable Flash Encryption on boot</code>{.interpreted-text role=&quot;menuselection&quot;}.</li></ol></blockquote><p>Now you can design an update and confirm agent to your application. Check the <a href="https://docs.mcuboot.com/design.html" target="_blank" rel="noreferrer">MCUboot design guide</a> and the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">MCUboot Espressif port documentation</a> for more information on how to apply MCUboot. Also check some <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/readme-nuttx.md" target="_blank" rel="noreferrer">notes about the NuttX MCUboot port</a>, the <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/PORTING.md" target="_blank" rel="noreferrer">MCUboot porting guide</a> and some <a href="https://github.com/apache/nuttx-apps/tree/master/examples/mcuboot" target="_blank" rel="noreferrer">examples of MCUboot applied in NuttX applications</a>.</p><p>After you developed an application which implements all desired functions, you need to flash it into the primary image slot of the device (it will automatically be in the confirmed state, you can learn more about image confirmation <a href="https://docs.mcuboot.com/design.html#image-swapping" target="_blank" rel="noreferrer">here</a>). To flash to the primary image slot, select <code>Application image primary slot</code> in <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} and compile it using <code>make -j ESPSEC_KEYDIR=~/signing_keys</code>.</p><p>When creating update images, make sure to change <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} to <code>Application image secondary slot</code>.</p><p>Important</p><p>When deploying your application, make sure to disable UART Download Mode by selecting <code>Permanently disabled</code> in <code>System Type --&gt; Application Image Configuration --&gt; UART ROM download mode</code>{.interpreted-text role=&quot;menuselection&quot;} and change usage mode to <code>Release</code> in [System Type --&gt; Application Image Configuration --&gt; Enable usage mode]{.title-ref}. <strong>After disabling UART Download Mode you will not be able to flash other images through UART.</strong></p><h2 class="title-ref" id="managing-esptool-on-virtual-environment" tabindex="-1">_[Managing esptool on virtual environment] <a class="header-anchor" href="#managing-esptool-on-virtual-environment" aria-label="Permalink to &quot;\\_[Managing esptool on virtual environment]{.title-ref}&quot;">​</a></h2><p>This section describes how to install <code>esptool</code>, <code>imgtool</code> or any other Python packages in a proper environment.</p><p>Normally, a Linux-based OS would already have Python 3 installed by default. Up to a few years ago, you could simply call <code>pip install</code> to install packages globally. However, this is no longer recommended as it can lead to conflicts between packages and versions. The recommended way to install Python packages is to use a virtual environment.</p><p>A virtual environment is a self-contained directory that contains a Python installation for a particular version of Python, plus a number of additional packages. You can create a virtual environment for each project you are working on, and install the required packages in that environment.</p><p>Two alternatives are explained below, you can select any one of those.</p><h3 id="using-pipx-recommended" tabindex="-1">Using pipx (recommended) <a class="header-anchor" href="#using-pipx-recommended" aria-label="Permalink to &quot;Using pipx (recommended)&quot;">​</a></h3><p><code>pipx</code> is a tool that makes it easy to install Python packages in a virtual environment. To install <code>pipx</code>, you can run the following command (using apt as example):</p><pre><code> apt install pipx
</code></pre><p>Once you have installed <code>pipx</code>, you can use it to install Python packages in a virtual environment. For example, to install the <code>esptool</code> package, you can run the following command:</p><pre><code> pipx install esptool
</code></pre><p>This will create a new virtual environment in the <code>~/.local/pipx/venvs</code> directory, which contains the <code>esptool</code> package. You can now use the <code>esptool</code> command as normal, and so will the build system.</p><p>Make sure to run <code>pipx ensurepath</code> to add the <code>~/.local/bin</code> directory to your <code>PATH</code>. This will allow you to run the <code>esptool</code> command from any directory.</p><h3 id="using-venv-alternative" tabindex="-1">Using venv (alternative) <a class="header-anchor" href="#using-venv-alternative" aria-label="Permalink to &quot;Using venv (alternative)&quot;">​</a></h3><p>To create a virtual environment, you can use the <code>venv</code> module, which is included in the Python standard library. To create a virtual environment, you can run the following command:</p><pre><code> python3 -m venv myenv
</code></pre><p>This will create a new directory called <code>myenv</code> in the current directory, which contains a Python installation and a copy of the Python standard library. To activate the virtual environment, you can run the following command:</p><pre><code> source myenv/bin/activate
</code></pre><p>This will change your shell prompt to indicate that you are now working in the virtual environment. You can now install packages using <code>pip</code>. For example, to install the <code>esptool</code> package, you can run the following command:</p><pre><code> pip install esptool
</code></pre><p>This will install the <code>esptool</code> package in the virtual environment. You can now use the <code>esptool</code> command as normal. When you are finished working in the virtual environment, you can deactivate it by running the following command:</p><pre><code> deactivate
</code></pre><p>This will return your shell prompt to its normal state. You can reactivate the virtual environment at any time by running the <code>source myenv/bin/activate</code> command again. You can also delete the virtual environment by deleting the directory that contains it.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,159)]))}const m=t(i,[["render",s]]);export{u as __pageData,m as default};
