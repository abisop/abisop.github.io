import{_ as o,c as a,al as n,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Nordic nRF9160 DK (nRF9160)","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf91/boards/nrf9160-dk/index.md","filePath":"en/platforms/arm/nrf91/boards/nrf9160-dk/index.md"}'),i={name:"en/platforms/arm/nrf91/boards/nrf9160-dk/index.md"};function t(s,e,l,d,c,h){return r(),a("div",null,e[0]||(e[0]=[n(`<h1 id="nordic-nrf9160-dk-nrf9160" tabindex="-1">Nordic nRF9160 DK (nRF9160) <a class="header-anchor" href="#nordic-nrf9160-dk-nrf9160" aria-label="Permalink to &quot;Nordic nRF9160 DK (nRF9160)&quot;">​</a></h1><p>chip:nrf91, chip:nrf9160</p><p>The <a href="https://www.nordicsemi.com/Products/Development-hardware/nrf9160-dk" target="_blank" rel="noreferrer">nRF9160-DK (PCA10090)</a> is a development board based on the nRF9160 and nRF52840 from Nordic.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Serial console for the application core:</p><p>Pin Signal Notes</p><hr><p>P0.28 APP UART0 TX virtual COM 0 P0.29 APP UART0 RX virtual COM 0</p><p>Serial console for the bootloader (secure domain):</p><p>Pin Signal Notes</p><hr><p>P0.00 APP UART1 TX virtual COM 2 P0.01 APP UART1 RX virtual COM 2</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The PCA10090 has 4 user-controllable LEDs:</p><p>LED MCU</p><hr><p>LED1 P0.02 LED2 P0.03 LED3 P0.04 LED4 P0.05</p><p>A low output illuminates the LED.</p><h3 id="config-arch-leds" tabindex="-1">CONFIG_ARCH_LEDS <a class="header-anchor" href="#config-arch-leds" aria-label="Permalink to &quot;CONFIG\\_ARCH\\_LEDS&quot;">​</a></h3><p>If CONFIG_ARCH_LEDS is not defined, then the LEDs are completely under control of the application. The following interfaces are then available for application control of the LEDs:</p><pre><code>uint32_t board_userled_initialize(void);
void board_userled(int led, bool ledon);
void board_userled_all(uint32_t ledset);
</code></pre><h3 id="pushbuttons" tabindex="-1">Pushbuttons <a class="header-anchor" href="#pushbuttons" aria-label="Permalink to &quot;Pushbuttons&quot;">​</a></h3><p>BUTTON MCU</p><hr><p>BUTTON1 P0.06 BUTTON2 P0.07</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nrf9160-dk:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, exposed via J-Link VCOM connection, at 115200 bps).</p><h3 id="ostest-tickless" tabindex="-1">ostest_tickless <a class="header-anchor" href="#ostest-tickless" aria-label="Permalink to &quot;ostest\\_tickless&quot;">​</a></h3><p>This is a NSH configuration that includes <code>apps/testing/ostest</code> as a builtin and enable support for the tick-less OS.</p><h3 id="miniboot-s" tabindex="-1">miniboot_s <a class="header-anchor" href="#miniboot-s" aria-label="Permalink to &quot;miniboot\\_s&quot;">​</a></h3><p>This configuration is a simple bootloader that allows you to enter a TZ non-secure environment.</p><h3 id="modem-ns" tabindex="-1">modem_ns <a class="header-anchor" href="#modem-ns" aria-label="Permalink to &quot;modem\\_ns&quot;">​</a></h3><p>This configuration includes modem firmware and MUST BE run in non-secure environment. Booting into a non-secure environment can be done using the miniboot_s configuration.</p><p>To get this configuration working with miniboot bootloader follow these steps:</p><ol><li><p>build firmware for miniboot and modem configuration:</p><pre><code>cmake -B build_boot -DBOARD_CONFIG=nrf9160-dk:miniboot_s -GNinja
cmake -B build_modem -DBOARD_CONFIG=nrf9160-dk:modem_ns -GNinja
cmake --build build_boot
cmake --build build_modem
</code></pre></li><li><p>flash bootloader:</p><pre><code>nrfjprog --program build_boot/nuttx.hex --chiperase --verify
</code></pre></li><li><p>flash modem image:</p><pre><code>nrfjprog --program build_modem/nuttx.hex
</code></pre></li><li><p>reset chip:</p><pre><code>nrfjprog --reset
</code></pre></li></ol>`,40)]))}const f=o(i,[["render",t]]);export{u as __pageData,f as default};
