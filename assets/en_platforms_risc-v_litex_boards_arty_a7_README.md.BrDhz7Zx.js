import{_ as e,c as a,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/litex/boards/arty_a7/README.md","filePath":"en/platforms/risc-v/litex/boards/arty_a7/README.md"}'),i={name:"en/platforms/risc-v/litex/boards/arty_a7/README.md"};function n(l,t,s,p,c,u){return r(),a("div",null,t[0]||(t[0]=[o('<ol><li>Download and install toolchain</li></ol><p>$ curl <a href="https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86%5C_64-linux-ubuntu14.tar.gz" target="_blank" rel="noreferrer">https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2019.08.0-x86\\_64-linux-ubuntu14.tar.gz</a></p><ol start="2"><li>Follow instruction on <a href="https://github.com/enjoy-digital/litex" target="_blank" rel="noreferrer">https://github.com/enjoy-digital/litex</a> to build the vexriscv softcore fpga gateware and flash to arty_a7 board</li></ol><p>$ cd litex-boards/litex_boards/targets $ ./digilent_arty.py --with-ethernet --with-sdcard --uart-baudrate 1000000 --cpu-type=vexriscv --cpu-variant=secure --build --load --flash</p><ol start="3"><li>Configure and build NuttX</li></ol><p>$ mkdir ./nuttx; cd ./nuttx $ git clone <a href="https://github.com/apache/nuttx.git" target="_blank" rel="noreferrer">https://github.com/apache/nuttx.git</a> nuttx $ git clone <a href="https://github.com/apache/nuttx-apps.git" target="_blank" rel="noreferrer">https://github.com/apache/nuttx-apps.git</a> apps $ cd nuttx $ make distclean $ ./tools/configure.sh arty_a7:nsh $ make V=1</p><ol start="4"><li><p>Setup tftp server on your laptop, copy nuttx.bin to your tftpboot directory and change its name to boot.bin</p></li><li><p>Setup the wire connection(uart and tftp) between your board and laptop</p></li><li><p>Run $ minicom -b 1000000 /dev/ttyUSB1 (the default baudrate on litex vexriscv is 1e6) when you see the bios prompt &quot;litex&gt;&quot;, type &quot;netboot&quot; and enter soon comes the nsh prompt</p></li><li><p>TODO</p></li></ol><p>Support GPIO/SPI/I2C/RTC/WDT/PWM Support RISC-V User mode</p>',8)]))}const _=e(i,[["render",n]]);export{h as __pageData,_ as default};
