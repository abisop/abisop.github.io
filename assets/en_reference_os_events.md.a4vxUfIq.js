import{_ as t,c as a,al as n,o}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"Events","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/os/events.md","filePath":"en/reference/os/events.md"}'),s={name:"en/reference/os/events.md"};function i(r,e,c,l,f,h){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h1><p>Events groups are synchronization primitives that allow tasks to wait for multiple conditions to be met before proceeding. They are particularly useful in scenarios where a task needs to wait for several events to occur simultaneously. This concept can be particularly powerful in real-time operating systems (RTOS).</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>An event group consists of a set of binary flags, each representing a specific event. Tasks can set, clear, and wait on these flags. When a task waits on an event group, it can specify which flags it is interested in and whether it wants to wait for all specified flags to be set or just any one of them.</p><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h2><p><code>CONFIG_SCHED_EVENTS</code></p><p>: This option enables event objects. Threads may wait on event objects for specific events, but both threads and ISRs may deliver events to event objects.</p><h2 id="common-events-interfaces" tabindex="-1">Common Events Interfaces <a class="header-anchor" href="#common-events-interfaces" aria-label="Permalink to &quot;Common Events Interfaces&quot;">​</a></h2><h3 id="events-types" tabindex="-1">Events Types <a class="header-anchor" href="#events-types" aria-label="Permalink to &quot;Events Types&quot;">​</a></h3><ul><li><code>nxevent_t</code>. Defines one event group entry.</li><li><code>nxevent_mask_t</code>. Defines one events mask value.</li></ul><h3 id="notifier-chain-interfaces" tabindex="-1">Notifier Chain Interfaces <a class="header-anchor" href="#notifier-chain-interfaces" aria-label="Permalink to &quot;Notifier Chain Interfaces&quot;">​</a></h3>',11)]))}const v=t(s,[["render",i]]);export{p as __pageData,v as default};
