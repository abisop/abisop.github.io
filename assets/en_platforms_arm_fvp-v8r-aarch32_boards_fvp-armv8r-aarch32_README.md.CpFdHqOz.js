import{_ as t,c as r,al as a,o}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"README.txt","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/fvp-v8r-aarch32/boards/fvp-armv8r-aarch32/README.md","filePath":"en/platforms/arm/fvp-v8r-aarch32/boards/fvp-armv8r-aarch32/README.md"}'),n={name:"en/platforms/arm/fvp-v8r-aarch32/boards/fvp-armv8r-aarch32/README.md"};function i(l,e,s,c,p,m){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="readme-txt" tabindex="-1">README.txt <a class="header-anchor" href="#readme-txt" aria-label="Permalink to &quot;README.txt&quot;">​</a></h1><p>This board configuration will use FVP_BaseR_AEMv8R to emulate generic ARMv8-R (Cortex-R52) series hardware platform and provides support for these devices:</p><ul><li>GICv3 interrupt controllers for ARMv8-r</li><li>PL011 UART controller(FVP)</li></ul><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h1><ul><li>Getting Started</li><li>Status</li><li>Platform Features</li><li>References</li></ul><h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><ol><li><p>Compile Toolchain I recommend to use the docker based CI image <code>&lt;nuttx&gt;</code>/tools/ci/docker</p></li><li><p>Getting Armv8-R AEM FVP The Armv8-R AEM FVP is a free of charge Armv8-R Fixed Virtual Platform. It supports the latest Armv8-R feature set. we can get it from: <a href="https://developer.arm.com/downloads/-/arm-ecosystem-models" target="_blank" rel="noreferrer">https://developer.arm.com/downloads/-/arm-ecosystem-models</a></p><p>Please select to download Armv8-R AEM FVP product, extract the tool package the FVP tool is locate at: <code>&lt;path_to&gt;</code>/AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R Version 11.20 is tested fine.</p></li><li><p>Configuring and building 3.1 FVP Overview Just like QEMU, Fixed Virtual Platforms (FVP) are complete simulations of an Arm system, including processor, memory and peripherals. These are set out in a &quot;programmer&#39;s view&quot;, which gives you a comprehensive model on which to build and test your software.</p><p>The FVP tools simulate 4 serial port and implement them to wait on local socket port:</p><p>$ <code>&lt;path_to&gt;</code>/AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R<br> -f boards/arm/fvp-v8r-aarch32/fvp-armv8r/scripts/fvp_cfg.txt -a ./nuttx terminal_0: Listening for serial connection on port 5000 terminal_1: Listening for serial connection on port 5001 terminal_2: Listening for serial connection on port 5002 terminal_3: Listening for serial connection on port 5003</p><p>FVP has four UART port and I choice UART1 as tty, so just telnet to port 5001 will enter nsh: telnet localhost 5001</p></li></ol><p>3.2 Single Core Configuring NuttX and compile: $ ./tools/configure.sh -l fvp-armv8r-aarch32:nsh $ make</p><ol start="4"><li>Running</li></ol><p>4.1 Single Core</p><p>Step1: Booting NuttX</p><p>$ AEMv8R_FVP/AEMv8R_base_pkg/models/Linux64_GCC-9.3/FVP_BaseR_AEMv8R<br> -f boards/arm/fvp-v8r-aarch32/fvp-armv8r-aarch32/scripts/fvp_cfg.txt<br> -a ./nuttx terminal_0: Listening for serial connection on port 5000 terminal_1: Listening for serial connection on port 5001 terminal_2: Listening for serial connection on port 5002 terminal_3: Listening for serial connection on port 5003</p><p>Step2: telnet to UART1 Starting another terminal and enter: $ telnet localhost 5001 Trying 127.0.0.1... Connected to localhost. Escape character is &#39;^]&#39;. nsh: mkfatfs: command not found NuttShell (NSH) NuttX-12.1.0 nsh&gt;</p><h1 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h1><p>2023-5-31: 1. Initial version for ARMv8-R AARCH32, Single Core, noMPU, noFPU, noCache using GCC Toolchain</p><h1 id="platform-features" tabindex="-1">Platform Features <a class="header-anchor" href="#platform-features" aria-label="Permalink to &quot;Platform Features&quot;">​</a></h1><p>The following hardware features are supported: +--------------+------------+----------------------+ | Interface | Controller | Driver/Component | +==============+============+======================+ | GICv3 | on-chip | interrupt controller | +--------------+------------+----------------------+ | PL011 UART | on-chip | serial port | +--------------+------------+----------------------+ | ARM TIMER | on-chip | system clock | +--------------+------------+----------------------+</p>',17)]))}const f=t(n,[["render",i]]);export{h as __pageData,f as default};
