import{_ as t,c as i,al as a,o as n}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"Building uClibc++","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/building_uclibcpp.md","filePath":"en/guides/building_uclibcpp.md"}'),s={name:"en/guides/building_uclibcpp.md"};function o(r,e,c,p,l,d){return n(),i("div",null,e[0]||(e[0]=[a('<h1 id="building-uclibc" tabindex="-1">Building uClibc++ <a class="header-anchor" href="#building-uclibc" aria-label="Permalink to &quot;Building uClibc++&quot;">​</a></h1><p>Warning</p><p>Migrated from: <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629550" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629550</a> and is probably outdated</p><p>A version of <a href="http://cxx.uclibc.org/" target="_blank" rel="noreferrer">uClibc++</a> has been ported to NuttX and is available in the NuttX uClibc++ GIT repository at <a href="https://bitbucket.org/nuttx/uclibc/" target="_blank" rel="noreferrer">Bitbucket.org</a> . This version of uClibc++ was adapted for NuttX by the RGMP team.</p><p>This custom version of uClibc++ resides in the NuttX repository at:</p><blockquote><p><a href="https://bitbucket.org/nuttx/uclibc/" target="_blank" rel="noreferrer">https://bitbucket.org/nuttx/uclibc/</a></p></blockquote><p>rather than in the main NuttX source tree, due to licensing issues: NuttX is licensed under the permissive, modified BSD License; uClibc++, on the other hand, is licensed under the stricter GNU LGPL Version 3 license.</p><p>General build instructions are available in the uClibc++ <a href="https://bitbucket.org/nuttx/uclibc/src/master/README.txt" target="_blank" rel="noreferrer">README.txt</a> file. Those instructions are not repeated here. This page documents specific issues encountered when building this NuttX version of uClibc++ and how they are resolved.</p><h2 id="undefined-reference-to-impure-ptr" tabindex="-1">Undefined Reference to <code>_impure_ptr</code> <a class="header-anchor" href="#undefined-reference-to-impure-ptr" aria-label="Permalink to &quot;Undefined Reference to `_impure_ptr`&quot;">​</a></h2><p><strong>Problem</strong></p><p>When building uClibc++, you may encounter an undefined reference to <code>_impure_ptr</code> similar to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LD: nuttx</span></span>\n<span class="line"><span>.../arm-none-eabi/lib/armv7e-m\\libsupc++.a(vterminate.o): In function</span></span>\n<span class="line"><span>`__gnu_cxx::__verbose_terminate_handler()`:</span></span>\n<span class="line"><span>vterminate.cc:(.text._ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc):</span></span>\n<span class="line"><span>undefined reference to `_impure_ptr&#39;</span></span></code></pre></div><p><strong>Solution</strong></p><p>A definitive, elegant solution is not known, but the following workaround has proven to work:</p><ol><li><p>Locate the directory where you can find <code>libsupc++</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -print-file-name=libsupc++.a</span></span></code></pre></div></li><li><p>Go to that directory and save a copy of <code>vterminate.o</code> (in case you need it later):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd &lt;the-directory-containing-libsupc++.a&gt;</span></span>\n<span class="line"><span>arm-none-eabi-ar.exe -x libsupc++.a vterminate.o</span></span></code></pre></div></li><li><p>Remove <code>vterminate.o</code> from the library. At build time, the uClibc++ package will provide a usable replacement:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arm-none-eabi-ar.exe -d libsupc++.a vterminate.o</span></span></code></pre></div></li><li><p>At this point, NuttX should link with no problem. If you ever want to restore the original <code>vterminate.o</code> to <code>libsupc++.a</code>, you can do so by running:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arm-none-eabi-ar.exe rcs libsupc++.a vterminate.o</span></span></code></pre></div></li></ol><p>After removing <code>vterminate.o</code> from the standard library, the uClibc++-provided <code>vterminate.o</code> becomes the active implementation and prevents references to <code>_impure_ptr</code> from arising during linkage.</p><p>Note</p><p>Always exercise caution when modifying toolchain libraries. This workaround is known to be effective but it replaces standard library objects, which may have side effects in other toolchain usage scenarios.</p>',18)]))}const h=t(s,[["render",o]]);export{b as __pageData,h as default};
