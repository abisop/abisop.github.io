import{_ as l,c as i,al as s,j as e,a,o as n}from"./chunks/framework.NFAqBSgQ.js";const v=JSON.parse('{"title":"LCD Character Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/lcd.md","filePath":"en/components/drivers/special/lcd.md"}'),o={name:"en/components/drivers/special/lcd.md"};function d(c,t,r,p,h,u){return n(),i("div",null,t[0]||(t[0]=[s("",27),e("p",null,[a("Examples apply to specific cases of the "),e("code",{class:"interpreted-text",role:"ref"},"genericlcdlcd"),a(":")],-1),s("",10),e("ul",null,[e("li",null,[e("p",null,[e("code",null,"boards/sim/sim/sim/src/sim_bringup.c"),a(" registers the lcd driver the same way "),e("code",{class:"interpreted-text",role:"ref"},"ttgotdisplayesp32_lcd"),a(";")])]),e("li",null,[e("p",null,[e("code",null,"arch/sim/src/sim/up_lcd.c"),a(" and "),e("code",null,"arch/sim/src/sim/up_x11framebuffer.c"),a(" will be built as "),e("code",null,"CONFIG_SIM_LCDDRIVER = y"),a(" and "),e("code",null,"CONFIG_SIM_X11FB = y"),a(" are set, respectively;")]),e("blockquote",null,[e("ul",null,[e("li",null,[e("p",null,[e("code",null,"up_lcd.c"),a(" provides "),e("code",null,"board_lcd_initialize"),a(" and "),e("code",null,"board_lcd_getdev"),a(":")]),e("blockquote",null,[e("ul",null,[e("li",null,[e("code",null,"board_lcd_initialize"),a(" calls "),e("code",null,"up_x11initialize"),a(" from "),e("code",null,"up_x11framebuffer.c"),a(' that initializes a X11-based window as an LCD character device. This is the underlying "driver".')])])])])])])]),e("li",null,[e("p",null,[a("The LVGL demo application ("),e("code",null,"lvgldemo"),a(") makes use of the "),e("code",null,"ioctl"),a(" system call to trigger an "),e("code",null,"LCDDEVIO_PUTAREA"),a(" request to the higher-level device driver to refresh the LCD screen with data as usual;")])])],-1),s("",5)]))}const m=l(o,[["render",d]]);export{v as __pageData,m as default};
