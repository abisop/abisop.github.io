import{_ as t,c as s,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Pseudo File System","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/filesystem/pseudofs.md","filePath":"en/components/filesystem/pseudofs.md"}'),o={name:"en/components/filesystem/pseudofs.md"};function n(l,e,r,d,p,c){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="pseudo-file-system" tabindex="-1">Pseudo File System <a class="header-anchor" href="#pseudo-file-system" aria-label="Permalink to &quot;Pseudo File System&quot;">​</a></h1><p>Warning</p><p>Migrated from: <a href="https://cwiki.apache.org/confluence/display/NUTTX/Pseudo+File+System" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/display/NUTTX/Pseudo+File+System</a></p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><h3 id="pseudo-root-file-system" tabindex="-1">Pseudo Root File System <a class="header-anchor" href="#pseudo-root-file-system" aria-label="Permalink to &quot;Pseudo Root File System&quot;">​</a></h3><p>NuttX includes an optional, scalable file system. As a minimum, this may be a simple in-memory, pseudo file system. This is an in-memory file system because it does not require any storage medium or block driver support. Rather, file system contents are generated on-the-fly as referenced via standard file system operations (open, close, read, write, etc.). In this sense, the file system is a pseudo file system (in the same sense that the Linux <code>/proc</code> file system is also referred to as a pseudo file system).</p><p>Any user supplied data or logic can be accessed via the pseudo-file system. Built in support is provided for character, block, and MTD (Memory Technology Device) drivers in the <code>/dev</code> pseudo file system directory.</p><h3 id="special-files" tabindex="-1">Special Files <a class="header-anchor" href="#special-files" aria-label="Permalink to &quot;Special Files&quot;">​</a></h3><p>NuttX does not support special files in the way that, say, Linux does. In fact, it is more correct to say that NuttX file systems do not support special files at all.</p><p>NuttX does, however, support Linux-like special [device node]{.title-ref}, character driver, and block driver files (as well as NuttX-specific mountpoint, named semaphore, message queue, and shared memory special files). However, these are not special files in sense that the term special files is used in a POSIX environment: In NuttX these special files may [only]{.title-ref} be created in the root pseudo-file system. For the case of device nodes, see <a href="https://cwiki.apache.org/confluence/display/NUTTX/Device+Nodes" target="_blank" rel="noreferrer">Device Nodes</a> for further information.</p><p>In NuttX, the underlying principle is that all [named resources]{.title-ref} appear as special files in the root pseudo-file system and are managed by the VFS.</p><h3 id="mounted-volumes" tabindex="-1">Mounted Volumes <a class="header-anchor" href="#mounted-volumes" aria-label="Permalink to &quot;Mounted Volumes&quot;">​</a></h3><p>The simple in-memory file system can be extended by mounting block devices that provide access to true file systems backed up via some mass storage device. NuttX supports the standard mount() command that allows a block driver to be bound to a mount point within the pseudo file system and to a file system. At present, NuttX supports the standard VFAT and ROMFS file systems, a special, wear-levelling NuttX FLASH File System (NXFFS), as well as a Network File System client (NFS version 3, UDP).</p><h3 id="comparison-to-linux" tabindex="-1">Comparison to Linux <a class="header-anchor" href="#comparison-to-linux" aria-label="Permalink to &quot;Comparison to Linux&quot;">​</a></h3><p>From a programming perspective, the NuttX file system appears very similar to a Linux file system. However, there is a fundamental difference: The NuttX root file system is a pseudo file system and true file systems may be mounted in the pseudo file system. In the typical Linux installation by comparison, the Linux root file system is a true file system and pseudo file systems may be mounted in the true, root file system. The approach selected by NuttX is intended to support greater scalability from the very tiny platform to the moderate platform.</p><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><p><strong>Question</strong>: I&#39;m wondering why I can&#39;t create a directory. If I try to create a dir.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir /mnt</span></span></code></pre></div><p>I get this,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh: mkdir: mkdir failed: 2</span></span></code></pre></div><p>although if I do this it creates both directories, mnt and sda</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mount -t vfat /dev/mmcsd0 /mnt/sda</span></span></code></pre></div><p><strong>Answer</strong>: This is because the top level directories are part of a [pseudo-filesystem]{.title-ref} -- like the Linux <code>proc/</code> or <code>sys/</code> file systems. But the NuttX pseudo-file system begins at the top level <code>/</code>.</p><p>What that really means is that you do must have <code>CONFIG_DISABLE_PSEUDOFS_OPERATIONS</code> selected. Because you can normally create directories in the pseudo-filesystem with not problem:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH) NuttX-9.0.0</span></span>
<span class="line"><span>nsh&gt; mkdir /mnt</span></span>
<span class="line"><span>nsh&gt; ls</span></span>
<span class="line"><span>/:</span></span>
<span class="line"><span>dev/</span></span>
<span class="line"><span>etc/</span></span>
<span class="line"><span>mnt/</span></span>
<span class="line"><span>proc/</span></span>
<span class="line"><span>tmp/</span></span>
<span class="line"><span>nsh&gt; ls mnt</span></span>
<span class="line"><span>/mnt:</span></span>
<span class="line"><span>nsh&gt;</span></span></code></pre></div><p>But lets assume that you do have operations on the pseudo-file system disabled. Why doesn&#39;t it work? There is no [real]{.title-ref} media there so you cannot create a file there or create any directories there. The <code>mount</code> command is special, it knows how to create mount points in the pseudo-file system.</p><p>The pseudo-file system is just a tree structure in RAM. It serves two purposes: (1) you don&#39;t have to have a real file system to use NuttX. It comes up out-of-the-box with usable (but limited) pseudo-file system. That allows a little more civilized programming environment on even very resource limited MCUs. And (2) this pseudo-file system is a place where all special NuttX files are retained: Character drivers, block drivers, and mount points.</p><p>The NuttX top-level pseudo-filesystem creates the [illusion]{.title-ref} of directories and provides a consistent, seamless semantic for interacting with mounted file systems. If there is a file called <code>hello.txt</code> in your volume mounted at <code>/mnt/sda</code>, then:</p><p><code>/mnt</code> - is a [node]{.title-ref} in the pseudo-filesystem that does nothing but contain the name mnt and provide links to things [under]{.title-ref} <code>mnt</code>.</p><p><code>/mnt/sda</code> - This refers to a node that contains the name sda that can be found [under]{.title-ref} the node with the name mnt. This node is a special [mountpoint node]{.title-ref} in the pseudo-filesystem. It contains the methods needed to interact will real file system. Everything [below]{.title-ref} <code>/mnt/sda</code> is in the physical media.</p><p><code>/mnt/sda/hello.txt</code> - This, then refers to the file <code>hello.txt</code> at the relative path <code>hello.txt</code> on the mounted media. The transition from the pseudo-filesystem to the real media is seamless.</p><p>This is a little different from Linux: Linux always has to boot up with a [real]{.title-ref} file system -- even if it is only a initrd RAM disk. In Linux, these special files (links, drivers, pipes, etc.) reside on real media and can reside in any Linux-compatible filesystem.</p><p>Normal <code>mkdir</code> can only work if there is a [real]{.title-ref} filesystem at the location. There are no real directories in the pseudo-filesystem. The pseudo-filesystem does support [nodes]{.title-ref} that look like directories and have some of the properties of directories (like the node <code>/mnt</code> mentioned above). But this is really an illusion.</p><p>If <code>CONFIG_DISABLE_PSEUDOFS_OPERATIONS</code> is not enabled, then NuttX adds the capability to create new, empty [nodes]{.title-ref} in the pseudo-filesystem using <code>mkdir</code>, completing the illusion.</p><p>[On the other hand, all directories are really an [illusion]{.title-ref} in a way and I suppose that in that sense these nodes the pseudo-filesystem are just as [real]{.title-ref} as any other directory.]</p><p>After you mount the SD card at <code>/mnt/sda</code>, then you can do:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir /mnt/sda/newdir</span></span></code></pre></div><p>That should work fine and should create a directory at the relative path <code>newdir</code> in the mounted volume.</p><p>There are a few other special NSH commands like mount that can change the pseudo-filesystem. Like <code>losetup</code>, <code>mkfifo</code>, <code>mkrd</code>, <code>umount</code>, etc. In fact, these commands [only]{.title-ref} work in the pseudo-filesystem. Try them in <code>/mnt/sda</code>... they won&#39;t work.</p><p>But none of the [normal]{.title-ref} commands that modify files or directories will work in the pseudo-filesystem: <code>mkdir</code>, <code>mv</code>, <code>rm</code>, <code>rmdir</code>. These all require real media. They will not work in the pseudo-filesystem, but will work in <code>/mnt/sda</code>.</p><p>And trying to pipe to something in the pseudo-filesystem will also fail. You cannot do this, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH) NuttX-6.20</span></span>
<span class="line"><span>nsh&gt; cat &quot;Hello, World!&quot; &gt;/hello.text</span></span>
<span class="line"><span>nsh: cat: open failed: 22</span></span>
<span class="line"><span>nsh&gt;</span></span></code></pre></div><p>See also NxFileSystem in <a href="https://cwiki.apache.org/confluence/display/NUTTX/Porting+Guide" target="_blank" rel="noreferrer">Porting Guide</a></p>`,43)]))}const u=t(o,[["render",n]]);export{m as __pageData,u as default};
