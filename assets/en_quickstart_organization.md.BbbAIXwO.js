import{_ as t,c as o,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"Directory Structure","description":"","frontmatter":{},"headers":[],"relativePath":"en/quickstart/organization.md","filePath":"en/quickstart/organization.md"}'),r={name:"en/quickstart/organization.md"};function n(c,e,s,d,l,u){return i(),o("div",null,e[0]||(e[0]=[a('<p>This is mostly untouched from the original documentation. It does not really belong to &quot;quickstart&quot;. Also, this needs cleanup.</p><h1 id="directory-structure" tabindex="-1">Directory Structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;Directory Structure&quot;">​</a></h1><p>This is included for reference, and it&#39;s not necessary to know all the details at first.</p><p>The general directory layout for NuttX is very similar to the directory structure of the Linux kernel -- at least at the most superficial layers. At the top level is the main makefile and a series of sub-directories identified below and discussed in the following paragraphs:</p><p><strong>Configuration Files</strong>. The NuttX configuration consists of logic in processor architecture directories, <em>chip/SoC</em> directories, and board configuration directories. The complete configuration is specified by several settings in the NuttX configuration file.</p><ul><li><p><em>Processor architecture specific files</em>. These are the files contained in the <code>arch/&lt;arch-name&gt;/</code> directory and are discussed in a paragraph <a href="#arch-subdirectory-structure">below</a>. As an example, all ARM processor architectures are provided under the <code>arch/arm/</code> directory which is selected with the <code>CONFIG_ARCH=&quot;arm&quot;</code> configuration option.</p><p>Variants of the processor architecture may be provided in sub-directories of the Extending this example, the ARMv7-M ARM family is supported by logic in <code>arch/arm/include/armv7-m</code> and <code>arch/arm/src/armv7-m</code> directories which are selected by the <code>CONFIG_ARCH_CORTEXM3=y</code>, <code>CONFIG_ARCH_CORTEXM4=y</code>, or <code>CONFIG_ARCH_CORTEXM7=y</code> configuration options</p></li><li><p><em>Chip/SoC specific files</em>. Each processor architecture is embedded in a <em>System-on-a-Chip</em> (SoC) architecture. The full SoC architecture includes the processor architecture plus chip-specific interrupt logic, clocking logic, general purpose I/O (GPIO) logic, and specialized, internal peripherals (such as UARTs, USB, etc.).</p><p>These chip-specific files are contained within chip-specific sub-directories also under the <code>arch/&lt;arch-name&gt;/</code> directory and are selected via the <code>CONFIG_ARCH_CHIP</code> selection.</p><p>As an example, the STMicro STM32 SoC architecture is based on the ARMv7-M processor and is supported by logic in the <code>arch/arm/include/stm32</code> and <code>arch/arm/src/stm32</code> directories which are selected with the <code>CONFIG_ARCH_CHIP=&quot;stm32&quot;</code> configuration setting.</p></li><li><p><em>Board specific configurations</em>. In order to be usable, the chip must be contained in a board environment. The board configuration defines additional properties of the board including such things as peripheral LEDs, external peripherals (such as networks, USB, etc.).</p><p>These board-specific configuration files can be found in the <code>boards/&lt;arch-name&gt;/&lt;chip-name&gt;/&lt;board-name&gt;/</code> sub-directories and are discussed in a paragraph <a href="#boards-subdirectory-structure">below</a>.</p><p>The directory <code>boards/arm/stm32/stm32f4disovery/</code>, as an example, holds board-specific logic for the STM32F4 Discovery board and is selected via the <code>CONFIG_ARCH_BOARD=&quot;stm32f4discovery&quot;</code> configuration setting.</p></li></ul><h2 id="nuttx-documentation" tabindex="-1"><code>nuttx/Documentation</code> <a class="header-anchor" href="#nuttx-documentation" aria-label="Permalink to &quot;`nuttx/Documentation`&quot;">​</a></h2><p>This directory holds the NuttX documentation. It&#39;s made with the <a href="https://www.sphinx-doc.org" target="_blank" rel="noreferrer">Sphinx documentation system</a>. See the README.md file for information on how to build it.</p><h2 id="nuttx-arch" tabindex="-1"><code>nuttx/arch</code> <a class="header-anchor" href="#nuttx-arch" aria-label="Permalink to &quot;`nuttx/arch`&quot;">​</a></h2><p>This sub-directory holds the NuttX supported architectures.</p><p>For details see [[/component](]{.title-ref}/component.md)s/arch/index`.</p><h2 id="nuttx-binfmt" tabindex="-1"><code>nuttx/binfmt</code> <a class="header-anchor" href="#nuttx-binfmt" aria-label="Permalink to &quot;`nuttx/binfmt`&quot;">​</a></h2><p>The <code>binfmt/</code> subdirectory contains logic for loading binaries in the file system into memory in a form that can be used to execute them.</p><h2 id="nuttx-audio" tabindex="-1"><code>nuttx/audio</code> <a class="header-anchor" href="#nuttx-audio" aria-label="Permalink to &quot;`nuttx/audio`&quot;">​</a></h2><p>The <code>audio/</code> subdirectory contains the NuttX audio sub-system.</p><h2 id="nuttx-boards" tabindex="-1"><code>nuttx/boards</code> <a class="header-anchor" href="#nuttx-boards" aria-label="Permalink to &quot;`nuttx/boards`&quot;">​</a></h2><p>The <code>boards/</code> subdirectory contains custom logic and board configuration data for each board. These board-specific configurations plus the architecture-specific configurations in the <code>arch/</code> subdirectory complete define a customized port of NuttX.</p><h3 id="boards-subdirectory-structure" tabindex="-1">Boards Subdirectory Structure <a class="header-anchor" href="#boards-subdirectory-structure" aria-label="Permalink to &quot;Boards Subdirectory Structure&quot;">​</a></h3><p>The <code>boards/</code> directory contains board specific configuration files. Each board must provide a sub-directory &lt;board-name&gt; under <code>boards/&lt;arch-name&gt;/&lt;chip-name&gt;/</code>.</p><p>See [[/component](]{.title-ref}/component.md)s/boards` for details.</p><h2 id="nuttx-cmake" tabindex="-1"><code>nuttx/cmake</code> <a class="header-anchor" href="#nuttx-cmake" aria-label="Permalink to &quot;`nuttx/cmake`&quot;">​</a></h2><p>This sub-directory holds the NuttX CMake functions.</p><p>For details see [[/component](]{.title-ref}/component.md)s/cmake`.</p><h2 id="nuttx-crypto" tabindex="-1"><code>nuttx/crypto</code> <a class="header-anchor" href="#nuttx-crypto" aria-label="Permalink to &quot;`nuttx/crypto`&quot;">​</a></h2><p>This sub-directory holds the NuttX cryptographic sub-system.</p><p>For details see [[/component](]{.title-ref}/component.md)s/crypto`.</p><h2 id="nuttx-drivers" tabindex="-1"><code>nuttx/drivers</code> <a class="header-anchor" href="#nuttx-drivers" aria-label="Permalink to &quot;`nuttx/drivers`&quot;">​</a></h2><p>This directory holds architecture-independent device drivers.</p><p>For details see [[/component](]{.title-ref}/component.md)s/drivers/index`.</p><h2 id="nuttx-fs" tabindex="-1"><code>nuttx/fs</code> <a class="header-anchor" href="#nuttx-fs" aria-label="Permalink to &quot;`nuttx/fs`&quot;">​</a></h2><p>This directory contains the NuttX file system. This file system is described <a href="#NxFileSystem">below</a>.</p><h2 id="nuttx-graphics" tabindex="-1"><code>nuttx/graphics</code> <a class="header-anchor" href="#nuttx-graphics" aria-label="Permalink to &quot;`nuttx/graphics`&quot;">​</a></h2><p>This directory contains files for graphics/video support under NuttX.</p><p>For details see [[/component](]{.title-ref}/component.md)s/nxgraphics/index`.</p><h2 id="nuttx-include" tabindex="-1"><code>nuttx/include</code> <a class="header-anchor" href="#nuttx-include" aria-label="Permalink to &quot;`nuttx/include`&quot;">​</a></h2><p>This directory holds NuttX header files. Standard header files file retained in can be included in the <em>normal</em> fashion:</p><h2 id="nuttx-libs-libc" tabindex="-1"><code>nuttx/libs/libc</code> <a class="header-anchor" href="#nuttx-libs-libc" aria-label="Permalink to &quot;`nuttx/libs/libc`&quot;">​</a></h2><p>This directory holds a collection of standard libc-like functions with custom interfaces into NuttX.</p><p>For details see [[/component](]{.title-ref}/component.md)s/libs/index`.</p><h2 id="nuttx-mm" tabindex="-1"><code>nuttx/mm</code> <a class="header-anchor" href="#nuttx-mm" aria-label="Permalink to &quot;`nuttx/mm`&quot;">​</a></h2><p>This is the NuttX memory manager.</p><p>For details see [[/component](]{.title-ref}/component.md)s/mm/index`.</p><h2 id="nuttx-net" tabindex="-1"><code>nuttx/net</code> <a class="header-anchor" href="#nuttx-net" aria-label="Permalink to &quot;`nuttx/net`&quot;">​</a></h2><p>This directory contains the implementation of the NuttX networking layer including internal socket APIs.</p><p>For details see [[/component](]{.title-ref}/component.md)s/net/index`.</p><h2 id="nuttx-openamp" tabindex="-1"><code>nuttx/openamp</code> <a class="header-anchor" href="#nuttx-openamp" aria-label="Permalink to &quot;`nuttx/openamp`&quot;">​</a></h2><p>This directory contains OpenAMP support for NuttX.</p><p>For details see [[/component](]{.title-ref}/component.md)s/openamp`.</p><h2 id="nuttx-pass1" tabindex="-1"><code>nuttx/pass1</code> <a class="header-anchor" href="#nuttx-pass1" aria-label="Permalink to &quot;`nuttx/pass1`&quot;">​</a></h2><p>TODO</p><h2 id="nuttx-sched" tabindex="-1"><code>nuttx/sched</code> <a class="header-anchor" href="#nuttx-sched" aria-label="Permalink to &quot;`nuttx/sched`&quot;">​</a></h2><p>The files forming core of the NuttX RTOS reside here.</p><h2 id="nuttx-syscall" tabindex="-1"><code>nuttx/syscall</code> <a class="header-anchor" href="#nuttx-syscall" aria-label="Permalink to &quot;`nuttx/syscall`&quot;">​</a></h2><p>If NuttX is built as a separately compiled kernel (with <code>CONFIG_BUILD_PROTECTED=y</code> or <code>CONFIG_BUILD_KERNEL=y</code>), then the contents of this directory are built. This directory holds a syscall interface that can be used for communication between user-mode applications and the kernel-mode RTOS.</p><p>For details see [[/component](]{.title-ref}/component.md)s/syscall`.</p><h2 id="nuttx-tools" tabindex="-1"><code>nuttx/tools</code> <a class="header-anchor" href="#nuttx-tools" aria-label="Permalink to &quot;`nuttx/tools`&quot;">​</a></h2><p>This directory holds a collection of tools and scripts to simplify configuring, building and maintaining NuttX.</p><p>Refer to the [[/component](]{.title-ref}/component.md)s/tools/index` page for more information about the individual files. Some of these tools are discussed below as well in the discussion of <a href="#configandbuild">configuring and building</a> NuttX.</p><h2 id="nuttx-video" tabindex="-1"><code>nuttx/video</code> <a class="header-anchor" href="#nuttx-video" aria-label="Permalink to &quot;`nuttx/video`&quot;">​</a></h2><p>This directory holds support for video sub-system.</p><p>For details see [[/component](]{.title-ref}/component.md)s/video`.</p><h2 id="nuttx-wireless" tabindex="-1"><code>nuttx/wireless</code> <a class="header-anchor" href="#nuttx-wireless" aria-label="Permalink to &quot;`nuttx/wireless`&quot;">​</a></h2><p>This directory holds support for hardware-independent wireless support.</p><p>For details see [[/component](]{.title-ref}/component.md)s/wireless`.</p><h2 id="nuttx-cmakelists-txt" tabindex="-1"><code>nuttx/CMakeLists.txt</code> <a class="header-anchor" href="#nuttx-cmakelists-txt" aria-label="Permalink to &quot;`nuttx/CMakeLists.txt`&quot;">​</a></h2><p>The top-level <code>CMakeLists.txt</code> file.</p><h2 id="nuttx-makefile" tabindex="-1"><code>nuttx/Makefile</code> <a class="header-anchor" href="#nuttx-makefile" aria-label="Permalink to &quot;`nuttx/Makefile`&quot;">​</a></h2><p>The top-level <code>Makefile</code> in the <code>(TOPDIR)</code> directory contains all of the top-level control logic to build NuttX.</p>',68)]))}const m=t(r,[["render",n]]);export{p as __pageData,m as default};
