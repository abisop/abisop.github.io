import{_ as i,c as a,al as o,o as t}from"./chunks/framework.NFAqBSgQ.js";const r="/assets/W5500-EVB-Pico.C_TKzISV.png",b=JSON.parse('{"title":"W5500-EVB-Pico","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp2040/boards/w5500-evb-pico/index.md","filePath":"en/platforms/arm/rp2040/boards/w5500-evb-pico/index.md"}'),l={name:"en/platforms/arm/rp2040/boards/w5500-evb-pico/index.md"};function n(s,e,p,c,d,h){return t(),a("div",null,e[0]||(e[0]=[o('<h1 id="w5500-evb-pico" tabindex="-1">W5500-EVB-Pico <a class="header-anchor" href="#w5500-evb-pico" aria-label="Permalink to &quot;W5500-EVB-Pico&quot;">​</a></h1><p>chip:rp2040, ethernet</p><p>The <a href="https://docs.wiznet.io/Product/iEthernet/W5500/w5500-evb-pico/" target="_blank" rel="noreferrer">W5500-EVB-Pico</a> is a microcontroller evaluation board based on the Raspberry Pi RP2040 and fully hardwired TCP/IP controller W5500 -- and basically works the same as Raspberry Pi Pico board but with additional Ethernet via W5500.</p><p><img src="'+r+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>RP2040 microcontroller chip</li><li>Dual-core ARM Cortex M0+ processor, flexible clock running up to 133 MHz</li><li>264kB of SRAM, and 2MB of on-board Flash memory</li><li>Castellated module allows soldering direct to carrier boards</li><li>USB 1.1 Host and Device support</li><li>Low-power sleep and dormant modes</li><li>Drag &amp; drop programming using mass storage over USB</li><li>26 multi-function GPIO pins</li><li>2× SPI, 2× I2C, 2× UART, 3× 12-bit ADC, 16× controllable PWM channels</li><li>Accurate clock and timer on-chip</li><li>Temperature sensor</li><li>Accelerated floating point libraries on-chip</li><li>8 × Programmable IO (PIO) state machines for custom peripheral support</li><li>Ethernet port via WIZnet W5500, hardwired to SPI0 and two GPIO pins.</li></ul><h2 id="supported-rp2040-capabilities" tabindex="-1">Supported RP2040 capabilities <a class="header-anchor" href="#supported-rp2040-capabilities" aria-label="Permalink to &quot;Supported RP2040 capabilities&quot;">​</a></h2><ul><li>UART (console port) <ul><li>GPIO 0 (UART0 TX) and GPIO 1 (UART0 RX) are used for the console.</li></ul></li><li>I2C</li><li>SPI (master only)</li><li>DMAC</li><li>PWM</li><li>ADC</li><li>Watchdog</li><li>USB device <ul><li>MSC, CDC/ACM serial and these composite device are supported.</li><li>CDC/ACM serial device can be used for the console.</li></ul></li><li>PIO (RP2040 Programmable I/O)</li><li>Flash ROM Boot</li><li>SRAM Boot <ul><li>If Pico SDK is available, nuttx.uf2 file which can be used in BOOTSEL mode will be created.</li><li>Persistent flash filesystem in unused flash ROM</li></ul></li></ul><h2 id="currently-unsupported-rp2040-capabilities" tabindex="-1">Currently unsupported RP2040 capabilities <a class="header-anchor" href="#currently-unsupported-rp2040-capabilities" aria-label="Permalink to &quot;Currently unsupported RP2040 capabilities&quot;">​</a></h2><ul><li>SPI Slave Mode</li><li>SSI</li><li>RTC</li><li>Timers</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The board is configured to use the USB connection as the serial console.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><p>User LED controlled by GPIO25.</p><p>A BOOTSEL button, which if held down when power is first applied to the board, will cause the RP2040 to boot into programming mode and appear as a storage device to a computer connected via USB. Saving a .UF2 file to this device will replace the Flash ROM contents on the RP2040.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pads numbered anticlockwise from USB connector.</p><p>Pad Signal Notes</p><hr><p>1 GPIO0 Default TX for UART0 serial console 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 GPIO1 Ground GPIO2 GPIO3 GPIO4 GPIO5 Ground GPIO6 GPIO7 GPIO8 GPIO9 Ground GPIO10 GPIO11 GPIO12 GPIO13 Ground GPIO14 GPIO15 Default RX for UART1 serial console 21 GPIO16 W5500 MISO 22 23 GPIO17 Ground W5500 CSn 24 GPIO18 W5500 SCLK 25 GPIO19 W5500 MOSI 26 GPIO20 W5500 RSTn 27 28 29 30 GPIO21 Ground GPIO22 Run W5500 INTn 31 GPIO26 ADC0 32 GPIO27 ADC1 33 AGND Analog Ground 34 35 GPIO28 ADC_VREF ADC2 36 3V3 Power output to peripherals 37 38 3V3_EN Ground Pull to ground to turn off. 39 VSYS +5V Supply to board 40 VBUS Connected to USB +5V</p><h2 id="other-rp2040-pins" tabindex="-1">Other RP2040 Pins <a class="header-anchor" href="#other-rp2040-pins" aria-label="Permalink to &quot;Other RP2040 Pins&quot;">​</a></h2><p>Signal Notes</p><hr><p>GPIO23 Output - Power supply control. GPIO24 Input - High if USB port or Pad 40 supplying power. GPIO25 Output - On board LED. ADC3 Input - Analog voltage equal to one third of VSys voltage.</p><p>Separate pins for the Serial Debug Port (SDB) are available</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>The W5500-EVB-Pico can be powered via the USB connector, or by supplying +5V to pin 39. The board had a diode that prevents power from pin 39 from flowing back to the USB socket, although the socket can be power via pin 30.</p><p>The W5500-EVB-Pico chip run on 3.3 volts. This is supplied by an onboard voltage regulator. This regulator can be disabled by pulling pin 37 to ground.</p><p>The regulator can run in two modes. By default the regulator runs in PFM mode which provides the best efficiency, but may be switched to PWM mode for improved ripple by outputting a one on GPIO23.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li>Download Raspberry Pi Pico SDK</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- --&gt;</span></span></code></pre></div><pre><code> git clone -b 2.0.0 https://github.com/raspberrypi/pico-sdk.git
</code></pre><ol start="2"><li>Set PICO_SDK_PATH environment variable</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- --&gt;</span></span></code></pre></div><pre><code> export PICO_SDK_PATH=&lt;absolute_path_to_pico-sdk_directory&gt;
</code></pre><ol start="3"><li>Configure and build NuttX</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- --&gt;</span></span></code></pre></div><pre><code> git clone https://github.com/apache/nuttx.git nuttx
 git clone https://github.com/apache/nuttx-apps.git apps
 cd nuttx
 make distclean
 ./tools/configure.sh w5500-evb-pico:usbnsh
 make V=1
</code></pre><ol start="4"><li>Connect W5500-EVB-Pico board to USB port while pressing BOOTSEL. The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device. (Same manner as the standard Pico SDK applications installation.)</li><li>[usbnsh]{.title-ref} configuration provides the console access by USB CDC/ACM serial devcice. The console is available by using a terminal software on the USB host.</li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>USB CDC/ACM serial console with NuttShell. TCP/IPv4 &amp; IPv6 networking is supported via the Ethernet port.</p><h2 id="license-exceptions" tabindex="-1">License exceptions <a class="header-anchor" href="#license-exceptions" aria-label="Permalink to &quot;License exceptions&quot;">​</a></h2><p>The following files are originated from the files in Pico SDK. So, the files are licensed under 3-Clause BSD same as Pico SDK.</p><h3 id="created-by-referring-to-the-pico-sdk-clock-initialization" tabindex="-1">Created by referring to the Pico SDK clock initialization <a class="header-anchor" href="#created-by-referring-to-the-pico-sdk-clock-initialization" aria-label="Permalink to &quot;Created by referring to the Pico SDK clock initialization&quot;">​</a></h3><ul><li>arch/arm/src/rp2040/rp2040_clock.c</li><li>arch/arm/src/rp2040/rp2040_pll.c</li><li>arch/arm/src/rp2040/rp2040_xosc.c</li></ul><h3 id="providing-an-api-similar-to-the-pico-sdk-s-hardware-pio-api" tabindex="-1">Providing an API similar to the Pico SDK&#39;s hardware_pio API <a class="header-anchor" href="#providing-an-api-similar-to-the-pico-sdk-s-hardware-pio-api" aria-label="Permalink to &quot;Providing an API similar to the Pico SDK\\&#39;s hardware\\_pio API&quot;">​</a></h3><ul><li>arch/arm/src/rp2040/rp2040_pio.c</li><li>arch/arm/src/rp2040/rp2040_pio.h</li><li>arch/arm/src/rp2040/rp2040_pio_instructions.h</li></ul><h3 id="generated-from-rp2040-svd-originally-provided-in-pico-sdk" tabindex="-1">Generated from rp2040.svd originally provided in Pico SDK <a class="header-anchor" href="#generated-from-rp2040-svd-originally-provided-in-pico-sdk" aria-label="Permalink to &quot;Generated from rp2040.svd originally provided in Pico SDK&quot;">​</a></h3><ul><li>arch/arm/src/rp2040/hardware/*.h</li></ul>`,51)]))}const P=i(l,[["render",n]]);export{b as __pageData,P as default};
