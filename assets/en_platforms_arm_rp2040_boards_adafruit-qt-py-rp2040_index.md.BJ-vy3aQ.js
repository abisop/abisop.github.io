import{_ as e,c as i,al as t,o}from"./chunks/framework.NFAqBSgQ.js";const l="/assets/QT-Py.Da4QkCZK.png",b=JSON.parse('{"title":"Adafruit QT Py RP2040","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp2040/boards/adafruit-qt-py-rp2040/index.md","filePath":"en/platforms/arm/rp2040/boards/adafruit-qt-py-rp2040/index.md"}'),s={name:"en/platforms/arm/rp2040/boards/adafruit-qt-py-rp2040/index.md"};function n(r,a,p,c,h,d){return o(),i("div",null,a[0]||(a[0]=[t('<h1 id="adafruit-qt-py-rp2040" tabindex="-1">Adafruit QT Py RP2040 <a class="header-anchor" href="#adafruit-qt-py-rp2040" aria-label="Permalink to &quot;Adafruit QT Py RP2040&quot;">​</a></h1><p>chip:rp2040</p><p>The QT Py RP2040 is a tiny general purpose RP2040 board supplied by Adafruit.</p><p><img src="'+l+`" alt="" class="align-center"></p><p>See the <a href="https://learn.adafruit.com/adafruit-qt-py-2040/" target="_blank" rel="noreferrer">Adafruit website</a> for information about the Adafruit QT Py RP2040.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>RP2040 microcontroller chip</li><li>Dual-core ARM Cortex M0+ processor, flexible clock running up to 133 MHz</li><li>264kB of SRAM, and 8MB of on-board Flash memory</li><li>Castellated module allows soldering direct to carrier boards</li><li>USB Host and Device support via type C connector.</li><li>Low-power sleep and dormant modes</li><li>Drag &amp; drop programming using mass storage over USB</li><li>13 multi-function GPIO pins (11 breakout pads and two QT pads)</li><li>2× SPI, 2× I2C, 2× UART, 4× 12-bit ADC, 16× controllable PWM channels</li><li>Accurate clock and timer on-chip</li><li>Temperature sensor</li><li>Accelerated floating point libraries on-chip</li><li>8 × Programmable IO (PIO) state machines for custom peripheral support</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default a serial console appears on GPIO pins 20 (RX GPIO1) and pin 5 (TX GPIO1). This console runs a 115200-8N1.</p><p>The board can be configured to use the USB connection as the serial console.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><p>A ws2812 (NeoPixel) smart RGB LED controlled by GPIO12 (data) and GPIO11 (power).</p><p>There is a BOOT button which if held down when power is first applied or the RESET button is pressed will cause the RP2040 to boot into program mode and appear as a storage device to a USB connecter. Saving a .UF2 file to this device will replace the Flash ROM contents on the RP2040.</p><p>A RESET button that allows rebooting the board without disconnecting the power.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pads numbered anticlockwise from USB connector.</p><p>Pad Signal Notes</p><hr><p>1 GPIO26 ADC0 2 GPIO27 ADC1 3 GPIO28 ADC2 4 5 6 GPIO29 GPIO24 GPIO25 ADC3 7 GPIO20 Default TX for UART1 serial console 8 9 10 11 GPIO5 GPIO6 GPIO4 GPIO3 Default RX for UART1 serial console 12 13 14 3.3V Ground 5V Power out to peripherals.</p><p>The board has a STEMMA QT connector that is also connected to pins GPIO22 (I2C1 SDA) and GPIO23 (I2C1 SCL).</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>The Raspberry Pi Pico can be powered via the USB connector, or by supplying +5V to pin 14. The board had a diode that prevents power from pin 14 from flowing back to the USB socket, although this can be disabled by connecting on-board solder pads if there is need to run as a usb host.</p><p>The Raspberry Pi Pico chip run on 3.3 volts which is supplied by an on board regulator.</p><h2 id="supported-capabilities" tabindex="-1">Supported Capabilities <a class="header-anchor" href="#supported-capabilities" aria-label="Permalink to &quot;Supported Capabilities&quot;">​</a></h2><p>NuttX supports the following RP2040 capabilities:</p><ul><li>UART (console port) <ul><li>GPIO 0 (UART0 TX) and GPIO 1 (UART0 RX) are used for the console.</li></ul></li><li>I2C</li><li>SPI (master only)</li><li>DMAC</li><li>PWM</li><li>ADC</li><li>Watchdog</li><li>USB device <ul><li>MSC, CDC/ACM serial and these composite device are supported.</li><li>CDC/ACM serial device can be used for the console.</li></ul></li><li>PIO (RP2040 Programmable I/O)</li><li>Flash ROM Boot</li><li>SRAM Boot <ul><li>If Pico SDK is available, nuttx.uf2 file which can be used in BOOTSEL mode will be created.</li></ul></li><li>Persistent flash filesystem in unused flash ROM</li><li>WiFi wireless communication</li></ul><p>There is currently no direct user mode access to these RP2040 hardware features:</p><ul><li>SPI Slave Mode</li><li>SSI</li><li>RTC</li><li>Timers</li></ul><p>NuttX also provide support for these external devices:</p><ul><li>WS2812 smart pixel support</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li>Download Raspberry Pi Pico SDK.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone -b 2.0.0 https://github.com/raspberrypi/pico-sdk.git</span></span></code></pre></div><ol start="2"><li>Download and install picotool</li></ol><blockquote><p>Instructions can be found here: <a href="https://github.com/raspberrypi/picotool" target="_blank" rel="noreferrer">https://github.com/raspberrypi/picotool</a></p><p>If you are on Arch Linux, you can install the picotool through the AUR:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> yay -S picotool</span></span></code></pre></div><ol start="3"><li>Set PICO_SDK_PATH environment variable</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> export PICO_SDK_PATH=&lt;absolute_path_to_pico-sdk_directory&gt;</span></span></code></pre></div><ol start="4"><li>Configure and build NuttX</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/apache/nuttx.git nuttx</span></span>
<span class="line"><span> git clone https://github.com/apache/nuttx-apps.git apps</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh adafruit-qt-py-rp2040:nsh</span></span>
<span class="line"><span> make V=1</span></span></code></pre></div><ol start="5"><li><p>Connect the Adafruit QT Py RP2040 board to USB port while pressing BOOT. The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device (Same manner as the standard Pico SDK applications installation).</p></li><li><p>To access the console, GPIO 20 (TX) and GPIO 5 (RX) pins must be connected to the device such as USB-serial converter.</p><p>[usbnsh]{.title-ref} configuration provides the console access by USB CDC/ACM serial decive. The console is available by using a terminal software on the USB host.</p></li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="gpio" tabindex="-1">gpio <a class="header-anchor" href="#gpio" aria-label="Permalink to &quot;gpio&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART1, at 115200 bps) with GPIO examples.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART1, at 115200 bps).</p><h3 id="nsh-flash" tabindex="-1">nsh-flash <a class="header-anchor" href="#nsh-flash" aria-label="Permalink to &quot;nsh-flash&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps with SMART flash filesystem.</p><h3 id="nshsram" tabindex="-1">nshsram <a class="header-anchor" href="#nshsram" aria-label="Permalink to &quot;nshsram&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART1, at 115200 bps) with interrupt vectors in RAM.</p><h3 id="smp" tabindex="-1">smp <a class="header-anchor" href="#smp" aria-label="Permalink to &quot;smp&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART1, at 115200 bps) with both ARM cores enabled.</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>Basic NuttShell configuration using CDC/ACM serial (console enabled in USB Port, at 115200 bps).</p><h2 id="license-exceptions" tabindex="-1">License exceptions <a class="header-anchor" href="#license-exceptions" aria-label="Permalink to &quot;License exceptions&quot;">​</a></h2><p>The following files are originated from the files in Pico SDK. So, the files are licensed under 3-Clause BSD same as Pico SDK.</p><ul><li>arch/arm/src/rp2040/rp2040_clock.c</li><li>arch/arm/src/rp2040/rp2040_pll.c</li><li>arch/arm/src/rp2040/rp2040_xosc.c <ul><li>These are created by referring the Pico SDK clock initialization.</li></ul></li><li>arch/arm/src/rp2040/rp2040_pio.c</li><li>arch/arm/src/rp2040/rp2040_pio.h</li><li>arch/arm/src/rp2040/rp2040_pio_instructions.h <ul><li>These provide the similar APIs to Pico SDK&#39;s hardware_pio APIs.</li></ul></li><li>arch/arm/src/rp2040/hardware/*.h <ul><li>These are generated from rp2040.svd originally provided in Pico SDK.</li></ul></li></ul>`,57)]))}const m=e(s,[["render",n]]);export{b as __pageData,m as default};
