import{_ as a,c as e,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Simulator","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/simulator.md","filePath":"en/guides/simulator.md"}'),p={name:"en/guides/simulator.md"};function i(l,s,o,c,r,d){return t(),e("div",null,s[0]||(s[0]=[n(`<h1 id="simulator" tabindex="-1">Simulator <a class="header-anchor" href="#simulator" aria-label="Permalink to &quot;Simulator&quot;">​</a></h1><p>Apache NuttX has a simulator that can run as a regular program on Linux, Mac, and Windows computers. It&#39;s useful for debugging operating system features that aren&#39;t associated with particular device drivers--- for instance the TCP/IP stack itself, a web interface or API for your application, or other communication protocols. It&#39;s also handy for trying out Apache NuttX without having a piece of embedded hardware.</p><p>This guide assumes you&#39;re on Linux. It works on Windows and Mac too--- if you know how, submit a PR to improve this guide!</p><p>Windows instructions</p><h2 id="prerequisites-for-macos" tabindex="-1">Prerequisites For macOS <a class="header-anchor" href="#prerequisites-for-macos" aria-label="Permalink to &quot;Prerequisites For macOS&quot;">​</a></h2><p>We need <code>genromfs</code> to build simulators(NON GUI).</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/chexum/genromfs.git</span></span>
<span class="line"><span> cd genromfs</span></span>
<span class="line"><span> make</span></span>
<span class="line"><span> make install</span></span></code></pre></div></blockquote><p>Now Copy the built [genromfs]{.title-ref} [exec]{.title-ref} to /opt/local/bin.</p><p>For GUI Applications we need X11 Libraries, libx11 can also be built using Homebrew or by Installing XQuartz.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo port install xorg-libX11</span></span>
<span class="line"><span> sudo port install xorg-server</span></span></code></pre></div></blockquote><h2 id="compiling" tabindex="-1">Compiling <a class="header-anchor" href="#compiling" aria-label="Permalink to &quot;Compiling&quot;">​</a></h2><ol><li><p>Configure the Simulator</p><p>There are a lot of simulator configurations available that set you up to test various operating system features.</p><p>Here we&#39;ll use the <code>sim:nsh</code> basic NuttX Shell configuration.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> ./tools/configure.sh sim:nsh</span></span></code></pre></div></blockquote></li><li><p>Compile</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make</span></span></code></pre></div></blockquote></li><li><p>Run the simulator:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./nuttx</span></span>
<span class="line"><span>login: admin</span></span>
<span class="line"><span>password: Administrator</span></span>
<span class="line"><span>User Logged-in!</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NuttShell (NSH) NuttX-9.1.0</span></span>
<span class="line"><span>MOTD: username=admin password=Administrator</span></span>
<span class="line"><span>nsh&gt; help</span></span>
<span class="line"><span>help usage:  help [-v] [&lt;cmd&gt;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  [         cp        exit      losetup   mv        rmdir     true</span></span>
<span class="line"><span>  ?         cmp       false     ls        mw        set       uname</span></span>
<span class="line"><span>  basename  dirname   free      mb        poweroff  sh        unset</span></span>
<span class="line"><span>  break     dd        help      mkdir     ps        sleep     usleep</span></span>
<span class="line"><span>  cat       echo      hexdump   mkfatfs   pwd       test      xd</span></span>
<span class="line"><span>  cd        exec      kill      mh        rm        time</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Builtin Apps:</span></span>
<span class="line"><span>  hello  nsh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nsh&gt;</span></span></code></pre></div></blockquote></li><li><p>Stop the simulator:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; poweroff</span></span>
<span class="line"><span></span></span>
<span class="line"><span> # we&#39;re back at the Linux prompt.</span></span></code></pre></div></blockquote></li></ol><h2 id="accessing-the-network" tabindex="-1">Accessing the Network <a class="header-anchor" href="#accessing-the-network" aria-label="Permalink to &quot;Accessing the Network&quot;">​</a></h2><ol><li><p>Here we&#39;ll use the <code>sim:tcpblaster</code> configuration because it comes with networking that is ready to use.</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh sim:tcpblaster</span></span>
<span class="line"><span> make</span></span></code></pre></div></blockquote></li><li><p>Give the Simulator Privileges</p><p>On recent Linux distributions, you need to give the <code>nuttx</code> program the capabilities (similar to permissions) to access the network:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo setcap cap_net_admin+ep ./nuttx</span></span></code></pre></div></blockquote></li><li><p>Run the simulator:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ./nuttx</span></span></code></pre></div></blockquote></li><li><p>Bring Up the Network Interfaces</p><p>On Apache NuttX:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; ifup eth0</span></span></code></pre></div></blockquote><p>On Linux, first you need to find your main network interface--- this will usually either be an ethernet or wireless network adapter. Do this:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ifconfig</span></span>
<span class="line"><span>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span></span>
<span class="line"><span>        inet 127.0.0.1  netmask 255.0.0.0</span></span>
<span class="line"><span>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span></span>
<span class="line"><span>        loop  txqueuelen 1000  (Local Loopback)</span></span>
<span class="line"><span>        RX packets 5846  bytes 614351 (614.3 KB)</span></span>
<span class="line"><span>        RX errors 0  dropped 0  overruns 0  frame 0</span></span>
<span class="line"><span>        TX packets 5846  bytes 614351 (614.3 KB)</span></span>
<span class="line"><span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>wlp0s20f3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span></span>
<span class="line"><span>        inet 192.168.1.209  netmask 255.255.255.0  broadcast 192.168.1.255</span></span>
<span class="line"><span>        inet6 fe80::1161:c26b:af05:d784  prefixlen 64  scopeid 0x20&lt;link&gt;</span></span>
<span class="line"><span>        ether 24:41:8c:a8:30:d1  txqueuelen 1000  (Ethernet)</span></span>
<span class="line"><span>        RX packets 219369  bytes 176416490 (176.4 MB)</span></span>
<span class="line"><span>        RX errors 0  dropped 0  overruns 0  frame 0</span></span>
<span class="line"><span>        TX packets 108399  bytes 27213617 (27.2 MB)</span></span>
<span class="line"><span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span></span></code></pre></div></blockquote><p><code>lo0</code> is the Loopback Interface, so <code>wlp0s20f3</code> is the wireless interface. Note that it has an IP address on the local net. There may be other interfaces listed, you&#39;ll need to pick the one that&#39;s right for your system.</p><p>Then, on Linux do this to set up the tap network interface and route that will let the Apache NuttX simulator access the network:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo ./tools/simhostroute.sh wlp0s20f3 on</span></span>
<span class="line"><span> ping -c 1 10.0.1.2  # nuttx system</span></span>
<span class="line"><span>PING 10.0.1.2 (10.0.1.2) 56(84) bytes of data.</span></span>
<span class="line"><span>64 bytes from 10.0.1.2: icmp_seq=1 ttl=64 time=7.52 ms</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--- 10.0.1.2 ping statistics ---</span></span>
<span class="line"><span>1 packets transmitted, 1 received, 0% packet loss, time 0ms</span></span>
<span class="line"><span>rtt min/avg/max/mdev = 7.529/7.529/7.529/0.000 m</span></span></code></pre></div></blockquote></li><li><p>Test that Apache NuttX can access the Internet</p><p>First let&#39;s ping the network interface of our Linux host to prove we can see the gateway to the Internet:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; ping -c 1 10.0.1.1</span></span>
<span class="line"><span>nsh&gt; ping -c 1 10.0.1.1</span></span>
<span class="line"><span>PING 10.0.1.1 56 bytes of data</span></span>
<span class="line"><span>56 bytes from 10.0.1.1: icmp_seq=0 time=0 ms</span></span>
<span class="line"><span>1 packets transmitted, 1 received, 0% packet loss, time 1010 ms</span></span></code></pre></div><p>Now let&#39;s ping one of Google&#39;s DNS servers to prove we can access the rest of the Internet:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; ping -c 1 8.8.8.8</span></span>
<span class="line"><span>PING 8.8.8.8 56 bytes of data</span></span>
<span class="line"><span>56 bytes from 8.8.8.8: icmp_seq=0 time=10 ms</span></span>
<span class="line"><span>1 packets transmitted, 1 received, 0% packet loss, time 1010 ms</span></span></code></pre></div><p>If it doesn&#39;t work, then you need to enable the IP forward on your computer:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo sysctl -w net.ipv4.ip_forward=1</span></span></code></pre></div></blockquote><p>Success!</p></li></ol><h2 id="testing-capturing-tcp-network-traffic" tabindex="-1">Testing / capturing TCP network traffic <a class="header-anchor" href="#testing-capturing-tcp-network-traffic" aria-label="Permalink to &quot;Testing / capturing TCP network traffic&quot;">​</a></h2><ol><li><p>Start Wireshark (or tcpdump) on Linux and capture the appeared tap0 interface.</p></li><li><p>Optionally activate emulating packet loss on Linux:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo iptables -A INPUT -p tcp --dport 31337 -m statistic --mode random --probability 0.01 -j DROP</span></span></code></pre></div></blockquote></li><li><p>Run netcat server on Linux:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> netcat -l -p 31337</span></span></code></pre></div></blockquote></li><li><p>Run netcat client on Apache NuttX:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; dd if=/dev/zero of=/tmp/test.bin count=1000</span></span>
<span class="line"><span>nsh&gt; netcat LINUX_HOST_IP_ADDRESS 31337 /tmp/test.bin</span></span></code></pre></div></blockquote></li><li><p>Observe TCP network traffic in Wireshark / tcpdump on Linux.</p></li></ol><h2 id="stopping" tabindex="-1">Stopping <a class="header-anchor" href="#stopping" aria-label="Permalink to &quot;Stopping&quot;">​</a></h2><ol><li><p>The normal way to stop:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; poweroff</span></span>
<span class="line"><span></span></span>
<span class="line"><span> # we&#39;re back at the Linux prompt.</span></span></code></pre></div></blockquote><p>If you don&#39;t have an nsh prompt, the only effective way to stop the simulator is kill it from another terminal:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> pkill nuttx</span></span></code></pre></div></blockquote></li><li><p>Optionally deactivate emulating packet loss on Linux:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo iptables -D INPUT -p tcp --dport 31337 -m statistic --mode random --probability 0.01 -j DROP</span></span></code></pre></div></blockquote></li><li><p>If you do not need tap0 interface anymore, it can be disabled on Linux as follows:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo ./tools/simhostroute.sh wlan0 off</span></span></code></pre></div></blockquote></li></ol><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>You can debug the simulator like any regular Linux program.</p>`,20)]))}const g=a(p,[["render",i]]);export{h as __pageData,g as default};
