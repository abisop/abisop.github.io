import{_ as t,c as a,al as o,o as i}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"ST Nucleo L496ZG","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32l4/boards/nucleo-l496zg/index.md","filePath":"en/platforms/arm/stm32l4/boards/nucleo-l496zg/index.md"}'),n={name:"en/platforms/arm/stm32l4/boards/nucleo-l496zg/index.md"};function r(l,e,s,u,h,c){return i(),a("div",null,e[0]||(e[0]=[o(`<h1 id="st-nucleo-l496zg" tabindex="-1">ST Nucleo L496ZG <a class="header-anchor" href="#st-nucleo-l496zg" aria-label="Permalink to &quot;ST Nucleo L496ZG&quot;">​</a></h1><p>chip:stm32, chip:stm32l4, chip:stm32l496</p><p>This page discusses issues unique to NuttX configurations for the STMicro Nucleo-144 board for STM32L4 chips.</p><h2 id="nucleo-l496zg" tabindex="-1">Nucleo L496ZG <a class="header-anchor" href="#nucleo-l496zg" aria-label="Permalink to &quot;Nucleo L496ZG&quot;">​</a></h2><p>ST Nucleo L496ZG board from ST Micro is supported. See</p><p><a href="http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-nucleo/nucleo-l496zg.html" target="_blank" rel="noreferrer">http://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-nucleo/nucleo-l496zg.html</a></p><p>The Nucleo L496ZG order part number is NUCLEO-L496ZG. It is one member of the STM32 Nucleo-144 board family.</p><h3 id="nucleo-l496zg-features" tabindex="-1">NUCLEO-L496ZG Features <a class="header-anchor" href="#nucleo-l496zg-features" aria-label="Permalink to &quot;NUCLEO-L496ZG Features&quot;">​</a></h3><ul><li>Microprocessor: STM32L496ZGT6 Core: ARM 32-bit Cortex®-M4 CPU with FPU, 80 MHz, MPU, and DSP instructions.</li><li>Memory: 1024 KB Flash 320KB of SRAM (including 64KB of SRAM2)</li><li>ADC: 3×12-bit: up to 24 channels</li><li>DMA: 2 X 7-stream DMA controllers with FIFOs and burst support</li><li>Timers: Up to 13 timers: (2x 16-bit lowpower), two 32-bit timers, 2x watchdogs, SysTick</li><li>GPIO: 114 I/O ports with interrupt capability</li><li>LCD: LCD-TFT Controller, Parallel interface</li><li>I2C: 4 × I2C interfaces (SMBus/PMBus)</li><li>U[S]ARTs: 3 USARTs, 2 UARTs (27 Mbit/s, ISO7816 interface, LIN, IrDA, modem control)</li><li>SPI/12Ss: 6/3 (simplex) (up to 50 Mbit/s), 3 with muxed simplex I2S for audio class accuracy via internal audio PLL or external clock</li><li>QSPI: Dual mode Quad-SPI</li><li>SAIs: 2 Serial Audio Interfaces</li><li>CAN: 2 X CAN interface</li><li>SDMMC interface</li><li>USB: USB 2.0 full-speed device/host/OTG controller with on-chip PHY</li><li>Camera Interface: 8/14 Bit</li><li>CRC calculation unit</li><li>TRG: True random number generator</li><li>RTC</li></ul><p>See <a href="https://developer.mbed.org/platforms/ST-Nucleo-L496ZG" target="_blank" rel="noreferrer">https://developer.mbed.org/platforms/ST-Nucleo-L496ZG</a> for additional information about this board.</p><h2 id="hardware" tabindex="-1">Hardware <a class="header-anchor" href="#hardware" aria-label="Permalink to &quot;Hardware&quot;">​</a></h2><p>Section needs updating</p><p>GPIO - there are 144 I/O lines on the STM32L4xxZx with various pins pined out on the Nucleo 144.</p><p>Keep in mind that:</p><ul><li><p>The I/O is 3.3 Volt not 5 Volt like on the Arduino products.</p></li><li></li></ul><pre><code>The Nucleo-144 board family has 3 pages of Solder Bridges AKA Solder

:   Blobs (SB) that can alter the factory configuration. We will
    note SB in effect but will assume the factory default settings.
</code></pre><p>Our main concern is establishing a console and LED utilization for debugging.</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>B1 USER: the user button is connected to the I/O PC13 (Tamper support, SB173 ON and SB180 OFF)</p><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The Board provides a 3 user LEDs, LD1-LD3 LED1 (Green) PB_0 (SB120 ON and SB119 OFF) LED2 (Blue) PB_7 (SB139 ON) LED3 (Red) PB_14 (SP118 ON)</p><ul><li>When the I/O is HIGH value, the LEDs are on.</li><li>When the I/O is LOW, the LEDs are off.</li></ul><p>These LEDs are not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/stm32_autoleds.c. The LEDs are used to encode OS related events as follows when the LEDs are available:</p><blockquote><p>SYMBOL Meaning RED GREEN BLUE</p><hr><p>LED_STARTED NuttX has been started OFF OFF OFF LED_HEAPALLOCATE Heap has been allocated OFF OFF ON LED_IRQSENABLED Interrupts enabled OFF ON OFF LED_STACKCREATED Idle stack created OFF ON ON LED_INIRQ In an interrupt NC NC ON (momentary) LED_SIGNAL In a signal handler NC ON OFF (momentary) LED_ASSERTION An assertion failed ON NC ON (momentary) LED_PANIC The system has crashed ON OFF OFF (flashing 2Hz) LED_IDLE MCU is is sleep mode ON OFF OFF</p></blockquote><p>OFF - means that the OS is still initializing. Initialization is very fast</p><p>: so if you see this at all, it probably means that the system is hanging up somewhere in the initialization phases.</p><p>GREEN - This means that the OS completed initialization.</p><p>BLUE - Whenever and interrupt or signal handler is entered, the BLUE LED is</p><p>: illuminated and extinguished when the interrupt or signal handler exits.</p><p>VIOLET - If a recovered assertion occurs, the RED and blue LED will be</p><p>: illuminated briefly while the assertion is handled. You will probably never see this.</p><p>Flashing RED - In the event of a fatal crash, all other LEDs will be</p><p>: extinguished and RED LED will FLASH at a 2Hz rate.</p><p>Thus if the GREEN LED is lit, NuttX has successfully booted and is, apparently, running normally. If the RED LED is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p><h2 id="serial-consoles" tabindex="-1">Serial Consoles <a class="header-anchor" href="#serial-consoles" aria-label="Permalink to &quot;Serial Consoles&quot;">​</a></h2><h3 id="usart3" tabindex="-1">USART3 <a class="header-anchor" href="#usart3" aria-label="Permalink to &quot;USART3&quot;">​</a></h3><p>Default board is configured to use USART3 as console.</p><p>Pins and Connectors:</p><pre><code>FUNC GPIO  Connector
               Pin NAME
---- ---   ------- ----
TXD: PC4   CN8-9,  A4
RXD: PC5   CN8-11, A5
---- ---   ------- ----
</code></pre><p>You must use a 3.3 TTL to RS-232 converter or a USB to 3.3V TTL:</p><pre><code>Nucleo 144           FTDI TTL-232R-3V3
-------------       -------------------
TXD - CN8-9     -   RXD - Pin 5 (Yellow)
RXD - CN8-11    -   TXD - Pin 4 (Orange)
GND             -   GND   Pin 1  (Black)
-------------       -------------------

*Note you will be reverse RX/TX
</code></pre><p>Use make menuconfig to configure USART3 as the console:</p><pre><code>CONFIG_STM32L4_USART3=y
CONFIG_USART3_SERIALDRIVER=y
CONFIG_USART3_SERIAL_CONSOLE=y
CONFIG_USART3_RXBUFSIZE=256
CONFIG_USART3_TXBUFSIZE=256
CONFIG_USART3_BAUD=115200
CONFIG_USART3_BITS=8
CONFIG_USART3_PARITY=0
CONFIG_USART3_2STOP=0
</code></pre><h3 id="usart2" tabindex="-1">USART2 <a class="header-anchor" href="#usart2" aria-label="Permalink to &quot;USART2&quot;">​</a></h3><p>USART 2 could be used as console as well.</p><h3 id="virtual-com-port" tabindex="-1">Virtual COM Port <a class="header-anchor" href="#virtual-com-port" aria-label="Permalink to &quot;Virtual COM Port&quot;">​</a></h3><p>Yet another option is to use LPUART1 and the USB virtual COM port. This option may be more convenient for long term development, but is painful to use during board bring-up. However the LPUART peripheral has not yet been tested for this board.</p><p>Solder Bridges. This configuration requires:</p><pre><code>PG7 LPUART1 TX SB131 ON and SB195 OFF (Default)
PG8 LPUART1 RX SB130 ON and SB193 OFF (Default)
</code></pre><h3 id="default" tabindex="-1">Default <a class="header-anchor" href="#default" aria-label="Permalink to &quot;Default&quot;">​</a></h3><p>As shipped, the virtual COM port is enabled.</p><h3 id="spi" tabindex="-1">SPI <a class="header-anchor" href="#spi" aria-label="Permalink to &quot;SPI&quot;">​</a></h3><p>Since this board is so generic, having a quick way to vet the SPI configuration seams in order. So the board provides a quick test that can be selected vi CONFIG_NUCLEO_SPI_TEST that will initialize the selected buses (SPI1-SPI3) and send some text on the bus at application initialization time board_app_initialize.</p><h3 id="sdio" tabindex="-1">SDIO <a class="header-anchor" href="#sdio" aria-label="Permalink to &quot;SDIO&quot;">​</a></h3><p>To test the SD performance one can use a SparkFun microSD Sniffer from <a href="https://www.sparkfun.com/products/9419" target="_blank" rel="noreferrer">https://www.sparkfun.com/products/9419</a> or similar board and connect it as follows:</p><pre><code>VCC    V3.3 CN11  16
GND    GND  CN11-8
CMD    PD2  CN11-4
CLK    PC12 CN11-3
DAT0 - PC8  CN12-2
DAT1 - PC9  CN12-1
DAT2   PC10 CN11-1
CD     PC11 CN11-2
</code></pre><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at apps/examples/nsh for the Nucleo-144 boards. The Configuration enables the serial interfaces on USART6. Support for builtin applications is enabled, but in the base configuration no builtin applications are selected (see NOTES below).</p><p>NOTES:</p><ol><li><p>This configuration uses the mconf-based configuration tool. To change this configuration using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository.</p><p>b. If this is the initial configuration then execute:</p><pre><code>    ./tools/configure.sh nucleo-l496zg:nsh

in nuttx/ in order to start configuration process. Caution:
Doing this step more than once will overwrite .config with the
contents of the nucleo-l496zg/nsh/defconfig file.
</code></pre><p>c. Execute &#39;make oldconfig&#39; in nuttx/ in order to refresh the configuration.</p><p>d. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p><p>e. Save the .config file to reuse it in the future starting at step d.</p></li><li><p>By default, this configuration uses the ARM GNU toolchain for Linux. That can easily be reconfigured, of course.:</p><pre><code>CONFIG_HOST_LINUX=y                     : Builds under Linux
CONFIG_ARM_TOOLCHAIN_GNU_EABI=y      : ARM GNU for Linux
</code></pre></li><li><p>Although the default console is LPUART1 (which would correspond to the Virtual COM port) I have done all testing with the console device configured for USART3 (see instruction above under &quot;Serial Consoles).</p></li></ol>`,61)]))}const f=t(n,[["render",r]]);export{p as __pageData,f as default};
