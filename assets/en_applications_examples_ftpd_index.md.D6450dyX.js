import{_ as o,c as t,al as d,o as i}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"ftpd FTP daemon","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/ftpd/index.md","filePath":"en/applications/examples/ftpd/index.md"}'),a={name:"en/applications/examples/ftpd/index.md"};function c(n,e,l,s,r,p){return i(),t("div",null,e[0]||(e[0]=[d('<h1 id="ftpd-ftp-daemon" tabindex="-1"><code>ftpd</code> FTP daemon <a class="header-anchor" href="#ftpd-ftp-daemon" aria-label="Permalink to &quot;`ftpd` FTP daemon&quot;">â€‹</a></h1><p>This example exercises the FTPD daemon at <code>apps/netutils/ftpd</code>. Below are configurations specific to the FTPD example (the FTPD daemon itself may require other configuration options as well).</p><ul><li><code>CONFIG_EXAMPLES_FTPD</code> -- Enable the FTPD example.</li><li><code>CONFIG_EXAMPLES_FTPD_PRIO</code> -- Priority of the FTP daemon. Default: <code>SCHED_PRIORITY_DEFAULT</code>.</li><li><code>CONFIG_EXAMPLES_FTPD_STACKSIZE</code> -- Stack size allocated for the FTP daemon. Default: <code>2048</code>.</li><li><code>CONFIG_EXAMPLES_FTPD_NONETINIT</code> -- Define to suppress configuration of the network by <code>apps/examples/ftpd</code>. You would need to suppress network configuration if the network is configuration prior to running the example.</li></ul><p>NSH always initializes the network so if <code>CONFIG_NSH_NETINIT</code> is defined, so is <code>CONFIG_EXAMPLES_FTPD_NONETINIT</code> (se it does not explicitly need to be defined in that case):</p><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> -- Build the FTPD daemon example test as an NSH built-in function. By default the FTPD daemon will be built as a standalone application.</li></ul><p>If <code>CONFIG_EXAMPLES_FTPD_NONETINIT</code> is not defined, then the following may be specified to customized the network configuration:</p><ul><li><code>CONFIG_EXAMPLES_FTPD_NOMAC</code> -- If the hardware has no MAC address of its own, define this <code>=y</code> to provide a bogus address for testing.</li><li><code>CONFIG_EXAMPLES_FTPD_IPADDR</code> -- The target IP address. Default <code>10.0.0.2</code>.</li><li><code>CONFIG_EXAMPLES_FTPD_DRIPADDR</code> -- The default router address. Default: <code>10.0.0.1</code>.</li><li><code>CONFIG_EXAMPLES_FTPD_NETMASK</code> -- The network mask. Default: <code>255.255.255.0</code>.</li></ul><p>TCP networking support is required. So are pthreads so this must be set to &#39;n&#39;:</p><ul><li><code>CONFIG_DISABLE_PTHREAD</code> -- <code>pthread</code> support is required.</li></ul><p>Other FTPD configuration options they may be of interest:</p><ul><li><code>CONFIG_FTPD_VENDORID</code> -- The vendor name to use in FTP communications. Default: <code>NuttX</code>.</li><li><code>CONFIG_FTPD_SERVERID</code> -- The server name to use in FTP communications. Default: <code>NuttX FTP Server</code>.</li><li><code>CONFIG_FTPD_CMDBUFFERSIZE</code> -- The maximum size of one command. Default: <code>512</code> bytes.</li><li><code>CONFIG_FTPD_DATABUFFERSIZE</code> -- The size of the I/O buffer for data transfers. Default: <code>2048</code> bytes.</li><li><code>CONFIG_FTPD_WORKERSTACKSIZE</code> -- The stacksize to allocate for each FTP daemon worker thread. Default: <code>2048</code> bytes.</li></ul><p>The following netutils libraries should be enabled in your <code>defconfig</code> file: :</p><pre><code>CONFIG_NETUTILS_NETLIB=y\nCONFIG_NETUTILS_FTPD=y\n</code></pre>',13)]))}const T=o(a,[["render",c]]);export{f as __pageData,T as default};
