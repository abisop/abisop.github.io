import{_ as t,c as p,al as a,j as s,a as e,o}from"./chunks/framework.NFAqBSgQ.js";const g=JSON.parse('{"title":"NFS Client How-To","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/nfs.md","filePath":"en/guides/nfs.md"}'),i={name:"en/guides/nfs.md"};function l(r,n,c,d,h,u){return o(),p("div",null,n[0]||(n[0]=[a(`<h1 id="nfs-client-how-to" tabindex="-1">NFS Client How-To <a class="header-anchor" href="#nfs-client-how-to" aria-label="Permalink to &quot;NFS Client How-To&quot;">​</a></h1><h2 id="adding-nfs-to-the-nuttx-configuration" tabindex="-1">Adding NFS to the NuttX Configuration <a class="header-anchor" href="#adding-nfs-to-the-nuttx-configuration" aria-label="Permalink to &quot;Adding NFS to the NuttX Configuration&quot;">​</a></h2><p>The NFS client is easily added to your configuration: You simply need to add <code>CONFIG_NFS</code> to your <code>nuttx/.config</code> file. There are, however, a few dependencies on other system settings:</p><p>First, there are things that you must configure in order to be able to use any file system:</p><blockquote><ul><li><code>CONFIG_DISABLE_MOUNTPOINT=n</code>. You must include support for mount points in the pseudo-file system.</li></ul></blockquote><p>And there are several dependencies on the networking configuration. At a minimum, you need to have the following selections:</p><blockquote><ul><li><code>CONFIG_NET=y</code>. General networking support.</li><li><code>CONFIG_NET_UDP=y</code>. Support for UDP.</li></ul></blockquote><h2 id="mount-interface" tabindex="-1">Mount Interface <a class="header-anchor" href="#mount-interface" aria-label="Permalink to &quot;Mount Interface&quot;">​</a></h2><p>A low-level, C-callable interface is provided to mount a file system. That interface is called <code>mount()</code> and is mentioned in the porting guide and is prototyped in the header file <code>include/sys/mount.h</code>:</p><p>This same interface can be used to mount a remote, NFS file system using some special parameters. The NFS mount differs from the <em>normal</em> file system mount in that: (1) there is no block driver for the NFS file system, and (2) special parameters must be passed as <code>data</code> to describe the remote NFS server. Thus the following code snippet might represent how an NFS file system is mounted:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;sys/mount.h&gt;</span></span>
<span class="line"><span>#include &lt;nuttx/fs/nfs.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>struct nfs_args data;</span></span>
<span class="line"><span>char *mountpoint;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ret = mount(NULL, mountpoint, string &quot;nfs&quot;, 0, (FAR void *)&amp;data);</span></span></code></pre></div><p>NOTE that: (1) the block driver parameter is <code>NULL</code>. The <code>mount()</code> is smart enough to know that no block driver is needed with the NFS file system. (2) The NFS file system is identified with the simple string &quot;nfs&quot; (3) A reference to <code>struct nfs_args</code> is passed as an NFS-specific argument.</p><p>The NFS-specific interface is described in the file <code>include/nuttx/fs/nfs.h</code>. There you can see that <code>struct nfs_args</code> is defined as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct nfs_args</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  uint8_t  addrlen;               /* Length of address */</span></span>
<span class="line"><span>  uint8_t  sotype;                /* Socket type */</span></span>
<span class="line"><span>  uint8_t  flags;                 /* Flags, determines if following are valid: */</span></span>
<span class="line"><span>  uint8_t  timeo;                 /* Time value in deciseconds (with NFSMNT_TIMEO) */</span></span>
<span class="line"><span>  uint8_t  retrans;               /* Times to retry send (with NFSMNT_RETRANS) */</span></span>
<span class="line"><span>  uint16_t wsize;                 /* Write size in bytes (with NFSMNT_WSIZE) */</span></span>
<span class="line"><span>  uint16_t rsize;                 /* Read size in bytes (with NFSMNT_RSIZE) */</span></span>
<span class="line"><span>  uint16_t readdirsize;           /* readdir size in bytes (with NFSMNT_READDIRSIZE) */</span></span>
<span class="line"><span>  char    *path;                  /* Server&#39;s path of the directory being mount */</span></span>
<span class="line"><span>  struct   sockaddr_storage addr; /* File server address (requires 32-bit alignment) */</span></span>
<span class="line"><span>};</span></span></code></pre></div><h2 id="nfs-mount-command" tabindex="-1">NFS Mount Command <a class="header-anchor" href="#nfs-mount-command" aria-label="Permalink to &quot;NFS Mount Command&quot;">​</a></h2>`,15),s("p",null,[e("The "),s("code",{class:"interpreted-text",role:"ref"},"NuttShell (NSH) <nsh>"),e(" also supports a command called "),s("code",null,"nfsmount"),e(" that can be used to mount a remote file system via the NSH command line.")],-1),a(`<p><strong>Command Syntax:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nfsmount &lt;server-address&gt; &lt;mount-point&gt; &lt;remote-path&gt; [udp]</span></span></code></pre></div><p><strong>Synopsis</strong>. The <code>nfsmount</code> command mounts a network file system in the NuttX pseudo filesystem. The <code>nfsmount</code> will use NFSv3 UDP protocol to mount the remote file system.</p><p><strong>Command Line Arguments</strong>. The <code>nfsmount</code> takes three arguments:</p><blockquote><ol><li>The <code>&lt;server-address&gt;</code> is the IP address of the server exporting the file system you wish to mount. This implementation of NFS for the NuttX RTOS is only for a local area network, so the server and client must be in the same network.</li><li>The <code>&lt;mount-point &gt;</code> is the location in the NuttX pseudo filesystem where the mounted volume will appear. This mount point can only reside in the NuttX pseudo filesystem. By convention, this mount point is a subdirectory under <code>/mnt</code>. The mount command will create whatever pseudo directories that may be needed to complete the full path (but the full path must not already exist).</li><li>The <code>&lt;remote-path&gt;</code> is the file system <code>/</code> directory being exported from server. This <code>/</code> directory must have been configured for exportation on the server before when the NFS server was set up.</li></ol></blockquote><p>After the volume has been mounted in the NuttX pseudo filesystem, it may be access in the same way as other objects in the file system.</p><p><strong>Example</strong>. Suppose that the NFS server has been configured to export the directory <code>/export/shared</code>. The the following command would mount that file system (assuming that the target also has privileges to mount the file system).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NuttShell (NSH)</span></span>
<span class="line"><span>nsh&gt; ls /mnt</span></span>
<span class="line"><span>/mnt:</span></span>
<span class="line"><span>nsh: ls: no such directory: /mnt</span></span>
<span class="line"><span>nsh&gt; nfsmount 10.0.0.1 /mnt/nfs /export/shared</span></span>
<span class="line"><span>nsh&gt; ls -l /mnt/nfs</span></span>
<span class="line"><span>/mnt/nfs:</span></span>
<span class="line"><span> drwxrwxrwx   4096 ..</span></span>
<span class="line"><span> drwxrwxrwx   4096 testdir/</span></span>
<span class="line"><span> -rw-rw-rw-      6 ctest.txt</span></span>
<span class="line"><span> -rw-r--r--     15 btest.txt</span></span>
<span class="line"><span> drwxrwxrwx   4096 .</span></span>
<span class="line"><span>nsh&gt; echo &quot;This is a test&quot; &gt;/mnt/nfs/testdir/testfile.txt</span></span>
<span class="line"><span>nsh&gt; ls -l /mnt/nfs/testdir</span></span>
<span class="line"><span>/mnt/nfs/testdir:</span></span>
<span class="line"><span> -rw-rw-rw-     21 another.txt</span></span>
<span class="line"><span> drwxrwxrwx   4096 ..</span></span>
<span class="line"><span> drwxrwxrwx   4096 .</span></span>
<span class="line"><span> -rw-rw-rw-     16 testfile.txt</span></span>
<span class="line"><span>nsh&gt; cat /mnt/nfs/testdir/testfile.txt</span></span>
<span class="line"><span>This is a test</span></span></code></pre></div><h2 id="configuring-the-nfs-server-ubuntu" tabindex="-1">Configuring the NFS server (Ubuntu) <a class="header-anchor" href="#configuring-the-nfs-server-ubuntu" aria-label="Permalink to &quot;Configuring the NFS server (Ubuntu)&quot;">​</a></h2><p>Setting up the server will be done in two steps: First, setting up the configuration file for NFS, and then starting the NFS services. But first, you need to install the nfs server on Ubuntu with these two commands:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> sudo apt-get install nfs-common</span></span>
<span class="line"><span> sudo apt-get install nfs-kernel-server</span></span></code></pre></div><p>After that, we need to make or choose the directory we want to export from the NFS server. In our case, we are going to make a new directory called <code>/export</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># sudo mkdir /export</span></span></code></pre></div><p>It is important that <code>/export</code> directory allow access to everyone (777 permissions) as we will be accessing the NFS share from the client with no authentication.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># sudo chmod 777 /export</span></span></code></pre></div><p>When all this is done, we will need to edit the configuration file to set up an NFS server: <code>/etc/exports</code>. This file contains a list of entries; each entry indicates a volume that is shared and how it is shared. For more information for a complete description of all the setup options for this file you can check in the man pages (<code>man export</code>).</p><p>An entry in <code>/etc/exports</code> will typically look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>directory machine1(option11,option12)</span></span></code></pre></div><p>So for our example we export <code>/export</code> to the client 10.0.0.2 add the entry:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/export 10.0.0.2(rw)</span></span></code></pre></div><p>In our case we are using all the default options except for the <code>ro</code> that we replaced with <code>rw</code> so that our client will have read and write access to the directory that we are exporting.</p><p>After we do all the require configurations, we are ready to start the server with the next command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># sudo /etc/init.d/nfs-kernel-server start</span></span></code></pre></div><p>Note: If you later decide to add more NFS exports to the /etc/exports file, you will need to either restart NFS daemon or run command exportfs.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># sudo /etc/init.d/nfs-kernel-server start</span></span></code></pre></div><p>Or</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># exportfs -ra</span></span></code></pre></div><p>Now we can check if the export directory and our mount point is properly set up.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># sudo showmount -e</span></span>
<span class="line"><span># sudo showmount -a</span></span></code></pre></div><p>And also we can verify if NFS is running in the system with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># rpcinfo –p</span></span>
<span class="line"><span>program vers proto   port</span></span>
<span class="line"><span>   100000   2   tcp    111  portmapper</span></span>
<span class="line"><span>   100000   2   udp    111  portmapper</span></span>
<span class="line"><span>   100011   1   udp   749  rquotad</span></span>
<span class="line"><span>   100011   2   udp   749  rquotad</span></span>
<span class="line"><span>   100005   1   udp    759  mountd</span></span>
<span class="line"><span>   100005   1   tcp    761  mountd</span></span>
<span class="line"><span>   100005   2   udp    764  mountd</span></span>
<span class="line"><span>   100005   2   tcp    766  mountd</span></span>
<span class="line"><span>   100005   3   udp    769  mountd</span></span>
<span class="line"><span>   100005   3   tcp    771  mountd</span></span>
<span class="line"><span>   100003   2   udp   2049  nfs</span></span>
<span class="line"><span>   100003   3   udp   2049  nfs</span></span>
<span class="line"><span>   300019   1   tcp    830  amd</span></span>
<span class="line"><span>   300019   1   udp    831  amd</span></span>
<span class="line"><span>   100024   1   udp    944  status</span></span>
<span class="line"><span>   100024   1   tcp    946  status</span></span>
<span class="line"><span>   100021   1   udp   1042  nlockmgr</span></span>
<span class="line"><span>   100021   3   udp   1042  nlockmgr</span></span>
<span class="line"><span>   100021   4   udp   1042  nlockmgr</span></span>
<span class="line"><span>   100021   1   tcp   1629  nlockmgr</span></span>
<span class="line"><span>   100021   3   tcp   1629  nlockmgr</span></span>
<span class="line"><span>   100021   4   tcp   1629  nlockmgr</span></span></code></pre></div><p>Now your NFS sever is sharing <code>/export</code> directory to be accessed.</p>`,32)]))}const f=t(i,[["render",l]]);export{g as __pageData,f as default};
