import{_ as t,c as o,al as i,o as r}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"APIs Exported by Board-Specific Logic to NuttX","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/os/board.md","filePath":"en/reference/os/board.md"}'),a={name:"en/reference/os/board.md"};function c(n,e,s,d,l,p){return r(),o("div",null,e[0]||(e[0]=[i('<h1 id="apis-exported-by-board-specific-logic-to-nuttx" tabindex="-1">APIs Exported by Board-Specific Logic to NuttX <a class="header-anchor" href="#apis-exported-by-board-specific-logic-to-nuttx" aria-label="Permalink to &quot;APIs Exported by Board-Specific Logic to NuttX&quot;">â€‹</a></h1><p>Exported board-specific interfaces are prototyped in the header file <code>include/nuttx/board.h</code>. There are many interfaces exported from board- to architecture-specific logic. But there are only a few exported from board-specific logic to common NuttX logic. Those few of those related to initialization will be discussed in this paragraph. There are others, like those used by <code>`boardctl()</code> &lt;#boardctl&gt;`__ that will be discussed in other paragraphs.</p><p>All of the board-specific interfaces used by the NuttX OS logic are for controlled board initialization. There are three points in time where you can insert custom, board-specific initialization logic:</p><p>First, <code>&lt;arch&gt;_board_initialize()</code>: This function is <em>not</em> called from the common OS logic, but rather from the architecture-specific power on reset logic. This is used only for initialization of very low-level things like configuration of GPIO pins, power settings, DRAM initialization, etc. The OS has not been initialized at this point, so you cannot allocate memory or initialize device drivers.</p><p>The other two board initialization <em>hooks</em> are called from the OS start-up logic and are described in the following paragraphs:</p>',5)]))}const b=t(a,[["render",c]]);export{f as __pageData,b as default};
