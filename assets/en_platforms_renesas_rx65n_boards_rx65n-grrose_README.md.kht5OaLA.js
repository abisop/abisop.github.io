import{_ as t,c as o,al as i,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"README","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/renesas/rx65n/boards/rx65n-grrose/README.md","filePath":"en/platforms/renesas/rx65n/boards/rx65n-grrose/README.md"}'),a={name:"en/platforms/renesas/rx65n/boards/rx65n-grrose/README.md"};function r(s,e,l,u,d,h){return n(),o("div",null,e[0]||(e[0]=[i(`<h1 id="readme" tabindex="-1">README <a class="header-anchor" href="#readme" aria-label="Permalink to &quot;README&quot;">â€‹</a></h1><p>This README file discusses the port of NuttX to &quot;GR-ROSE&quot; board produced by Gadget Renesas.This board features the RX65N (R5F565NEHDFP 100pin QFP)</p><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">â€‹</a></h1><ul><li>Board Features</li><li>Status/Open Issues</li><li>Serial Console</li><li>LEDs</li><li>Networking</li><li>Contents</li><li>RTC</li><li>USB Device</li><li>RSPI</li><li>RIIC</li><li>DTC</li><li>USB Host</li><li>USB Host Hub</li><li>Debugging</li></ul><h1 id="board-features" tabindex="-1">Board Features <a class="header-anchor" href="#board-features" aria-label="Permalink to &quot;Board Features&quot;">â€‹</a></h1><ul><li>Micro controller - RX65N (R5F565NEHDFP 100pin QFP) RXv2 core [34 CoreMark/mA]</li><li>ROM/RAM - 2MB/640KB</li><li>Operating Frequency - 120MHz(12MHz 10 Multiplication)</li><li>RTC Clock - 32.768kHz</li><li>Sensors - Temperature(inside MCU)</li><li>ROS I/F - Ethernet, USB(rosserial)</li><li>Serial Servo I/F - TTL x 4, RS-485 x 1</li><li>Analog I/F - ADC(12bit) x 6, DAC x 1</li><li>Wireless - IEEE 802.11b/g/n</li><li>PMOD I/F - 1 (I2C, SPI, UART)</li><li>External power supply - USB VBUS or 4.5Vï½ž18V</li><li>Supply to external - 3.3V, 5V</li></ul><p>See the RX65N GRROSE website for further information about this board:</p><ul><li><a href="http://gadget.renesas.com/en/product/rose.html" target="_blank" rel="noreferrer">http://gadget.renesas.com/en/product/rose.html</a></li></ul><h1 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">â€‹</a></h1><p>RX65N GRROSE supports 12 serial ports (SCI0 - SCI12), however only 5 ports can be tested(SCI0, SCI1, SCI2, SCI5 &amp; SCI6).</p><p>Please find the pin configurations for SCI0, SCI1, SCI2, SCI5 &amp; SCI6</p><p>SCI0 Pin Configuration :</p><hr><pre><code> RX65N
GRROSE
</code></pre><h2 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">â€‹</a></h2><p>P21 RXD0 P20 TXD0</p><hr><p>SCI1 Pin Configuration :</p><hr><pre><code> RX65N
GRROSE
</code></pre><h2 id="function-1" tabindex="-1">Function <a class="header-anchor" href="#function-1" aria-label="Permalink to &quot;Function&quot;">â€‹</a></h2><p>P30 RXD1 P26 TXD1</p><hr><p>SCI2 Pin Configuration :</p><hr><pre><code> RX65N
GRROSE
</code></pre><h2 id="function-2" tabindex="-1">Function <a class="header-anchor" href="#function-2" aria-label="Permalink to &quot;Function&quot;">â€‹</a></h2><p>P12 RXD2 P13 TXD2</p><hr><p>SCI3 Pin Configuration :</p><hr><h2 id="rx65n-grrosefunction-connectedto-wifimodule" tabindex="-1">RX65N GRROSE Function (connected to WiFi module) <a class="header-anchor" href="#rx65n-grrosefunction-connectedto-wifimodule" aria-label="Permalink to &quot;RX65N GRROSE
  Function
  (connected
  to WiFi
  module)&quot;">â€‹</a></h2><p>P25 RXD3 P23 TXD3</p><hr><p>SCI5 Pin Configuration :</p><hr><pre><code> RX65N
GRROSE
</code></pre><h2 id="function-3" tabindex="-1">Function <a class="header-anchor" href="#function-3" aria-label="Permalink to &quot;Function&quot;">â€‹</a></h2><p>PC2 RXD5 PC3 TXD5</p><hr><p>SCI6 Pin Configuration :</p><hr><pre><code> RX65N
GRROSE
</code></pre><h2 id="function-4" tabindex="-1">Function <a class="header-anchor" href="#function-4" aria-label="Permalink to &quot;Function&quot;">â€‹</a></h2><p>P33 RXD6 P32 TXD6</p><hr><p>SCI8 Pin Configuration :</p><hr><h2 id="rx65n-grrosefunction-halfduplicationmode-with-rs485driver" tabindex="-1">RX65N GRROSE Function (Half duplication mode with RS485 driver) <a class="header-anchor" href="#rx65n-grrosefunction-halfduplicationmode-with-rs485driver" aria-label="Permalink to &quot;RX65N GRROSE
  Function (Half
  duplication
  mode with RS485
  driver)&quot;">â€‹</a></h2><p>PC6 RXD8 PC7 TXD8 PC5 Direction (L=TX, H=RX)</p><h2 id="serialconnectionconfiguration" tabindex="-1">Serial Connection Configuration <a class="header-anchor" href="#serialconnectionconfiguration" aria-label="Permalink to &quot;Serial
  Connection
  Configuration&quot;">â€‹</a></h2><ol><li>GRROSE board needs to be connected to PC terminal, using USB to Serial Chip.</li><li>Connect TX of USB to serial chip to RX of SCIX(0,1,2,5,6)</li><li>Connect RX of USB to serial chip to TX of SCIX(0,1,2,5,6)</li><li>Connect GND to GND pin.</li><li>Configure Teraterm to 115200 baud.</li></ol><h1 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">â€‹</a></h1><p>The RX65N GRROSE board has 2 LED&#39;s, 1 Power LED(LED3) and 2 User LED&#39;s(LED1, LED2),which are enabled through software.</p><p>If enabled the LED is simply turned on when the board boots successfully, and is blinking on panic / assertion failed.</p><h1 id="networking" tabindex="-1">Networking <a class="header-anchor" href="#networking" aria-label="Permalink to &quot;Networking&quot;">â€‹</a></h1><h2 id="ethernet-connections" tabindex="-1">Ethernet Connections <a class="header-anchor" href="#ethernet-connections" aria-label="Permalink to &quot;Ethernet Connections&quot;">â€‹</a></h2><hr><p>RX65N GRROSE Ethernet Pin Function</p><hr><p>PA4 PA3 PB2 ET0_MDC PB7 PB1 PB0 ET0_MDIO PB3 PB5 PB6 REF50CK0 PB4 PA5 RMII0_CRS_DV PA6_ET_RST RMII0_RXD0 RMII0_RXD1 RMII0_RX_ER RMII0_ETXD0 RMII0_ETXD1 RMII0_TXD_EN ET0_LINKSTA ETHER reset</p><hr><h2 id="nuttx-configurations" tabindex="-1">NuttX Configurations <a class="header-anchor" href="#nuttx-configurations" aria-label="Permalink to &quot;NuttX Configurations&quot;">â€‹</a></h2><p>The following configurations, need to be enabled for network.</p><p>CONFIG_RX65N_EMAC=y : Enable the EMAC Peripheral for RX65N CONFIG_RX65N_EMAC0=y : Enable the EMAC Peripheral for RX65N CONFIG_RX65N_EMAC0_PHYSR=30 : Address of PHY status register on LAN8720A CONFIG_RX65N_EMAC0_PHYSR_100FD=0x18 : Needed for LAN8720A CONFIG_RX65N_EMAC0_PHYSR_100HD=0x08 : &quot; &quot; &quot; &quot; &quot; &quot; CONFIG_RX65N_EMAC0_PHYSR_10FD=0x14 : &quot; &quot; &quot; &quot; &quot; &quot; CONFIG_RX65N_EMAC0_PHYSR_10HD=0x04 : &quot; &quot; &quot; &quot; &quot; &quot; CONFIG_RX65N_EMAC0_PHYSR_ALTCONFIG=y : &quot; &quot; &quot; &quot; &quot; &quot; CONFIG_RX65N_EMAC0_PHYSR_ALTMODE=0x1c : &quot; &quot; &quot; &quot; &quot; &quot; CONFIG_RX65N_EMAC0_RMII=y CONFIG_RX65N_EMAC0_PHYADDR=0 : LAN8720A PHY is at address 1</p><p>CONFIG_SCHED_WORKQUEUE=y : Work queue support is needed CONFIG_SCHED_HPWORK=y : High Priority Work queue support CONFIG_SCHED_LPWORK=y : Low Priority Work queue support</p><h2 id="using-the-network-with-nsh" tabindex="-1">Using the network with NSH <a class="header-anchor" href="#using-the-network-with-nsh" aria-label="Permalink to &quot;Using the network with NSH&quot;">â€‹</a></h2><p>The IP address is configured using DHCP, using the below mentioned configurations :</p><p>The IP address is configured using DHCP, using the below mentioned configurations :</p><p>CONFIG_NETUTILS_DHCPC=y CONFIG_NETUTILS_DHCPD=y CONFIG_NSH_DHCPC=y CONFIG_NETINIT_DHCPC=y</p><p>nsh&gt; ifconfig eth0 HWaddr 00:e0ðŸ‡©ðŸ‡ªad:be:ef at UP IPaddr:10.75.24.53 DRaddr:10.75.24.1 Mask:255.255.254.0</p><p>You can use ping to test for connectivity to the host (Careful, Window firewalls usually block ping-related ICMP traffic). On the target side, you can:</p><p>nsh&gt; ping 10.75.24.250 PING 10.75.24.250 56 bytes of data 56 bytes from 10.75.24.250: icmp_seq=1 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=2 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=3 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=4 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=5 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=6 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=7 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=8 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=9 time=0 ms 56 bytes from 10.75.24.250: icmp_seq=10 time=0 ms 10 packets transmitted, 10 received, 0% packet loss, time 10100 ms</p><p>On the host side, you should also be able to ping the RX65N-GRROSE:</p><p>$ ping 10.75.24.53</p><p>Configure UDP blaster application as mentioned below :</p><p>CONFIG_EXAMPLES_UDPBLASTER_HOSTIP=0x0a4b1801 (10.75.24.1) ------&gt; Gateway IP CONFIG_EXAMPLES_UDPBLASTER_NETMASK=0xfffffe00 (255.255.254.0) --------&gt; Netmask CONFIG_EXAMPLES_UDPBLASTER_TARGETIP=0x0a4b189b (10.75.24.155) ---------&gt; Target IP</p><h2 id="rspi" tabindex="-1">RSPI <a class="header-anchor" href="#rspi" aria-label="Permalink to &quot;RSPI&quot;">â€‹</a></h2><p>For GRROSE board only channel 1 can be tested since RSPI channel1 pinout is only brought out as Pin number 2 and 3 in CN4 is used for MOSIB and MISOB respectively.</p><h1 id="usb-host" tabindex="-1">USB Host <a class="header-anchor" href="#usb-host" aria-label="Permalink to &quot;USB Host&quot;">â€‹</a></h1><p>For the RX65N RSK2MB board, to be used as USB Device, the following Jumper settings need to be done</p><p>J7 Short Pin 1 &amp; Pin 2 J16 Short Pin 2 &amp; Pin 3</p><h1 id="usb-device" tabindex="-1">USB Device <a class="header-anchor" href="#usb-device" aria-label="Permalink to &quot;USB Device&quot;">â€‹</a></h1><p>For the RX65N RSK2MB board, to be used as USB Device, the following Jumper settings need to be done</p><p>J7 Short Pin 2 &amp; Pin 3 J16 Short Pin 1 &amp; Pin 2</p><h1 id="rtc" tabindex="-1">RTC <a class="header-anchor" href="#rtc" aria-label="Permalink to &quot;RTC&quot;">â€‹</a></h1><h2 id="nuttx-configurations-1" tabindex="-1">NuttX Configurations <a class="header-anchor" href="#nuttx-configurations-1" aria-label="Permalink to &quot;NuttX Configurations&quot;">â€‹</a></h2><p>The configurations listed in Renesas_RX65N_NuttX_RTC_Design.doc need to be enabled.</p><h2 id="rtc-testing" tabindex="-1">RTC Testing <a class="header-anchor" href="#rtc-testing" aria-label="Permalink to &quot;RTC Testing&quot;">â€‹</a></h2><p>The test cases mentioned in Renesas_RX65N_RTC_Test_Cases.xls are to be executed as part of RTC testing.</p><p>The following configurations are to be enabled as part of testing RTC examples. CONFIG_EXAMPLES_ALARM CONFIG_EXAMPLES_PERIODIC CONFIG_EXAMPLES_CARRY</p><h2 id="usb-device-configurations" tabindex="-1">USB Device Configurations <a class="header-anchor" href="#usb-device-configurations" aria-label="Permalink to &quot;USB Device Configurations&quot;">â€‹</a></h2><p>The following configurations need to be enabled for USB Device</p><p>CONFIG_USBDEV CONFIG_CDCACM CONFIG_STDIO_BUFFER_SIZE=64 CONFIG_STDIO_LINEBUFFER</p><h2 id="usb-device-testing" tabindex="-1">USB Device Testing <a class="header-anchor" href="#usb-device-testing" aria-label="Permalink to &quot;USB Device Testing&quot;">â€‹</a></h2><p>The following testing is executed as part of USB Device testing on RX65N target for GRROSE board</p><p>echo &quot;This is a test for USB Device&quot; &gt; /dev/ttyACM0</p><p>xd 0 0x20000 &gt; /dev/ttyACM0</p><p>The output of the commands mentioned above should be seen on the USB Device COM port on teraterm</p><h2 id="rspi-configurations" tabindex="-1">RSPI Configurations <a class="header-anchor" href="#rspi-configurations" aria-label="Permalink to &quot;RSPI Configurations&quot;">â€‹</a></h2><p>The following configurations need to be enabled for RSPI</p><p>CONFIG_SYSTEM_SPITOOL=y</p><h2 id="rspi-testing" tabindex="-1">RSPI Testing <a class="header-anchor" href="#rspi-testing" aria-label="Permalink to &quot;RSPI Testing&quot;">â€‹</a></h2><p>The following testing is executed as part of RSPI testing on RX65N target for GRROSE board</p><p>On GRROSE board only channel 1 can be tested since RSPI channel1 pinout is only brought out.</p><p>Following command can be used for testing RSPI communication to slave device. spi exch -b 0 -x 4 aabbccdd where b is bus number and x is Number of word to exchange.</p><h2 id="riic-configurations" tabindex="-1">RIIC Configurations <a class="header-anchor" href="#riic-configurations" aria-label="Permalink to &quot;RIIC Configurations&quot;">â€‹</a></h2><p>The following configurations need to be enabled for RIIC</p><p>CONFIG_SYSTEM_I2CTOOL=y</p><h2 id="riic-testing" tabindex="-1">RIIC Testing <a class="header-anchor" href="#riic-testing" aria-label="Permalink to &quot;RIIC Testing&quot;">â€‹</a></h2><p>On GRROSE board, none of the RIIC channel pins are brought out in the board so not tested for communication.</p><h2 id="dtc-configurations" tabindex="-1">DTC Configurations <a class="header-anchor" href="#dtc-configurations" aria-label="Permalink to &quot;DTC Configurations&quot;">â€‹</a></h2><p>The following configurations need to be enabled for DTC.</p><p>CONFIG_SYSTEM_SPITOOL=y</p><h2 id="dtc-testing" tabindex="-1">DTC Testing <a class="header-anchor" href="#dtc-testing" aria-label="Permalink to &quot;DTC Testing&quot;">â€‹</a></h2><p>DTC has been tested using RSPI driver.</p><h2 id="usb-host-configurations" tabindex="-1">USB Host Configurations <a class="header-anchor" href="#usb-host-configurations" aria-label="Permalink to &quot;USB Host Configurations&quot;">â€‹</a></h2><p>The following configurations need to be enabled for USB Host Mode driver to support USB HID Keyboard class and MSC Class.</p><p>CONFIG_USBHOST=y CONFIG_USBHOST_HIDKBD=y CONFIG_FS_FAT=y CONFIG_EXAMPLES_HIDKBD=y</p><h2 id="usb-host-driver-testing" tabindex="-1">USB Host Driver Testing <a class="header-anchor" href="#usb-host-driver-testing" aria-label="Permalink to &quot;USB Host Driver Testing&quot;">â€‹</a></h2><p>The Following Class Drivers were tested as mentioned below :</p><ul><li>USB HID Keyboard Class On the NuttX Console &quot;hidkbd&quot; application was executed</li></ul><p>nsh&gt; hidkbd The characters typed from the keyboard were executed correctly.</p><ul><li>USB MSC Class</li></ul><p>The MSC device is enumerated as sda in /dev directory.</p><p>The block device is mounted using the command as mentioned below :</p><p>mount -t vfat /dev/sda /mnt</p><p>The MSC device is mounted in /dev directory</p><p>The copy command is executed to test the Read/Write functionality</p><p>cp /mnt/&lt;file.txt&gt; /mnt/file_copy.txt</p><h2 id="usb-host-hub-configurations" tabindex="-1">USB Host Hub Configurations <a class="header-anchor" href="#usb-host-hub-configurations" aria-label="Permalink to &quot;USB Host Hub Configurations&quot;">â€‹</a></h2><p>The following configurations need to be enabled for USB Host Mode driver to support USB HID Keyboard class and MSC Class.</p><p>CONFIG_RX65N_USBHOST=y CONFIG_USBHOST_HUB=y CONFIG_USBHOST_ASYNCH=y CONFIG_USBHOST=y CONFIG_USBHOST_HIDKBD=y CONFIG_FS_FAT=y CONFIG_EXAMPLES_HIDKBD=y</p><h2 id="usb-host-hub-driver-testing" tabindex="-1">USB Host Hub Driver Testing <a class="header-anchor" href="#usb-host-hub-driver-testing" aria-label="Permalink to &quot;USB Host Hub Driver Testing&quot;">â€‹</a></h2><p>The Following Class Drivers were tested as mentioned below :</p><ul><li>USB HID Keyboard Class On the NuttX Console &quot;hidkbd&quot; application was executed</li></ul><p>nsh&gt; hidkbd The characters typed from the keyboard were executed correctly.</p><ul><li>USB MSC Class The MSC device is enumerated as sda in /dev directory.</li></ul><p>The block device is mounted using the command as mentioned below :</p><p>mount -t vfat /dev/sda /mnt</p><p>The MSC device is mounted in /dev directory</p><p>The copy command is executed to test the Read/Write functionality</p><p>cp /mnt/&lt;file.txt&gt; /mnt/file_copy.txt</p><h1 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">â€‹</a></h1><ol><li>NuttX needs to be compiled in Cygwin.</li></ol><p>The following Configuration needs to be set, in order to do source level debugging.</p><p>CONFIG_DEBUG_SYMBOLS = y (Set this option, using menuconfig only, DO NOT Enable this as default configuration).</p><ol start="2"><li>Download &amp; Install Renesas e2studio IDE.</li><li>Load the project(NuttX built on Cygwin) as Makefile project with existing code</li><li>Right click on the project, and select Debug Configurations.</li><li>The binary(NuttX) needs to be loaded using E1/E2 Emulator.</li><li>Select the Device name as R5F565NE and Emulator as E1/E2(whichever is being used)</li><li>Select Connection type as FINE.</li><li>Load and run the binary.</li></ol><h1 id="flashing-nuttx" tabindex="-1">Flashing NuttX <a class="header-anchor" href="#flashing-nuttx" aria-label="Permalink to &quot;Flashing NuttX&quot;">â€‹</a></h1><p>Alternatively, NuttX binary can be flashed using Renesas flash programmer tool without using e2 studio/Cygwin</p><p>Below are the steps mentioned to flash NuttX binary using Renesas flash programmer tool(RFP).</p><p>1.In order to flash using Renesas flash programmer tool, nuttx.mot file should be generated. 2. Add the following lines in tools/Unix.mk file : ifeq ($(CONFIG_MOTOROLA_SREC),y) @echo &quot;CP: nuttx.mot&quot; $(Q) $(OBJCOPY) $(OBJCOPYARGS) $(BIN) -O srec -I elf32-rx-be-ns nuttx.mot endif 3. Add CONFIG_MOTOROLA_SREC=y in defconfig file or choose make menucofig-&gt;Build Setup-&gt; Binary Output Format-&gt; Select Motorola SREC format. 4. Download Renesas flash programmer tool from <a href="https://www.renesas.com/in/en/products/software-tools/tools/programmer/renesas-flash-programmer-programming-gui.html%5C#downloads" target="_blank" rel="noreferrer">https://www.renesas.com/in/en/products/software-tools/tools/programmer/renesas-flash-programmer-programming-gui.html\\#downloads</a> 5. Refer to the user manual document, for steps to flash NuttX binary using RFP tool.</p>`,152)]))}const f=t(a,[["render",r]]);export{p as __pageData,f as default};
