import{_ as o,c as t,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"spi SPI Tool","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/system/spi/index.md","filePath":"en/applications/system/spi/index.md"}'),n={name:"en/applications/system/spi/index.md"};function r(s,e,d,l,c,u){return i(),t("div",null,e[0]||(e[0]=[a(`<h1 id="spi-spi-tool" tabindex="-1"><code>spi</code> SPI Tool <a class="header-anchor" href="#spi-spi-tool" aria-label="Permalink to &quot;\`spi\` SPI Tool&quot;">​</a></h1><p>The SPI Tool provides a way to debug SPI related problems. This README file will provide usage information for the SPI tools.</p><h2 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h2><ul><li>System Requirements <ul><li>SPI Driver</li><li>Configuration Options</li></ul></li><li>Help</li><li>Common Line Form</li><li>Common Command Options <ul><li>&quot;Sticky&quot; Options</li><li>Environment variables</li><li>Common Option Summary</li></ul></li><li>Command summary <ul><li><code>bus</code></li><li><code>dev</code></li><li><code>get</code></li><li><code>set</code></li><li><code>verf</code></li></ul></li><li>SPI Build Configuration <ul><li>NuttX Configuration Requirements</li><li>SPI Tool Configuration Options</li></ul></li></ul><h2 id="system-requirements" tabindex="-1">System Requirements <a class="header-anchor" href="#system-requirements" aria-label="Permalink to &quot;System Requirements&quot;">​</a></h2><p>The SPI tool is designed to be implemented as a NuttShell (NSH) add-on. Read the <code>apps/nshlib/README.md</code> file for information about add-ons.</p><h3 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h3><ul><li><p><code>CONFIG_NSH_BUILTIN_APPS</code> – Build the tools as an NSH built-in command.</p></li><li><p><code>CONFIG_SPITOOL_MINBUS</code> – Smallest bus index supported by the hardware (default <code>0</code>).</p></li><li><p><code>CONFIG_SPITOOL_MAXBUS</code> – Largest bus index supported by the hardware (default <code>3</code>).</p></li><li><p><code>CONFIG_SPITOOL_DEFFREQ</code> – Default frequency (default: <code>40000000</code>).</p></li><li><p><code>CONFIG_SPITOOL_DEFMODE</code> – Default mode, where:</p><pre><code>0 = CPOL=0, CPHA=0
1 = CPOL=0, CPHA=1
2 = CPOL=1, CPHA=0
3 = CPOL=1, CPHA=1
</code></pre></li><li><p><code>CONFIG_SPITOOL_DEFWIDTH</code> – Default bit width (default <code>8</code>).</p></li><li><p><code>CONFIG_SPITOOL_DEFWORDS</code> – Default number of words to exchange (default <code>1</code>).</p></li></ul><h2 id="help" tabindex="-1">Help <a class="header-anchor" href="#help" aria-label="Permalink to &quot;Help&quot;">​</a></h2><p>The SPI tools supports some help output. That help output can be view by entering either:</p><pre><code>nsh&gt; spi help
</code></pre><p>or:</p><pre><code>nsh&gt; spi ?
</code></pre><p>Here is an example of the help output. It shows the general form of the command line, the various SPI commands supported with their unique command line options, and a more detailed summary of the command SPI command options:</p><pre><code>nsh&gt; Usage: spi &lt;cmd&gt; [arguments]

Where &lt;cmd&gt; is one of:

  Show help     : ?
  List buses    : bus
  SPI Exchange  : exch [OPTIONS] [&lt;hex senddata&gt;]
  Show help     : help

Where common _sticky_ OPTIONS include:
  [-b bus] is the SPI bus number (decimal).  Default: 0 Current: 2
     [-f freq] SPI frequency.  Default: 4000000 Current: 4000000
  [-m mode] Mode for transfer.  Default: 0 Current: 0
  [-u udelay] Delay after transfer in uS.  Default: 0 Current: 0
  [-w width] Width of bus.  Default: 8 Current: 8
  [-x count] Words to exchange.  Default: 1 Current: 4
</code></pre><p><strong>Notes</strong>:</p><ul><li>An environment variable like PATH may be used for any argument.</li><li>Arguments are _<a href="./.html">sticky</a>. For example, once the SPI bus is specified, that bus will be reused until it is changed.</li></ul><p><strong>Warning</strong>:</p><ul><li>The SPI commands may have bad side effects on your SPI devices. Use only at your own risk.</li></ul><h2 id="command-line-form" tabindex="-1">Command Line Form <a class="header-anchor" href="#command-line-form" aria-label="Permalink to &quot;Command Line Form&quot;">​</a></h2><p>The SPI is started from NSH by invoking the <code>spi</code> command from the NSH command line. The general form of the <code>spi</code> command is:</p><pre><code>spi &lt;cmd&gt; [arguments]
</code></pre><p>Where <code>&lt;cmd&gt;</code> is a &quot;sub-command&quot; and identifies one SPI operation supported by the tool. <code>[arguments]</code> represents the list of arguments needed to perform the SPI operation. Those arguments vary from command to command as described below. However, there is also a core set of common <code>OPTIONS</code> supported by all commands. So perhaps a better representation of the general SPI command would be:</p><pre><code>spi &lt;cmd&gt; [OPTIONS] [arguments]
</code></pre><p>Where <code>[OPTIONS]</code> represents the common options and and arguments represent the operation-specific arguments.</p><h2 id="common-command-options" tabindex="-1">Common Command Options <a class="header-anchor" href="#common-command-options" aria-label="Permalink to &quot;Common Command Options&quot;">​</a></h2><h3 id="sticky-options" tabindex="-1">&quot;Sticky&quot; Options <a class="header-anchor" href="#sticky-options" aria-label="Permalink to &quot;&quot;Sticky&quot; Options&quot;">​</a></h3><p>In order to interact with SPI devices, there are a number of SPI parameters that must be set correctly. One way to do this would be to provide to set the value of each separate command for each SPI parameter. The SPI tool takes a different approach, instead: The SPI configuration can be specified as a (potentially long) sequence of command line arguments.</p><p>These arguments, however, are _<a href="./.html">sticky</a>. They are sticky in the sense that once you set the SPI parameter, that value will remain until it is reset with a new value (or until you reset the board).</p><h3 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h3><p><strong>Note</strong> also that if environment variables are not disabled (by <code>CONFIG_DISABLE_ENVIRON=y</code>), then these options may also be environment variables. Environment variables must be preceded with the special character \`\`. For example, <code>PWD</code> is the variable that holds the current working directory and so <code>PWD</code> could be used as a command line argument. The use of environment variables on the SPI tools command is really only useful if you wish to write NSH scripts to execute a longer, more complex series of SPI commands.</p><h3 id="common-option-summary" tabindex="-1">Common Option Summary <a class="header-anchor" href="#common-option-summary" aria-label="Permalink to &quot;Common Option Summary&quot;">​</a></h3><ul><li><p><code>[-b bus]</code> is the SPI bus number (decimal). Default: <code>0</code></p><p>Which SPI bus to commiuncate on. The bus must have been initialised as a character device in the config in the form <code>/dev/spiX</code> (e.g. <code>/dev/spi2</code>).</p><p>The valid range of bus numbers is controlled by the configuration settings <code>CONFIG_SPITOOL_MINBUS</code> and <code>CONFIG_SPITOOL_MAXBUS</code>.</p><p>The bus numbers are small, decimal numbers.</p></li><li><p><code>[-m mode]</code> SPI Mode for transfer.</p><p>Which of the available SPI modes is to be used. Options are:</p><pre><code>0 = CPOL=0, CPHA=0
1 = CPOL=0, CPHA=1
2 = CPOL=1, CPHA=0
3 = CPOL=1, CPHA=1
</code></pre></li><li><p><code>[-u udelay]</code> Delay after transfer in uS. Default: <code>0</code></p><p>Any extra delay to be provided after the transfer. Not normally needed from the command line.</p></li><li><p><code>[-x count]</code> Words to exchange Default: <code>1</code></p><p>The number of words to be transited over the bus. For sanitys sake this is limited to a relatively small number (<code>40</code> by default). Any data on the command line is sent first, padded by <code>0xFF</code>&#39;s while any remaining data are received.</p></li><li><p><code>[-w width]</code> is the data width (varies according to target). Default: <code>8</code></p><p>Various SPI devices support different data widths. This option is untested.</p></li><li><p><code>[-f freq]</code> SPI frequency. Default: <code>4000000</code> Current: <code>4000000</code></p><p>The <code>[-f freq]</code> sets the frequency of the SPI device. The default is very conservative.</p></li></ul><h2 id="command-summary" tabindex="-1">Command Summary <a class="header-anchor" href="#command-summary" aria-label="Permalink to &quot;Command Summary&quot;">​</a></h2><h3 id="list-buses-bus-options" tabindex="-1">List buses: <code>bus [OPTIONS]</code> <a class="header-anchor" href="#list-buses-bus-options" aria-label="Permalink to &quot;List buses: \`bus [OPTIONS]\`&quot;">​</a></h3><p>This command will simply list all of the configured SPI buses and indicate which are supported by the driver and which are not:</p><pre><code>BUS   EXISTS?
Bus 1: YES
Bus 2: NO
</code></pre><p>The valid range of bus numbers is controlled by the configuration settings <code>CONFIG_SPITOOL_MINBUS</code> and <code>CONFIG_SPITOOL_MAXBUS</code>.</p><h3 id="exchange-data-exch-options-optional-tx-data" tabindex="-1">Exchange data: <code>exch [OPTIONS] &lt;Optional TX Data&gt;</code> <a class="header-anchor" href="#exchange-data-exch-options-optional-tx-data" aria-label="Permalink to &quot;Exchange data: \`exch [OPTIONS] &lt;Optional TX Data&gt;\`&quot;">​</a></h3><p>This command triggers an SPI transfer, returning the data back from the far end.</p><p>As an example you can exchange (send and receive) 4 bytes (-x 4) on SPI2 (-b 2) using the command below with the <code>loopback</code> approach. This approach requires that you connect the MOSI pin directly to the MISO pin (NOTE: SCLK and CS are not directly involved, but you still can see the clock and chip select waveforms if you decide to use an oscilloscope or more properly a logic analyzer to analyze these pins):</p><pre><code>nsh&gt; spi exch -b 2 -x 4 aabbccdd

Received: AA BB CC DD
</code></pre><p>Note that the <code>TX Data</code> are always specified in hex, and are always two digits each, case insensitive.</p><h2 id="spi-build-configuration" tabindex="-1">SPI Build Configuration <a class="header-anchor" href="#spi-build-configuration" aria-label="Permalink to &quot;SPI Build Configuration&quot;">​</a></h2><h3 id="nuttx-configuration-requirements" tabindex="-1">NuttX Configuration Requirements <a class="header-anchor" href="#nuttx-configuration-requirements" aria-label="Permalink to &quot;NuttX Configuration Requirements&quot;">​</a></h3><p>The SPI tools requires the following in your NuttX configuration:</p><ol><li><p>Application configuration.</p><p>Using <code>make menuconfig</code>, select the SPI tool. The following definition should appear in your <code>.config</code> file:</p><pre><code>CONFIG_SYSTEM_SPI=y
</code></pre></li><li><p>Device-specific SPI driver support must be enabled:</p><pre><code>CONFIG_SPI_DRIVER=y
</code></pre><p>The SPI tool will then use the SPI character driver to access the SPI bus. These devices will reside at <code>/dev/spiN</code> where <code>N</code> is the SPI bus number.</p><p><strong>Note</strong>: The SPI driver <code>ioctl</code> interface is defined in <code>include/nuttx/spi/spi.h</code>.</p></li></ol>`,47)]))}const h=o(n,[["render",r]]);export{m as __pageData,h as default};
