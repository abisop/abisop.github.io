import{_ as t,c as o,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"ET-STM32 Stamp","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f1/boards/et-stm32-stamp/index.md","filePath":"en/platforms/arm/stm32f1/boards/et-stm32-stamp/index.md"}'),n={name:"en/platforms/arm/stm32f1/boards/et-stm32-stamp/index.md"};function r(s,e,l,h,p,m){return i(),o("div",null,e[0]||(e[0]=[a(`<h1 id="et-stm32-stamp" tabindex="-1">ET-STM32 Stamp <a class="header-anchor" href="#et-stm32-stamp" aria-label="Permalink to &quot;ET-STM32 Stamp&quot;">​</a></h1><p>chip:stm32, chip:stm32f1, chip:stm32f103</p><p>This page discusses issues/thoughts unique to NuttX configuration(s) for the ET-STM32 Stamp board from Futurlec (<a href="https://www.futurlec.com/ET-STM32_Stamp.shtml" target="_blank" rel="noreferrer">https://www.futurlec.com/ET-STM32_Stamp.shtml</a>).</p><ul><li>Microprocessor: 32-bit ARM Cortex M3 at 72MHz STM32F103RET6</li><li>Memory: 512 KB Flash and 64 KB SRAM</li><li>I/O Pins Out: 48</li><li>ADCs: 16 (at 12-bit resolution)</li><li>DACs: 2 (at 12-bit resolution)</li><li>Peripherals: RTC, 4 timers, 2 I2Cs, 3 SPI ports, 1 on-board UART (up to 5 channels)</li><li>Other: Sleep, stop, and standby modes; serial wire debug and JTAG interfaces</li></ul><p>Please see link below for board specific details:</p><blockquote><p><a href="https://www.futurlec.com/ET-STM32_Stamp_Technical.shtml" target="_blank" rel="noreferrer">https://www.futurlec.com/ET-STM32_Stamp_Technical.shtml</a></p></blockquote><p>This configuration supports the ET-STM32 Stamp module.</p><h2 id="development-environment" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h2><p>Either Linux (recommended), Mac or Cygwin on Windows can be used for the development environment. The source has been built only using the GNU (Cortex M) toolchain. Other toolchains will likely cause problems.</p><p>WSL (Windows Subsystem for Linux) was used to develop, compile and test the NuttX build for the ET-STM32 Stamp platform.</p><h2 id="flashing-programming" tabindex="-1">Flashing/Programming <a class="header-anchor" href="#flashing-programming" aria-label="Permalink to &quot;Flashing/Programming&quot;">​</a></h2><p>Prerequisites:</p><ol><li><p>The ET-STM32 Stamp module from Futurlec.</p></li><li><p>An RS232 connection cable such as the one in this link: (Part code: RS232CONN): <a href="https://www.futurlec.com/DevBoardAccessories.shtml" target="_blank" rel="noreferrer">https://www.futurlec.com/DevBoardAccessories.shtml</a></p><p>It has a 4-pin connection header on one end and an RS-232 (DB9) female connector on the other. The 4-pin connector can be directly plugged onto the Stamp module.</p></li><li><p>An RS232 to USB converter cable. Ensure that a suitable driver is installed for the converter cable. When the cable is plugged in (for example), my PC lists the assigned port with this name: &quot;USB-SERIAL CH340 (COM2)&quot;.</p><p>Assuming Windows 10, navigate to: This PC -&gt; Manage -&gt; Device Manager -&gt; Ports.</p></li><li><p>ST&#39;s Flash loader demonstrator tool. You can download it from here: <a href="https://www.st.com/en/development-tools/flasher-stm32.html" target="_blank" rel="noreferrer">https://www.st.com/en/development-tools/flasher-stm32.html</a></p><p>To install the NuttX firmware (nuttx.bin) on the ET-STM32 Stamp:</p></li><li><p>First, power the Stamp module with a 3.3 VDC power supply. I made my own Stamp module fixture using a 3.3 VDC switching regulator, a prototype PCB card and some solder.</p></li><li><p>Insert the RS232CONN into the 4-pin on-board header. The other end should be connected to the USB port of the PC using the RS232-USB converter.</p></li><li><p>Set the BOOT1 jumper on your board to the ISP position.</p></li><li><p>Press the BOOT0 switch. The green &quot;BOOT0=1&quot; LED should light up.</p></li><li><p>Reset the board by pressing on the RESET button.</p></li><li><p>Using the ST Flash loader demonstrator to download the NuttX binary image.</p></li><li><p>Wait until programming is completed and press &quot;Finish&quot;. Toggle the BOOT0 switch again. Reset the board.</p></li></ol><p>You will now be presented with the NuttShell (NSH). Enjoy.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h3><p>The ET-STM32 Stamp configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh et-stm32-stamp:&lt;subdir&gt;
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.:</p><pre><code>make
</code></pre><p>The &lt;subdir&gt; that is provided above as an argument to the tools/configure.sh must be in one of the following.</p><p>NOTES:</p><ol><li>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should: a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</li></ol><h3 id="configuration-sub-directories" tabindex="-1">Configuration Sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration Sub-directories&quot;">​</a></h3><h3 id="nsh" tabindex="-1">nsh: <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh:&quot;">​</a></h3><p>This configuration directory provide the basic NuttShell (NSH). A serial console is provided on USART1.</p>`,27)]))}const d=t(n,[["render",r]]);export{c as __pageData,d as default};
