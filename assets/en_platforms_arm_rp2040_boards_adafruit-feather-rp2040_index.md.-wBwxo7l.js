import{_ as a,c as i,al as o,o as t}from"./chunks/framework.NFAqBSgQ.js";const n="/assets/Feather.DvkLb_18.png",b=JSON.parse('{"title":"Adafruit Feather RP2040","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp2040/boards/adafruit-feather-rp2040/index.md","filePath":"en/platforms/arm/rp2040/boards/adafruit-feather-rp2040/index.md"}'),s={name:"en/platforms/arm/rp2040/boards/adafruit-feather-rp2040/index.md"};function r(l,e,p,c,h,d){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="adafruit-feather-rp2040" tabindex="-1">Adafruit Feather RP2040 <a class="header-anchor" href="#adafruit-feather-rp2040" aria-label="Permalink to &quot;Adafruit Feather RP2040&quot;">​</a></h1><p>chip:rp2040</p><p>The Feather RP2040 is a general purpose RP2040 board supplied by Adafruit.</p><p><img src="'+n+`" alt="" class="align-center"></p><p>See the <a href="https://learn.adafruit.com/adafruit-feather-rp2040-pico/overview/" target="_blank" rel="noreferrer">Adafruit website</a> for information about Adafruit Feather RP2040.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>RP2040 microcontroller chip</li><li>Dual-core ARM Cortex M0+ processor, flexible clock running up to 133 MHz</li><li>264kB of SRAM, and 8MB of on-board Flash memory</li><li>Castellated module allows soldering direct to carrier boards</li><li>USB Host and Device support via type C connector.</li><li>Low-power sleep and dormant modes</li><li>Drag &amp; drop programming using mass storage over USB</li><li>26 multi-function GPIO pins</li><li>2× SPI, 2× I2C, 2× UART, 3× 12-bit ADC, 16× controllable PWM channels</li><li>Accurate clock and timer on-chip</li><li>Temperature sensor</li><li>Accelerated floating point libraries on-chip</li><li>8 × Programmable IO (PIO) state machines for custom peripheral support</li><li>LiPoly Battery connector</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default a serial console appears on pins 14 (RX GPIO0) and pin 15 (TX GPIO1). This console runs a 115200-8N1.</p><p>The board can be configured to use the USB connection as the serial console.</p><h2 id="buttons-and-leds" tabindex="-1">Buttons and LEDs <a class="header-anchor" href="#buttons-and-leds" aria-label="Permalink to &quot;Buttons and LEDs&quot;">​</a></h2><p>User LED controlled by GPIO13.</p><p>A ws2812 (NeoPixel) smart RGB LED controlled by GPIO16.</p><p>An LED (CHG LED) that indicates the charging status of connected LiPo cell.</p><p>There is a BOOT button which if held down when power is first applied or the RESET button is pressed will cause the RP2040 to boot into program mode and appear as a storage device to a USB connector. Saving a .UF2 file to this device will replace the Flash ROM contents on the RP2040.</p><p>A RESET button that allows rebooting the board without disconnecting the power.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pads numbered anticlockwise from USB connector.</p><p>Pad Signal Notes</p><hr><p>1 Reset Pull to ground to reset the RP2040 processor. 2 3.3V Power out to peripherals. 3 4 3.3V Ground Power out to peripherals. 5 GPIO26 ADC0 6 GPIO27 ADC1 7 GPIO28 ADC2 8 9 10 11 12 13 GPIO29 GPIO24 GPIO25 GPIO18 GPIO19 GPIO20 ADC3 14 GPIO1 Default RX for UART0 serial console 15 16 17 18 19 20 21 22 23 24 25 GPIO0 GPIO6 GPIO2 GPIO3 GPIO7 GPIO8 GPIO9 GPIO10 GPIO11 GPIO12 GPIO13 Default TX for UART0 serial console 26 VBUS Connected to USB +5V 27 EN Pull to ground to turn off 3.3V regulator. 28 VBAT Connected to LiPo battery 3.3V.</p><p>The board has a STEMMA QT connector that is also connected to pins GPIO2 (I2C1 SDA) and GPIO3 (I2C1 SDA).</p><p>The board has a two pin JST PH socket that accepts a single 3.3V LiPo cell. The cell connected to this port can be charged by connecting the board to a USB power supply.</p><p>There are solder pads on the board that allow the addition of a 10-pin serial debug (SWD) connector.</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>The Raspberry Pi Pico can be powered via the USB connector, or by supplying +5V to pin 39. The board had a diode that prevents power from pin 39 from flowing back to the USB socket, although the socket can be power via pin 30.</p><p>The Raspberry Pi Pico chip run on 3.3 volts. This is supplied by an onboard voltage regulator. This regulator can be disabled by pulling pin 37 to ground.</p><p>The regulator can run in two modes. By default the regulator runs in PFM mode which provides the best efficiency, but may be switched to PWM mode for improved ripple by outputting a one on GPIO23.</p><h2 id="supported-capabilities" tabindex="-1">Supported Capabilities <a class="header-anchor" href="#supported-capabilities" aria-label="Permalink to &quot;Supported Capabilities&quot;">​</a></h2><p>NuttX supports the following RP2040 capabilities:</p><ul><li>UART (console port) <ul><li>GPIO 0 (UART0 TX) and GPIO 1 (UART0 RX) are used for the console.</li></ul></li><li>I2C</li><li>SPI (master only)</li><li>DMAC</li><li>PWM</li><li>ADC</li><li>Watchdog</li><li>USB device <ul><li>MSC, CDC/ACM serial and these composite device are supported.</li><li>CDC/ACM serial device can be used for the console.</li></ul></li><li>PIO (RP2040 Programmable I/O)</li><li>Flash ROM Boot</li><li>SRAM Boot <ul><li>If Pico SDK is available, nuttx.uf2 file which can be used in BOOTSEL mode will be created.</li></ul></li><li>Persistent flash filesystem in unused flash ROM</li><li>WiFi wireless communication</li></ul><p>There is currently no direct user mode access to these RP2040 hardware features:</p><ul><li>SPI Slave Mode</li><li>SSI</li><li>RTC</li><li>Timers</li></ul><p>NuttX also provide support for these external devices:</p><ul><li>BMP180 sensor at I2C0 (don&#39;t forget to define I2C0 GPIOs at &quot;I2C0 GPIO pin assign&quot; in Board Selection menu)</li><li>INA219 sensor / module (don&#39;t forget to define I2C0 GPIOs at &quot;I2C0 GPIO pin assign&quot; in Board Selection menu)</li><li>SHT4X sensor at I2C0</li><li>Pico Display Pack (ST7789 LCD) <ul><li>RGB leds and buttons are not supported yet.</li></ul></li><li>Pico Audio Pack (PCM5100A I2S DAC) <ul><li>I2S interface is realized by PIO.</li></ul></li><li>WS2812 smart pixel support</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li>Download Raspberry Pi Pico SDK.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone -b 2.0.0 https://github.com/raspberrypi/pico-sdk.git</span></span></code></pre></div><ol start="2"><li>Download and install picotool</li></ol><blockquote><p>Instructions can be found here: <a href="https://github.com/raspberrypi/picotool" target="_blank" rel="noreferrer">https://github.com/raspberrypi/picotool</a></p><p>If you are on Arch Linux, you can install the picotool through the AUR:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> yay -S picotool</span></span></code></pre></div><ol start="3"><li>Set PICO_SDK_PATH environment variable</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> export PICO_SDK_PATH=&lt;absolute_path_to_pico-sdk_directory&gt;</span></span></code></pre></div><ol start="4"><li>Configure and build NuttX</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/apache/nuttx.git nuttx</span></span>
<span class="line"><span> git clone https://github.com/apache/nuttx-apps.git apps</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh raspberrypi-pico-w:nsh</span></span>
<span class="line"><span> make V=1</span></span></code></pre></div><ol start="5"><li><p>Connect the Adafruit Feather RP2040 board to the USB port while pressing BOOTSEL. The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device. (Same manner as the standard Pico SDK applications installation.)</p></li><li><p>To access the console, GPIO 0 and 1 pins must be connected to the device such as USB-serial converter.</p><p>[usbnsh]{.title-ref} configuration provides the console access by USB CDC/ACM serial device. The console is available by using a terminal software on the USB host.</p></li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="audiopack" tabindex="-1">audiopack <a class="header-anchor" href="#audiopack" aria-label="Permalink to &quot;audiopack&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for NXPlayer audio player.</p><p>Pico Audio Pack support. See the following page for connection: <a href="https://shop.pimoroni.com/products/pico-audio-pack" target="_blank" rel="noreferrer">https://shop.pimoroni.com/products/pico-audio-pack</a> SD card interface is also enabled.</p><h3 id="composite" tabindex="-1">composite <a class="header-anchor" href="#composite" aria-label="Permalink to &quot;composite&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for CDC/ACM with MSC USB composite driver. <code>conn</code> command enables the composite device.</p><h3 id="displaypack" tabindex="-1">displaypack <a class="header-anchor" href="#displaypack" aria-label="Permalink to &quot;displaypack&quot;">​</a></h3><p>NuttShell configuration (console enabled in USB Port, at 115200 bps) supporting ST7789 video display.</p><p>See the following page for connection: <a href="https://shop.pimoroni.com/products/pico-display-pack" target="_blank" rel="noreferrer">https://shop.pimoroni.com/products/pico-display-pack</a></p><h3 id="enc28j60" tabindex="-1">enc28j60 <a class="header-anchor" href="#enc28j60" aria-label="Permalink to &quot;enc28j60&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for ENC28J60.</p><p>ENC28J60 SPI ethernet controller supports:</p><blockquote><ul><li>IP address is configured by DHCP.</li><li>DNS address is 8.8.8.8 (CONFIG_NETINIT_DNSIPADDR)</li><li>NTP client is enabled.</li></ul></blockquote><p>ENC28J60 Raspberry Pi Pico W</p><hr><p>GND GND (Pin 3 or 38 or ...) 3.3V 3V3 OUT (Pin 36) SI GP15 (SPI1 TX) (Pin 20) SCK GP14 (SPI1 SCK) (Pin 19) CS GP13 (SPI1 CSn) (Pin 17) SO GP12 (SPI1 RX) (Pin 16) INT GP11 (Pin 15) RESET GP10 (Pin 14)</p><p>: ENC28J60 connections</p><h3 id="lcd1602" tabindex="-1">lcd1602 <a class="header-anchor" href="#lcd1602" aria-label="Permalink to &quot;lcd1602&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for LCD1602 Segment LCD Display (I2C).</p><p>PCF8574 BackPack Raspberry Pi Pico W</p><hr><p>GND GND (Pin 3 or 38 or ...) VCC 5V Vbus (Pin 40) SDA GP4 (I2C0 SDA) (Pin 6) SCL GP5 (I2C0 SCL) (Pin 7)</p><p>: LCD1602 connections</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps).</p><h3 id="nsh-flash" tabindex="-1">nsh-flash <a class="header-anchor" href="#nsh-flash" aria-label="Permalink to &quot;nsh-flash&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps with SMART flash filesystem.</p><h3 id="nshsram" tabindex="-1">nshsram <a class="header-anchor" href="#nshsram" aria-label="Permalink to &quot;nshsram&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with interrupt vectors in RAM.</p><h3 id="smp" tabindex="-1">smp <a class="header-anchor" href="#smp" aria-label="Permalink to &quot;smp&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps) with both ARM cores enabled.</p><h3 id="spisd" tabindex="-1">spisd <a class="header-anchor" href="#spisd" aria-label="Permalink to &quot;spisd&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with SPI SD card support enabled.</p><p>SD card slot Raspberry Pi Pico W</p><hr><p>DAT2 Not connected DAT3/CS GP17 (SPI0 CSn) (Pin 22) CMD /DI GP19 (SPI0 TX) (Pin 25) VDD 3V3 OUT (Pin 36) CLK/SCK GP18 (SPI0 SCK) (Pin 24) VSS GND (Pin 3 or 38 or ...) DAT0/DO GP16 (SPI0 RX) (Pin 21) DAT1 Not connected</p><p>: spisd connections</p><p>Card hot swapping is not supported.</p><h3 id="ssd1306" tabindex="-1">ssd1306 <a class="header-anchor" href="#ssd1306" aria-label="Permalink to &quot;ssd1306&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for SSD1306 OLED display (I2C) test configuration.</p><p>SSD1306 Raspberry Pi Pico W</p><hr><p>GND GND (Pin 3 or 38 or ...) VCC 3V3 OUT (Pin 36) SDA GP4 (I2C0 SDA) (Pin 6) SCL GP5 (I2C0 SCL) (Pin 7)</p><p>: SSD1306 connections</p><h3 id="st7735" tabindex="-1">st7735 <a class="header-anchor" href="#st7735" aria-label="Permalink to &quot;st7735&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for ST7735 SPI LCD.</p><p>st7735 Raspberry Pi Pico W</p><hr><p>GND GND (Pin 3 or 38 or ...) VCC 5V Vbus (Pin 40) SDA GP15 (SPI1 TX) (Pin 20) SCK GP14 (SPI1 SCK) (Pin 19) CS GP13 (SPI1 CSn) (Pin 17) AO(D/C) GP12 (SPI1 RX) (Pin 16) BL GP11 (Pin 15) RESET GP10 (Pin 14)</p><p>: ST7735 connections</p><h3 id="usbmsc" tabindex="-1">usbmsc <a class="header-anchor" href="#usbmsc" aria-label="Permalink to &quot;usbmsc&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for USB MSC and CDC/ACM.</p><p><code>msconn</code> and <code>sercon</code> commands enable the MSC and CDC/ACM devices. The MSC support provides the interface to the SD card with SPI, so the SD card slot connection like spisd configuration is required.</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>Basic NuttShell configuration using CDC/ACM serial (console enabled in USB Port, at 115200 bps).</p><h3 id="waveshare-lcd-1-14" tabindex="-1">waveshare-lcd-1.14 <a class="header-anchor" href="#waveshare-lcd-1-14" aria-label="Permalink to &quot;waveshare-lcd-1.14&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for st7789.</p><h3 id="waveshare-lcd-1-3" tabindex="-1">waveshare-lcd-1.3 <a class="header-anchor" href="#waveshare-lcd-1-3" aria-label="Permalink to &quot;waveshare-lcd-1.3&quot;">​</a></h3><p>NuttShell configuration (console enabled in UART0, at 115200 bps) with support for usbmsc.</p><h2 id="license-exceptions" tabindex="-1">License exceptions <a class="header-anchor" href="#license-exceptions" aria-label="Permalink to &quot;License exceptions&quot;">​</a></h2><p>The following files are originated from the files in Pico SDK. So, the files are licensed under 3-Clause BSD same as Pico SDK.</p><ul><li>arch/arm/src/rp2040/rp2040_clock.c</li><li>arch/arm/src/rp2040/rp2040_pll.c</li><li>arch/arm/src/rp2040/rp2040_xosc.c <ul><li>These are created by referring the Pico SDK clock initialization.</li></ul></li><li>arch/arm/src/rp2040/rp2040_pio.c</li><li>arch/arm/src/rp2040/rp2040_pio.h</li><li>arch/arm/src/rp2040/rp2040_pio_instructions.h <ul><li>These provide the similar APIs to Pico SDK&#39;s hardware_pio APIs.</li></ul></li><li>arch/arm/src/rp2040/hardware/*.h <ul><li>These are generated from rp2040.svd originally provided in Pico SDK.</li></ul></li></ul>`,108)]))}const P=a(s,[["render",r]]);export{b as __pageData,P as default};
