import{_ as t,c as a,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Espressif ESP32-S2","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/xtensa/esp32s2/index.md","filePath":"en/platforms/xtensa/esp32s2/index.md"}'),s={name:"en/platforms/xtensa/esp32s2/index.md"};function i(r,e,c,d,l,p){return n(),a("div",null,e[0]||(e[0]=[o(`<h1 id="espressif-esp32-s2" tabindex="-1">Espressif ESP32-S2 <a class="header-anchor" href="#espressif-esp32-s2" aria-label="Permalink to &quot;Espressif ESP32-S2&quot;">​</a></h1><p>The ESP32-S2 is a series of single-core SoCs from Espressif based on Harvard architecture Xtensa LX7 CPU and with on-chip support for Wi-Fi.</p><p>All embedded memory, external memory and peripherals are located on the data bus and/or the instruction bus of the CPU. Multiple peripherals in the system can access embedded memory via DMA.</p><h2 id="esp32-s2-toolchain" tabindex="-1">ESP32-S2 Toolchain <a class="header-anchor" href="#esp32-s2-toolchain" aria-label="Permalink to &quot;ESP32-S2 Toolchain&quot;">​</a></h2><p>The toolchain used to build ESP32-S2 firmware can be either downloaded or built from the sources. It is <strong>highly</strong> recommended to use (download or build) the same toolchain version that is being used by the NuttX CI.</p><p>Please refer to the Docker <a href="https://github.com/apache/nuttx/tree/master/tools/ci/docker/linux/Dockerfile" target="_blank" rel="noreferrer">container</a> and check for the current compiler version being used. For instance:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>###############################################################################</span></span>
<span class="line"><span># Build image for tool required by ESP32 builds</span></span>
<span class="line"><span>###############################################################################</span></span>
<span class="line"><span>FROM nuttx-toolchain-base AS nuttx-toolchain-esp32</span></span>
<span class="line"><span># Download the latest ESP32 GCC toolchain prebuilt by Espressif</span></span>
<span class="line"><span>RUN mkdir -p xtensa-esp32-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>  curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>  | tar -C xtensa-esp32-elf-gcc --strip-components 1 -xJ</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN mkdir -p xtensa-esp32s2-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>  curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32s2-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>  | tar -C xtensa-esp32s2-elf-gcc --strip-components 1 -xJ</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN mkdir -p xtensa-esp32s3-elf-gcc &amp;&amp; \\</span></span>
<span class="line"><span>  curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32s3-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>  | tar -C xtensa-esp32s3-elf-gcc --strip-components 1 -xJ</span></span></code></pre></div><p>For ESP32-S2, the toolchain version is based on GGC 12.2.0 (<code>xtensa-esp32s2-elf-12.2.0_20230208</code>)</p><h3 id="the-prebuilt-toolchain-recommended" tabindex="-1">The prebuilt Toolchain (Recommended) <a class="header-anchor" href="#the-prebuilt-toolchain-recommended" aria-label="Permalink to &quot;The prebuilt Toolchain (Recommended)&quot;">​</a></h3><p>First, create a directory to hold the toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> mkdir -p /path/to/your/toolchain/xtensa-esp32s2-elf-gcc</span></span></code></pre></div><p>Download and extract toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> curl -s -L &quot;https://github.com/espressif/crosstool-NG/releases/download/esp-12.2.0_20230208/xtensa-esp32s2-elf-12.2.0_20230208-x86_64-linux-gnu.tar.xz&quot; \\</span></span>
<span class="line"><span>| tar -C xtensa-esp32s2-elf-gcc --strip-components 1 -xJ</span></span></code></pre></div><p>Add the toolchain to your \`PATH\`:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> echo &quot;export PATH=/path/to/your/toolchain/xtensa-esp32s2-elf-gcc/bin:PATH&quot; &gt;&gt; ~/.bashrc</span></span></code></pre></div><p>You can edit your shell&#39;s rc files if you don&#39;t use bash.</p><h3 id="building-from-source" tabindex="-1">Building from source <a class="header-anchor" href="#building-from-source" aria-label="Permalink to &quot;Building from source&quot;">​</a></h3><p>You can also build the toolchain yourself. The steps to build the toolchain with crosstool-NG on Linux are as follows</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/espressif/crosstool-NG.git</span></span>
<span class="line"><span> cd crosstool-NG</span></span>
<span class="line"><span> git submodule update --init</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ./bootstrap &amp;&amp; ./configure --enable-local &amp;&amp; make</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ./ct-ng xtensa-esp32s2-elf</span></span>
<span class="line"><span> ./ct-ng build</span></span>
<span class="line"><span></span></span>
<span class="line"><span> chmod -R u+w builds/xtensa-esp32s2-elf</span></span>
<span class="line"><span></span></span>
<span class="line"><span> export PATH=&quot;crosstool-NG/builds/xtensa-esp32-elf/bin:PATH&quot;</span></span></code></pre></div><p>These steps are given in the setup guide in <a href="https://docs.espressif.com/projects/esp-idf/en/latest/get-started/linux-setup-scratch.html" target="_blank" rel="noreferrer">ESP-IDF documentation</a>.</p><h2 id="building-and-flashing-nuttx" tabindex="-1">Building and flashing NuttX <a class="header-anchor" href="#building-and-flashing-nuttx" aria-label="Permalink to &quot;Building and flashing NuttX&quot;">​</a></h2><h3 id="installing-esptool" tabindex="-1">Installing esptool <a class="header-anchor" href="#installing-esptool" aria-label="Permalink to &quot;Installing esptool&quot;">​</a></h3><p>First, make sure that <code>esptool.py</code> is installed and up-to-date. This tool is used to convert the ELF to a compatible ESP32-S2 image and to flash the image into the board.</p><p>It can be installed with: <code>pip install esptool&gt;=4.8.1</code>.</p><p>Warning</p><p>Installing <code>esptool.py</code> may required a Python virtual environment on newer systems. This will be the case if the <code>pip install</code> command throws an error such as: <code>error: externally-managed-environment</code>.</p><p>If you are not familiar with virtual environments, refer to <a href="./.html">Managing esptool on virtual environment</a> for instructions on how to install <code>esptool.py</code>.</p><h3 id="bootloader-and-partitions" tabindex="-1">Bootloader and partitions <a class="header-anchor" href="#bootloader-and-partitions" aria-label="Permalink to &quot;Bootloader and partitions&quot;">​</a></h3><p>NuttX can boot the ESP32-S2 directly using the so-called &quot;Simple Boot&quot;. An externally-built 2nd stage bootloader is not required in this case as all functions required to boot the device are built within NuttX. Simple boot does not require any specific configuration (it is selectable by default if no other 2nd stage bootloader is used).</p><p>If other features are required, an externally-built 2nd stage bootloader is needed. The bootloader is built using the <code>make bootloader</code> command. This command generates the firmware in the <code>nuttx</code> folder. The <code>ESPTOOL_BINDIR</code> is used in the <code>make flash</code> command to specify the path to the bootloader. For compatibility among other SoCs and future options of 2nd stage bootloaders, the commands <code>make bootloader</code> and the <code>ESPTOOL_BINDIR</code> option (for the <code>make flash</code>) can be used even if no externally-built 2nd stage bootloader is being built (they will be ignored if Simple Boot is used, for instance):</p><pre><code> make bootloader
</code></pre><p>Note</p><p>It is recommended that if this is the first time you are using the board with NuttX to perform a complete SPI FLASH erase.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> esptool.py erase_flash</span></span></code></pre></div><h3 id="building-and-flashing" tabindex="-1">Building and Flashing <a class="header-anchor" href="#building-and-flashing" aria-label="Permalink to &quot;Building and Flashing&quot;">​</a></h3><p>This is a two-step process where the first step converts the ELF file into an ESP32-S2 compatible binary and the second step flashes it to the board. These steps are included in the build system and it is possible to build and flash the NuttX firmware simply by running:</p><pre><code> make flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=./
</code></pre><p>where:</p><ul><li><code>ESPTOOL_PORT</code> is typically <code>/dev/ttyUSB0</code> or similar.</li><li><code>ESPTOOL_BINDIR=./</code> is the path of the externally-built 2nd stage bootloader and the partition table (if applicable): when built using the <code>make bootloader</code>, these files are placed into <code>nuttx</code> folder.</li><li><code>ESPTOOL_BAUD</code> is able to change the flash baud rate if desired.</li></ul><h3 id="flashing-nsh-example" tabindex="-1">Flashing NSH Example <a class="header-anchor" href="#flashing-nsh-example" aria-label="Permalink to &quot;Flashing NSH Example&quot;">​</a></h3><p>This example shows how to build and flash the <code>nsh</code> defconfig for the ESP32-S2-Saola-1 board:</p><pre><code> cd nuttx
 make distclean
 ./tools/configure.sh esp32s2-saola-1:nsh
 make -j(nproc)
</code></pre><p>When the build is complete, the firmware can be flashed to the board using the command:</p><pre><code> make -j(nproc) flash ESPTOOL_PORT=&lt;port&gt; ESPTOOL_BINDIR=./
</code></pre><p>where <code>&lt;port&gt;</code> is the serial port where the board is connected:</p><pre><code> make flash ESPTOOL_PORT=/dev/ttyUSB0 ESPTOOL_BINDIR=./
CP: nuttx.hex
MKIMAGE: ESP32-S2 binary
esptool.py -c esp32s2 elf2image --ram-only-header -fs 4MB -fm dio -ff 40m -o nuttx.bin nuttx
esptool.py v4.8.1
Creating esp32s2 image...
Image has only RAM segments visible. ROM segments are hidden and SHA256 digest is not appended.
Merged 1 ELF section
Successfully created esp32s2 image.
Generated: nuttx.bin
esptool.py -c esp32s2 -p /dev/ttyUSB0 -b 921600   write_flash -fs detect -fm dio -ff 40m 0x1000 nuttx.bin
esptool.py v4.8.1
Serial port /dev/ttyUSB0
Connecting....
Chip is ESP32-S2 (revision v0.0)
[...]
Flash will be erased from 0x00001000 to 0x00032fff...
Compressed 202280 bytes to 71796...
Wrote 202280 bytes (71796 compressed) at 0x00001000 in 2.3 seconds (effective 698.5 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
</code></pre><p>Now opening the serial port with a terminal emulator should show the NuttX console:</p><pre><code> picocom -b 115200 /dev/ttyUSB0
NuttShell (NSH) NuttX-12.8.0
nsh&gt; uname -a
NuttX 12.8.0 759d37b97c-dirty Mar  5 2025 20:26:00 xtensa esp32s2-saola-1
</code></pre><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><p>This section describes debugging techniques for the ESP32-S2.</p><h3 id="debugging-with-openocd-and-gdb" tabindex="-1">Debugging with <code>openocd</code> and <code>gdb</code> <a class="header-anchor" href="#debugging-with-openocd-and-gdb" aria-label="Permalink to &quot;Debugging with \`openocd\` and \`gdb\`&quot;">​</a></h3><p>Espressif uses a specific version of OpenOCD to support ESP32-S2: <a href="https://github.com/espressif/" target="_blank" rel="noreferrer">openocd-esp32</a>.</p><p>Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32s2/api-guides/jtag-debugging/index.html#jtag-debugging-building-openocd" target="_blank" rel="noreferrer">Building OpenOCD from Sources</a> for more information on how to build OpenOCD for ESP32-S2.</p><p>ESP32-S2 has dedicated pins for JTAG debugging. The following pins are used for JTAG debugging:</p><p>ESP32-S2 Pin JTAG Signal</p><hr><p>MTDO / GPIO40 TDO MTDI / GPIO41 TDI MTCK / GPIO39 TCK MTMS / GPIO42 TMS</p><p>Some boards, like <code>ESP32-S2-Kaluga-1 Kit v1.3 &lt;platforms/xtensa/esp32s2/boards/esp32s2-kaluga-1/index:ESP32-S2-Kaluga-1 Kit v1.3&gt;</code>{.interpreted-text role=&quot;ref&quot;} have a built-in JTAG debugger.</p><p>Other boards that don&#39;t have any built-in JTAG debugger can be debugged using an external JTAG debugger being connected directly to the ESP32-S2 JTAG pins.</p><p>Note</p><p>One must configure the USB drivers to enable JTAG communication. Please check <a href="https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32s2/api-guides/jtag-debugging/configure-ft2232h-jtag.html?highlight=udev#configure-usb-drivers" target="_blank" rel="noreferrer">Configure USB Drivers</a> for configuring the JTAG adapter of the <code>ESP32-S2-Kaluga-1 &lt;platforms/xtensa/esp32s2/boards/esp32s2-kaluga-1/index:ESP32-S2-Kaluga-1 Kit v1.3&gt;</code>{.interpreted-text role=&quot;ref&quot;} board and other FT2232-based JTAG adapters.</p><p>OpenOCD can then be used:</p><pre><code>openocd -s &lt;tcl_scripts_path&gt; -c &#39;set ESP_RTOS hwthread&#39; -f board/esp32s2-kaluga-1.cfg -c &#39;init; reset halt; esp appimage_offset 0x1000&#39;
</code></pre><p>Note</p><p>- <code>appimage_offset</code> should be set to <code>0x1000</code> when <code>Simple Boot</code> is used. For MCUboot, this value should be set to <code>CONFIG_ESPRESSIF_OTA_PRIMARY_SLOT_OFFSET</code> value (<code>0x10000</code> by default).</p><ul><li><code>-s &lt;tcl_scripts_path&gt;</code> defines the path to the OpenOCD scripts. Usually set to [tcl]{.title-ref} if running openocd from its source directory. It can be omitted if [openocd-esp32]{.title-ref} were installed in the system with [sudo make install]{.title-ref}.</li></ul><p>Once OpenOCD is running, you can use GDB to connect to it and debug your application:</p><pre><code>xtensa-esp32s2-elf-gdb -x gdbinit nuttx
</code></pre><p>whereas the content of the <code>gdbinit</code> file is:</p><pre><code>target remote :3333
set remote hardware-watchpoint-limit 2
mon reset halt
flushregs
monitor reset halt
thb nsh_main
c
</code></pre><p>Note</p><p><code>nuttx</code> is the ELF file generated by the build process. Please note that <code>CONFIG_DEBUG_SYMBOLS</code> must be enabled in the <code>menuconfig</code>.</p><p>Please refer to [[/quick](]{.title-ref}/quick.md)start/debugging\` for more information about debugging techniques.</p><h3 id="stack-dump-and-backtrace-dump" tabindex="-1">Stack Dump and Backtrace Dump <a class="header-anchor" href="#stack-dump-and-backtrace-dump" aria-label="Permalink to &quot;Stack Dump and Backtrace Dump&quot;">​</a></h3><p>NuttX has a feature to dump the stack of a task and to dump the backtrace of it (and of all the other tasks). This feature is useful to debug the system when it is not behaving as expected, especially when it is crashing.</p><p>In order to enable this feature, the following options must be enabled in the NuttX configuration: <code>CONFIG_SCHED_BACKTRACE</code>, <code>CONFIG_DEBUG_SYMBOLS</code> and, optionally, <code>CONFIG_ALLSYMS</code>.</p><p>Note</p><p>The first two options enable the backtrace dump. The third option enables the backtrace dump with the associated symbols, but increases the size of the generated NuttX binary.</p><p>Espressif also provides a tool to translate the backtrace dump into a human-readable format. This tool is called <code>btdecode.sh</code> and is available at <code>tools/espressif/btdecode.sh</code> of NuttX repository.</p><p>Note</p><p>This tool is not necessary if <code>CONFIG_ALLSYMS</code> is enabled. In this case, the backtrace dump contains the function names.</p><h4 id="example-crash-dump" tabindex="-1">Example - Crash Dump <a class="header-anchor" href="#example-crash-dump" aria-label="Permalink to &quot;Example - Crash Dump&quot;">​</a></h4><p>A typical crash dump, caused by an illegal load with <code>CONFIG_SCHED_BACKTRACE</code> and <code>CONFIG_DEBUG_SYMBOLS</code> enabled, is shown below:</p><pre><code>xtensa_user_panic: User Exception: EXCCAUSE=001d task: backtrace
_assert: Current Version: NuttX  10.4.0 2ae3246e40-dirty Sep 19 2024 14:15:50 xtensa
_assert: Assertion failed user panic: at file: :0 task: backtrace process: backtrace 0x400a0aa8
up_dump_register:    PC: 400a0ad8    PS: 00060730
up_dump_register:    A0: 8009312c    A1: 3ffbaf90    A2: 00000000    A3: 3ffba008
up_dump_register:    A4: 3ffba01e    A5: 3ffb95c0    A6: 00000000    A7: 00000000
up_dump_register:    A8: 800a0ad5    A9: 3ffbaf60   A10: 0000005a   A11: 3ffb9dc0
up_dump_register:   A12: 00000059   A13: 3ffb9710   A14: 00000002   A15: 3ffb9bb4
up_dump_register:   SAR: 00000018 CAUSE: 0000001d VADDR: 00000000
dump_stack: User Stack:
dump_stack:   base: 0x3ffba028
dump_stack:   size: 00004040
dump_stack:     sp: 0x3ffbaf90
stack_dump: 0x3ffbaf70: 00000059 3ffb9710 00000002 3ffb9bb4 80091fbc 3ffbafb0 400a0aa8 00000002
stack_dump: 0x3ffbaf90: 3ffba01e 3ffb95c0 00000000 00000000 00000000 3ffbafd0 00000000 400a0aa8
stack_dump: 0x3ffbafb0: 3ffba008 3ffb9bf8 00000000 3ffb637c 00000000 3ffbaff0 00000000 00000000
stack_dump: 0x3ffbafd0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
stack_dump: 0x3ffbaff0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
sched_dumpstack: backtrace| 2: 0x4009f930 0x4009d94a 0x40094f7d 0x400945cd 0x400228e1 0x400a0ad8 0x4009312c 0x40091fbc
sched_dumpstack: backtrace| 2: 0x40000000 0x4009312c 0x40091fbc 0x40000000
dump_tasks:    PID GROUP PRI POLICY   TYPE    NPX STATE   EVENT      SIGMASK          STACKBASE  STACKSIZE   COMMAND
dump_task:       0     0   0 FIFO     Kthread - Ready              0000000000000000 0x3ffb7720      3056   Idle_Task
dump_task:       1     1 100 RR       Task    - Waiting Semaphore  0000000000000000 0x3ffb8d20      3024   nsh_main
dump_task:       2     2 255 RR       Task    - Running            0000000000000000 0x3ffba028      4040   backtrace task
sched_dumpstack: backtrace| 0: 0x40091327
sched_dumpstack: backtrace| 1: 0x4009dde1 0x4009dce3 0x4009dd1c 0x400969fa 0x40096200 0x400964d8 0x400955f4 0x4009547c
sched_dumpstack: backtrace| 1: 0x4009544d 0x4009312c 0x40091fbc 0x40000000
sched_dumpstack: backtrace| 2: 0x4009f930 0x4009d6cc 0x4009db72 0x4009d97c 0x40094f7d 0x400945cd 0x400228e1 0x400a0ad8
sched_dumpstack: backtrace| 2: 0x4009312c 0x40091fbc 0x40000000 0x4009312c 0x40091fbc 0x40000000
</code></pre><p>The lines starting with <code>sched_dumpstack</code> show the backtrace of the tasks. By checking it, it is possible to track the root cause of the crash. Saving this output to a file and using the <code>btdecode.sh</code>:</p><pre><code>./tools/btdecode.sh esp32s2 /tmp/backtrace.txt
Backtrace for task 2:
0x4009f930: sched_dumpstack at sched_dumpstack.c:69
0x4009d94a: _assert at assert.c:691
0x40094f7d: xtensa_user_panic at xtensa_assert.c:188 (discriminator 1)
0x400945cd: xtensa_user at ??:?
0x400228e1: _xtensa_user_handler at xtensa_user_handler.S:194
0x400a0ad8: assert_on_task at backtrace_main.c:158
 (inlined by) backtrace_main at backtrace_main.c:194
0x4009312c: nxtask_startup at task_startup.c:70
0x40091fbc: nxtask_start at task_start.c:75
0x40000000: ?? ??:0
0x4009312c: nxtask_startup at task_startup.c:70
0x40091fbc: nxtask_start at task_start.c:75
0x40000000: ?? ??:0

Backtrace dump for all tasks:

Backtrace for task 2:
0x4009f930: sched_dumpstack at sched_dumpstack.c:69
0x4009d6cc: dump_backtrace at assert.c:418
0x4009db72: nxsched_foreach at sched_foreach.c:69 (discriminator 2)
0x4009d97c: _assert at assert.c:726
0x40094f7d: xtensa_user_panic at xtensa_assert.c:188 (discriminator 1)
0x400945cd: xtensa_user at ??:?
0x400228e1: _xtensa_user_handler at xtensa_user_handler.S:194
0x400a0ad8: assert_on_task at backtrace_main.c:158
 (inlined by) backtrace_main at backtrace_main.c:194
0x4009312c: nxtask_startup at task_startup.c:70
0x40091fbc: nxtask_start at task_start.c:75
0x40000000: ?? ??:0
0x4009312c: nxtask_startup at task_startup.c:70
0x40091fbc: nxtask_start at task_start.c:75
0x40000000: ?? ??:0

Backtrace for task 1:
0x4009dde1: nxsem_wait at sem_wait.c:217
0x4009dce3: nxsched_waitpid at sched_waitpid.c:165
0x4009dd1c: waitpid at sched_waitpid.c:618
0x400969fa: nsh_builtin at nsh_builtin.c:163
0x40096200: nsh_execute at nsh_parse.c:652
 (inlined by) nsh_parse_command at nsh_parse.c:2840
0x400964d8: nsh_parse at nsh_parse.c:2930
0x400955f4: nsh_session at nsh_session.c:246
0x4009547c: nsh_consolemain at nsh_consolemain.c:79
0x4009544d: nsh_main at nsh_main.c:80
0x4009312c: nxtask_startup at task_startup.c:70
0x40091fbc: nxtask_start at task_start.c:75
0x40000000: ?? ??:0

Backtrace for task 0:
0x40091327: nx_start at nx_start.c:772 (discriminator 1)
</code></pre><p>The above output shows the backtrace of the tasks. By checking it, it is possible to track the functions that were being executed when the crash occurred.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates the state of peripherals&#39; support in NuttX:</p><p>+----------------------+----------------------+----------------------+ | Peripheral | Support | NOTES | +======================+======================+======================+ | ADC AES CAN/TWAI DAC | &gt; Yes No Yes No Yes | Oneshot | | DMA eFuse GPIO | &gt; Yes Yes | | +----------------------+----------------------+----------------------+ | I2C I2S LED/PWM | &gt; Yes Yes Yes Yes | &gt; Master and Slave | | Pulse_CNT RMT RNG | &gt; Yes Yes No Yes No | &gt; mode supported | | RSA RTC SHA SPI | &gt; Yes Yes Yes Yes | | | SPIFLASH SPIRAM | &gt; Yes Yes No Yes Yes | | | Timers Touch UART | | | | USB OTG Watchdog | | | | Wi-Fi | | | +----------------------+----------------------+----------------------+</p><h2 id="memory-map" tabindex="-1">Memory Map <a class="header-anchor" href="#memory-map" aria-label="Permalink to &quot;Memory Map&quot;">​</a></h2><h3 id="address-mapping" tabindex="-1">Address Mapping <a class="header-anchor" href="#address-mapping" aria-label="Permalink to &quot;Address Mapping&quot;">​</a></h3><p>+-------------+-------------+-------------+-------------+----------+ | BUS TYPE | START | LAST | DESCRIPTION | NOTES | +=============+=============+=============+=============+==========+ | . Data Data | 0x00000000 | 0x3EFFFFFF | External | Reserved | | Data . Data | 0x3F000000 | 0x3F3FFFFF | Memory | | | Instruction | 0x3F400000 | 0x3F4FFFFF | Peripheral | Reserved | | . | 0x3F500000 | 0x3FF7FFFF | External | | | Instruction | 0x3FF80000 | 0x3FF9DFFF | Memory | Reserved | | . Data / | 0x3FF9E000 | 0x3FFFFFFF | | | | Instruction | 0x40000000 | 0x40071FFF | Embedded | Reserved | | . Data / | 0x40072000 | 0x4007FFFF | Memory | | | Instruction | 0x40080000 | 0x407FFFFF | Embedded | Reserved | | . Data / | 0x40800000 | 0x4FFFFFFF | Memory | | | Instruction | 0x50000000 | 0x50001FFF | | Reserved | | . | 0x50002000 | 0x5FFFFFFF | External | | | | 0x60000000 | 0x600BFFFF | Memory | Reserved | | | 0x600C0000 | 0x617FFFFF | | | | | 0x61800000 | 0x61803FFF | Embedded | | | | 0x61804000 | 0xFFFFFFFF | Memory | | | | | | | | | | | | Peripheral | | | | | | | | | | | | Peripheral | | +-------------+-------------+-------------+-------------+----------+</p><h3 id="embedded-memory" tabindex="-1">Embedded Memory <a class="header-anchor" href="#embedded-memory" aria-label="Permalink to &quot;Embedded Memory&quot;">​</a></h3><p>BUS TYPE START LAST DESCRIPTION PERMISSION CONTROL NOTES</p><hr><p>Data Data 0x3FF9E000 0x3FFA0000 0x3FF9FFFF 0x3FFAFFFF RTC FAST Memory Internal ROM 1 YES NO<br> Data 0x3FFB0000 0x3FFB7FFF Internal SRAM 0 YES DMA Data 0x3FFB8000 0x3FFFFFFF Internal SRAM 1 YES DMA</p><h3 id="boundary-address-embedded" tabindex="-1">Boundary Address (Embedded) <a class="header-anchor" href="#boundary-address-embedded" aria-label="Permalink to &quot;Boundary Address (Embedded)&quot;">​</a></h3><p>BUS TYPE START LAST DESCRIPTION PERMISSION CONTROL NOTES</p><hr><p>Instruction Instruction Instruction Instruction Instruction Data / Instruction 0x40000000 0x40010000 0x40020000 0x40028000 0x40070000 0x50000000 0x4000FFFF 0x4001FFFF 0x40027FFF 0x4006FFFF 0x40071FFF 0x50001FFF Internal ROM 0 Internal ROM 1 Internal SRAM 0 Internal SRAM 1 RTC FAST Memory RTC SLOW Memory NO NO YES YES YES YES</p><h3 id="external-memory" tabindex="-1">External Memory <a class="header-anchor" href="#external-memory" aria-label="Permalink to &quot;External Memory&quot;">​</a></h3><p>BUS TYPE START LAST DESCRIPTION PERMISSION CONTROL NOTES</p><hr><p>Data 0x3F000000 0x3F3FFFFF ICache YES Read Data 0x3F500000 0x3FF7FFFF DCache YES Read and Write</p><h3 id="boundary-address-external" tabindex="-1">Boundary Address (External) <a class="header-anchor" href="#boundary-address-external" aria-label="Permalink to &quot;Boundary Address (External)&quot;">​</a></h3><p>BUS TYPE START LAST DESCRIPTION PERMISSION CONTROL NOTES</p><hr><p>Instruction 0x40080000 0x407FFFFF ICache YES Read</p><h3 id="linker-segments" tabindex="-1">Linker Segments <a class="header-anchor" href="#linker-segments" aria-label="Permalink to &quot;Linker Segments&quot;">​</a></h3><p>+----------------+---------+--------------+----+-----------------------+ | DESCRIPTION | START | END | AT | LINKER SEGMENT NAME | | | | | TR | | +================+=========+==============+====+=======================+ | FLAS | 0X3 | 0X3F000020 + | R | drom0_0_seg (NOTE | | H mapped data: | F000020 | FLASH_SIZE | | 1) | | | | - 0x20 | | | | : | | | | | | - .rodata | | | | | | - | | | | | | Constructors | | | | | | | | | | | | /destructors | | | | | +----------------+---------+--------------+----+-----------------------+ | CO | 0X3 | 0x3FFDE000 | RW | dram0_0_seg (NOTE | | MMON data RAM: | FFB0000 | | | 2) | | | | | | | | : | | | | | | - .bss/.data | | | | | +----------------+---------+--------------+----+-----------------------+ | IRA | 0x4 | 0x40050000 | RX | iram0_0_seg | | M for PRO cpu: | 0022000 | | | | | | | | | | | : | | | | | | - Interrupt | | | | | | | | | | | | Vectors | | | | | | - Low | | | | | | level | | | | | | | | | | | | handlers | | | | | | - Xt | | | | | | ensa/Espressif | | | | | | | | | | | | libraries | | | | | +----------------+---------+--------------+----+-----------------------+ | RT | 0x4 | 0x40072000 | R | rtc_iram_seg | | C fast memory: | 0070000 | | WX | | | | | | | | | : | | | | | | - .rtc.text | | | | | | | | | | | | (unused?) | | | | | +----------------+---------+--------------+----+-----------------------+ | FLASH: | 0x4 | 0x40080020 + | RX | irom0_0_seg | | | 0080020 | FLASH_SIZE | | (actually FLASH) | | : - .text | | (NOTE 3) | | | +----------------+---------+--------------+----+-----------------------+ | RT | 0x5 | 0x50002000 | RW | rtc_slow_seg (NOTE | | C slow memory: | 0000000 | | | 4) | | | | | | | | : - .r | | | | | | tc.data/rodata | | | | | | | | | | | | (unused?) | | | | | +----------------+---------+--------------+----+-----------------------+</p><p>Note</p><p>(1) The linker script will reserve space at the beginning of the segment for MCUboot header if ESP32S2_APP_FORMAT_MCUBOOT flag is active. (2) Heap starts at the end of dram_0_seg. (3) Subtract 0x20 if ESP32S2_APP_FORMAT_MCUBOOT is not active. (4) Linker script will reserve space at the beginning and at the end of the segment for ULP coprocessor reserve memory.</p><h2 id="_64-bit-timers" tabindex="-1">64-bit Timers <a class="header-anchor" href="#_64-bit-timers" aria-label="Permalink to &quot;64-bit Timers&quot;">​</a></h2><p>ESP32-S2 has 4 generic timers of 64 bits (2 from Group 0 and 2 from Group 1). They&#39;re accessible as character drivers, the configuration along with a guidance on how to run the example and the description of the application level interface can be found in the [[timer documentation &lt;/component](\`timer documentation &lt;/component.md)s/drivers/character/timers/timer&gt;]{.title-ref}.</p><h2 id="watchdog-timers" tabindex="-1">Watchdog Timers <a class="header-anchor" href="#watchdog-timers" aria-label="Permalink to &quot;Watchdog Timers&quot;">​</a></h2><p>ESP32-S2 has 3 WDTs. 2 MWDTs from the Timers Module and 1 RWDT from the RTC Module (Currently not supported yet). They&#39;re accessible as character drivers, The configuration along with a guidance on how to run the example and the description of the application level interface can be found in the [[watchdog documentation &lt;/component](\`watchdog documentation &lt;/component.md)s/drivers/character/timers/watchdog&gt;]{.title-ref}.</p><h2 id="i2s" tabindex="-1">I2S <a class="header-anchor" href="#i2s" aria-label="Permalink to &quot;I2S&quot;">​</a></h2><p>The I2S peripheral is accessible using either the generic I2S audio driver or a specific audio codec driver. Also, it&#39;s possible to use the I2S character driver to bypass the audio subsystem and develop specific usages of the I2S peripheral.</p><p>Note</p><p>Note that the bit-width and sample rate can be modified &quot;on-the-go&quot; when using audio-related drivers. That is not the case for the I2S character device driver and such parameters are set on compile time through [make menuconfig]{.title-ref}.</p><p>Please check for usage examples using the [[ESP32-S2-Saola-1 &lt;/platform](\`ESP32-S2-Saola-1 &lt;/platform.md)s/xtensa/esp32s2/boards/esp32s2-saola-1/index&gt;]{.title-ref}.</p><h2 id="analog-to-digital-converter-adc" tabindex="-1">Analog-to-digital converter (ADC) <a class="header-anchor" href="#analog-to-digital-converter-adc" aria-label="Permalink to &quot;Analog-to-digital converter (ADC)&quot;">​</a></h2><p>Two ADC units are available for the ESP32-S2, each with 10 channels.</p><p>Those units are independent and can be used simultaneously. During bringup, GPIOs for selected channels are configured automatically to be used as ADC inputs. If available, ADC calibration is automatically applied (see <a href="https://docs.espressif.com/projects/esp-idf/en/v5.1/esp32s2/api-reference/peripherals/adc_calibration.html" target="_blank" rel="noreferrer">this page</a> for more details). Otherwise, a simple conversion is applied based on the attenuation and resolution.</p><p>Each ADC unit is accessible using the ADC character driver, which returns data for the enabled channels.</p><p>The ADC unit can be enabled in the menu <code>System Type --&gt; ESP32-S2 Peripheral Selection --&gt; Analog-to-digital converter (ADC)</code>{.interpreted-text role=&quot;menuselection&quot;}.</p><p>Then, it can be customized in the menu <code>System Type --&gt; ADC Configuration</code>{.interpreted-text role=&quot;menuselection&quot;}, which includes operating mode, gain and channels.</p><p>+---------+-----------+-----------+ | Channel | ADC1 GPIO | ADC2 GPIO | +=========+===========+===========+ | 0 | &gt; 1 | &gt; 11 | +---------+-----------+-----------+ | 1 | &gt; 2 | &gt; 12 | +---------+-----------+-----------+ | 2 | &gt; 3 | &gt; 13 | +---------+-----------+-----------+ | 3 | &gt; 4 | &gt; 14 | +---------+-----------+-----------+ | 4 | &gt; 5 | &gt; 15 | +---------+-----------+-----------+ | 5 | &gt; 6 | &gt; 16 | +---------+-----------+-----------+ | 6 | &gt; 7 | &gt; 17 | +---------+-----------+-----------+ | 7 | &gt; 8 | &gt; 18 | +---------+-----------+-----------+ | 8 | &gt; 9 | &gt; 19 | +---------+-----------+-----------+ | 9 | &gt; 10 | &gt; 20 | +---------+-----------+-----------+</p><p>Warning</p><p>Minimum and maximum measurable voltages may saturate around 100 mV and 3000 mV, respectively.</p><h2 id="wi-fi" tabindex="-1">Wi-Fi <a class="header-anchor" href="#wi-fi" aria-label="Permalink to &quot;Wi-Fi&quot;">​</a></h2><p>Tip</p><p>Boards usually expose a <code>wifi</code> defconfig which enables Wi-Fi.</p><p>A standard network interface will be configured and can be initialized such as:</p><pre><code>nsh&gt; ifup wlan0
nsh&gt; wapi psk wlan0 mypasswd 3
nsh&gt; wapi essid wlan0 myssid 1
nsh&gt; renew wlan0
</code></pre><p>In this case a connection to AP with SSID <code>myssid</code> is done, using <code>mypasswd</code> as password. IP address is obtained via DHCP using <code>renew</code> command. You can check the result by running <code>ifconfig</code> afterwards.</p><p>Tip</p><p>Please refer to <code>ESP32 Wi-Fi Station Mode &lt;esp32_wi-fi_sta&gt;</code>{.interpreted-text role=&quot;ref&quot;} for more information.</p><h2 id="wi-fi-softap" tabindex="-1">Wi-Fi SoftAP <a class="header-anchor" href="#wi-fi-softap" aria-label="Permalink to &quot;Wi-Fi SoftAP&quot;">​</a></h2><p>It is possible to use ESP32-S2 as an Access Point (SoftAP).</p><p>Tip</p><p>Boards usually expose a <code>sta_softap</code> defconfig which enables Wi-Fi (STA</p><ul><li>SoftAP).</li></ul><p>If you are using this board config profile you can run these commands to be able to connect your smartphone or laptop to your board:</p><pre><code>nsh&gt; ifup wlan1
nsh&gt; dhcpd_start wlan1
nsh&gt; wapi psk wlan1 mypasswd 3
nsh&gt; wapi essid wlan1 nuttxap 1
</code></pre><p>In this case, you are creating the access point <code>nuttxapp</code> in your board and to connect to it on your smartphone you will be required to type the password <code>mypasswd</code> using WPA2.</p><p>Tip</p><p>Please refer to <code>ESP32 Wi-Fi SoftAP Mode &lt;esp32_wi-fi_softap&gt;</code>{.interpreted-text role=&quot;ref&quot;} for more information.</p><p>The <code>dhcpd_start</code> is necessary to let your board to associate an IP to your smartphone.</p><h2 id="secure-boot-and-flash-encryption" tabindex="-1">Secure Boot and Flash Encryption <a class="header-anchor" href="#secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Secure Boot and Flash Encryption&quot;">​</a></h2><h3 id="secure-boot" tabindex="-1">Secure Boot <a class="header-anchor" href="#secure-boot" aria-label="Permalink to &quot;Secure Boot&quot;">​</a></h3><p>Secure Boot protects a device from running any unauthorized (i.e., unsigned) code by checking that each piece of software that is being booted is signed. On an ESP32-S2, these pieces of software include the second stage bootloader and each application binary. Note that the first stage bootloader does not require signing as it is ROM code thus cannot be changed. This is achieved using specific hardware in conjunction with MCUboot (read more about MCUboot <a href="https://docs.mcuboot.com/" target="_blank" rel="noreferrer">here</a>).</p><p>The Secure Boot process on the ESP32-S2 involves the following steps performed:</p><ol><li>The first stage bootloader verifies the second stage bootloader&#39;s RSA-PSS signature. If the verification is successful, the first stage bootloader loads and executes the second stage bootloader.</li><li>When the second stage bootloader loads a particular application image, the application&#39;s signature (RSA, ECDSA or ED25519) is verified by MCUboot. If the verification is successful, the application image is executed.</li></ol><p>Warning</p><p>Once enabled, Secure Boot will not boot a modified bootloader. The bootloader will only boot an application firmware image if it has a verified digital signature. There are implications for reflashing updated images once Secure Boot is enabled. You can find more information about the ESP32-S2&#39;s Secure boot <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/security/secure-boot-v2.html" target="_blank" rel="noreferrer">here</a>.</p><p>Note</p><p>As the bootloader image is built on top of the Hardware Abstraction Layer component of <a href="https://github.com/espressif/esp-idf" target="_blank" rel="noreferrer">ESP-IDF</a>, the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">API port by Espressif</a> will be used by MCUboot rather than the original NuttX port.</p><h3 id="flash-encryption" tabindex="-1">Flash Encryption <a class="header-anchor" href="#flash-encryption" aria-label="Permalink to &quot;Flash Encryption&quot;">​</a></h3><p>Flash encryption is intended for encrypting the contents of the ESP32-S2&#39;s off-chip flash memory. Once this feature is enabled, firmware is flashed as plaintext, and then the data is encrypted in place on the first boot. As a result, physical readout of flash will not be sufficient to recover most flash contents.</p><p>Warning</p><p>After enabling Flash Encryption, an encryption key is generated internally by the device and cannot be accessed by the user for re-encrypting data and re-flashing the system, hence it will be permanently encrypted. Re-flashing an encrypted system is complicated and not always possible. You can find more information about the ESP32-S2&#39;s Flash Encryption <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/security/flash-encryption.html" target="_blank" rel="noreferrer">here</a>.</p><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><p>First of all, we need to install <code>imgtool</code> (a MCUboot utility application to manipulate binary images) and <code>esptool</code> (the ESP32-S2 toolkit):</p><pre><code> pip install imgtool esptool==4.8.dev4
</code></pre><p>We also need to make sure that the python modules are added to <code>PATH</code>:</p><pre><code> echo &quot;PATH=PATH:/home/USER/.local/bin&quot; &gt;&gt; ~/.bashrc
</code></pre><p>Now, we will create a folder to store the generated keys (such as <code>~/signing_keys</code>):</p><pre><code> mkdir ~/signing_keys &amp;&amp; cd ~/signing_keys
</code></pre><p>With all set up, we can now generate keys to sign the bootloader and application binary images, respectively, of the compiled project:</p><pre><code> espsecure.py generate_signing_key --version 2 bootloader_signing_key.pem
 imgtool keygen --key app_signing_key.pem --type rsa-3072
</code></pre><p>Important</p><p>The contents of the key files must be stored securely and kept secret.</p><h3 id="enabling-secure-boot-and-flash-encryption" tabindex="-1">Enabling Secure Boot and Flash Encryption <a class="header-anchor" href="#enabling-secure-boot-and-flash-encryption" aria-label="Permalink to &quot;Enabling Secure Boot and Flash Encryption&quot;">​</a></h3><p>To enable Secure Boot for the current project, go to the project&#39;s NuttX directory, execute <code>make menuconfig</code> and the following steps:</p><blockquote><ol><li>Enable experimental features in <code>Build Setup --&gt; Show experimental options</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable MCUboot in <code>Application Configuration --&gt; Bootloader Utilities --&gt; MCUboot</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Change image type to <code>MCUboot-bootable format</code> in <code>System Type --&gt; Application Image Configuration --&gt; Application Image Format</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable building MCUboot from the source code by selecting <code>Build binaries from source</code>; in <code>System Type --&gt; Application Image Configuration --&gt; Source for bootloader binaries</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>Enable Secure Boot in <code>System Type --&gt; Application Image Configuration --&gt; Enable hardware Secure Boot in bootloader</code>{.interpreted-text role=&quot;menuselection&quot;};</li><li>If you want to protect the SPI Bus against data sniffing, you can enable Flash Encryption in <code>System Type --&gt; Application Image Configuration --&gt; Enable Flash Encryption on boot</code>{.interpreted-text role=&quot;menuselection&quot;}.</li></ol></blockquote><p>Now you can design an update and confirm agent to your application. Check the <a href="https://docs.mcuboot.com/design.html" target="_blank" rel="noreferrer">MCUboot design guide</a> and the <a href="https://docs.mcuboot.com/readme-espressif.html" target="_blank" rel="noreferrer">MCUboot Espressif port documentation</a> for more information on how to apply MCUboot. Also check some <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/readme-nuttx.md" target="_blank" rel="noreferrer">notes about the NuttX MCUboot port</a>, the <a href="https://github.com/mcu-tools/mcuboot/blob/main/docs/PORTING.md" target="_blank" rel="noreferrer">MCUboot porting guide</a> and some <a href="https://github.com/apache/nuttx-apps/tree/master/examples/mcuboot" target="_blank" rel="noreferrer">examples of MCUboot applied in NuttX applications</a>.</p><p>After you developed an application which implements all desired functions, you need to flash it into the primary image slot of the device (it will automatically be in the confirmed state, you can learn more about image confirmation <a href="https://docs.mcuboot.com/design.html#image-swapping" target="_blank" rel="noreferrer">here</a>). To flash to the primary image slot, select <code>Application image primary slot</code> in <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} and compile it using <code>make -j ESPSEC_KEYDIR=~/signing_keys</code>.</p><p>When creating update images, make sure to change <code>System Type --&gt; Application Image Configuration --&gt; Target slot for image flashing</code>{.interpreted-text role=&quot;menuselection&quot;} to <code>Application image secondary slot</code>.</p><p>Important</p><p>When deploying your application, make sure to disable UART Download Mode by selecting <code>Permanently disabled</code> in <code>System Type --&gt; Application Image Configuration --&gt; UART ROM download mode</code>{.interpreted-text role=&quot;menuselection&quot;} and change usage mode to <code>Release</code> in [System Type --&gt; Application Image Configuration --&gt; Enable usage mode]{.title-ref}. <strong>After disabling UART Download Mode you will not be able to flash other images through UART.</strong></p><h2 class="title-ref" id="managing-esptool-on-virtual-environment" tabindex="-1">_[Managing esptool on virtual environment] <a class="header-anchor" href="#managing-esptool-on-virtual-environment" aria-label="Permalink to &quot;\\_[Managing esptool on virtual environment]{.title-ref}&quot;">​</a></h2><p>This section describes how to install <code>esptool</code>, <code>imgtool</code> or any other Python packages in a proper environment.</p><p>Normally, a Linux-based OS would already have Python 3 installed by default. Up to a few years ago, you could simply call <code>pip install</code> to install packages globally. However, this is no longer recommended as it can lead to conflicts between packages and versions. The recommended way to install Python packages is to use a virtual environment.</p><p>A virtual environment is a self-contained directory that contains a Python installation for a particular version of Python, plus a number of additional packages. You can create a virtual environment for each project you are working on, and install the required packages in that environment.</p><p>Two alternatives are explained below, you can select any one of those.</p><h3 id="using-pipx-recommended" tabindex="-1">Using pipx (recommended) <a class="header-anchor" href="#using-pipx-recommended" aria-label="Permalink to &quot;Using pipx (recommended)&quot;">​</a></h3><p><code>pipx</code> is a tool that makes it easy to install Python packages in a virtual environment. To install <code>pipx</code>, you can run the following command (using apt as example):</p><pre><code> apt install pipx
</code></pre><p>Once you have installed <code>pipx</code>, you can use it to install Python packages in a virtual environment. For example, to install the <code>esptool</code> package, you can run the following command:</p><pre><code> pipx install esptool
</code></pre><p>This will create a new virtual environment in the <code>~/.local/pipx/venvs</code> directory, which contains the <code>esptool</code> package. You can now use the <code>esptool</code> command as normal, and so will the build system.</p><p>Make sure to run <code>pipx ensurepath</code> to add the <code>~/.local/bin</code> directory to your <code>PATH</code>. This will allow you to run the <code>esptool</code> command from any directory.</p><h3 id="using-venv-alternative" tabindex="-1">Using venv (alternative) <a class="header-anchor" href="#using-venv-alternative" aria-label="Permalink to &quot;Using venv (alternative)&quot;">​</a></h3><p>To create a virtual environment, you can use the <code>venv</code> module, which is included in the Python standard library. To create a virtual environment, you can run the following command:</p><pre><code> python3 -m venv myenv
</code></pre><p>This will create a new directory called <code>myenv</code> in the current directory, which contains a Python installation and a copy of the Python standard library. To activate the virtual environment, you can run the following command:</p><pre><code> source myenv/bin/activate
</code></pre><p>This will change your shell prompt to indicate that you are now working in the virtual environment. You can now install packages using <code>pip</code>. For example, to install the <code>esptool</code> package, you can run the following command:</p><pre><code> pip install esptool
</code></pre><p>This will install the <code>esptool</code> package in the virtual environment. You can now use the <code>esptool</code> command as normal. When you are finished working in the virtual environment, you can deactivate it by running the following command:</p><pre><code> deactivate
</code></pre><p>This will return your shell prompt to its normal state. You can reactivate the virtual environment at any time by running the <code>source myenv/bin/activate</code> command again. You can also delete the virtual environment by deleting the directory that contains it.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,206)]))}const m=t(s,[["render",i]]);export{u as __pageData,m as default};
