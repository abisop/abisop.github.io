import{_ as n,c as s,al as a,j as e,a as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Running","description":"","frontmatter":{},"headers":[],"relativePath":"en/quickstart/running.md","filePath":"en/quickstart/running.md"}'),i={name:"en/quickstart/running.md"};function l(c,t,d,p,u,h){return r(),s("div",null,t[0]||(t[0]=[a(`<h1 id="running" tabindex="-1">Running <a class="header-anchor" href="#running" aria-label="Permalink to &quot;Running&quot;">​</a></h1><p>In order to finally run NuttX on your board, you first have to flash the NuttX binary. As an easy start, it is recommended that you choose a well supported board which also integrates the debugger/programmer in the board itself exposed via USB connector.</p><p>A good choice is a Nucleo or Discovery board from ST Microelectronics, as there is a wide choice of supported boards for the STM32 architecture in NuttX. Also, these boards expose an UART port over the USB connection which allows you to interact with NuttX via the interactive console without any extra hardware. For the purposes of this guide, we will use the Nucleo F103RB board.</p><h2 id="flashing" tabindex="-1">Flashing <a class="header-anchor" href="#flashing" aria-label="Permalink to &quot;Flashing&quot;">​</a></h2><p>There are various tools you can use to flash the NuttX binary to your Nucleo board. One common option is to use <code>openocd</code> which supports a large number of programmers and target microcontrollers.</p><p>You should note that <code>openocd</code> project has not made stable releases for long time and support for newer hardware will probably be only available in the latest Git version, so it is actually recommended to install latest development version.</p><blockquote><p>\\ git clone <a href="git://git.code.sf.net/p/openocd/code" target="_blank" rel="noreferrer">git://git.code.sf.net/p/openocd/code</a> openocd \\ cd openocd \\ ./bootstrap \\ ./configure --prefix=install/ \\ make install</p><p>The resulting installation will be under <code>openocd/install</code>. You can add <code>openocd/install/bin</code> to your <code>PATH</code>.</p></blockquote><p>Now, to flash the binary to your board, connect the USB cable and do:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx/</span></span>
<span class="line"><span> openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c &#39;init&#39; \\</span></span>
<span class="line"><span>  -c &#39;program nuttx/nuttx.bin verify reset&#39; -c &#39;shutdown&#39;</span></span></code></pre></div><h2 id="access-nuttshell" tabindex="-1">Access NuttShell <a class="header-anchor" href="#access-nuttshell" aria-label="Permalink to &quot;Access NuttShell&quot;">​</a></h2>`,10),e("p",null,[o("Once you flash your board, it will reset and offer a prompt over the serial console. With the Nucleo board, you can simply open the terminal program of your choice where you will see the "),e("code",null,"nsh>"),o(" prompt (press "),e("code",{class:"interpreted-text",role:"kbd"},"enter"),o(" if you don't see anything):")],-1),a('<p>Tip</p><p>You may have to add yourself to the <code>dialout</code> group on Linux to have permission to access serial ports:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> gpasswd -a &lt;user&gt; dialout</span></span></code></pre></div><p>Where <code>&lt;user&gt;</code> is your username. You will need to log out from your desktop for the change to have effect.</p>',4)]))}const b=n(i,[["render",l]]);export{f as __pageData,b as default};
