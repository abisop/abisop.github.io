import{_ as t,c as a,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"ST STM32F769I-DISCO","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f7/boards/stm32f769i-disco/index.md","filePath":"en/platforms/arm/stm32f7/boards/stm32f769i-disco/index.md"}'),i={name:"en/platforms/arm/stm32f7/boards/stm32f769i-disco/index.md"};function r(s,e,l,h,d,c){return n(),a("div",null,e[0]||(e[0]=[o(`<h1 id="st-stm32f769i-disco" tabindex="-1">ST STM32F769I-DISCO <a class="header-anchor" href="#st-stm32f769i-disco" aria-label="Permalink to &quot;ST STM32F769I-DISCO&quot;">​</a></h1><p>chip:stm32, chip:stm32f7, chip:stm32f769</p><p>This page discusses issues unique to NuttX configurations for the STMicro STM32F769I-DISCO development board featuring the STM32F769NIH6 MCU. The STM32F769NIH6 is a 216MHz Cortex-M7 operating with 2048K Flash memory and 512Kb SRAM. The board features:</p><ul><li>On-board ST-LINK/V2 for programming and debugging,</li><li>Mbed-enabled (mbed.org)</li><li>4-inch 800x472 color LCD-TFT with capacitive touch screen</li><li>SAI audio codec</li><li>Audio line in and line out jack</li><li>Two ST MEMS microphones</li><li>SPDIF RCA input connector</li><li>Two pushbuttons (user and reset)</li><li>512-Mbit Quad-SPI Flash memory</li><li>128-Mbit SDRAM</li><li>Connector for microSD card</li><li>RF-EEPROM daughterboard connector</li><li>USB OTG HS with Micro-AB connectors</li><li>Ethernet connector compliant with IEEE-802.3-2002 and PoE</li></ul><p>Refer to the <a href="http://www.st.com" target="_blank" rel="noreferrer">http://www.st.com</a> website for further information about this board (search keyword: stm32f769i-disco)</p><h2 id="status" tabindex="-1">STATUS <a class="header-anchor" href="#status" aria-label="Permalink to &quot;STATUS&quot;">​</a></h2><p>2019-06: PWM support has been tested as working.</p><p>2017-07: The basic NSH configuration is functional using a serial console on USART1, which is connected to the &quot;virtual com port&quot; of the ST/LINK USB adapter.</p><p>2017-07: STM32 F7 Ethernet appears to be functional, but has had only light testing.</p><p>Work in progress: Use LCD over DSI interface, rest of board.</p><h2 id="development-environment" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h2><p>The Development environments for the STM32F769I-DISCO board are identical to the environments for other STM32F boards. For full details on the environment options and setup, see the README.txt file in the boards/arm/stm32f7/stm32f769i-disco directory.</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The STM32F769I-DISCO board has numerous LEDs but only one, LD3 located near the reset button, that can be controlled by software.</p><p>LD3 is controlled by PI1 which is also the SPI2_SCK at the Arduino interface. One end of LD3 is grounded so a high output on PI1 will illuminate the LED.</p><p>This LED is not used by the board port unless CONFIG_ARCH_LEDS is defined. In that case, the usage by the board port is defined in include/board.h and src/stm32_leds.c. The LEDs are used to encode OS-related events as follows:</p><blockquote><p>SYMBOL Meaning LD3</p><hr><p>LED_STARTED NuttX has been started OFF LED_HEAPALLOCATE Heap has been allocated OFF LED_IRQSENABLED Interrupts enabled OFF LED_STACKCREATED Idle stack created ON LED_INIRQ In an interrupt N/C LED_SIGNAL In a signal handler N/C LED_ASSERTION An assertion failed N/C LED_PANIC The system has crashed FLASH</p></blockquote><p>Thus is LD3 is statically on, NuttX has successfully booted and is, apparently, running normally. If LD3 is flashing at approximately 2Hz, then a fatal error has been detected and the system has halted.</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>Pushbutton B1, labelled &quot;User&quot;, is connected to GPIO PI11. A high value will be sensed when the button is depressed.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>Use the serial interface the ST/LINK provides to the USB host.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="common-configuration-information" tabindex="-1">Common Configuration Information <a class="header-anchor" href="#common-configuration-information" aria-label="Permalink to &quot;Common Configuration Information&quot;">​</a></h3><p>Each STM32F769I-DISCO configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh stm32f769i-disco:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the sub-directories listed below.</p><h3 id="configuration-directories" tabindex="-1">Configuration Directories <a class="header-anchor" href="#configuration-directories" aria-label="Permalink to &quot;Configuration Directories&quot;">​</a></h3><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (NSH) located at apps/examples/nsh. The Configuration enables the serial interfaces on UART1. Otherwise nothing is enabled, so that config is a starting point for initial testing. Support for builtin applications is enabled, but in the base configuration no builtin applications are selected.</p><ol><li><p>This config supports the PWM test (apps/examples/pwm) but this must be manually enabled by selecting:</p><pre><code>CONFIG_PWM=y              : Enable the generic PWM infrastructure
CONFIG_EXAMPLES_PWM=y     : Enable the PWM example app

And these for enabling the STM32 timer PWM channel:

CONFIG_STM32F7_TIM1=y
CONFIG_STM32F7_TIM1_PWM=y
CONFIG_STM32F7_TIM1_CHANNEL=4
</code></pre></li></ol><h3 id="nsh-ehternet" tabindex="-1">nsh-ehternet <a class="header-anchor" href="#nsh-ehternet" aria-label="Permalink to &quot;nsh-ehternet&quot;">​</a></h3><p>Same as above but a lot more hardware peripherals enabled, in particular ethernet, as well as networking stuff.</p>`,34)]))}const f=t(i,[["render",r]]);export{p as __pageData,f as default};
