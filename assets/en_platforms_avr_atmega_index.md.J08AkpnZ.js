import{_ as a,c as t,al as r,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Microchip Atmega","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/avr/atmega/index.md","filePath":"en/platforms/avr/atmega/index.md"}'),o={name:"en/platforms/avr/atmega/index.md"};function l(s,e,p,h,n,c){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="microchip-atmega" tabindex="-1">Microchip Atmega <a class="header-anchor" href="#microchip-atmega" aria-label="Permalink to &quot;Microchip Atmega&quot;">​</a></h1><h2 id="atmega128" tabindex="-1">ATMega128 <a class="header-anchor" href="#atmega128" aria-label="Permalink to &quot;ATMega128&quot;">​</a></h2><p>This port of NuttX to the Amber Web Server from <a href="http://www.soc-robotics.com/index.htm" target="_blank" rel="noreferrer">SoC Robotics</a> is partially completed. The Amber Web Server is based on an Microchip ATMega128.</p><h2 id="atmega1284p" tabindex="-1">Atmega1284P <a class="header-anchor" href="#atmega1284p" aria-label="Permalink to &quot;Atmega1284P&quot;">​</a></h2><p>The Atmega1284P is a chip from Microchip (&quot;inherited&quot; from Atmel) with the following features:</p><blockquote><ul><li>16MHz 8bit AVR RISC Processor</li><li>128Kbyte Flash</li><li>16Kbyte RAM</li><li>4Kbyte EEPROM</li><li>2 High Speed Serial Ports</li><li>2 8-bit Timer/Counters</li><li>2 16-bit Timer/Counter</li><li>1 Master/Slave SPI</li><li>1 I2C controller (aka Two-Wire interface)</li><li>8Ch 10bit Analog Input port</li><li>up to 32 GPIOs</li><li>Watchdog timer</li><li>Real Time Clock</li><li>JTAG/OCD Interface</li></ul></blockquote><h2 id="avr-atmega2560" tabindex="-1">AVR ATMega2560 <a class="header-anchor" href="#avr-atmega2560" aria-label="Permalink to &quot;AVR ATMega2560&quot;">​</a></h2><p>Extension of the AVR architecture to support the ATMega2560 and specifi support for the Arduion MEGA2560 board were contributed by Dimitry Kloper and first released in NuttX-7.14.</p><h3 id="clock-configuration" tabindex="-1">Clock Configuration <a class="header-anchor" href="#clock-configuration" aria-label="Permalink to &quot;Clock Configuration&quot;">​</a></h3><h3 id="system-timer" tabindex="-1">System Timer <a class="header-anchor" href="#system-timer" aria-label="Permalink to &quot;System Timer&quot;">​</a></h3><h3 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h3><p>The following list indicates peripherals supported in NuttX:</p><p>Peripheral Support Notes</p><hr><p>GPIO PWM ADC RTC WTD I2C SPI TIMER UART Yes No No No No No No Yes Yes</p><h2 id="uart" tabindex="-1">UART <a class="header-anchor" href="#uart" aria-label="Permalink to &quot;UART&quot;">​</a></h2><p>UART is implemented using interrupts. The chip doesn&#39;t support DMA.</p><h2 id="timer" tabindex="-1">TIMER <a class="header-anchor" href="#timer" aria-label="Permalink to &quot;TIMER&quot;">​</a></h2><p>The TIMER peripheral is exposed as standard timer.</p><h3 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h3><blockquote><p>boards/<em>/</em></p></blockquote>',21)]))}const u=a(o,[["render",l]]);export{m as __pageData,u as default};
