import{_ as t,c as o,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Zilog Z180","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/z80/z180/index.md","filePath":"en/platforms/z80/z180/index.md"}'),r={name:"en/platforms/z80/z180/index.md"};function s(d,e,n,c,l,p){return i(),o("div",null,e[0]||(e[0]=[a(`<h1 id="zilog-z180" tabindex="-1">Zilog Z180 <a class="header-anchor" href="#zilog-z180" aria-label="Permalink to &quot;Zilog Z180&quot;">​</a></h1><p><strong>P112</strong>. The P112 is a hobbyist single board computer based on a 16MHz Z80182 with up to 1MB of memory, serial, parallel and diskette IO, and realtime clock, in a 3.5-inch drive form factor. The P112 computer originated as a commercial product of &quot;D-X Designs Pty Ltd&quot;[ of Australia.</p><p>Dave Brooks was successfully funded through Kickstarter for and another run of P112 boards in November of 2012. In addition Terry Gulczynski makes additional P112 derivative hobbyist home brew computers.</p><p><strong>STATUS:</strong> Most of the NuttX is in port for both the Z80182 and for the P112 board. Boards from Kickstarter project will not be available, however, until the third quarter of 2013. So it will be some time before this port is verified on hardware. Refer to the NuttX board <a href="https://github.com/apache/nuttx/blob/master/Documentation/platforms/z80/z180/boards/p112/README.txt" target="_blank" rel="noreferrer">README</a> file for further information.</p><p>The arch/z80 directories contain files to support a variety of 8-bit architectures from ZiLOG (and spin-architectures such as the Rabbit2000). The arch/z80/src/z180 sub-directory contains logic unique to the classic Z180 family of chips.</p><p>Files in this directory include:</p><p><code>z180_head.asm</code></p><p>: This is the main entry point into the Z180 program. This includes the handler for the RESET, power-up interrupt vector and address zero and all RST interrupts.</p><p><code>z180_rom.asm</code></p><p>: Some architectures may have ROM located at address zero. In this case, a special version of the &quot;head&quot; logic must be used. This special &quot;head&quot; file is probably board-specific and, hence, belongs in the board-specific boards/z80/z180/&lt;board-name&gt;/src directory. This file may, however, be used as a model for such a board-specific file.</p><pre><code>z180\\_rom.S is enabled by specifying CONFIG\\_LINKER\\_ROM\\_AT\\_0000
in the configuration file.

A board specific version in the boards/z80/z180/\\&lt;board-name\\&gt;/src
directory can be used by:

1.  Define CONFIG\\_ARCH\\_HAVEHEAD
2.  Add the board-specific head file, say \\&lt;filename\\&gt;.asm, to
    boards/z80/z180/\\&lt;board-name\\&gt;/src
3.  Add a file called Make.defs in the
    boards/z80/z180/\\&lt;board-name\\&gt;/src directory containing the
    line: HEAD\\_ASRC = \\&lt;file-name\\&gt;.asm
</code></pre><p><code>Make.defs</code></p><p>: This is the standard makefile fragment that must be provided in all chip directories. This fragment identifies the chip-specific file to be used in building libarch.</p><p><code>chip.h</code></p><p>: This is the standard header file that must be provided in all chip directories.</p><p><code>z180_initialstate.c</code>, <code>z180_copystate.c</code>, <code>z180_restoreusercontext.asm</code>, <code>z180_saveusercontext.asm</code></p><p>: These files implement the Z180 context switching logic</p><p><code>z180_schedulesigaction.c</code> and <code>z180_sigdeliver.c</code></p><p>: These files implement Z180 signal handling.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,21)]))}const m=t(r,[["render",s]]);export{f as __pageData,m as default};
