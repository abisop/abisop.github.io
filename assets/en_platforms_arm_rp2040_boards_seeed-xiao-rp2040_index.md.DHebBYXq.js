import{_ as a,c as i,al as o,o as t}from"./chunks/framework.NFAqBSgQ.js";const s="/assets/seeed-xiao-rp2040.CS5roWZb.jpg",b=JSON.parse('{"title":"Seeed Studio XIAO RP2040","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp2040/boards/seeed-xiao-rp2040/index.md","filePath":"en/platforms/arm/rp2040/boards/seeed-xiao-rp2040/index.md"}'),n={name:"en/platforms/arm/rp2040/boards/seeed-xiao-rp2040/index.md"};function l(r,e,p,c,h,d){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="seeed-studio-xiao-rp2040" tabindex="-1">Seeed Studio XIAO RP2040 <a class="header-anchor" href="#seeed-studio-xiao-rp2040" aria-label="Permalink to &quot;Seeed Studio XIAO RP2040&quot;">​</a></h1><p>chip:rp2040</p><p>The <a href="https://wiki.seeedstudio.com/XIAO-RP2040/" target="_blank" rel="noreferrer">Seeed Studio Xiao RP2040</a> is a general purpose board supplied by Seeed Studio and it is compatible with the Raspberry Pi RP2040 ecosystem as they share the same RP2040 chip.</p><p><img src="'+s+`" alt="" class="align-center"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>RP2040 microcontroller chip</li><li>Dual-core ARM Cortex M0+ processor, flexible clock running up to 133 MHz</li><li>264KB of SRAM, and 2MB of onboard Flash memory</li><li>11 digital pins, 4 analog pins, 11 PWM Pins</li><li>1 I2C interface, 1 UART interface, 1 SPI interface, 1 SWD Bonding pad interface</li><li>USB Type-C interface</li><li>1 user LED, 1 power LED, two LEDs for serial port downloading, 1 RGB LED</li><li>1 RESET button, 1 BOOT button</li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default a serial console appears on pins 6 (TX GPIO0) and pin 7 (RX GPIO1). This console runs a 115200-8N1. The board can be configured to use the USB connection as the serial console.</p><h2 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h2><p>There are 2 LEDs available for user:</p><ul><li>A RGB LED connected to GPIO16 (PIN_LED_G), GPIO17 (PIN_LED_R), GPIO25 (PIN_LED_B).</li><li>A NeoPixel RGB LED connected to GPIO11 (NEOPIXEL_POWER) and GPIO12 (PIN_NEOPIXEL).</li></ul><h2 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h2><p>There are 2 buttons available:</p><p>A RESET button and a BOOT button, which if held down when power is first applied to the board, will cause the RP2040 to boot into programming mode and appear as a storage device to a computer connected via USB. Saving a .UF2 file to this device will replace the Flash ROM contents on the RP2040.</p><h2 id="pin-mapping" tabindex="-1">Pin Mapping <a class="header-anchor" href="#pin-mapping" aria-label="Permalink to &quot;Pin Mapping&quot;">​</a></h2><p>Pads numbered anticlockwise from USB connector.</p><p>Pad Signal Notes</p><hr><p>0 GPI26 D0/A0 1 GPI27 D1/A1 2 GPI28 D2/A2 3 GPI29 D3/A3 4 GPIO6 D4/SDA 5 GPIO7 D5/SCL 6 GPIO0 Default TX for UART0 serial console 7 GPIO1 Default RX for UART1 serial console/CSn 8 GPIO2 D8/SCK 9 GPIO3 D10/MOSI 10 GPIO4 D9/MicroSD 11 12 3V3 Ground Power output to peripherals 13 VIN +5V Supply to board</p><h2 id="power-supply" tabindex="-1">Power Supply <a class="header-anchor" href="#power-supply" aria-label="Permalink to &quot;Power Supply&quot;">​</a></h2><p>For general I/O pins:</p><p>Working voltage of MCU is 3.3V. Voltage input connected to general I/O pins may cause chip damage if it&#39; higher than 3.3V.</p><p>For power supply pins:</p><p>The built-in DC-DC converter circuit able to change 5V voltage into 3.3V allows to power the device with a 5V supply via VIN-PIN and via the USB connector.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li>Download Raspberry Pi Pico SDK.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone -b 2.0.0 https://github.com/raspberrypi/pico-sdk.git</span></span></code></pre></div><ol start="2"><li>Download and install picotool</li></ol><blockquote><p>Instructions can be found here: <a href="https://github.com/raspberrypi/picotool" target="_blank" rel="noreferrer">https://github.com/raspberrypi/picotool</a></p><p>If you are on Arch Linux, you can install the picotool through the AUR:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> yay -S picotool</span></span></code></pre></div><ol start="3"><li>Set PICO_SDK_PATH environment variable</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> export PICO_SDK_PATH=&lt;absolute_path_to_pico-sdk_directory&gt;</span></span></code></pre></div><ol start="4"><li>Configure and build NuttX</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git clone https://github.com/apache/nuttx.git nuttx</span></span>
<span class="line"><span> git clone https://github.com/apache/nuttx-apps.git apps</span></span>
<span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh seeed-xiao-rp2040:nsh</span></span>
<span class="line"><span> make V=1</span></span></code></pre></div><ol start="5"><li><p>Connect the Seeed Studio Xiao RP2040 board to USB port while pressing BOOTSEL (small button marked &quot;B&quot;). The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device. (Same manner as the standard Pico SDK applications installation)</p></li><li><p>To access the console, GPIO 0 and 1 pins must be connected to the device such as USB-serial converter.</p><p>[usbnsh]{.title-ref} configuration provides the console access by USB CDC/ACM serial device. The console is available by using a terminal software on the USB host.</p></li></ol><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, at 115200 bps).</p><h3 id="userled" tabindex="-1">userled <a class="header-anchor" href="#userled" aria-label="Permalink to &quot;userled&quot;">​</a></h3><p>This is an nsh configuration with added support for user LEDs.</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>Basic NuttShell configuration using CDC/ACM serial (console enabled in USB Port, at 115200 bps).</p><h2 id="license-exceptions" tabindex="-1">License exceptions <a class="header-anchor" href="#license-exceptions" aria-label="Permalink to &quot;License exceptions&quot;">​</a></h2><p>The following files are originated from the files in Pico SDK. So, the files are licensed under 3-Clause BSD same as Pico SDK.</p><ul><li>arch/arm/src/rp2040/rp2040_clock.c</li><li>arch/arm/src/rp2040/rp2040_pll.c</li><li>arch/arm/src/rp2040/rp2040_xosc.c <ul><li>These are created by referring the Pico SDK clock initialization.</li></ul></li><li>arch/arm/src/rp2040/rp2040_pio.c</li><li>arch/arm/src/rp2040/rp2040_pio.h</li><li>arch/arm/src/rp2040/rp2040_pio_instructions.h <ul><li>These provide the similar APIs to Pico SDK&#39;s hardware_pio APIs.</li></ul></li><li>arch/arm/src/rp2040/hardware/*.h <ul><li>These are generated from rp2040.svd originally provided in Pico SDK.</li></ul></li></ul>`,45)]))}const g=a(n,[["render",l]]);export{b as __pageData,g as default};
