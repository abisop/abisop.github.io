import{_ as d,c as o,al as s,j as e,a as t,o as a}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Network Devices","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/net/netdev.md","filePath":"en/components/net/netdev.md"}'),n={name:"en/components/net/netdev.md"};function l(c,r,i,p,u,v){return a(),o("div",null,r[0]||(r[0]=[s('<h1 id="network-devices" tabindex="-1">Network Devices <a class="header-anchor" href="#network-devices" aria-label="Permalink to &quot;Network Devices&quot;">​</a></h1><ul><li><code>include/nuttx/net/netdev.h</code>. All structures and APIs needed to work with network drivers are provided in this header file. The structure <code>struct net_driver_s</code> defines the interface and is passed to the network via <code>netdev_register()</code>.</li><li><code>include/nuttx/net/netdev_lowerhalf.h</code>. (Recommended for new drivers, see <code>Network Drivers &lt;netdriver&gt;</code>{.interpreted-text role=&quot;ref&quot;}) This header file defines the interface between the network device and the network stack. The network device is a lower-half driver that provides the network stack with the ability to send and receive packets.</li></ul><h2 id="ip-addresses" tabindex="-1">IP Addresses <a class="header-anchor" href="#ip-addresses" aria-label="Permalink to &quot;IP Addresses&quot;">​</a></h2><p>The structure <code>struct net_driver_s</code> now supports one IPv4 address and multiple IPv6 addresses. Multiple IPv6 addresses is common in modern network devices. For example, a network device may have a link-local address and a global address. The link-local address is used for neighbor discovery protocol and the global address is used for communication with the Internet.</p><h3 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h3><p><code>CONFIG_NETDEV_MULTIPLE_IPv6</code></p><p>: Enable support for multiple IPv6 addresses per network device. Depends on <code>CONFIG_NET_IPv6</code>.</p><p><code>CONFIG_NETDEV_MAX_IPv6_ADDR</code></p><p>: Maximum number of IPv6 addresses that can be assigned to a single network device. Normally a link-local address and a global address are needed.</p><h3 id="ipv4-interfaces" tabindex="-1">IPv4 Interfaces <a class="header-anchor" href="#ipv4-interfaces" aria-label="Permalink to &quot;IPv4 Interfaces&quot;">​</a></h3>',10),e("p",null,[t("Now we only support one IPv4 address per network device, and directly use the :c"),e("code",{class:"interpreted-text",role:"member"},"d_ipaddr"),t(", :c"),e("code",{class:"interpreted-text",role:"member"},"d_draddr"),t(" and :c"),e("code",{class:"interpreted-text",role:"member"},"d_netmask"),t(" in :c"),e("code",{class:"interpreted-text",role:"struct"},"net_driver_s"),t(".")],-1),e("h3",{id:"ipv6-interfaces",tabindex:"-1"},[t("IPv6 Interfaces "),e("a",{class:"header-anchor",href:"#ipv6-interfaces","aria-label":'Permalink to "IPv6 Interfaces"'},"​")],-1),e("p",null,[t("Now we support multiple IPv6 addresses per network device, and use the :c"),e("code",{class:"interpreted-text",role:"member"},"d_ipv6"),t(" in :c"),e("code",{class:"interpreted-text",role:"struct"},"net_driver_s"),t(" to store the IPv6 addresses. For historical reason, we keep the old name :c"),e("code",{class:"interpreted-text",role:"member"},"d_ipv6addr"),t(" and :c"),e("code",{class:"interpreted-text",role:"member"},"d_ipv6netmask"),t(" for backward compatibility. Please use :c"),e("code",{class:"interpreted-text",role:"member"},"d_ipv6"),t(" for new drivers.")],-1),e("p",null,"Managing the IPv6 addresses by provided APIs would be more flexible:",-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"netdev_ipv6_add()")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"netdev_ipv6_del()")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"netdev_ipv6_srcaddr()")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"netdev_ipv6_lladdr()")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"netdev_ipv6_lookup()")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"netdev_ipv6_foreach()")])])],-1),e("h3",{id:"ioctls-for-ip-addresses",tabindex:"-1"},[t("Ioctls for IP Addresses "),e("a",{class:"header-anchor",href:"#ioctls-for-ip-addresses","aria-label":'Permalink to "Ioctls for IP Addresses"'},"​")],-1),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCGIFADDR")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCSIFADDR")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCDIFADDR")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCGLIFADDR")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCSLIFADDR")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCGIFNETMASK")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCSIFNETMASK")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCGLIFNETMASK")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"macro"},"SIOCSLIFNETMASK")])])],-1)]))}const _=d(n,[["render",l]]);export{m as __pageData,_ as default};
