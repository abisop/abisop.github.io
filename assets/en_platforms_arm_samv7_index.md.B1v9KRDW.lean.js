import{_ as i,c as o,al as t,j as e,a as r,o as n}from"./chunks/framework.NFAqBSgQ.js";const S=JSON.parse('{"title":"Microchip SAM V7","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/samv7/index.md","filePath":"en/platforms/arm/samv7/index.md"}'),s={name:"en/platforms/arm/samv7/index.md"};function l(c,a,d,p,h,u){return n(),o("div",null,a[0]||(a[0]=[t("",13),e("p",null,[r("Current implementation only supports version with two timers: a one-shot that provides the timed events and a free running timer that provides the current time. Therefore two channels has to be used for tickless mode. "),e("code",null,"CONFIG_USEC_PER_TICK"),r(" option determines the resolution of time reported by :c"),e("code",{class:"interpreted-text",role:"func"},"clock_systime_ticks()"),r(" and the resolution of times that can be set for certain delays including watchdog timers and delayed work.")],-1),t("",33),e("p",null,[r("The lower-half of this driver is initialized by calling :c"),e("code",{class:"interpreted-text",role:"func"},"sdio_initialize"),r(".")],-1),t("",11),e("p",null,[r("The lower-half of the peripheral is initialized by function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_mcan_initialize")],-1),t("",10),e("p",null,[r("The lower-half is initialized by function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_pwminitialize"),r(".")],-1),e("h3",{id:"quad-serial-peripheral-interface-qspi",tabindex:"-1"},[r("Quad Serial Peripheral Interface (QSPI) "),e("a",{class:"header-anchor",href:"#quad-serial-peripheral-interface-qspi","aria-label":'Permalink to "Quad Serial Peripheral Interface (QSPI)"'},"​")],-1),e("p",null,[r("This peripheral provides communication with external devices in host mode through synchronous serial data link. It is possible to use QSPI peripheral in SPI mode if this is supported by MCU (config option "),e("code",null,"CONFIG_SAMV7_QSPI_SPI_MODE"),r(").")],-1),e("p",null,[r("The lower-half is initialized by function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_qspi_initialize"),r(" in case of QSPI mode and by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_qspi_spi_initialize"),r(" in case of SPI mode.")],-1),e("h3",{id:"static-memory-controller-smc",tabindex:"-1"},[r("Static Memory Controller (SMC) "),e("a",{class:"header-anchor",href:"#static-memory-controller-smc","aria-label":'Permalink to "Static Memory Controller (SMC)"'},"​")],-1),e("p",null,"This peripheral is a part of External Bus Interface (EBI) which is designed to ensure the successful data transfer between several external devices and the microcontroller.",-1),e("p",null,"This controller is currently not supported.",-1),e("h3",{id:"serial-peripheral-interface-spi",tabindex:"-1"},[r("Serial Peripheral Interface (SPI) "),e("a",{class:"header-anchor",href:"#serial-peripheral-interface-spi","aria-label":'Permalink to "Serial Peripheral Interface (SPI)"'},"​")],-1),e("p",null,"This is a synchronous serial data link that provides communication with external devices in host or client mode.",-1),e("p",null,[r("The peripheral is initialized by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_spibus_initialize"),r(" function.")],-1),e("h3",{id:"synchronous-serial-controller-ssc",tabindex:"-1"},[r("Synchronous Serial Controller (SSC) "),e("a",{class:"header-anchor",href:"#synchronous-serial-controller-ssc","aria-label":'Permalink to "Synchronous Serial Controller (SSC)"'},"​")],-1),e("p",null,"This controller provides a synchronous communication link with external devices.",-1),e("p",null,[r("The controller is initialized by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_ssc_initialize"),r(" function.")],-1),t("",5),e("p",null,[r("The MCU supports both UART and USART controllers. These peripheral can be used with TX and RX DMA support. For RX DMA on USART, it is possible to configure idle bus timeout value in "),e("code",null,"CONFIG_SAMV7_SERIAL_DMA_TIMEOUT"),r(". This option ensures data are read from the DMA buffer even if it is not full yet. UART peripherals do not have this timeout support, therefore function :c"),e("code",{class:"interpreted-text",role:"func"},"sam_serial_dma_poll"),r(" should be called periodically to flush the DMA buffers. Boards can use common :c"),e("code",{class:"interpreted-text",role:"func"},"board_uart_rxdma_poll_init"),r(" function to initialize a timer triggering the poll.")],-1),e("p",null,"There are several modes in which USART peripheral can operate (ISO7816, IrDA, RS485, SPI, LIN and LON). Currently RS485 and SPI master are supported by NuttX.",-1),e("p",null,[r("RS-485 mode is enabled by "),e("code",null,"CONFIG_SAMV7_USARTx_RS485MODE"),r(" option ("),e("code",null,"CONFIG_SAMV7_USART2_SERIALDRIVER"),r(" has to be true). In this case RTS pin is set to logical 1 before the serial driver is opened and board specific logic is required to set it to logical zero. This has to be done in board initialization. Once the driver is opened for the first time, architecture layer takes care of correct settings of RTS pin. There is no additional requirement for driver initialization, the process is the same as with serial mode.")],-1),e("p",null,[r("SPI master (host) mode is enabled by "),e("code",null,"CONFIG_SAMV7_USARTx_SPI_MASTER"),r(" option. In this mode USART emulates SPI peripheral with one slave (client) device (more slaves are not supported by the peripheral). The interface with the driver is the same as with other SPI drivers but BSP layer does not have to support chip selection. Command/data transfers are also not supported by the peripheral. Driver for SPI master mode is initialized by :c"),e("code",null,"sam_serial_spi_initialize"),r('{.interpreted-text role="func"} with port number as an argument.')],-1),e("p",null,[r("USART/UART can be also used to emulate 1 wire interface. SAMv7 MCUs do not have build in support for 1 wire, therefore external hardware as TX/RX connection or optical isolation might be required. Selecting "),e("code",null,"CONFIG_SAMV7_UARTx_1WIREDRIVER"),r(" enables 1 wire driver and sets USART/UART peripheral to this mode. Output pins are configured as if serial mode was selected plus TX is open drain. SAMv7 part of the driver is initialized by :c"),e("code",{class:"interpreted-text",role:"func"},"sam_1wireinitialize"),r(" with port number as an argument.")],-1),t("",6)]))}const C=i(s,[["render",l]]);export{S as __pageData,C as default};
