import{_ as e,c as t,al as a,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"ST Nucleo U5A5ZJ-Q","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32u5/boards/nucleo-u5a5zj-q/index.md","filePath":"en/platforms/arm/stm32u5/boards/nucleo-u5a5zj-q/index.md"}'),r={name:"en/platforms/arm/stm32u5/boards/nucleo-u5a5zj-q/index.md"};function i(s,o,l,u,c,h){return n(),t("div",null,o[0]||(o[0]=[a(`<h1 id="st-nucleo-u5a5zj-q" tabindex="-1">ST Nucleo U5A5ZJ-Q <a class="header-anchor" href="#st-nucleo-u5a5zj-q" aria-label="Permalink to &quot;ST Nucleo U5A5ZJ-Q&quot;">​</a></h1><p>chip:stm32, chip:stm32u5, chip:stm32u5a5</p><p>This page file discusses the port of NuttX to the STMicroelectronics NUCLEO-U5A5ZJ-Q board. That board features the STM32U5A5ZJT6Q MCU with 4MiB of Flash and 2500KiB of SRAM.</p><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>2023-07-16: Initial port - works all ram memory and i2c(not extensively tested) The i2c driver is based on stm32l4 one</p><h2 id="clock-source" tabindex="-1">Clock Source <a class="header-anchor" href="#clock-source" aria-label="Permalink to &quot;Clock Source&quot;">​</a></h2><p>Only the low speed external (LSE) 32.768kHz crystal (X2) is installed in default configurations.</p><blockquote><p>FUNC GPIO</p><hr><p>OSC32_IN PC14 OSC32_OUT PC15</p></blockquote><h2 id="serial-consoles" tabindex="-1">Serial Consoles <a class="header-anchor" href="#serial-consoles" aria-label="Permalink to &quot;Serial Consoles&quot;">​</a></h2><h3 id="virtual-com-port-on-usart1" tabindex="-1">Virtual COM Port on USART1 <a class="header-anchor" href="#virtual-com-port-on-usart1" aria-label="Permalink to &quot;Virtual COM Port on USART1&quot;">​</a></h3><p>Default board is configured to use USART1 as console. USART1 is connected to the ST-LINKV3E Virtual COM port as well as made available on connector CN10 (need some rework on PCB).</p><p>Pins and Connectors:</p><blockquote><p>FUNC GPIO Pin NAME</p><hr><p>TXD: PA9 CN10 14 T.VCP_TX RXD: PA10 CN9 13 T.VCP_RX</p></blockquote><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h3><p>There is only one configuration which can be selected as follow:</p><pre><code>tools/configure.sh nucleo-u5a5zj-q:nsh
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.:</p><pre><code>make menuconfig 
make
</code></pre><p>The &lt;subdir&gt; that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li><p>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should:</p><p>a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository. b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></li><li><p>All of these configurations are set up to build under Linux using the &quot;GNU Tools for ARM Embedded Processors&quot; that is maintained by ARM (unless stated otherwise in the description of the configuration).</p><blockquote><p><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm" target="_blank" rel="noreferrer">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm</a></p></blockquote></li></ol>`,23)]))}const m=e(r,[["render",i]]);export{p as __pageData,m as default};
