import{_ as t,c as i,al as o,j as e,a,o as l}from"./chunks/framework.NFAqBSgQ.js";const x=JSON.parse('{"title":"NXP S32K3XX","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/s32k3xx/index.md","filePath":"en/platforms/arm/s32k3xx/index.md"}'),s={name:"en/platforms/arm/s32k3xx/index.md"};function n(p,r,d,c,u,h){return l(),i("div",null,r[0]||(r[0]=[o('<h1 id="nxp-s32k3xx" tabindex="-1">NXP S32K3XX <a class="header-anchor" href="#nxp-s32k3xx" aria-label="Permalink to &quot;NXP S32K3XX&quot;">​</a></h1><p>The <a href="https://www.nxp.com/products/processors-and-microcontrollers/s32-automotive-platform/s32k-general-purpose-mcus/s32k3-microcontrollers-for-general-purpose:S32K3" target="_blank" rel="noreferrer">S32K3XX series</a> is a family of automotive-grade general-purpose microcontrollers from NXP Semiconductors. The chips are based around single, dual (lock-step) or triple Arm Cortex-M7 cores, running at clockspeeds up to 240 MHz.</p><h2 id="supported-mcus" tabindex="-1">Supported MCUs <a class="header-anchor" href="#supported-mcus" aria-label="Permalink to &quot;Supported MCUs&quot;">​</a></h2><p>The following list includes MCUs from the S32K3XX series and indicates whether they are supported in NuttX:</p><p>MCU Support Cores Frequency</p><hr><p>S32K311 No 1x Cortex-M7 120 MHz S32K312 No 1x Cortex-M7 120 MHz S32K314 Yes* 1x Cortex-M7 160 MHz S32K322 No 2x Cortex-M7 160 MHz S32K324 Yes* 2x Cortex-M7 160 MHz S32K341 No LS Cortex-M7 160 MHz S32K342 No LS Cortex-M7 160 MHz S32K344 Yes* LS Cortex-M7 160 MHz S32K328 No 2x Cortex-M7 160 MHz S32K338 No 3x Cortex-M7 240 MHz S32K348 No LS Cortex-M7 160 MHz S32K358 No LS + 1x Cortex-M7 160 MHz</p><p>| * Same silicon in different configurations. Only a single core is currently being used (no SMP support).</p><h2 id="supported-modules-peripherals" tabindex="-1">Supported Modules &amp; Peripherals <a class="header-anchor" href="#supported-modules-peripherals" aria-label="Permalink to &quot;Supported Modules &amp; Peripherals&quot;">​</a></h2><p>The following list indicates modules and peripherals supported in NuttX. Note that this list does not include all MCU modules. Please refer to the S32K3XX Reference Manual for a complete overview of its features.</p><p>Peripheral Support Comments</p><hr><p>ADC eDMA eMIOS EMAC No Partial No Yes<br> FlexCAN FlexIO GPIO LPCMP Yes No Yes No SocketCAN-compatible LPI2C LPSPI LPUART QSPI RTC SAI Yes Yes Yes Yes No No I2C Master only</p><h3 id="adc" tabindex="-1">ADC <a class="header-anchor" href="#adc" aria-label="Permalink to &quot;ADC&quot;">​</a></h3><p>12-Bit Successive Approximation (SAR) Analog-to-Digital Converter (ADC). No driver support (yet).</p><h3 id="edma" tabindex="-1">eDMA <a class="header-anchor" href="#edma" aria-label="Permalink to &quot;eDMA&quot;">​</a></h3><p>Enhanced Direct Memory Access module. There is a driver that was copied from the S32K1XX and i.MX RT ports. Some modifications have been made to make it work with S32K3XX, but it is far from feature-complete.</p><h3 id="emios" tabindex="-1">eMIOS <a class="header-anchor" href="#emios" aria-label="Permalink to &quot;eMIOS&quot;">​</a></h3><p>The Enhanced Modular IO Subsystem (eMIOS) is a flexible timer and I/O module for real-time control applications. Its channels can be used for (pulse) counters, PWM outputs, input period measurements, and more. There is no driver implementation available (yet).</p><h3 id="emac" tabindex="-1">EMAC <a class="header-anchor" href="#emac" aria-label="Permalink to &quot;EMAC&quot;">​</a></h3><p>10/100/200 Mbit/s Ethernet MAC. Driver is available.</p><h3 id="flexcan" tabindex="-1">FlexCAN <a class="header-anchor" href="#flexcan" aria-label="Permalink to &quot;FlexCAN&quot;">​</a></h3><p>The S32K3XX family has up to 8x FlexCAN modules with CAN FD support. A SocketCAN-compatible driver is available.</p><h3 id="flexio" tabindex="-1">FlexIO <a class="header-anchor" href="#flexio" aria-label="Permalink to &quot;FlexIO&quot;">​</a></h3><p>A configurable module providing a range of functionality like emulation of a variety of serial/parallel communication protocols, flexible 16-bit timers or programmable logic blocks. No driver available.</p><h3 id="gpio" tabindex="-1">GPIO <a class="header-anchor" href="#gpio" aria-label="Permalink to &quot;GPIO&quot;">​</a></h3>',26),e("p",null,[a("Pins can be configured using :c"),e("code",null,"s32k3xx_pinconfig"),a('{.interpreted-text role="func"} function. Writing to pins is done by :c'),e("code",{class:"interpreted-text",role:"func"},"s32k3xx_gpiowrite"),a(" function and reading is done by :c"),e("code",{class:"interpreted-text",role:"func"},"s32k3xx_gpioread"),a(".")],-1),e("p",null,"LPCMP ---",-1),e("p",null,"Analog Comparator. No driver support (yet).",-1),e("h3",{id:"lpi2c",tabindex:"-1"},[a("LPI2C "),e("a",{class:"header-anchor",href:"#lpi2c","aria-label":'Permalink to "LPI2C"'},"​")],-1),e("p",null,[a("Low-Power Inter-Integrated Circuit (I2C) module supporting an interface to an I2C bus as master and/or as a slave. The lower-half of this driver is initialize by calling :c"),e("code",null,"s32k3xx_i2cbus_initialize"),a('{.interpreted-text role="func"}.')],-1),e("h3",{id:"lpspi",tabindex:"-1"},[a("LPSPI "),e("a",{class:"header-anchor",href:"#lpspi","aria-label":'Permalink to "LPSPI"'},"​")],-1),e("p",null,[a("Low-Power Serial Peripheral Interface (SPI) module that supports an interface to an SPI bus as a master and/or a slave. The lower-half of this driver is initialize by calling :c"),e("code",{class:"interpreted-text",role:"func"},"s32k3xx_lpspibus_initialize"),a(".")],-1),o('<h3 id="lpuart" tabindex="-1">LPUART <a class="header-anchor" href="#lpuart" aria-label="Permalink to &quot;LPUART&quot;">​</a></h3><p>Low-Power Universal Asynchronous Receiver/Transmitter (UART) module. UART is initialized automatically during MCU boot.</p><h3 id="qspi" tabindex="-1">QSPI <a class="header-anchor" href="#qspi" aria-label="Permalink to &quot;QSPI&quot;">​</a></h3><p>QuadSPI memory interface for external serial flash devices. A basic driver is available.</p><h3 id="rtc" tabindex="-1">RTC <a class="header-anchor" href="#rtc" aria-label="Permalink to &quot;RTC&quot;">​</a></h3><p>Real-Time Clock module. A driver is not (yet) available.</p><h3 id="sai" tabindex="-1">SAI <a class="header-anchor" href="#sai" aria-label="Permalink to &quot;SAI&quot;">​</a></h3><p>Synchronous Audio Interface for digital audio over I2S (Inter-IC Sound). No driver implemented.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>',10)]))}const f=t(s,[["render",n]]);export{x as __pageData,f as default};
