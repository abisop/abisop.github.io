import{_ as n,c as s,j as e,a as l,o as r}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"USB Device-Side Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/usbdev.md","filePath":"en/components/drivers/special/usbdev.md"}'),d={name:"en/components/drivers/special/usbdev.md"};function t(c,i,u,a,o,v){return r(),s("div",null,i[0]||(i[0]=[e("h1",{id:"usb-device-side-drivers",tabindex:"-1"},[l("USB Device-Side Drivers "),e("a",{class:"header-anchor",href:"#usb-device-side-drivers","aria-label":'Permalink to "USB Device-Side Drivers"'},"â€‹")],-1),e("ul",null,[e("li",null,[e("p",null,[e("code",null,"include/nuttx/usb/usbdev.h"),l(". All structures and APIs needed to work with USB device-side drivers are provided in this header file.")])]),e("li",null,[e("p",null,[e("code",null,"include/nuttx/usb/usbdev_trace.h"),l(". Declarations needed to work with the NuttX USB device driver trace capability. That USB trace capability is detailed in "),e("code",{class:"interpreted-text",role:"ref"},"separate document <usbtrace>"),l(".")])]),e("li",null,[e("p",null,[e("code",null,"struct usbdev_s"),l(". Each USB device controller driver must implement an instance of "),e("code",null,"struct usbdev_s"),l(". This structure is defined in "),e("code",null,"include/nuttx/usb/usbdev.h"),l(".")]),e("p",null,[e("strong",null,"Examples"),l(": "),e("code",null,"arch/arm/src/dm320/dm320_usbdev.c"),l(", "),e("code",null,"arch/arm/src/lpc17xx_40xx/lpc17_40_usbdev.c"),l(", "),e("code",null,"arch/arm/src/lpc214x/lpc214x_usbdev.c"),l(", "),e("code",null,"arch/arm/src/lpc313x/lpc313x_usbdev.c"),l(", and "),e("code",null,"arch/arm/src/stm32/stm32_usbdev.c"),l(".")])]),e("li",null,[e("p",null,[e("code",null,"struct usbdevclass_driver_s"),l(". Each USB device class driver must implement an instance of "),e("code",null,"struct usbdevclass_driver_s"),l(". This structure is also defined in "),e("code",null,"include/nuttx/usb/usbdev.h"),l(".")]),e("p",null,[e("strong",null,"Examples"),l(": "),e("code",null,"drivers/usbdev/pl2303.c"),l(" and "),e("code",null,"drivers/usbdev/usbmsc.c")])]),e("li",null,[e("p",null,[e("strong",null,"Binding USB Device-Side Drivers"),l(". USB device-side controller drivers are not normally directly accessed by user code, but are usually bound to another, higher level USB device class driver. The class driver is then configured to export the USB device functionality. In general, the binding sequence is:")]),e("ol",null,[e("li",null,[e("p",null,"Each USB device class driver includes an initialization entry point that is called from the application at initialization time."),e("p",null,[e("strong",null,"Examples"),l(": The function "),e("code",null,"usbdev_serialinitialize()"),l(" in the file "),e("code",null,"drivers/usbdev/pl2303.c"),l(" and the function in the file "),e("code",null,"drivers/usbdev/usbmsc.c")])]),e("li",null,[e("p",null,[l("These initialization functions called the driver API, "),e("code",null,"usbdev_register()"),l(". This driver function will "),e("em",null,"bind"),l(" the USB class driver to the USB device controller driver, completing the initialization.")])])])])],-1)]))}const b=n(d,[["render",t]]);export{h as __pageData,b as default};
