import{_ as t,c as o,al as a,o as n}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"mml_parser Music Macro Language (MML) Parser library","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/audioutils/mml_parser/index.md","filePath":"en/applications/audioutils/mml_parser/index.md"}'),s={name:"en/applications/audioutils/mml_parser/index.md"};function i(r,e,d,l,c,u){return n(),o("div",null,e[0]||(e[0]=[a(`<h1 id="mml-parser-music-macro-language-mml-parser-library" tabindex="-1"><code>mml_parser</code> Music Macro Language (MML) Parser library <a class="header-anchor" href="#mml-parser-music-macro-language-mml-parser-library" aria-label="Permalink to &quot;\`mml_parser\` Music Macro Language (MML) Parser library&quot;">​</a></h1><p>MML has often been used as a language for describing music in strings, for example, in the BASIC language. The mml_parser is a minimalistic Music Macro Language parser library written in pure C intended for resource-constrained platforms, especially microcontrollers and other embedded systems.</p><h2 id="supported-syntax-on-this-library" tabindex="-1">Supported Syntax on this library <a class="header-anchor" href="#supported-syntax-on-this-library" aria-label="Permalink to &quot;Supported Syntax on this library&quot;">​</a></h2><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><ul><li><strong>C</strong> (Do)</li><li><strong>D</strong> (Re)</li><li><strong>E</strong> (Mi)</li><li><strong>F</strong> (Fa)</li><li><strong>G</strong> (Sol)</li><li><strong>A</strong> (La)</li><li><strong>B</strong> (Ti)</li></ul><h3 id="sharp-and-flat" tabindex="-1">Sharp and Flat <a class="header-anchor" href="#sharp-and-flat" aria-label="Permalink to &quot;Sharp and Flat&quot;">​</a></h3><p>Add &quot;#&quot; or &quot;+&quot; after the note indicates Sharp. ex: <code>&quot;C#&quot;</code> <code>&quot;C+.&quot;</code> Add &quot;-&quot; after the note indicates Flat. ex: <code>&quot;C-&quot;</code></p><h3 id="length" tabindex="-1">Length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;Length&quot;">​</a></h3><p>Length of the tone can be specified in two ways. One is to specify a length for each note. Add a number after the note in 1, 2, 4, 8, 16, 32 or 64. ex: <code>&quot;C8 C16 C#4.&quot;</code></p><p>The other is to use <code>L</code> . The <code>L</code> sets default length. If the note without length, the number which is indicated by the &quot;L&quot; is used. The number followed after the &quot;L&quot; can be in 1, 2, 4, 8, 16, 32 or 64. ex: <code>&quot;L4 A&quot;</code> means &quot;A&quot; with length 4.</p><p>In addition, dot is supported. For example, length of &quot;C4.&quot; is 4 + 8. Length of &quot;C16..&quot; is 4 + 8 + 16.</p><h3 id="rest" tabindex="-1">Rest <a class="header-anchor" href="#rest" aria-label="Permalink to &quot;Rest&quot;">​</a></h3><p>Rest is represented by &quot;R&quot;. Length of the rest is following after the &quot;R&quot; as the same as the note length. If no length is specified, the length specified by the &quot;L&quot; is used.</p><h3 id="chord" tabindex="-1">Chord <a class="header-anchor" href="#chord" aria-label="Permalink to &quot;Chord&quot;">​</a></h3><p>Chord is supported. If some notes are enclosed in parentheses by <code>[</code> and <code>]</code>, they are interpreted as a chord. ex: <code>&quot;[CEG]&quot;</code> is a chord of Do, Mi and Sol. Chord&#39;s length can be put after <code>]</code> . ex: <code>&quot;[CEG]4&quot;</code> is a chord with 4 length.</p><p>Note: Max notes in a chord is defined as MAX_CHORD_NOTES in <code>mml_parser.h</code>.</p><h3 id="tuplet" tabindex="-1">Tuplet <a class="header-anchor" href="#tuplet" aria-label="Permalink to &quot;Tuplet&quot;">​</a></h3><p>Tuplet is supported. If some notes and Chord are enclosed in parentheses by <code>{</code> and <code>}</code>, they are interpreted as a tuplet. ex: <code>&quot;{C E G [CEG]}&quot;</code> is a tuplet with C, E, G and chord of CEG. Tuplet&#39;s length can be put after &quot;}&quot;, and the length is divided equally among each note. ex: in <code>&quot;{C E G [CEG]}4&quot;</code> case, C, E, G and chord CEG has each a quarter of the L4 length.</p><h3 id="octave" tabindex="-1">Octave <a class="header-anchor" href="#octave" aria-label="Permalink to &quot;Octave&quot;">​</a></h3><p>Octarve is controlled by &quot;O&quot;, &quot;&gt;&quot; or &quot;&lt;&quot;. When &quot;O&quot; is used, the O is followed by a number indicating the octave. When &quot;&gt;&quot; is used, the value of the new octave is the current octave plus one. When &quot;&lt;&quot; is used, the value of the new octave is the current octave minus one. ex: <code>&quot;CDEFGAB &gt; C R C &lt; BAGFEDC&quot;</code>, <code>&quot;O4 CDEFGAB O5 C R C O4 BAGFEDC&quot;</code></p><h3 id="tempo" tabindex="-1">Tempo <a class="header-anchor" href="#tempo" aria-label="Permalink to &quot;Tempo&quot;">​</a></h3><p>Tempo is indicated as &quot;T&quot; and numter following after the &quot;T&quot;. Tempo number decide a speed of the score. This value is used for culculating sample number for the note (or rest). ex: <code>&quot;T120&quot;</code></p><h3 id="volume" tabindex="-1">Volume <a class="header-anchor" href="#volume" aria-label="Permalink to &quot;Volume&quot;">​</a></h3><p>Volume can be controlled by &quot;V&quot;. And numter following after the &quot;V&quot;. ex: <code>&quot;V4&quot;</code></p><h2 id="example-of-a-score" tabindex="-1">Example of a score <a class="header-anchor" href="#example-of-a-score" aria-label="Permalink to &quot;Example of a score&quot;">​</a></h2><h3 id="the-beginning-of-the-do-re-mi-song" tabindex="-1">The beginning of the Do Re Mi Song <a class="header-anchor" href="#the-beginning-of-the-do-re-mi-song" aria-label="Permalink to &quot;The beginning of the Do Re Mi Song&quot;">​</a></h3><p>Tempo 120, Voulume 10, Octave 4, Default length is 4.</p><p><code>&quot;T120 V10 O4 L4 C. D8 E. C8 E C E2 D. E8 {FF} {ED} F2&quot;</code></p><h2 id="provided-c-functions" tabindex="-1">Provided C Functions <a class="header-anchor" href="#provided-c-functions" aria-label="Permalink to &quot;Provided C Functions&quot;">​</a></h2><p>mml_parser is providing just 2 functions.</p><h3 id="init-mml" tabindex="-1">init_mml() <a class="header-anchor" href="#init-mml" aria-label="Permalink to &quot;init\\_mml()&quot;">​</a></h3><p>Initialize an instance of mml parser.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;audioutils/mml_parser.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int init_mml(FAR struct music_macro_lang_s *mml,</span></span>
<span class="line"><span>             int fs, int tempo, int octave, int length);</span></span></code></pre></div><p>The function initializes <code>struct music_macro_lang_s</code> instance provided as 1st argument. The argument <code>fs</code> is a sampling frequency of target audio output system, and this value is used for calculating sample number in case of a tempo and length of note. <code>tempo</code>, <code>octave</code> and <code>length</code> specify initial values for tempo, octave, and length, respectively.</p><p>On success, init_mml() returns 0. On error, it returns an negative value.</p><p>Currently no error is happened.</p><h3 id="parse-mml" tabindex="-1">parse_mml() <a class="header-anchor" href="#parse-mml" aria-label="Permalink to &quot;parse\\_mml()&quot;">​</a></h3><p>Parse MML from given string.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;audioutils/mml_parser.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int parse_mml(FAR struct music_macro_lang_s *mml,</span></span>
<span class="line"><span>             FAR char **score, FAR struct mml_result_s *result);</span></span></code></pre></div><p>parse_mml() parses the first MML of the string given by the argument <code>score</code> and gives the result in the return value and the argument <code>result</code>. The <code>result</code> is an instance of mml_result_s, which contains note_idx, length, and chord_notes as members. The meaning of the value of each member depends on the return value.</p><p>On error, a nevative value is returned. On success, following values can be returned. And those values are defined in <code>mml_parser.h</code>.</p><p>Return values Description</p><hr><p>MML_TYPE_EOF This means that it have reached the end of the string. The content of the <code>result</code> has no meaning. MML_TYPE_NOTE This indicates that some note has been parsed. The scale of the note is stored in <code>note_idx[0]</code>. The length of the note is given by the <code>length</code> member as the number of samples. In the case of tuplet, this return value is returned at the time each note is parsed. In other words, a tuplet is parsed as a single note. MML_TYPE_REST This indicates the <code>rest</code> has been parsed. The length of it is given by the <code>length</code> member as the number of samples. MML_TYPE_TEMPO This indicates <code>&quot;T&quot;</code> is parsed. <code>length</code> member in <code>result</code> has the value of the tempo. But tempo value is kept in mml instance for calculating sample number for each notes. So basically, no need to handle this return value in your code. MML_TYPE_LENGTH This indicates <code>&quot;L&quot;</code> is parsed. <code>length</code> member in <code>result</code> has the value of the parsed length. But current length value is kept in mml instance. So basically, no need to handle this return value in your code. | MML_TYPE_OCTAVE This indicates <code>&quot;O&quot;</code>, <code>&quot;&gt;&quot;</code>, or <code>&quot;&lt;&quot;</code> is parsed. <code>length</code> member in <code>result</code> has the value of the octave. But the octave is encoded in <code>note_idx</code> in <code>MML_TYPE_NOTE</code> case. So basically, no need to handle this return value in your code. MML_TYPE_TUPLETSTART This indicates tuplet is just started. And total length of the tuplet is stored in <code>length</code> of <code>result</code> members. MML_TYPE_TUPLETDONE This indicates the tuplet is just finished. MML_TYPE_VOLUME This indicates <code>&quot;V&quot;</code> is parsed. <code>length</code> member in <code>result</code> has the value of the parsed volume. MML_TYPE_TONE T.B.D. MML_TYPE_CHORD This indicates a chord is parsed. Chord has some notes, and how many notes is stored in <code>chord_notes</code> member of <code>result</code>. And each notes are stored in <code>note_idx[]</code>. Length of the chord is stored in <code>length</code> member of <code>result</code>.</p><p>The value of <code>note_idx[]</code> is encoding octave, like</p><p>Octave Note node_idx value</p><hr><p>O0 C 0 O0 C# 1 O0 D 2 O0 D# 3 O0 E 4 O0 F 5 O0 F# 6 O0 G 7 O0 G# 8 O0 A 9 O0 A# 10 O0 B 11 O1 C 12</p><p>And so on.</p><p>So for example, G# at Octave 4 is encoded as 56.</p><p>Following error code can be received as return value.</p><p>Error code Description</p><hr><p>MML_TYPE_NOTE_ERROR MML_TYPE_REST_ERROR MML_TYPE_TEMPO_ERROR MML_TYPE_LENGTH_ERROR MML_TYPE_OCTAVE_ERROR MML_TYPE_VOLUME_ERROR MML_TYPE_TUPLET_ERROR MML_TYPE_TONE_ERROR MML_TYPE_CHORD_ERROR MML_TYPE_ILLIGAL_COMPOSITION MML_TYPE_ILLIGAL_TOOMANY_NOTES MML_TYPE_ILLIGAL_TOOFEW_NOTES MML_TYPE_ILLIGAL_DOUBLE_TUPLET</p><h2 id="running-unit-tests" tabindex="-1">Running unit tests <a class="header-anchor" href="#running-unit-tests" aria-label="Permalink to &quot;Running unit tests&quot;">​</a></h2><p>Please see examples/mml_parser</p><h2 id="bugs" tabindex="-1">Bugs <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;Bugs&quot;">​</a></h2><p>There are plenty. Report them on GitHub, or - even better - open a pull request. Please write unit tests for any new functions you add - it&#39;s fun!</p><h2 id="author" tabindex="-1">Author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;Author&quot;">​</a></h2><p>mml_parser was written by Takayoshi Koizumi &lt;takayoshi.&lt;<a href="mailto:koizumi@gmail.com" target="_blank" rel="noreferrer">koizumi@gmail.com</a>%3E&gt;;</p>`,60)]))}const m=t(s,[["render",i]]);export{p as __pageData,m as default};
