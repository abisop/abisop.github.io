import{_ as a,c as s,al as n,o as t}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"RN2XX3","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/wireless/rn2xx3.md","filePath":"en/components/drivers/special/wireless/rn2xx3.md"}'),i={name:"en/components/drivers/special/wireless/rn2xx3.md"};function o(p,e,l,r,d,c){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="rn2xx3" tabindex="-1">RN2XX3 <a class="header-anchor" href="#rn2xx3" aria-label="Permalink to &quot;RN2XX3&quot;">​</a></h1><p>This driver provides support for the RN2XX3 family of LoRa radio transceivers by Microchip. This includes both the RN2903 and RN2483 modules.</p><p>Warning</p><p>This driver only contains preliminary support for a few &#39;radio set&#39; commands and raw radio transmit/receive. There is no support for the LoRaWAN stack yet. IT IS EXPERIMENTAL.</p><h2 id="application-programming-interface" tabindex="-1">Application Programming Interface <a class="header-anchor" href="#application-programming-interface" aria-label="Permalink to &quot;Application Programming Interface&quot;">​</a></h2><p>To register the device for use, you will need to enable the standard upper half serial drivers (<code>CONFIG_STANDARD_SERIAL</code>), since the RN2XX3 driver requires the path to the UART interface the module is connected to.</p><p>You will also need to ensure that the baud rate of the UART interface is set to 57600, which is the baud rate of the RN2XX3.</p><p>At registration time, the driver will automatically determine if the device is the RN2903 or RN2483.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;nuttx/wireless/lpwan/rn2xx3.h&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ifdef CONFIG_LPWAN_RN2XX3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/* Register the RN2XX3 device driver */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ret = rn2xx3_register(&quot;/dev/rn2903&quot;, &quot;/dev/ttyS1&quot;);</span></span>
<span class="line"><span>if (ret &lt; 0) {</span></span>
<span class="line"><span>  syslog(LOG_ERR, &quot;Failed to register RN2XX3 device driver: %d\\n&quot;, ret);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><p>This driver uses the standard POSIX character device interface, implementing <code>read()</code>, <code>write()</code> and <code>ioctl()</code>.</p><p>To transmit, the <code>write()</code> function can be used. Bytes in the provided buffer will be transmitted as a packet. This has the following behaviour:</p><ul><li>If the radio is in FSK modulation mode, packets will only contain up to 64 bytes. A buffer of more than 64 bytes will only have 64 bytes transmitted.</li><li>If the radio is in LoRa modulation mode, packets will only contain up to 255 bytes.</li><li>If the buffer contains less than the current packet size limit (64 or 255 bytes), its contents will be transmitted as a single packet.</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int radio = open(&quot;/dev/rn2903&quot;, O_RDWR);</span></span>
<span class="line"><span>if (radio &lt; 0)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    fprintf(stderr, &quot;Couldn&#39;t open radio: %d\\n&quot;, errno);</span></span>
<span class="line"><span>    return -1;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span> char message[] = &quot;Hello, world!&quot;;</span></span>
<span class="line"><span> ssize_t b_sent = write(radio, message, sizeof(message));</span></span>
<span class="line"><span> if (b_sent &lt; 0)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>     fprintf(stderr, &quot;Couldn&#39;t transmit: %d\\n&quot;, errno);</span></span>
<span class="line"><span>     return -1;</span></span>
<span class="line"><span>   }</span></span></code></pre></div><p>To receive, the <code>read()</code> function can be used. As much of the received packet as possible will be stored in the user buffer. This has the following behaviour:</p><ul><li>If the buffer is too small to contain the full received packet, as much of the packet as possible will be stored in the buffer.</li><li>When the packet is fully read, <code>read()</code> will return <code>0</code>.</li><li>If only part of the packet has been read and a call to <code>write()</code> or <code>ioctl()</code> is made, the remainder of the packet is discarded.</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int radio = open(&quot;/dev/rn2903&quot;, O_RDWR);</span></span>
<span class="line"><span>if (radio &lt; 0)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    fprintf(stderr, &quot;Couldn&#39;t open radio: %d\\n&quot;, errno);</span></span>
<span class="line"><span>    return -1;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span> char buffer[16];</span></span>
<span class="line"><span> ssize_t b_read;</span></span>
<span class="line"><span></span></span>
<span class="line"><span> do {</span></span>
<span class="line"><span>     b_read = read(radio, buffer, sizeof(buffer));</span></span>
<span class="line"><span>     if (b_read &lt; 0)</span></span>
<span class="line"><span>       {</span></span>
<span class="line"><span>         fprintf(stderr, &quot;Couldn&#39;t receive: %d\\n&quot;, errno);</span></span>
<span class="line"><span>         return -1;</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>     write(0, buffer, b_read); /* Print received bytes to stdout */</span></span>
<span class="line"><span> } while (b_read != 0);</span></span></code></pre></div><p>Finally, the <code>ioctl()</code> interface provides access to some underlying module commands.</p><h3 id="wlioc-getsnr" tabindex="-1"><code>WLIOC_GETSNR</code> <a class="header-anchor" href="#wlioc-getsnr" aria-label="Permalink to &quot;\`WLIOC_GETSNR\`&quot;">​</a></h3><p>Gets the signal to noise ration of the last received packet. If no packets have been received, it will default to -128. Argument is a pointer to an <code>int8_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int8_t snr;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETSNR, &amp;snr);</span></span></code></pre></div><h3 id="wlioc-setradiofreq" tabindex="-1"><code>WLIOC_SETRADIOFREQ</code> <a class="header-anchor" href="#wlioc-setradiofreq" aria-label="Permalink to &quot;\`WLIOC_SETRADIOFREQ\`&quot;">​</a></h3><p>Sets the operating frequency of the radio module. The argument is the desired frequency in Hz (<code>uint32_t</code>).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = ioctl(radio, WLIOC_SETRADIOFREQ, 902400000);</span></span></code></pre></div><h3 id="wlioc-getradiofreq" tabindex="-1"><code>WLIOC_GETRADIOFREQ</code> <a class="header-anchor" href="#wlioc-getradiofreq" aria-label="Permalink to &quot;\`WLIOC_GETRADIOFREQ\`&quot;">​</a></h3><p>Gets the current operating frequency of the radio module in Hz. The argument is a pointer to a <code>uint32_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint32_t freq;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETRADIOFREQ, &amp;freq);</span></span></code></pre></div><h3 id="wlioc-settxpowerf" tabindex="-1"><code>WLIOC_SETTXPOWERF</code> <a class="header-anchor" href="#wlioc-settxpowerf" aria-label="Permalink to &quot;\`WLIOC_SETTXPOWERF\`&quot;">​</a></h3><p>Sets the transmission power of the radio. Argument is a pointer to a <code>int32_t</code> containing the desired transmission power in 0.01 dBm. After setting the transmission power successfully, this pointer will contain the new transmission power. This value may be different from the desired value, but will be the closest available setting that is greater than or equal to the desired value.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int32_t txpower = 1200;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_SETTXPOWERF, &amp;txpower);</span></span>
<span class="line"><span>printf(&quot;Actual TX power: %.2f dBm\\n&quot;, txpower / 100.0f);</span></span></code></pre></div><h3 id="wlioc-gettxpowerf" tabindex="-1"><code>WLIOC_GETTXPOWERF</code> <a class="header-anchor" href="#wlioc-gettxpowerf" aria-label="Permalink to &quot;\`WLIOC_GETTXPOWERF\`&quot;">​</a></h3><p>Gets the current transmission power level in 0.01 dBm. The argument is a pointer to a <code>int32_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int32_t txpwr;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETTXPOWER, &amp;txpwr);</span></span></code></pre></div><h3 id="wlioc-setbandwidth" tabindex="-1"><code>WLIOC_SETBANDWIDTH</code> <a class="header-anchor" href="#wlioc-setbandwidth" aria-label="Permalink to &quot;\`WLIOC_SETBANDWIDTH\`&quot;">​</a></h3><p>Sets the operating bandwidth of the radio module. The argument is the desired bandwidth in kHz (<code>uint32_t</code>). The radio only supports exact values of 125, 250 and 500.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = ioctl(radio, WLIOC_SETBANDWIDTH, 250);</span></span></code></pre></div><h3 id="wlioc-getbandwidth" tabindex="-1"><code>WLIOC_GETBANDWIDTH</code> <a class="header-anchor" href="#wlioc-getbandwidth" aria-label="Permalink to &quot;\`WLIOC_GETBANDWIDTH\`&quot;">​</a></h3><p>Gets the current operating bandwidth of the radio module in kHz. The argument is a pointer to a <code>uint32_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint32_t bandwidth;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETBANDWIDTH, &amp;bandwidth);</span></span></code></pre></div><h3 id="wlioc-setspread" tabindex="-1"><code>WLIOC_SETSPREAD</code> <a class="header-anchor" href="#wlioc-setspread" aria-label="Permalink to &quot;\`WLIOC_SETSPREAD\`&quot;">​</a></h3><p>Sets the operating spread factor of the radio module. The argument is a <code>uint8_t</code> containing the desired spread factor between 7 and 12 (inclusive).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = ioctl(radio, WLIOC_SETSPREAD, 8);</span></span></code></pre></div><h3 id="wlioc-getspread" tabindex="-1"><code>WLIOC_GETSPREAD</code> <a class="header-anchor" href="#wlioc-getspread" aria-label="Permalink to &quot;\`WLIOC_GETSPREAD\`&quot;">​</a></h3><p>Gets the current operating spread factor of the radio module. The argument is a pointer to a <code>uint8_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint8_t spread;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETSPREAD, &amp;spread);</span></span></code></pre></div><h3 id="wlioc-setprlen" tabindex="-1"><code>WLIOC_SETPRLEN</code> <a class="header-anchor" href="#wlioc-setprlen" aria-label="Permalink to &quot;\`WLIOC_SETPRLEN\`&quot;">​</a></h3><p>Sets the operating preamble length of the radio module. The argument is a <code>uint16_t</code> containing the desired preamble length.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = ioctl(radio, WLIOC_SETPRLEN, 8);</span></span></code></pre></div><h3 id="wlioc-getprlen" tabindex="-1"><code>WLIOC_GETPRLEN</code> <a class="header-anchor" href="#wlioc-getprlen" aria-label="Permalink to &quot;\`WLIOC_GETPRLEN\`&quot;">​</a></h3><p>Gets the current operating preamble length of the radio module. The argument is a pointer to a <code>uint16_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint16_t prlen;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETPRLEN, &amp;prlen);</span></span></code></pre></div><h3 id="wlioc-setmod" tabindex="-1"><code>WLIOC_SETMOD</code> <a class="header-anchor" href="#wlioc-setmod" aria-label="Permalink to &quot;\`WLIOC_SETMOD\`&quot;">​</a></h3><p>Sets the operating modulation of the radio module. The argument is one of the values in <code>enum rn2xx3_mod_e</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = ioctl(radio, WLIOC_SETMOD, RN2XX3_MOD_FSK);</span></span></code></pre></div><h3 id="wlioc-getmod" tabindex="-1"><code>WLIOC_GETMOD</code> <a class="header-anchor" href="#wlioc-getmod" aria-label="Permalink to &quot;\`WLIOC_GETMOD\`&quot;">​</a></h3><p>Gets the current operating modulation of the radio module. The argument is a pointer to an <code>enum rn2xx3_mod_e</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>enum rn2xx3_mod_e modulation;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETMOD, &amp;modulation);</span></span>
<span class="line"><span>if (modulation == RN2XX3_MOD_LORA)</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    printf(&quot;LoRa modulation!\\n&quot;);</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h3 id="wlioc-reset" tabindex="-1"><code>WLIOC_RESET</code> <a class="header-anchor" href="#wlioc-reset" aria-label="Permalink to &quot;\`WLIOC_RESET\`&quot;">​</a></h3><p>Resets the RN2xx3 radio module. This command takes no arguments.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>err = ioctl(radio, WLIOC_RESET, 0);</span></span></code></pre></div><h3 id="wlioc-setsync" tabindex="-1"><code>WLIOC_SETSYNC</code> <a class="header-anchor" href="#wlioc-setsync" aria-label="Permalink to &quot;\`WLIOC_SETSYNC\`&quot;">​</a></h3><p>Sets the sync word parameter of the RN2xx3 module. The argument is a pointer to a <code>uint64_t</code>. Please note that when operating using FSK modulation, the sync word can be a full 8 bytes (64 bits), but LoRa modulation only accepts a single byte sync word.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* Radio in FSK mode prior to this call */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>uint64_t syncword = 0xdeadbeefdeadbeef;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_SETSYNC, &amp;syncword);</span></span></code></pre></div><h3 id="wlioc-getsync" tabindex="-1"><code>WLIOC_GETSYNC</code> <a class="header-anchor" href="#wlioc-getsync" aria-label="Permalink to &quot;\`WLIOC_GETSYNC\`&quot;">​</a></h3><p>Gets the sync word parameter of the RN2xx3 module. The argument is a pointer to a <code>uint64_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint64_t syncword;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETSYNC, &amp;syncword);</span></span></code></pre></div><h3 id="wlioc-setbitrate" tabindex="-1"><code>WLIOC_SETBITRATE</code> <a class="header-anchor" href="#wlioc-setbitrate" aria-label="Permalink to &quot;\`WLIOC_SETBITRATE\`&quot;">​</a></h3><p>Sets the bit rate of the RN2xx3 module. The argument is a <code>uint32_t</code>. The bit rate only applies to the module when it is in FSK modulation mode, and it must be between 1 - 300000.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* Radio in FSK mode prior to this call */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_SETBITRATE, 300000);</span></span></code></pre></div><h3 id="wlioc-getbitrate" tabindex="-1"><code>WLIOC_GETBITRATE</code> <a class="header-anchor" href="#wlioc-getbitrate" aria-label="Permalink to &quot;\`WLIOC_GETBITRATE\`&quot;">​</a></h3><p>Gets the configured bit rate of the RN2xx3 module. The argument is a pointer to a <code>uint32_t</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>uint32_t bitrate;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETBITRATE, &amp;bitrate);</span></span></code></pre></div><h3 id="wlioc-iqien" tabindex="-1"><code>WLIOC_IQIEN</code> <a class="header-anchor" href="#wlioc-iqien" aria-label="Permalink to &quot;\`WLIOC_IQIEN\`&quot;">​</a></h3><p>Enables the invert IQ functionality of the module. The argument is boolean of either true (non-zero) or false (zero).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* Enables IQI */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_IQIEN, 1);</span></span></code></pre></div><h3 id="wlioc-crcen" tabindex="-1"><code>WLIOC_CRCEN</code> <a class="header-anchor" href="#wlioc-crcen" aria-label="Permalink to &quot;\`WLIOC_CRCEN\`&quot;">​</a></h3><p>Enables adding a CRC header to packets. The argument is a boolean of either true (non-zero) or false (zero).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* Enables CRC */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_CRCEN, 1);</span></span></code></pre></div><h3 id="wlioc-setcoderate" tabindex="-1"><code>WLIOC_SETCODERATE</code> <a class="header-anchor" href="#wlioc-setcoderate" aria-label="Permalink to &quot;\`WLIOC_SETCODERATE\`&quot;">​</a></h3><p>Sets the coding rate of the RN2xx3 module. The argument is one of the values in <code>enum rn2xx3_cr_e</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/* Sets 4/7 coding rate */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_SETCODERATE, RN2XX3_CR_4_7);</span></span></code></pre></div><h3 id="wlioc-getcoderate" tabindex="-1"><code>WLIOC_GETCODERATE</code> <a class="header-anchor" href="#wlioc-getcoderate" aria-label="Permalink to &quot;\`WLIOC_GETCODERATE\`&quot;">​</a></h3><p>Gets the currently configured coding rate of the RN2xx3 module. The argument is a pointer to an <code>enum rn2xx3_cr_e</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>enum rn2xx3_cr_e coderate;</span></span>
<span class="line"><span>err = ioctl(radio, WLIOC_GETCODERATE, &amp;coderate);</span></span></code></pre></div>`,83)]))}const b=a(i,[["render",o]]);export{u as __pageData,b as default};
