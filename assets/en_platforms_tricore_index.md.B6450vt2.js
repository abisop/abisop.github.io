import{_ as i,c as r,al as c,o}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"TriCore","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/tricore/index.md","filePath":"en/platforms/tricore/index.md"}'),t={name:"en/platforms/tricore/index.md"};function a(s,e,n,p,d,h){return o(),r("div",null,e[0]||(e[0]=[c(`<h1 id="tricore" tabindex="-1">TriCore <a class="header-anchor" href="#tricore" aria-label="Permalink to &quot;TriCore&quot;">​</a></h1><p>All TriCore source reside in lower-level common, chip-specific, and architecture-specific directories.</p><h2 id="arch-tricore-src-common-directory" tabindex="-1">arch/tricore/src/common/ Directory <a class="header-anchor" href="#arch-tricore-src-common-directory" aria-label="Permalink to &quot;arch/tricore/src/common/ Directory&quot;">​</a></h2><p>This directory holds source files common to all TriCore architectures.</p><h2 id="architecture-specific-directories" tabindex="-1">Architecture-Specific Directories <a class="header-anchor" href="#architecture-specific-directories" aria-label="Permalink to &quot;Architecture-Specific Directories&quot;">​</a></h2><p>Architecture-specific directories hold common source files shared for by implementations of specific TriCore architectures.</p><p><code>TriCore</code></p><p>: This directory holds logic appropriate for any instantiation of the 32-bit TriCore architecture.</p><h2 id="chip-specific-directories" tabindex="-1">Chip-Specific directories <a class="header-anchor" href="#chip-specific-directories" aria-label="Permalink to &quot;Chip-Specific directories&quot;">​</a></h2><p>For SoC chips, in particular, on-chip devices and differing interrupt structures may require special, chip-specific definitions in these chip-specific directories.</p><p>The core Chip implementation is based on Infineon Low Level Drivers (iLLDs). The unified API is more friendly to developers familiar with Infineon SDK/HAL. We can get more code examples on Infineon&#39;s official Github: <a href="https://github.com/Infineon/AURIX_code_examples" target="_blank" rel="noreferrer">AURIX_code_examples</a></p><p><code>TC3xx</code></p><p>: This is the implementation of NuttX on the Infineon&#39;s AURIX™- TC3xx microcontroller family.</p><pre><code>&gt; */*
</code></pre>`,14)]))}const m=i(t,[["render",a]]);export{f as __pageData,m as default};
