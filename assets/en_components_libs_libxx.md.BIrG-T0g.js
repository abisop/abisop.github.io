import{_ as t,c as a,al as i,o as s}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"libxx","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/libs/libxx.md","filePath":"en/components/libs/libxx.md"}'),o={name:"en/components/libs/libxx.md"};function n(l,e,p,r,d,c){return s(),a("div",null,e[0]||(e[0]=[i(`<h1 id="libxx" tabindex="-1">libxx <a class="header-anchor" href="#libxx" aria-label="Permalink to &quot;libxx&quot;">​</a></h1><p>This directory contains three C++ library:</p><ul><li><p>A fragmentary C++ library that will allow to build only the simplest of C++ applications. In the deeply embedded world, that is probably all that is necessary.</p><p>At present, only the following are supported here:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void *operator new(std::size_t nbytes)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void operator delete(void* ptr)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void operator delete[](void *ptr)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void __cxa_pure_virtual(void)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int __aeabi_atexit(void* object, void (*destroyer)(void*), void *dso_handle)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int __cxa_atexit(__cxa_exitfunc_t func, FAR void *arg, FAR void *dso_handle)</span></span></code></pre></div><p>This implementation is selected when neither of the following two options are enabled.</p></li><li><p>LLVM &quot;libc++&quot; C++ library (<a href="http://libcxx.llvm.org/" target="_blank" rel="noreferrer">http://libcxx.llvm.org/</a>) This implementation is selected with CONFIG_LIBCXX=y.</p></li><li><p>uClibc++ C++ library (<a href="http://cxx.uclibc.org/" target="_blank" rel="noreferrer">http://cxx.uclibc.org/</a>) This implementation is selected with CONFIG_UCLIBCXX=y.</p></li></ul><h2 id="operator-new" tabindex="-1">operator new <a class="header-anchor" href="#operator-new" aria-label="Permalink to &quot;operator new&quot;">​</a></h2><p>This operator should take a type of <code>size_t</code>. But size_t has an unknown underlying type. In the nuttx <code>sys/types.h</code> header file, <code>size_t</code> is typed as <code>uint32_t</code> (which is determined by architecture-specific logic). But the C++ compiler may believe that <code>size_t</code> is of a different type resulting in compilation errors in the operator. Using the underlying integer type instead of size_t seems to resolve the compilation issues. Need to REVISIT this.</p><p>Once some C++ compilers, this will cause an error:</p><pre><code>Problem:     &quot;&#39;operator new&#39; takes size_t (&#39;...&#39;) as first parameter&quot;
Workaround:  Add -fpermissive to the compilation flags
</code></pre>`,7)]))}const u=t(o,[["render",n]]);export{b as __pageData,u as default};
