import{_ as o,c as t,al as i,o as r}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"modbus FreeModBus port","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/industry/modbus/index.md","filePath":"en/applications/industry/modbus/index.md"}'),d={name:"en/applications/industry/modbus/index.md"};function n(s,e,a,l,c,u){return r(),t("div",null,e[0]||(e[0]=[i(`<h1 id="modbus-freemodbus-port" tabindex="-1"><code>modbus</code> FreeModBus port <a class="header-anchor" href="#modbus-freemodbus-port" aria-label="Permalink to &quot;\`modbus\` FreeModBus port&quot;">​</a></h1><p>This directory contains a port of last open source version of FreeModBus (BSD license). The code in this directory is a subset of FreeModBus version 1.5.0 (June 6, 2010) that can be downloaded in its entirety from <a href="http://developer.berlios.de/project/showfiles.php?group_id=6120" target="_blank" rel="noreferrer">http://developer.berlios.de/project/showfiles.php?group_id=6120</a>.</p><p>Includes extensions to support RTU master mode by Armink(<a href="mailto:383016632@qq.com" target="_blank" rel="noreferrer">383016632@qq.com</a>): <a href="https://github.com/armink/FreeModbus_Slave-Master-RTT-STM32" target="_blank" rel="noreferrer">https://github.com/armink/FreeModbus_Slave-Master-RTT-STM32</a>. Ported to NuttX by Darcy Gong.</p><h2 id="directory-structure-relation-to-freemodbus-v1-5-0" tabindex="-1">Directory Structure / Relation to freemodbus-v1.5.0 <a class="header-anchor" href="#directory-structure-relation-to-freemodbus-v1-5-0" aria-label="Permalink to &quot;Directory Structure / Relation to freemodbus-v1.5.0&quot;">​</a></h2><p>The original FreeModBus download consists of several directories. This subset takes only the contents of one directory, <code>modbus/</code>, that implements the core modbus logic and integrates that directory into the NuttX build system. The mapping between <code>freemodbus-v1.5.0</code> and the nuttx directories is shown below:</p><pre><code>--------------------------- ----------------------------------------------
freemodbus-v1.5.0           NuttX
--------------------------- ----------------------------------------------
 All top level .txt files    Not included
 demo/                       Not included. This directory contains demo
                             and porting code for a variety of platforms.
                             The NuttX demo was ported from the LINUX
                             demo in this directory and can be found at
                             apps/examples/modbus.
 doc/                        Not included. This directory contains Doxygen
                             support files.
 modbus/                     Included in its entirety in various locations:
         ascii                  apps/modbus/ascii
         functions              apps/modbus/functions
         include                apps/include/modbus
         mb.c                   apps/modbus/mb.c
         rtu                    apps/modbus/rtu
         tcp                    apps/modbus/tcp
 tools/                      Not included. This directory contains Doxygen
                             tools.
--------------------------- ----------------------------------------------
</code></pre><p>So this directory is equivalent to the <code>freemodbus-v1.5.0/modbus</code> directory except that (1) it may include modifications for the integration with NuttX and (2) the modbus/include directory was moved to <code>apps/modbus</code>.</p><p>The original, unmodified <code>freemodbus-v1.5.0</code> was checked in as SVN revision <code>4960</code>.</p><p>The other directory here, <code>nuttx/</code>, implements the NuttX modbus interface. It derives from the <code>freemodbus-v1.5.0/demo/LINUX/port</code> directory.</p><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h2><p>In the original <code>freemodbus-v1.5.0</code> release, the FreeModBus configuration was controlled by the header file <code>mbconfig.h</code>. This header file was eliminated (post revision <code>4960</code>) and the FreeModBus configuration was integrated into the NuttX configuration system.</p><p>The NuttX-named configuration options that are available include:</p><ul><li><code>CONFIG_MODBUS</code> – General ModBus support.</li><li><code>CONFIG_MB_ASCII_ENABLED</code> – Modbus ASCII support.</li><li><code>CONFIG_MB_ASCII_MASTER</code> – Modbus ASCII master support.</li><li><code>CONFIG_MB_RTU_ENABLED</code> – Modbus RTU support.</li><li><code>CONFIG_MB_RTU_MASTER</code> – Modbus RTU master support.</li><li><code>CONFIG_MB_TCP_ENABLED</code> – Modbus TCP support.</li><li><code>CONFIG_MB_ASCII_TIMEOUT_SEC</code> – Character timeout value for Modbus ASCII. The character timeout value is not fixed for Modbus ASCII and is therefore a configuration option. It should be set to the maximum expected delay time of the network. Default: <code>1</code>.</li><li><code>CONFIG_MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS</code> – Timeout to wait in ASCII prior to enabling transmitter. If defined the function calls <code>vMBPortSerialDelay</code> with the argument <code>CONFIG_MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS</code> to allow for a delay before the serial transmitter is enabled. This is required because some targets are so fast that there is no time between receiving and transmitting the frame. If the master is too slow with enabling its receiver then it will not receive the response correctly.</li><li><code>CONFIG_MB_FUNC_HANDLERS_MAX</code> – Maximum number of Modbus functions codes the protocol stack should support. The maximum number of supported Modbus functions must be greater than the sum of all enabled functions in this file and custom function handlers. If set too small, adding more functions will fail.</li><li><code>CONFIG_MB_FUNC_OTHER_REP_SLAVEID_BUF</code> – Number of bytes which should be allocated for the Report Slave ID command. This number limits the maximum size of the additional segment in the report slave id function. See <code>eMBSetSlaveID()</code> for more information on how to set this value. It is only used if <code>CONFIG_MB_FUNC_OTHER_REP_SLAVEID_ENABLED</code> is set to <code>1</code>.</li><li><code>CONFIG_MB_FUNC_OTHER_REP_SLAVEID_ENABLED</code> – If the Report Slave ID function should be enabled.</li><li><code>CONFIG_MB_FUNC_READ_INPUT_ENABLED</code> – If the Read Input Registers function should be enabled.</li><li><code>CONFIG_MB_FUNC_READ_HOLDING_ENABLED</code> – If the Read Holding Registers function should be enabled.</li><li><code>CONFIG_MB_FUNC_WRITE_HOLDING_ENABLED</code> – If the Write Single Register function should be enabled.</li><li><code>CONFIG_MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED</code> – If the Write Multiple registers function should be enabled.</li><li><code>CONFIG_MB_FUNC_READ_COILS_ENABLED</code> – If the Read Coils function should be enabled.</li><li><code>CONFIG_MB_FUNC_WRITE_COIL_ENABLED</code> – If the Write Coils function should be enabled.</li><li><code>CONFIG_MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED</code> – If the Write Multiple Coils function should be enabled.</li><li><code>CONFIG_MB_FUNC_READ_DISCRETE_INPUTS_ENABLED</code> – If the Read Discrete Inputs function should be enabled.</li><li><code>CONFIG_MB_FUNC_READWRITE_HOLDING_ENABLED</code> – If the Read/Write Multiple Registers function should be enabled.</li></ul><p>See also other serial settings, in particular:</p><ul><li><code>CONFIG_SERIAL_TERMIOS</code> – Serial driver supports <code>termios.h</code> interfaces If this is not defined, then the terminal settings (baud, parity, etc.) are not configurable at runtime.</li></ul><h2 id="note" tabindex="-1">Note <a class="header-anchor" href="#note" aria-label="Permalink to &quot;Note&quot;">​</a></h2><p>The developer of FreeModBus, Christian Walter, is still developing Modbus libraries, although they are now commercial. See <a href="http://www.embedded-solutions.at/" target="_blank" rel="noreferrer">http://www.embedded-solutions.at/</a> for further information.</p>`,17)]))}const _=o(d,[["render",n]]);export{p as __pageData,_ as default};
