import{_ as t,c as i,al as o,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"/tools Host Tools","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/tools/index.md","filePath":"en/components/tools/index.md"}'),a={name:"en/components/tools/index.md"};function s(r,e,l,c,h,d){return n(),i("div",null,e[0]||(e[0]=[o(`<h1 id="tools-host-tools" tabindex="-1"><code>/tools</code> Host Tools <a class="header-anchor" href="#tools-host-tools" aria-label="Permalink to &quot;\`/tools\` Host Tools&quot;">​</a></h1><p>This page discusses the contents of the NuttX tools/ directory.</p><p>The tools/ directory contains miscellaneous scripts and host C programs that are necessary parts of the NuttX build system.</p><h2 id="cmpconfig-c" tabindex="-1">cmpconfig.c <a class="header-anchor" href="#cmpconfig-c" aria-label="Permalink to &quot;cmpconfig.c&quot;">​</a></h2><p>This C file can be used to build a utility for comparing two NuttX configuration files.</p><h2 id="config-mk" tabindex="-1">Config.mk <a class="header-anchor" href="#config-mk" aria-label="Permalink to &quot;Config.mk&quot;">​</a></h2><p>Config.mk contains common definitions used by many configuration files. This file (along with &lt;nuttx&gt;/.config) must be included at the top of each configuration-specific Make.defs file like:</p><pre><code>include (TOPDIR)/.config
include (TOPDIR)/tools/Config.mk
</code></pre><p>Subsequent logic within the configuration-specific Make.defs file may then override these default definitions as necessary.</p><h2 id="checkpatch-sh" tabindex="-1">checkpatch.sh <a class="header-anchor" href="#checkpatch-sh" aria-label="Permalink to &quot;checkpatch.sh&quot;">​</a></h2><p><code>checkpatch.sh</code> is a bash script that make use of nxstyle and codespell tools to format patches and files conform to NuttX coding standard. For example, it has been used in NuttX github action PR check build</p><p>Help message:</p><pre><code> tools/checkpatch.sh -h
USAGE: ./tools/checkpatch.sh [options] [list|-]

Options:
-h
-c spell check with codespell(install with: pip install codespell)
-r range check only (coupled with -p or -g)
-p &lt;patch list&gt; (default)
-g &lt;commit list&gt;
-f &lt;file list&gt;
-  read standard input mainly used by git pre-commit hook as below:
   git diff --cached | ./tools/checkpatch.sh -
Where a &lt;commit list&gt; is any syntax supported by git for specifying git revision, see GITREVISIONS(7)
Where a &lt;patch file names&gt; is a space separated list of patch file names or wildcard. or *.patch
</code></pre><h2 id="configure-sh-configure-bat-configure-c-cfgparser-c-and-cfgparser-h" tabindex="-1">configure.sh configure.bat configure.c, cfgparser.c, and cfgparser.h <a class="header-anchor" href="#configure-sh-configure-bat-configure-c-cfgparser-c-and-cfgparser-h" aria-label="Permalink to &quot;configure.sh configure.bat configure.c, cfgparser.c, and cfgparser.h&quot;">​</a></h2><p>configure.sh is a bash script that is used to configure NuttX for a given target board in a environment that supports POSIX paths (Linux, Cygwin, macOS, or similar). See [[/component](]{.title-ref}/component.md)s/boards\` or Documentation/NuttXPortingGuide.html for a description of how to configure NuttX with this script.</p><p>configure.c, cfgparser.c, and cfgparser.h can be used to build a work-alike program as a replacement for configure.sh. This work-alike program would be used in environments that do not support Bash scripting (such as the Windows native environment).</p><p>configure.bat is a small Windows batch file that can be used as a replacement for configure.sh in a Windows native environment. configure.bat is actually just a thin layer that executes configure.exe if it is available. If configure.exe is not available, then configure.bat will attempt to build it first.</p><p>In order to build configure.exe from configure.c in the Windows native environment, two assumptions are made:</p><ol><li>You have installed the MinGW GCC toolchain. This toolchain can be downloaded from <a href="http://www.mingw.org/" target="_blank" rel="noreferrer">http://www.mingw.org/</a>. It is recommended that you not install the optional MSYS components as there may be conflicts.</li><li>That path to the bin/ directory containing mingw-gcc.exe must be included in the PATH variable.</li></ol><h2 id="convert-comments-c" tabindex="-1">convert-comments.c <a class="header-anchor" href="#convert-comments-c" aria-label="Permalink to &quot;convert-comments.c&quot;">​</a></h2><p>Convert C++-style comments to C89 C-style comments. Usage:</p><pre><code>convert-comments &lt;source-file&gt; &lt;out-file&gt;
</code></pre><h2 id="detab-c" tabindex="-1">detab.c <a class="header-anchor" href="#detab-c" aria-label="Permalink to &quot;detab.c&quot;">​</a></h2><p>Convert tabs to spaces in a file. Usage:</p><pre><code>detab [-4] &lt;source-file&gt; &lt;out-file&gt;
</code></pre><p>Default &lt;source-file&gt; tab size is 8 spaces; -4 selects 4 space tab size.</p><h2 id="discover-py" tabindex="-1">discover.py <a class="header-anchor" href="#discover-py" aria-label="Permalink to &quot;discover.py&quot;">​</a></h2><p>Example script for discovering devices in the local network. It is the counter part to apps/netutils/discover</p><h2 id="gencromfs-c" tabindex="-1">gencromfs.c <a class="header-anchor" href="#gencromfs-c" aria-label="Permalink to &quot;gencromfs.c&quot;">​</a></h2><p>This is a C program that is used to generate CROMFS file system images. Usage is simple:</p><pre><code>gencromfs &lt;dir-path&gt; &lt;out-file&gt;
</code></pre><p>Where:</p><ul><li>&lt;dir-path&gt; is the path to the directory will be at the root of the new CROMFS file system image.</li><li>&lt;out-file&gt; the name of the generated, output C file. This file must be compiled in order to generate the binary CROMFS file system image.</li></ul><h2 id="initialconfig-c" tabindex="-1">initialconfig.c <a class="header-anchor" href="#initialconfig-c" aria-label="Permalink to &quot;initialconfig.c&quot;">​</a></h2><p>This is a C file that can be used to create an initial configuration. This permits creating a new configuration from scratch, without relying on any existing board configuration in place. This utility will create a barebones .config file sufficient only for instantiating the symbolic links necessary to do a real configuration.</p><h2 id="kconfig2html-c" tabindex="-1">kconfig2html.c <a class="header-anchor" href="#kconfig2html-c" aria-label="Permalink to &quot;kconfig2html.c&quot;">​</a></h2><p>This is a C file that can be used to build a utility for converting the NuttX configuration in the Kconfig files to an HTML document. This auto-generated documentation will, eventually, replace the manually updated configuration documentation that is falling woefully behind:</p><pre><code> tools/kconfig2html.exe -h
USAGE: tools/kconfig2html [-d] [-a &lt;apps directory&gt;] {-o &lt;out file&gt;] [&lt;Kconfig root&gt;]
       tools/kconfig2html [-h]
</code></pre><p>Where:</p><pre><code>-a : Select relative path to the apps/ directory. This path is relative
     to the &lt;Kconfig directory&gt;.  Default: ../apps
-o : Send output to &lt;out file&gt;.  Default: Output goes to stdout
-d : Enable debug output
-h : Prints this message and exits
&lt;Kconfig root&gt; is the directory containing the root Kconfig file.
     Default &lt;Kconfig directory&gt;: .
</code></pre><p>NOTE: In order to use this tool, some configuration must be in-place with all necessary symbolic links. You can establish the configured symbolic links with:</p><pre><code>make context
</code></pre><p>or more quickly with:</p><pre><code>make .dirlinks
</code></pre><h2 id="libraries-mk-flatlibs-mk-protectedlibs-mk-and-kernellib-mk" tabindex="-1">Libraries.mk, FlatLibs.mk, ProtectedLibs.mk, and KernelLib.mk <a class="header-anchor" href="#libraries-mk-flatlibs-mk-protectedlibs-mk-and-kernellib-mk" aria-label="Permalink to &quot;Libraries.mk, FlatLibs.mk, ProtectedLibs.mk, and KernelLib.mk&quot;">​</a></h2><p>Libraries.mk has the build rules for all NuttX libraries.</p><p>FlatLibs.mk, ProtectedLibs.mk, and KernelLib.mk: These control the selection of libraries to be built, depending on the selected build mode.</p><h2 id="lowhex-c" tabindex="-1">lowhex.c <a class="header-anchor" href="#lowhex-c" aria-label="Permalink to &quot;lowhex.c&quot;">​</a></h2><p>Convert hexadecimal representation in a file from upper- to lower-case. Usage:</p><pre><code>lowhex &lt;source-file&gt; &lt;out-file&gt;
</code></pre><table tabindex="0"><thead><tr><th>Makefile.[unix|win]</th></tr></thead></table><p>Unix.mk is the Makefile used when building NuttX in Unix-like systems. It is selected from the top-level Makefile.</p><p>Win.mk is the Makefile used when building natively under Windows. It is selected from the top-level Makefile.</p><h2 id="mkconfig-c-cfgdefine-c-and-cfgdefine-h" tabindex="-1">mkconfig.c, cfgdefine.c, and cfgdefine.h <a class="header-anchor" href="#mkconfig-c-cfgdefine-c-and-cfgdefine-h" aria-label="Permalink to &quot;mkconfig.c, cfgdefine.c, and cfgdefine.h&quot;">​</a></h2><p>These are C files that are used to build mkconfig program. The mkconfig program is used during the initial NuttX build.</p><p>When you configure NuttX, you will copy a configuration file called .config in the top level NuttX directory (See [[/component](]{.title-ref}/component.md)s/boards\` or Documentation/NuttXPortingGuide.html). The first time you make NuttX, the top-level makefile will build the mkconfig executable from mkconfig.c (using Makefile.host). The top-level Makefile will then execute the mkconfig program to convert the .config file in the top level directory into include/nuttx/config.h. config.h is a another version of the NuttX configuration that can be included by C files.</p><h2 id="mkconfigvars-sh" tabindex="-1">mkconfigvars.sh <a class="header-anchor" href="#mkconfigvars-sh" aria-label="Permalink to &quot;mkconfigvars.sh&quot;">​</a></h2><p>The HTML documentation expects to have a copy of the auto-generated configuration variable documentation Documentation/NuttXConfigVariables.html. The script mkconfigvars.sh is a simple script that can be used to re-generated that file as needed.</p><p>Help:</p><pre><code> tools/mkconfigvars.sh -h
tools/mkconfigvars.sh is a tool for generation of configuration variable documentation
</code></pre><p>USAGE: tools/mkconfigvars.sh [-d|h] [-v &lt;major.minor.patch&gt;]</p><p>Where:</p><pre><code>-v &lt;major.minor.patch&gt;
   The NuttX version number expressed as a major, minor and patch number separated
   by a period
-d
   Enable script debug
-h
   show this help message and exit
</code></pre><h2 id="mkexport-sh-and-export-mk" tabindex="-1">mkexport.sh and Export.mk <a class="header-anchor" href="#mkexport-sh-and-export-mk" aria-label="Permalink to &quot;mkexport.sh and Export.mk&quot;">​</a></h2><p>These implement part of the top-level Makefile&#39;s &#39;export&#39; target. That target will bundle up all of the NuttX libraries, header files, and the startup object into an export-able, binary NuttX distribution. The Export.mk is used only by the mkexport.sh script to parse out options from the top-level Make.defs file.</p><p>USAGE: tools/mkexport.sh [-d] [-z] [-u] -t &lt;top-dir&gt; [-x &lt;lib-ext&gt;] -l &quot;lib1 [lib2 [lib3 ...]]&quot;</p><p>This script also depends on the environment variable MAKE which is set in the top-level Makefile before starting mkexport.sh. If MAKE is not defined, the script will set it to [which make]{.title-ref}.</p><h2 id="mkfsdata-pl" tabindex="-1">mkfsdata.pl <a class="header-anchor" href="#mkfsdata-pl" aria-label="Permalink to &quot;mkfsdata.pl&quot;">​</a></h2><p>This perl script is used to build the &quot;fake&quot; file system and CGI support as needed for the apps/netutils/webserver. It is currently used only by the Makefile at apps/examples/uip. That example serves as an example of how to configure the uIP webserver &quot;fake&quot; file system.</p><p>NOTE: This perl script comes from uIP and was (probably) written by Adam Dunkels. uIP has a license that is compatible with NuttX.</p><h2 id="mkversion-c-cfgdefine-c-and-cfgdefine-h" tabindex="-1">mkversion.c, cfgdefine.c, and cfgdefine.h <a class="header-anchor" href="#mkversion-c-cfgdefine-c-and-cfgdefine-h" aria-label="Permalink to &quot;mkversion.c, cfgdefine.c, and cfgdefine.h&quot;">​</a></h2><p>This is C file that is used to build mkversion program. The mkversion program is used during the initial NuttX build.</p><p>When you build NuttX there should be a version file called .version in the top level NuttX directory (See Documentation/NuttXPortingGuide.html). The first time you make NuttX, the top-level makefile will build the mkversion executable from mkversion.c (using Makefile.host). The top-level Makefile will then execute the mkversion program to convert the .version file in the top level directory into include/nuttx/version.h. version.h provides version information that can be included by C files.</p><h2 id="mksyscall-c-cvsparser-c-and-cvsparser-h" tabindex="-1">mksyscall.c, cvsparser.c, and cvsparser.h <a class="header-anchor" href="#mksyscall-c-cvsparser-c-and-cvsparser-h" aria-label="Permalink to &quot;mksyscall.c, cvsparser.c, and cvsparser.h&quot;">​</a></h2><p>This is a C file that is used to build mksyscall program. The mksyscall program is used during the initial NuttX build by the logic in the top-level syscall/ directory.</p><p>If you build NuttX as a separately compiled, monolithic kernel and separate applications, then there is a syscall layer that is used to get from the user application space to the NuttX kernel space. In the user application &quot;proxies&quot; for each of the kernel functions are provided. The proxies have the same function signature as the kernel function, but only execute a system call.</p><p>Within the kernel, there are &quot;stubs&quot; for each of the system calls. The stubs receive the marshalled system call data, and perform the actually kernel function call (in kernel-mode) on behalf of the proxy function.</p><p>Information about the stubs and proxies is maintained in a comma separated value (CSV) file in the syscall/ directory. The mksyscall program will accept this CVS file as input and generate all of the required proxy or stub files as output. See [[/component](]{.title-ref}/component.md)s/syscall\` for additional information.</p><h2 id="mksymtab-c-cvsparser-c-and-cvsparser-h" tabindex="-1">mksymtab.c, cvsparser.c, and cvsparser.h <a class="header-anchor" href="#mksymtab-c-cvsparser-c-and-cvsparser-h" aria-label="Permalink to &quot;mksymtab.c, cvsparser.c, and cvsparser.h&quot;">​</a></h2><p>This is a C file that is used to build symbol tables from comma separated value (CSV) files. This tool is not used during the NuttX build, but can be used as needed to generate files.</p><p>USAGE: ./mksymtab [-d] &lt;cvs-file&gt; &lt;symtab-file&gt; [&lt;symtab-name&gt; [&lt;nsymbols-name&gt;]]</p><p>Where:</p><pre><code>&lt;cvs-file&gt;      : The path to the input CSV file (required)
&lt;symtab-file&gt;   : The path to the output symbol table file (required)
&lt;symtab-name&gt;   : Optional name for the symbol table variable
                  Default: &quot;g_symtab&quot;
&lt;nsymbols-name&gt; : Optional name for the symbol table variable
                  Default: &quot;g_nsymbols&quot;
-d              : Enable debug output
</code></pre><p>Example:</p><pre><code>cd nuttx/tools
cat ../syscall/syscall.csv ../lib/libc.csv | sort &gt;tmp.csv
./mksymtab.exe tmp.csv tmp.c
</code></pre><h2 id="mkctags-sh" tabindex="-1">mkctags.sh <a class="header-anchor" href="#mkctags-sh" aria-label="Permalink to &quot;mkctags.sh&quot;">​</a></h2><p>A script for creating ctags from Ken Pettit. See <a href="http://en.wikipedia.org/wiki/Ctags" target="_blank" rel="noreferrer">http://en.wikipedia.org/wiki/Ctags</a> and <a href="http://ctags.sourceforge.net/" target="_blank" rel="noreferrer">http://ctags.sourceforge.net/</a></p><h2 id="nxstyle-c" tabindex="-1">nxstyle.c <a class="header-anchor" href="#nxstyle-c" aria-label="Permalink to &quot;nxstyle.c&quot;">​</a></h2><p>I am embarrassed that this is here. This program is a complete hack but, unfortunately, it has become so useful to me that I need to keep it here.</p><p>A little background: I have tinkered with pretty printers for some time and have not been happy with the results. An alternative that occurred to me would be just a standard checker that examines a C file that gives warnings for violations of the coding standard.</p><p>This turns out to be more difficult that you might think. A pretty printer understands C syntax: They break the file up into its C components then reassembles the output in the format. But parsing the C loses the original file layout and so it not useful in this case.</p><p>This program instead, uses a collection of heuristics (i.e., hacks and bandaids) to examine the C file for obvious violations of the coding standard. This program is completely ignorant of C syntax; it simply performs crude pattern matching to check the file.</p><p>Prints formatted messages that are classified as info, warn, error, fatal. In a parsable format that can be used by editors and IDEs.</p><p>Usage:</p><pre><code>nxstyle [-m &lt;excess&gt;] [-v &lt;level&gt;] [-r &lt;start,count&gt;] &lt;filename&gt;
nxstyle -h this help
nxstyle -v &lt;level&gt; where level is
           0 - no output
           1 - PASS/FAIL
           2 - output each line (default)
</code></pre><p>See also indent.sh and uncrustify.cfg</p><h2 id="pic32mx" tabindex="-1">pic32mx <a class="header-anchor" href="#pic32mx" aria-label="Permalink to &quot;pic32mx&quot;">​</a></h2><p>This directory contains build tools used only for PIC32MX/Z platforms</p><h2 id="bdf-convert-c" tabindex="-1">bdf-convert.c <a class="header-anchor" href="#bdf-convert-c" aria-label="Permalink to &quot;bdf-convert.c&quot;">​</a></h2><p>This C file is used to build the bdf-converter program. The bdf-converter program can be used to convert fonts in Bitmap Distribution Format (BDF) into fonts that can be used in the NX graphics system.</p><p>Below are general instructions for creating and installing a new font in the NX graphic system:</p><ol><li>Locate a font in BDF format,</li><li>Use the bdf-converter program to convert the BDF font to the NuttX font format. This will result in a C header file containing definitions. That header file should be installed at, for example, libnx/nxfonts/nxfonts_myfont.h.</li></ol><p>Create a new NuttX configuration variable. For example, suppose you define the following variable: CONFIG_NXFONT_MYFONT. Then you would need to:</p><ol start="3"><li>Define CONFIG_NXFONT_MYFONT=y in your NuttX configuration file.</li></ol><p>A font ID number has to be assigned for each new font. The font ID is defined in the file include/nuttx/nx/nxfonts.h. Those definitions have to be extended to support your new font. Look at how the font ID enabled by CONFIG_NXFONT_SANS23X27 is defined and add an ID for your new font in a similar fashion:</p><ol start="4"><li><p>include/nuttx/nx/nxfonts.h. Add your new font as a possible system default font:</p><pre><code>#if defined(CONFIG_NXFONT_SANS23X27)
# define NXFONT_DEFAULT FONTID_SANS23X27
#elif defined(CONFIG_NXFONT_MYFONT)
# define NXFONT_DEFAULT FONTID_MYFONT
#endif
</code></pre></li></ol><p>Then define the actual font ID. Make sure that the font ID value is unique:</p><pre><code>enum nx_fontid_e
 {
  FONTID_DEFAULT     = 0      /* The default font */
  #ifdef CONFIG_NXFONT_SANS23X27
  , FONTID_SANS23X27 = 1      /* The 23x27 sans serif font */
  #endif
  #ifdef CONFIG_NXFONT_MYFONT
  , FONTID_MYFONT    = 2      /* My shiny, new font */
  #endif
  ...
</code></pre><p>Now add the font to the NX build system. There are several files that you have to modify to do this. Look how the build system uses the font CONFIG_NXFONT_SANS23X27 for examples:</p><ol start="5"><li><p>nuttx/graphics/Makefile. This file needs logic to auto-generate a C source file from the header file that you generated with the the bdf-converter program. Notice NXFONTS_FONTID=2; this must be set to the same font ID value that you defined in the include/nuttx/nx/nxfonts.h file:</p><pre><code>genfontsources:
  ifeq ((CONFIG_NXFONT_SANS23X27),y)
   @(MAKE) -C nxfonts -f Makefile.sources NXFONTS_FONTID=1 EXTRAFLAGS=(EXTRAFLAGS)
 endif
  ifeq ((CONFIG_NXFONT_MYFONT),y)
   @(MAKE) -C nxfonts -f Makefile.sources NXFONTS_FONTID=2 EXTRAFLAGS=(EXTRAFLAGS)
 endif
</code></pre></li><li><p>nuttx/libnx/nxfonts/Make.defs. Set the make variable NXFSET_CSRCS. NXFSET_CSRCS determines the name of the font C file to build when NXFONTS_FONTID=2:</p><pre><code>ifeq ((CONFIG_NXFONT_SANS23X27),y)
NXFSET_CSRCS    += nxfonts_bitmaps_sans23x27.c
endif
ifeq ((CONFIG_NXFONT_MYFONT),y)
NXFSET_CSRCS    += nxfonts_bitmaps_myfont.c
endif
</code></pre></li><li><p>nuttx/libnx/nxfonts/Makefile.sources. This is the Makefile used in step 5 that will actually generate the font C file. So, given your NXFONTS_FONTID=2, it needs to determine a prefix to use for auto-generated variable and function names and (again) the name of the auto-generated file to create (this must be the same name that was used in nuttx/libnx/nxfonts/Make.defs):</p><pre><code>ifeq ((NXFONTS_FONTID),1)
NXFONTS_PREFIX    := g_sans23x27_
GEN_CSRC    = nxfonts_bitmaps_sans23x27.c
endif
ifeq ((NXFONTS_FONTID),2)
NXFONTS_PREFIX    := g_myfont_
GEN_CSRC    = nxfonts_bitmaps_myfont.c
endif
</code></pre></li><li><p>graphics/libnx/nxfonts_bitmaps.c. This is the file that contains the generic font structures. It is used as a &quot;template&quot; file by nuttx/libnx/nxfonts/Makefile.sources to create your customized font data set:</p><pre><code>#if NXFONTS_FONTID == 1
#  include &quot;nxfonts_sans23x27.h&quot;
#elif NXFONTS_FONTID == 2
#  include &quot;nxfonts_myfont.h&quot;
#else
#  error &quot;No font ID specified&quot;
#endif
</code></pre><p>Where nxfonts_myfont.h is the NuttX font file that we generated in step 2 using the bdf-converter tool.</p></li><li><p>libnx/nxfonts/nxfonts_getfont.c. Finally, we need to extend the logic that does the run-time font lookups so that can find our new font. The lookup function is NXHANDLE nxf_getfonthandle(enum nx_fontid_e fontid). The new font information needs to be added to data structures used by that function:</p><pre><code>#ifdef CONFIG_NXFONT_SANS23X27
 extern const struct nx_fontpackage_s g_sans23x27_package;
 #endif
 #ifdef CONFIG_NXFONT_MYFONT
 extern const struct nx_fontpackage_s g_myfont_package;
 #endif

 static FAR const struct nx_fontpackage_s *g_fontpackages[] =
 {
 #ifdef CONFIG_NXFONT_SANS23X27
 &amp;g_sans23x27_package,
 #endif
 #ifdef CONFIG_NXFONT_MYFONT
 &amp;g_myfont_package,
 #endif
 NULL
 };
</code></pre></li></ol><h2 id="define-sh-and-define-bat" tabindex="-1">define.sh and define.bat <a class="header-anchor" href="#define-sh-and-define-bat" aria-label="Permalink to &quot;define.sh and define.bat&quot;">​</a></h2><p>Different compilers have different conventions for specifying pre-processor definitions on the compiler command line. This bash script allows the build system to create command line definitions without concern for the particular compiler in use.</p><p>The define.bat script is a counterpart for use in the native Windows build.</p><h2 id="flash-writer-py" tabindex="-1">flash_writer.py <a class="header-anchor" href="#flash-writer-py" aria-label="Permalink to &quot;flash\\_writer.py&quot;">​</a></h2><p>This flash writer is using the xmodem for firmware transfer on boards based on cxd56 chip (Ex. Spresense). This tool depends on the xmodem package (<a href="https://pypi.org/project/xmodem/" target="_blank" rel="noreferrer">https://pypi.org/project/xmodem/</a>).</p><p>for flashing the .spk image to the board please use: tools/flash_writer.py -s -c /dev/ttyUSB0 -d -b 115200 -n nuttx.spk</p><h2 id="ide-exporter-py" tabindex="-1">ide_exporter.py <a class="header-anchor" href="#ide-exporter-py" aria-label="Permalink to &quot;ide\\_exporter.py&quot;">​</a></h2><p>This Python script will help to create NuttX project in the IAR and uVision IDEs. These are few simple the steps to export the IDE workspaces.</p><ol><li><p>Start the NuttX build from the Cygwin command line before trying to create your project by running:</p><pre><code>make V=1 |&amp; tee build_log
</code></pre><p>This is necessary to certain auto-generated files and directories that will be needed. This will provide the build log to construct the IDE project also.</p></li><li><p>Export the IDE project base on that make log. The script usage:</p><p>usage: ide_exporter.py [-h] [-v] [-o OUT_DIR] [-d] build_log {iar,uvision_armcc,uvision_gcc} template_dir</p><p>positional arguments:</p><pre><code>build_log             Log file from make V=1
{iar,uvision_armcc,uvision_gcc}
                      The target IDE: iar, uvision_gcc, (uvision_armcc is experimental)
template_dir          Directory that contains IDEs template projects
</code></pre><p>optional arguments:</p><pre><code>-h, --help            show this help message and exit
-v, --version         show program&#39;s version number and exit
-o OUT_DIR, --output OUT_DIR
                      Output directory
-d, --dump            Dump project structure tree
</code></pre><p>Example:</p><pre><code>cd nuttx
make V=1 |&amp; tee build_log

./tools/ide_exporter.py makelog_f2nsh_c  iar ./boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/ide/template/iar -o ./boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/ide/nsh/iar
</code></pre><p>or:</p><pre><code>./tools/ide_exporter.py makelog_f2nsh_c uvision_gcc ./boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/ide/template/uvision_gcc/ -o ./boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;/ide/nsh/uvision
</code></pre></li><li><p>Limitations:</p><blockquote><ul><li><p>IAR supports C only. Iar C++ does not compatible with g++ so disable C++ if you want to use IAR.</p></li><li><p>uvision_armcc : nuttx asm (inline and .asm) can&#39;t be compiled with armcc so do not use this option.</p></li><li><p>uvision_gcc : uvision project that uses gcc. Need to specify path to gnu toolchain. In uVison menu, select:</p><pre><code>Project/Manage/Project Items.../FolderExtension/Use GCC compiler/ PreFix, Folder
</code></pre></li></ul></blockquote></li><li><p>Template projects&#39; constrains:</p><blockquote><ul><li><p>mcu, core, link script shall be configured in template project</p></li><li><p>Templates&#39; name are fixed:</p><blockquote><ul><li>template_nuttx.eww : IAR nuttx workspace template</li><li>template_nuttx_lib.ewp : IAR nuttx library project template</li><li>template_nuttx_main.ewp : IAR nuttx main project template</li><li>template_nuttx.uvmpw : uVision workspace</li><li>template_nuttx_lib.uvproj : uVision library project</li><li>template_nuttx_main.uvproj : uVision main project</li></ul></blockquote></li><li><p>iar:</p><blockquote><ul><li></li></ul><pre><code>Library option shall be set to \\&#39;None\\&#39; so that IAR could use nuttx

:   libc
</code></pre><ul><li>__ASSEMBLY__ symbol shall be defined in assembler</li></ul></blockquote></li><li><p>uVision_gcc:</p><blockquote><ul><li>There should be one fake .S file in projects that has been defined __ASSEMBLY__ in assembler.</li><li>In Option/CC tab : disable warning</li><li>In Option/CC tab : select Compile thump code (or Misc control = -mthumb)</li><li>template_nuttx_lib.uvproj shall add &#39;Post build action&#39; to copy .a file to .lib</li><li>template_nuttx_main.uvproj Linker: <ul><li>Select &#39;Do not use Standard System Startup Files&#39; and &#39;Do not use Standard System Libraries&#39;</li><li>Do not select &#39;Use Math libraries&#39;</li><li>Misc control = --entry=__start</li></ul></li></ul></blockquote></li></ul></blockquote></li><li><p>How to create template for other configurations:</p><blockquote><ol><li><p>uVision with gcc toolchain:</p><blockquote><ul><li>Copy 3 uVision project files</li><li>Select the MCU for main and lib project</li><li>Correct the path to ld script if needed</li></ul></blockquote></li><li><p>iar:</p><blockquote><ul><li>Check if the arch supports IAR (only armv7-m is support IAR now)</li><li>Select the MCU for main and lib project</li><li>Add new ld script file for IAR</li></ul></blockquote></li></ol></blockquote></li></ol><p>NOTE: Due to bit rot, the template files for the stm3220g-eval and for the stm32f429-disco have been removed from the NuttX repository. For reference, they can be found in the Obsoleted repository at Obsoleted/stm32f429i_disco/ltcd/template and at Obsoleted/stm3220g-eval/template.</p><h2 id="incdir-sh-incdir-bat-and-incdir-c" tabindex="-1">incdir.sh, incdir.bat, and incdir.c <a class="header-anchor" href="#incdir-sh-incdir-bat-and-incdir-c" aria-label="Permalink to &quot;incdir.sh, incdir.bat, and incdir.c&quot;">​</a></h2><p>Different compilers have different conventions for specifying lists of include file paths on the compiler command line. This incdir.sh bash script allows the build system to create include file paths without concern for the particular compiler in use.</p><p>The incdir.bat script is a counterpart for use in the native Windows build. However, there is currently only one compiler supported in that context: MinGW-GCC.</p><p>incdir.c is a higher performance version of incdir.sh, converted to C.</p><h2 id="indent-sh" tabindex="-1">indent.sh <a class="header-anchor" href="#indent-sh" aria-label="Permalink to &quot;indent.sh&quot;">​</a></h2><p>This script can be used to indent .c and .h files in a manner similar to the NuttX coding style. It doesn&#39;t do a really good job, however (see below and the comments at the top of the indent.sh file).</p><p>USAGE:</p><pre><code>tools/indent.sh [-d] [-p] -o &lt;out-file&gt; &lt;in-file&gt;
tools/indent.sh [-d] [-p] &lt;in-file-list&gt;
tools/indent.sh [-d] -h
</code></pre><p>Where:</p><pre><code>-&lt;in-file&gt;
  A single, unformatted input file
-&lt;in-file-list&gt;
  A list of unformatted input files that will be reformatted in place.
-o &lt;out-file&gt;
  Write the single, reformatted &lt;in-file&gt; to &lt;out-file&gt;.  &lt;in-file&gt;
  will not be modified.
-d
  Enable script debug
-p
  Comments are pre-formatted.  Do not reformat.
-h
  Show this help message and exit
</code></pre><p>The conversions make by the indent.sh script differs from the NuttX coding style in that:</p><ol><li>The coding standard requires that the trailing <code>*/</code> of a multi-line comment be on a separate line. By default, indent.sh will put the final <code>*/</code> on the same line as the last comment text. If your C file already has properly formatted comments then using the <code>-p</code> option will eliminate that bad behavior</li><li>If your source file has highly formatted comments containing things such as tables or lists, then use the -p option to preserve those pre-formatted comments.</li><li>I usually align things vertically (like &#39;=&#39; in assignments),</li><li>indent.sh puts a bogus blank line at the top of the file,</li><li>I don&#39;t like the way it handles nested conditional compilation intermixed with code. I prefer the preprocessor conditional tests be all right justified in that case.</li><li>I also indent brackets differently on structures than does this script.</li><li>I normally use no spaces in casts. indent.sh adds spaces in casts like <code>(FAR void *)&amp;foo</code> becomes <code>(FAR void *) &amp; foo</code>.</li><li>When used with header files, the initial idempotence conditional test causes all preprocessor directives to be indented in the file. So for header files, you will need to substitute &quot;^# &quot; with &quot;#&quot; in the converted header file.</li></ol><p>You will manually need to check for the issues listed above after performing the conversions. nxstyle.c provides a good test that will catch most of the indent.sh screw-ups. Together, they do a pretty good job of formatting.</p><p>See also nxstyle.c and uncrustify.cfg</p><h2 id="kconfig-bat" tabindex="-1">kconfig.bat <a class="header-anchor" href="#kconfig-bat" aria-label="Permalink to &quot;kconfig.bat&quot;">​</a></h2><p>Recent versions of NuttX support building NuttX from a native Windows CMD.exe shell. But kconfig-frontends is a Linux tool and is not yet available in the pure CMD.exe environment. At this point, there are only a few options for the Windows user (see the top-level README.txt file).</p><p>You can, with some effort, run the Cygwin kconfig-mconf tool directly in the CMD.exe shell. In this case, you do not have to modify the .config file, but there are other complexities: You need to temporarily set the Cygwin directories in the PATH variable and then run kconfig-mconf outside of the Make system.</p><p>kconfig.bat is a Windows batch file at tools/kconfig.bat that automates these steps. It is used from the top-level NuttX directory like:</p><pre><code>tools/kconfig menuconfig
</code></pre><p>NOTE: There is currently an issue with accessing DOS environment variables from the Cygwin kconfig-mconf running in the CMD.exe shell. The following change to the top-level Kconfig file seems to work around these problems:</p><pre><code>config APPSDIR
     string
-   option env=&quot;APPSDIR&quot;
+   default &quot;../apps&quot;
</code></pre><h2 id="link-sh-link-bat-copydir-sh-copydir-bat-unlink-sh-and-unlink-bat" tabindex="-1">link.sh, link.bat, copydir.sh, copydir.bat, unlink.sh, and unlink.bat <a class="header-anchor" href="#link-sh-link-bat-copydir-sh-copydir-bat-unlink-sh-and-unlink-bat" aria-label="Permalink to &quot;link.sh, link.bat, copydir.sh, copydir.bat, unlink.sh, and unlink.bat&quot;">​</a></h2><p>Different file systems have different capabilities for symbolic links. Some Windows file systems have no native support for symbolic links. Cygwin running under Windows has special links built in that work with all cygwin tools. However, they do not work when Windows native tools are used with cygwin. In that case something different must be done.</p><p>If you are building under Linux or under cygwin with a cygwin tool chain, then your Make.defs file may have definitions like the following:</p><pre><code>DIRLINK = (TOPDIR)/tools/link.sh
DIRUNLINK = (TOPDIR)/tools/unlink.sh
</code></pre><p>The first definition is not always present because link.sh is the default. link.sh is a bash script that performs a normal, Linux-style symbolic link; unlink.sh is a do-it-all unlinking script.</p><p>But if you are building under cygwin using a Windows native toolchain within a POSIX framework (such as Cygwin), then you will need something like the following in you Make.defs file:</p><pre><code>DIRLINK = (TOPDIR)/tools/copydir.sh
DIRUNLINK = (TOPDIR)/tools/unlink.sh
</code></pre><p>copydir.sh will copy the whole directory instead of linking it.</p><p>Finally, if you are running in a pure native Windows environment with a CMD.exe shell, then you will need something like this:</p><pre><code>DIRLINK = (TOPDIR)/tools/copydir.bat
DIRUNLINK = (TOPDIR)/tools/unlink.bat
</code></pre><p>Note that this will copy directories. link.bat might also be used in this case. link.bat will attempt to create a symbolic link using the NTFS mklink.exe command instead of copying files. That logic, however, has not been verified as of this writing.</p><h2 id="makefile-host" tabindex="-1">Makefile.host <a class="header-anchor" href="#makefile-host" aria-label="Permalink to &quot;Makefile.host&quot;">​</a></h2><p>This is the makefile that is used to make the mkconfig program from the mkconfig.c C file, the cmpconfig program from cmpconfig.c C file, the mkversion program from the mkconfig.c C file, or the mksyscall program from the mksyscall.c file. Usage:</p><pre><code>cd tools/
make -f Makefile.host &lt;program&gt;
</code></pre><h2 id="mkromfsimg-sh" tabindex="-1">mkromfsimg.sh <a class="header-anchor" href="#mkromfsimg-sh" aria-label="Permalink to &quot;mkromfsimg.sh&quot;">​</a></h2><p>This script may be used to automate the generation of a ROMFS file system image. It accepts an rcS script &quot;template&quot; and generates an image that may be mounted under /etc in the NuttX pseudo file system.</p><p>TIP: Edit the resulting header file and mark the generated data values as &#39;const&#39; so that they will be stored in FLASH.</p><h2 id="mkdeps-c-cnvwindeps-c-mkwindeps-sh-and-mknulldeps-sh" tabindex="-1">mkdeps.c, cnvwindeps.c, mkwindeps.sh, and mknulldeps.sh <a class="header-anchor" href="#mkdeps-c-cnvwindeps-c-mkwindeps-sh-and-mknulldeps-sh" aria-label="Permalink to &quot;mkdeps.c, cnvwindeps.c, mkwindeps.sh, and mknulldeps.sh&quot;">​</a></h2><p>NuttX uses the GCC compiler&#39;s capabilities to create Makefile dependencies. The program mkdeps is used to run GCC in order to create the dependencies. If a NuttX configuration uses the GCC toolchain, its Make.defs file (see [[/component](]{.title-ref}/component.md)s/boards\`) will include a line like:</p><pre><code>MKDEP = (TOPDIR)/tools/mkdeps[.exe] (See NOTE below)
</code></pre><p>If the NuttX configuration does not use a GCC compatible toolchain, then it cannot use the dependencies and instead it uses mknulldeps.sh:</p><pre><code>MKDEP = (TOPDIR)/tools/mknulldeps.sh
</code></pre><p>The mknulldeps.sh is a stub script that does essentially nothing.</p><p>mkwindeps.sh is a version that creates dependencies using the Windows native toolchain. That generates Windows native paths in the dependency file. But the mkwindeps.sh uses cnvwindeps.c to convert the Windows paths to POSIX paths. This adds some time to the Windows dependency generation but is generally the best option available for that mixed environment of Cygwin with a native Windows GCC toolchain.</p><p>mkdeps.c generates mkdeps (on Linux) or mkdeps.exe (on Windows). However, this version is still under-development. It works well in the all POSIX environment or in the all Windows environment but also does not work well in mixed POSIX environment with a Windows toolchain. In that case, there are still issues with the conversion of things like &#39;c:Program Files&#39; to &#39;c:program files&#39; by bash. Those issues may, eventually be solvable but for now continue to use mkwindeps.sh in that mixed environment.</p><h2 id="netusb-sh" tabindex="-1">netusb.sh <a class="header-anchor" href="#netusb-sh" aria-label="Permalink to &quot;netusb.sh&quot;">​</a></h2><p>Helper script used to set up the CDC ECM Ethernet Over USB driver, host routes, and IP Tables rules to support networking with a NuttX system that has a CDC ECM Ethernet Over USB driver configured. Only supported on Linux.</p><p>General usage:</p><blockquote><p>\\ ./tools/netusb.sh Usage: tools/netusb.sh &lt;main-interface&gt; &lt;usb-net-interface&gt; &lt;on|off&gt;</p></blockquote><p>This has been tested on the SAMA5D3-Xplained board; see [Documentation/platforms/arm/sama5/boards/sama5d3-xplained/README.txt]{.title-ref} for more information on how to configure the CDC ECM driver for that board.</p><h2 id="refresh-sh" tabindex="-1">refresh.sh <a class="header-anchor" href="#refresh-sh" aria-label="Permalink to &quot;refresh.sh&quot;">​</a></h2><p>[NOTE: This script with --silent is really obsolete. refresh with the silent option really adds default values. However, as of 217-07-09, defconfig files are retained in a compressed format, i.e., with default values removed. So the --silent option will accomplish nothing. Without --silent, you will have the opportunity over override the default value from the command line and, in that case, the script may still have some minimal value.]</p><p>This is a bash script that automatics refreshing of board default configuration (defconfig) files. It does not do anything special that you cannot do manually, but is useful for me when I have to update dozens of configuration files.</p><p>Configuration files have to be updated because over time, the configuration settings change: New configurations are added and new dependencies are added. So an old configuration file may not be usable anymore until it is refreshed.</p><p>Help is also available:</p><pre><code> tools/refresh.sh --help
tools/refresh.sh is a tool for refreshing board configurations
</code></pre><p>USAGE: <code>./refresh.sh [options] &lt;board&gt;/&lt;config&gt;+</code></p><p>Where [options] include:</p><pre><code>--debug
   Enable script debug
--silent
   Update board configuration without interaction
--defaults
   Do not prompt for new default selections; accept all recommended default values
--help
   Show this help message and exit
&lt;board&gt;
   The board directory under nuttx/boards
&lt;config&gt;
   The board configuration directory under nuttx/boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;
</code></pre><p>The steps to refresh the file taken by refresh.sh are:</p><ol><li>Make tools/cmpconfig if it is not already built.</li><li>Copy the defconfig file to the top-level NuttX directory as .config (being careful to save any previous .config file that you might want to keep!).</li><li>Execute &#39;make oldconfig&#39; to update the configuration. &#39;make oldconfig&#39; will prompt you for each change in the configuration that requires that you make some decision. With the --silent option, the script will use &#39;make oldefconfig&#39; instead and you won&#39;t have to answer any questions; the refresh will simply accept the default value for any new configuration settings.</li><li>Then it runs tools/cmpconfig to show the real differences between the configuration files. Configuration files are complex and things can move around so a simple &#39;diff&#39; between two configuration files is often not useful. But tools/cmpconfig will show only the meaningful differences between the two configuration files.</li><li>It will edit the .config file to comment out the setting of the CONFIG_APPS_DIR= setting. This setting should not be in checked-in defconfig files because the actually must be determined at the next time that the configuration is installed.</li><li>Finally, the refreshed defconfig file is copied back in place where it can be committed with the next set of difference to the command line. If you select the --silent option, this file copy will occur automatically. Otherwise, refresh.sh will prompt you first to avoid overwriting the defconfig file with changes that you may not want.</li></ol><h2 id="rmcr-c" tabindex="-1">rmcr.c <a class="header-anchor" href="#rmcr-c" aria-label="Permalink to &quot;rmcr.c&quot;">​</a></h2><p>Removes all white space from the end of lines. Whitespace here includes space characters, TAB characters, horizontal and vertical TABs, and carriage returns. Lines will be terminated with the newline character only.</p><h2 id="sethost-sh" tabindex="-1">sethost.sh <a class="header-anchor" href="#sethost-sh" aria-label="Permalink to &quot;sethost.sh&quot;">​</a></h2><p>Saved configurations may run on Linux, Cygwin (32- or 64-bit), or other platforms. The platform characteristics can be changed use &#39;make menuconfig&#39;. Sometimes this can be confusing due to the differences between the platforms. Enter sethost.sh</p><p>sethost.sh is a simple script that changes a configuration to your host platform. This can greatly simplify life if you use many different configurations. For example, if you are running on Linux and you configure like this:</p><pre><code> tools/configure.sh board:configuration
</code></pre><p>The you can use the following command to both (1) make sure that the configuration is up to date, AND (2) the configuration is set up correctly for Linux:</p><pre><code> tools/sethost.sh -l
</code></pre><p>Or, if you are on a Windows/Cygwin 64-bit platform:</p><pre><code> tools/sethost.sh -c
</code></pre><p>Other options are available:</p><pre><code> ./sethost.sh -h

USAGE: ./sethost.sh [-l|m|c|g|n] [make-opts]
       ./sethost.sh -h

Where:
  -l|m|c|g|n selects Linux (l), macOS (m), Cygwin (c),
     MSYS/MSYS2 (g) or Windows native (n). Default Linux
  make-opts directly pass to make
  -h will show this help test and terminate
</code></pre><h2 id="simhostroute-sh" tabindex="-1">simhostroute.sh <a class="header-anchor" href="#simhostroute-sh" aria-label="Permalink to &quot;simhostroute.sh&quot;">​</a></h2><p>Helper script used to set up the tap driver, host routes, and IP Tables rules to support networking with the simulator under Linux. General usage:</p><pre><code> tools/simhostroute.sh
Usage: tools/simhostroute.sh &lt;interface&gt; &lt;on|off&gt;
</code></pre><p>See boards/sim/sim/sim/NETWORK-LINUX.txt for further information</p><h2 id="simbridge-sh" tabindex="-1">simbridge.sh <a class="header-anchor" href="#simbridge-sh" aria-label="Permalink to &quot;simbridge.sh&quot;">​</a></h2><p>Helper script used to set up a bridge to support networking with the simulator under Linux. General usage:</p><pre><code> tools/simbridge.sh
Usage: tools/simbridge.sh &lt;interface&gt; &lt;on|off&gt;
</code></pre><p>See boards/sim/sim/sim/NETWORK-LINUX.txt for further information</p><h2 id="showsize-sh" tabindex="-1">showsize.sh <a class="header-anchor" href="#showsize-sh" aria-label="Permalink to &quot;showsize.sh&quot;">​</a></h2><p>Show the top 10 biggest memory hogs in code and data spaces. This must be executed from the top-level NuttX directory like:</p><pre><code> tools/showsize.sh
TOP 10 BIG DATA
...
TOP 10 BIG CODE
...
</code></pre><h2 id="testbuild-sh" tabindex="-1">testbuild.sh <a class="header-anchor" href="#testbuild-sh" aria-label="Permalink to &quot;testbuild.sh&quot;">​</a></h2><p>This script automates building of a set of configurations. The intent is simply to assure that the set of configurations build correctly. The -h option shows the usage:</p><pre><code> ./testbuild.sh -h

USAGE: ./testbuild.sh [-l|m|c|g|n] [-d] [-e &lt;extraflags&gt;] [-x] [-j &lt;ncpus&gt;] [-a &lt;appsdir&gt;] [-t &lt;topdir&gt;] [-p] [-G] &lt;testlist-file&gt;
       ./testbuild.sh -h

Where:
  -l|m|c|g|n selects Linux (l), macOS (m), Cygwin (c),
     MSYS/MSYS2 (g) or Windows native (n). Default Linux
  -d enables script debug output
  -e pass extra c/c++ flags such as -Wno-cpp via make command line
  -x exit on build failures
  -j &lt;ncpus&gt; passed on to make.  Default:  No -j make option.
  -a &lt;appsdir&gt; provides the relative path to the apps/ directory.  Default ../apps
  -t &lt;topdir&gt; provides the absolute path to top nuttx/ directory.  Default ../nuttx
  -p only print the list of configs without running any builds
  -A store the build executable artifact in ARTIFACTDIR (defaults to ../buildartifacts
  -C Skip tree cleanness check.
  -G Use &quot;git clean -xfdq&quot; instead of &quot;make distclean&quot; to clean the tree.
     This option may speed up the builds. However, note that:
       * This assumes that your trees are git based.
       * This assumes that only nuttx and apps repos need to be cleaned.
       * If the tree has files not managed by git, they will be removed
         as well.
  -R execute &quot;run&quot; script in the config directories if exists.
  -h will show this help test and terminate
  &lt;testlist-file&gt; selects the list of configurations to test.  No default

Your PATH variable must include the path to both the build tools and the
kconfig-frontends tools
</code></pre><p>These script needs two pieces of information.</p><p>a. A description of the platform that you are testing on. This description is provided by the optional -l, -m, -c, -g and -n options. b. A list of configurations to build. That list is provided by a test list file. The final, non-optional parameter, &lt;testlist-file&gt;, provides the path to that file.</p><p>The test list file is a sequence of build descriptions, one per line. One build descriptions consists of two comma separated values. For example:</p><pre><code>stm32f429i-disco:nsh
arduino-due:nsh
/arm
/risc-v
</code></pre><p>The first value is the usual configuration description of the form <code>&lt;board-name&gt;:&lt;configuration-name&gt;</code> or <code>/&lt;folder-name&gt;</code> and must correspond to a configuration or folder in the nuttx/boards directory.</p><p>The second value is valid name for a toolchain configuration to use when building the configuration. The set of valid toolchain configuration names depends on the underlying architecture of the configured board.</p><p>The prefix <code>-</code> can be used to skip a configuration:</p><pre><code>-stm32f429i-disco/nsh
</code></pre><p>or skip a configuration on a specific host(e.g. Darwin):</p><pre><code>-Darwin,sim:rpserver
</code></pre><h2 id="uncrustify-cfg" tabindex="-1">uncrustify.cfg <a class="header-anchor" href="#uncrustify-cfg" aria-label="Permalink to &quot;uncrustify.cfg&quot;">​</a></h2><p>This is a configuration script for the uncrustify code beautifier. Uncrustify does well with forcing braces into &quot;if&quot; statements and indenting per the NuttX C coding standard. It correctly does things like placing all braces on separate lines at the proper indentation level. It cannot handle certain requirements of the coding standard such as</p><ul><li>FAR attributes in pointer declarations.</li><li>The NuttX standard function header block comments.</li><li>Naming violations such as use of CamelCase variable names, lower case pre-processor definitions, etc.</li></ul><p>Comment blocks, function headers, files headers, etc. must be formatted manually.</p><p>Its handling of block comments is fragile. If the comment is perfect, it leaves it alone, but if the block comment is deemed to need a fix it starts erroneously indenting the continuation lines of the comment.</p><ul><li><p>uncrustify.cfg messed up the indent of most block comments. cmt_sp_before_star_cont is applied inconsistently. I added:</p><pre><code>cmt_indent_multi = false # disable all multi-line comment changes
</code></pre><p>to the .cfg file to limit its damage to block comments.</p></li><li><p>It is very strict at wrapping lines at column 78. Even when column 79 just contained the <code>/</code> of a closing <code>*/</code>. That created many bad continuation lines.</p></li><li><p>It moved &#39;{&#39; that opened a struct to the line defining the struct. nl_struct_brace = add (or force) seemed to be ignored.</p></li><li><p>It also aligned variable names in declarations and &#39;=&#39; signs in assignment statements in a seemingly arbitrary manner. Making changes that were not necessary.</p></li></ul><p>NOTE: uncrustify.cfg should <strong>ONLY</strong> be used with new files that have an inconsistent coding style. uncrustify.cfg should get you in the ballpark, but you should expect to review and hand-edit the files to assume 100% compliance.</p><p>WARNING: <strong>NEVER</strong> use uncrustify.cfg for modifications to existing NuttX files. It will probably corrupt the style in subtle ways!</p><p>This was last verified against uncrustify 0.66.1 by Bob Feretich.</p><p>About uncrustify: Uncrustify is a highly configurable, easily modifiable source code beautifier. To learn more about uncrustify:</p><blockquote><p><a href="http://uncrustify.sourceforge.net/" target="_blank" rel="noreferrer">http://uncrustify.sourceforge.net/</a></p></blockquote><p>Source code is available on GitHub:</p><blockquote><p><a href="https://github.com/uncrustify/uncrustify" target="_blank" rel="noreferrer">https://github.com/uncrustify/uncrustify</a></p></blockquote><p>Binary packages are available for Linux via command line installers. Binaries for both Windows and Linux are available at:</p><blockquote><p><a href="https://sourceforge.net/projects/uncrustify/files/" target="_blank" rel="noreferrer">https://sourceforge.net/projects/uncrustify/files/</a></p></blockquote><p>See also indent.sh and nxstyle.c</p><h2 id="zds" tabindex="-1">zds <a class="header-anchor" href="#zds" aria-label="Permalink to &quot;zds&quot;">​</a></h2><p>This directory contains build tools used only with the ZDS-II platforms (z8, ez80, zNeo).</p><h2 id="zipme-sh" tabindex="-1">zipme.sh <a class="header-anchor" href="#zipme-sh" aria-label="Permalink to &quot;zipme.sh&quot;">​</a></h2><p>I use this script to create the nuttx-xx.yy.tar.gz tarballs for release. It is handy because it also does the kind of clean up that you need to do to make a clean code release. It can also PGP sign the final tarballs and create their SHA512 hash. Any VCS files or directories are excluded from the final tarballs.</p><p>Help:</p><pre><code> ./tools/zipme.sh -h
  USAGE=&quot;USAGE: ./tools/zipme.sh [-d|h|v|s] [-b &lt;build]&gt; [-e &lt;exclude&gt;] [-k &lt;key-id&gt;] [&lt;major.minor.patch&gt;]&quot;
</code></pre><p>Examples:</p><pre><code>./tools/zipme.sh -s 9.0.0
  Create version 9.0.0 tarballs and sign them.
./tools/zipme.sh -s -k XXXXXX 9.0.0
  Same as above but use the key-id XXXXXX to sign the tarballs
./tools/zipme.sh -e &quot;*.swp tmp&quot; 9.0.0
  Create the tarballs but exclude any .swp file and the &quot;tmp&quot; directory.
</code></pre>`,242)]))}const f=t(a,[["render",s]]);export{u as __pageData,f as default};
