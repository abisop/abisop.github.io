import{_ as a,c as n,al as t,o}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"MPS2 AN521 Board","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/mps/boards/mps2-an512/index.md","filePath":"en/platforms/arm/mps/boards/mps2-an512/index.md"}'),r={name:"en/platforms/arm/mps/boards/mps2-an512/index.md"};function i(d,e,l,s,c,m){return o(),n("div",null,e[0]||(e[0]=[t(`<h1 id="mps2-an521-board" tabindex="-1">MPS2 AN521 Board <a class="header-anchor" href="#mps2-an521-board" aria-label="Permalink to &quot;MPS2 AN521 Board&quot;">​</a></h1><p>This board configuration will use QEMU to emulate generic ARM v8-M series hardware platform and provides support for these devices:</p><ul><li>ARM Generic Timer</li><li>CMSDK UART controller</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><ol><li><p>Configuring NuttX and compile (Single Core):</p><pre><code> ./tools/configure.sh -l mps2-an521:nsh
 make
</code></pre></li></ol><p>Running with qemu:</p><pre><code> qemu-system-arm -M mps2-an521 -nographic -chardev stdio,id=con,mux=on \\
-serial chardev:con -mon chardev=con,mode=readline -kernel ./nuttx
</code></pre><h2 id="debugging-with-qemu" tabindex="-1">Debugging with QEMU <a class="header-anchor" href="#debugging-with-qemu" aria-label="Permalink to &quot;Debugging with QEMU&quot;">​</a></h2><p>The nuttx ELF image can be debugged with QEMU.</p><ol><li><p>To debug the nuttx (ELF) with symbols, make sure the following change have applied to defconfig:</p><pre><code>CONFIG_DEBUG_SYMBOLS=y
</code></pre></li><li><p>Run QEMU (at shell terminal 1):</p><pre><code>qemu-system-arm -M mps2-an521 -nographic -chardev stdio,id=con,mux=on \\
-serial chardev:con -mon chardev=con,mode=readline -kernel ./nuttx -S -s
</code></pre></li><li><p>Run gdb with TUI, connect to QEMU, load nuttx and continue (at shell terminal 2):</p><pre><code> arm-none-eabi-gdb -tui --eval-command=&#39;target remote localhost:1234&#39; nuttx
</code></pre></li></ol>`,10)]))}const u=a(r,[["render",i]]);export{h as __pageData,u as default};
