import{_ as s,c as t,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"hello Example in Rust","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/rust/hello/index.md","filePath":"en/applications/examples/rust/hello/index.md"}'),l={name:"en/applications/examples/rust/hello/index.md"};function n(r,e,o,p,u,c){return i(),t("div",null,e[0]||(e[0]=[a('<h1 id="hello-example-in-rust" tabindex="-1"><span class="title-ref">hello</span> Example in Rust <a class="header-anchor" href="#hello-example-in-rust" aria-label="Permalink to &quot;&lt;span class=&quot;title-ref&quot;&gt;hello&lt;/span&gt; Example in Rust&quot;">​</a></h1><p>This example demonstrates how to use Rust&#39;s powerful features in a NuttX environment, including:</p><ul><li><strong>JSON Serialization/Deserialization</strong>: Using the popular <span class="title-ref">serde</span> and <span class="title-ref">serde_json</span> crates to work with JSON data</li><li><strong>Async Runtime</strong>: Demonstrates basic usage of the <span class="title-ref">tokio</span> async runtime</li><li><strong>C Interoperability</strong>: Shows how to expose Rust functions to be called from C code</li></ul><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ol><li>JSON Handling <ul><li>Defines a <span class="title-ref">Person</span> struct with <span class="title-ref">Serialize</span> and <span class="title-ref">Deserialize</span> traits</li><li>Serializes Rust structs to JSON strings</li><li>Deserializes JSON strings into Rust structs</li><li>Demonstrates pretty-printing JSON</li></ul></li><li>Async Runtime <ul><li>Initializes a single-threaded <span class="title-ref">tokio</span> runtime</li><li>Runs a simple async task that prints a message</li></ul></li><li>C Interop <ul><li>Exports <span class="title-ref">hello_rust_cargo_main</span> function with <span class="title-ref">#[no_mangle]</span> for C calling</li><li>Uses <span class="title-ref">extern &quot;C&quot;</span> to define the C ABI</li></ul></li></ol><p>The example shows how Rust&#39;s modern features can be used in embedded systems while maintaining compatibility with C-based systems.</p><p>This example serves as a foundation for building more complex Rust applications in NuttX that need to handle JSON data and async operations.</p>',7)]))}const h=s(l,[["render",n]]);export{m as __pageData,h as default};
