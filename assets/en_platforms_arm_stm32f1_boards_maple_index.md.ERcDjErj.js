import{_ as o,c as t,al as a,o as i}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"maple","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32f1/boards/maple/index.md","filePath":"en/platforms/arm/stm32f1/boards/maple/index.md"}'),n={name:"en/platforms/arm/stm32f1/boards/maple/index.md"};function r(l,e,s,h,d,u){return i(),t("div",null,e[0]||(e[0]=[a(`<h1 id="maple" tabindex="-1">maple <a class="header-anchor" href="#maple" aria-label="Permalink to &quot;maple&quot;">​</a></h1><p>chip:stm32, chip:stm32f1, chip:stm32f103</p><p>This page discusses issues unique to NuttX configurations for the maple board from LeafLabs (<a href="http://leaflabs.com" target="_blank" rel="noreferrer">http://leaflabs.com</a>).</p><ul><li>Microprocessor: 32-bit ARM Cortex M3 at 72MHz STM32F103RBT6 (STM32F103CBT6 for mini version)</li><li>Memory: 120 KB Flash and 20 KB SRAM</li><li>I/O Pins Out: 43 (34 for mini version)</li><li>ADCs: 9 (at 12-bit resolution)</li><li>Peripherals: 4 timers, 2 I2Cs, 2 SPI ports, 3 USARTs</li><li>Other: Sleep, stop, and standby modes; serial wire debug and JTAG interfaces</li></ul><p>Please see below link for a list of maple devices and documentations.</p><blockquote><p><a href="http://leaflabs.com/devices" target="_blank" rel="noreferrer">http://leaflabs.com/devices</a> <a href="http://leaflabs.com/docs" target="_blank" rel="noreferrer">http://leaflabs.com/docs</a></p></blockquote><p>This config supports Maple and Maple Mini.</p><h2 id="development-environment" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h2><p>Either Linux (recommended), Mac or Cygwin on Windows can be used for the development environment. The source has been built only using the GNU toolchain (see below). Other toolchains will likely cause problems.</p><h2 id="dfu" tabindex="-1">DFU <a class="header-anchor" href="#dfu" aria-label="Permalink to &quot;DFU&quot;">​</a></h2><p>The linker files in these projects can be configured to indicate that you will be loading code using STMicro built-in USB Device Firmware Upgrade (DFU) loader or via some JTAG emulator. You can specify the DFU bootloader by adding the following line:</p><pre><code>CONFIG_STM32_DFU=y
</code></pre><p>to your .config file. Most of the configurations in this directory are set up to use the DFU loader.</p><p>If CONFIG_STM32_DFU is defined, the code will not be positioned at the beginning of FLASH (0x08000000) but will be offset to 0x08005000. This offset is needed to make space for the DFU loader and 0x08005000 is where the DFU loader expects to find new applications at boot time. If you need to change that origin for some other bootloader, you will need to edit the file(s) ld.script.dfu for each configuration. In LeafLabs case, we are using maple bootloader:</p><blockquote><p><a href="http://leaflabs.com/docs/bootloader.html" target="_blank" rel="noreferrer">http://leaflabs.com/docs/bootloader.html</a></p></blockquote><h3 id="for-linux-or-mac" tabindex="-1">For Linux or Mac <a class="header-anchor" href="#for-linux-or-mac" aria-label="Permalink to &quot;For Linux or Mac&quot;">​</a></h3><p>While on Linux or Mac, we can use dfu-util to upload nuttx binary.</p><ol><li><p>Make sure we have installed dfu-util. (From yum, apt-get or build from source.)</p></li><li><p>Start the DFU loader (bootloader) on the maple board. You do this by resetting the board while holding the &quot;Key&quot; button. Windows should recognize that the DFU loader has been installed.</p></li><li><p>Flash the nuttx.bin to the board use dfu-util. Here&#39;s an example:</p><pre><code> dfu-util -a1 -d 1eaf:0003 -D nuttx.bin -R
</code></pre></li></ol><p>For anything not clear, we can refer to LeafLabs official document:</p><blockquote><p><a href="http://leaflabs.com/docs/unix-toolchain.html" target="_blank" rel="noreferrer">http://leaflabs.com/docs/unix-toolchain.html</a></p></blockquote><h3 id="for-windows" tabindex="-1">For Windows <a class="header-anchor" href="#for-windows" aria-label="Permalink to &quot;For Windows&quot;">​</a></h3><p>The DFU SE PC-based software is available from the STMicro website, <a href="http://www.st.com" target="_blank" rel="noreferrer">http://www.st.com</a>. General usage instructions:</p><ol><li>Connect the maple board to your computer using a USB cable.</li><li>Start the DFU loader on the maple board. You do this by resetting the board while holding the &quot;Key&quot; button. Windows should recognize that the DFU loader has been installed.</li><li>Run the DFU SE program to load nuttx.bin into FLASH.</li></ol><p>What if the DFU loader is not in FLASH? The loader code is available inside of the Demo directory of the USBLib ZIP file that can be downloaded from the STMicro Website. You can build it using RIDE (or other toolchains); you will need a JTAG emulator to burn it into FLASH the first time.</p><p>In order to use STMicro&#39;s built-in DFU loader, you will have to get the NuttX binary into a special format with a .dfu extension. The DFU SE PC_based software installation includes a file &quot;DFU File Manager&quot; conversion program that a file in Intel Hex format to the special DFU format. When you successfully build NuttX, you will find a file called nutt.hex in the top-level directory. That is the file that you should provide to the DFU File Manager. You will end up with a file called nuttx.dfu that you can use with the STMicro DFU SE program.</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h3><p>Each Maple configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh maple:&lt;subdir&gt;
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.:</p><pre><code>make
</code></pre><p>The &lt;subdir&gt; that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should: a. Build and install the kconfig-mconf tool. See nuttx/README.txt see additional README.txt files in the NuttX tools repository.</li></ol><blockquote><p>b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the reconfiguration process.</p></blockquote><h3 id="configuration-sub-directories" tabindex="-1">Configuration Sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration Sub-directories&quot;">​</a></h3><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>This configuration directory provide the basic NuttShell (NSH). A serial console is provided on USART1.</p><p>NOTES:</p><ol><li><p>Currently configured for the STM32F103CB. But this is easily reconfigured:</p><pre><code>CONFIG_ARCH_CHIP_STM32F103RB=n
CONFIG_ARCH_CHIP_STM32F103CB=y
</code></pre></li><li><p>Support for the I2C tool has been disabled, but can be restored with following configure options:</p><pre><code>System Type -&gt; Peripherals
      CONFIG_STM32_I2C1=y
      CONFIG_STM32_I2C2=y
      CONFIG_STM32_I2CTIMEOSEC=1
      CONFIG_STM32_I2CTIMEOMS=500
      CONFIG_STM32_I2CTIMEOTICKS=500

Drivers
     CONFIG_I2C=y

Applications -&gt; System Add-Ons
      CONFIG_SYSTEM_I2CTOOL=y
      CONFIG_I2CTOOL_MINBUS=1
      CONFIG_I2CTOOL_MAXBUS=2
      CONFIG_I2CTOOL_MINADDR=0x0
      CONFIG_I2CTOOL_MAXADDR=0xf0
      CONFIG_I2CTOOL_MAXREGADDR=0xff
      CONFIG_I2CTOOL_DEFFREQ=100000
</code></pre></li></ol><h3 id="nx" tabindex="-1">nx <a class="header-anchor" href="#nx" aria-label="Permalink to &quot;nx&quot;">​</a></h3><p>This configuration has been used to bring up the Sharp Memory LCD on a custom board. This NX configuration was used for testing that LCD. Debug output will appear on USART1.</p><p>NOTES: 1. Currently configured for the STM32F103CB. But this is easily reconfigured:</p><pre><code>CONFIG_ARCH_CHIP_STM32F103RB=n
CONFIG_ARCH_CHIP_STM32F103CB=y
</code></pre><ol start="2"><li>You won&#39;t be able to buy a Sharp Memory LCD to use with your Maple. If you want one, you will have to make one yourself.</li></ol><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>This is an alternative NuttShell (NSH) configuration that uses a USB serial console for interaction.</p><p>NOTES: 1. Currently configured for the STM32F103CB. But this is easily reconfigured:</p><pre><code>CONFIG_ARCH_CHIP_STM32F103RB=n
CONFIG_ARCH_CHIP_STM32F103CB=y
</code></pre><ol start="2"><li><p>Support for the I2C tool has been disabled, but can be restored with following configure options:</p><pre><code>System Type -&gt; Peripherals
      CONFIG_STM32_I2C1=y
      CONFIG_STM32_I2C2=y
      CONFIG_STM32_I2CTIMEOSEC=1
      CONFIG_STM32_I2CTIMEOMS=500
      CONFIG_STM32_I2CTIMEOTICKS=500

Drivers
     CONFIG_I2C=y

Applications -&gt; System Add-Ons
      CONFIG_SYSTEM_I2CTOOL=y
      CONFIG_I2CTOOL_MINBUS=1
      CONFIG_I2CTOOL_MAXBUS=2
      CONFIG_I2CTOOL_MINADDR=0x0
      CONFIG_I2CTOOL_MAXADDR=0xf0
      CONFIG_I2CTOOL_MAXREGADDR=0xff
      CONFIG_I2CTOOL_DEFFREQ=100000
</code></pre></li></ol>`,51)]))}const f=o(n,[["render",r]]);export{p as __pageData,f as default};
