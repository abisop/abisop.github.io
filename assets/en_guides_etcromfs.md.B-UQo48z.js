import{_ as t,c as o,al as i,o as s}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"etc romfs","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/etcromfs.md","filePath":"en/guides/etcromfs.md"}'),a={name:"en/guides/etcromfs.md"};function n(c,e,r,d,l,p){return s(),o("div",null,e[0]||(e[0]=[i(`<h1 id="etc-romfs" tabindex="-1">etc romfs <a class="header-anchor" href="#etc-romfs" aria-label="Permalink to &quot;etc romfs&quot;">​</a></h1><p>The ROMFS image is the contents of the <code>/etc</code> directory, including the start-up script contains any command support by Nuttx, and other customized contents needed.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIG_NSH_ROMFS          /* Mount a ROMFS file system at &quot;/etc&quot; and provide a system init script at</span></span>
<span class="line"><span>                             &quot;/etc/init.d.rc.sysinit&quot; and a startup script at &quot;etc/init.d/rcS&quot;. */</span></span>
<span class="line"><span>CONFIG_ETC_ROMFSMOUNTPT   /* The default mountpoint for the ROMFS volume is &quot;/etc&quot;, but that can be</span></span>
<span class="line"><span>                             changed with this setting.  This must be a absolute path beginning with &#39;/&#39;</span></span>
<span class="line"><span>                             and enclosed in quotes. */</span></span>
<span class="line"><span>CONFIG_ETC_ROMFSDEVNO     /* This is the minor number of the ROMFS block device. The default is &#39;0&#39;</span></span>
<span class="line"><span>                             corresponding to &quot;/dev/ram0&quot;. */</span></span>
<span class="line"><span>CONFIG_ETC_ROMFSSECTSIZE  /* This is the sector size to use with the ROMFS volume. Since the default volume</span></span>
<span class="line"><span>                             is very small, this defaults to 64 but should be increased if the ROMFS volume</span></span>
<span class="line"><span>                             were to be become large. Any value selected must be a power of 2. */</span></span></code></pre></div><p>This capability also depends on:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONFIG_DISABLE_MOUNTPOINT  /* If mount point support is disabled, then you cannot mount any file systems. */</span></span>
<span class="line"><span>CONFIG_FS_ROMFS            /* This option enables ROMFS file system support. */</span></span></code></pre></div><h2 id="start-up-scripts" tabindex="-1">Start up Scripts <a class="header-anchor" href="#start-up-scripts" aria-label="Permalink to &quot;Start up Scripts&quot;">​</a></h2><p><strong>Start-Up Script</strong>. The start-up script contains any command support by Nuttx (i.e., that you see when you enter &#39;nsh&gt; help&#39;). The implementation that is provided is intended to provide great flexibility for the use of Start-Up files. This paragraph will discuss the general behavior when all of the configuration options are set to the default values.</p><p>In this default case, enabling <code>CONFIG_ETC_ROMFS</code> will cause Nuttx to behave as follows at Nuttx start-up time:</p><blockquote><ul><li><p>Nuttx will create a read-only RAM disk (a ROM disk), containing a tiny ROMFS file system containing the following:</p><pre><code>\`--init.d/
    \`-- rcS
    \`-- rc.sysinit
</code></pre><p>Where <code>rcS</code> is the start-up script. Where <code>rc.sysinit</code> is the system-init script.</p></li><li><p>Nuttx will then mount the ROMFS file system at <code>/etc</code>, resulting in:</p><pre><code>|--dev/
|   \`-- ram0
\`--etc/
    \`--init.d/
        \`-- rcS
        \`-- rc.sysinit
</code></pre></li><li><p>By default, the contents of <code>rc.sysinit</code> script are:</p><pre><code># Create a RAMDISK and mount it at /tmp

mkrd -m 1 -s 512 1024
mkfatfs /dev/ram1
mount -t vfat /dev/ram1 /tmp
</code></pre></li><li><p>NSH will execute the script at <code>/etc/init.d/rc.sysinit</code> at system init (before the first NSH prompt). After execution of the script, the root FS will look like:</p><pre><code>|--dev/
|   |-- ram0
|   \`-- ram1
|--etc/
|   \`--init.d/
|       \`-- rcS
|       \`-- rc.sysinit
\`--tmp/
</code></pre></li></ul></blockquote><p><strong>Example Configurations</strong>. Here are some configurations that have <code>CONFIG_ETC_ROMFS=y</code> in the NuttX configuration file. They might provide useful examples:</p><blockquote><ul><li><code>boards/arm/stm32/hymini-stm32v/nsh2</code></li><li><code>boards/arm/dm320/ntosd-dm320/nsh</code></li><li><code>boards/sim/sim/sim/nsh</code></li><li><code>boards/sim/sim/sim/nsh2</code></li><li><code>boards/sim/sim/sim/nx</code></li><li><code>boards/sim/sim/sim/nx11</code></li><li><code>boards/sim/sim/sim/touchscreen</code></li></ul></blockquote><p>In most of these cases, the configuration sets up the <em>default</em><code>/etc/init.d/rc.sysinit</code> and <code>/etc/init.d/rcS</code> script. The default script is here: <code>apps/nshlib/rc.sysinit.template</code> and <code>apps/nshlib/rcS.template</code>. (The funny values in the rc.sysinit.template like <code>XXXMKRDMINORXXX</code> get replaced via <code>sed</code> at build time). This default configuration creates a ramdisk and mounts it at <code>/tmp</code> as discussed above.</p><h2 id="customizing-start-up-scripts" tabindex="-1">Customizing Start up Scripts <a class="header-anchor" href="#customizing-start-up-scripts" aria-label="Permalink to &quot;Customizing Start up Scripts&quot;">​</a></h2><p>In order to modify the start-up behavior, there are three things to study:</p><blockquote><ol><li class="title-ref"><p><strong>Configuration Options.</strong> The additional <code>CONFIG_ETC_ROMFS</code> configuration options discussed with [Configuration]</p></li><li><p><code>tools/mkromfsimg.sh</code> <strong>Script</strong>. The script <code>tools/mkromfsimg.sh</code> creates <code>etc_romfs.c</code>. It is not automatically executed. If you want to change the configuration settings associated with creating and mounting the <code>/tmp</code> directory, then it will be necessary to re-generate this header file using the <code>tools/mkromfsimg.sh</code> script.</p><p>The behavior of this script depends upon several things:</p><ol><li>The configuration settings then installed configuration.</li><li>The <code>genromfs</code> tool(available from <a href="http://romfs.sourceforge.net/" target="_blank" rel="noreferrer">http://romfs.sourceforge.net</a>) or included within the NuttX buildroot toolchain. There is also a snapshot available in the NuttX tools repository <a href="https://bitbucket.org/nuttx/tools/src/master/genromfs-0.5.2.tar.gz" target="_blank" rel="noreferrer">here</a>.</li><li>The <code>xxd</code> tool that is used to generate the C header files (xxd is a normal part of a complete Linux or Cygwin installation, usually as part of the <code>vi</code> package).</li><li>The file <code>include/arch/board/rc.sysinit.template</code> and the file <code>include/arch/board/rcs.template</code></li></ol></li><li><p><code>rc.sysinit.template</code>. The file <code>apps/nshlib/rc.sysinit.template</code> contains the general form of the <code>rc.sysinit</code> file; configured values are plugged into this template file to produce the final <code>rc.sysinit</code> file.</p><p><code>rcS.template</code>. The file <code>apps/nshlib/rcS.template</code> contains the general form of the <code>rcS</code> file; configured values are plugged into this template file to produce the final <code>rcS</code> file.</p><p>To generate a custom <code>rc.sysinit</code> and <code>rcS</code> file a copy of <code>rc.sysinit.template</code> and <code>rcS.template</code> needs to be placed at <code>tools/</code> and changed according to the desired start-up behaviour. Running <code>tools/mkromfsimg.h</code> creates <code>etc_romfs.c</code> which needs to be copied to <code>arch/board/src</code> and compiled in Makefile</p></li></ol></blockquote><p>All of the startup-behavior is contained in <code>rc.sysinit.template</code> and <code>rcS.template</code>. The role of <code>mkromfsimg.sh</code> script is to (1) apply the specific configuration settings to <code>rc.sysinit.template</code> to create the final <code>rc.sysinit</code>, and <code>rcS.template</code> to create the final <code>rcS</code>, and (2) to generate the source file <code>etc_romfs.c</code> containing the ROMFS file system image. To do this, <code>mkromfsimg.sh</code> uses two tools that must be installed in your system:</p><blockquote><ol><li>The <code>genromfs</code> tool that is used to generate the ROMFS file system image.</li><li>The <code>xxd</code> tool that is used to create the C header file.</li></ol></blockquote><h2 id="customizing-romfs-image" tabindex="-1">Customizing ROMFS Image <a class="header-anchor" href="#customizing-romfs-image" aria-label="Permalink to &quot;Customizing ROMFS Image&quot;">​</a></h2><p>The ROMFS image can be generated from the content in the corresponding <code>board/arch/board/board/src/etc</code> directory, and added by Makefile.</p><p><strong>Example Configurations</strong>. Here are some configurations that have <code>CONFIG_ETC_ROMFS=y</code> in the NuttX configuration file. They might provide useful examples:</p><blockquote><ul><li><code>boards/risc-v/bl808/ox64/src/etc</code></li><li><code>boards/risc-v/qemu-rv/rv-virt/src/etc</code></li><li><code>boards/risc-v/esp32c3/esp32c3-devkit/src/etc</code></li><li><code>boards/risc-v/k230/canmv230/src/etc</code></li><li><code>boards/risc-v/jh7110/star64/src/etc</code></li><li><code>boards/arm64/rk3399/nanopi_m4/src/etc</code></li><li><code>boards/sim/sim/sim/src/etc</code></li></ul></blockquote>`,22)]))}const m=t(a,[["render",n]]);export{u as __pageData,m as default};
