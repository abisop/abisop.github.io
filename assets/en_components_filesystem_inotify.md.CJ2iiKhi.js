import{_ as t,c as n,al as s,o as a}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Inotify","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/filesystem/inotify.md","filePath":"en/components/filesystem/inotify.md"}'),i={name:"en/components/filesystem/inotify.md"};function o(r,e,d,l,c,p){return a(),n("div",null,e[0]||(e[0]=[s(`<h1 id="inotify" tabindex="-1">Inotify <a class="header-anchor" href="#inotify" aria-label="Permalink to &quot;Inotify&quot;">​</a></h1><p>Inotify is a kernel subsystem designed for monitoring filesystem events. It enables applications to monitor changes to files and directories in real-time, such as creation, deletion, modification, renaming, and more. inotify offers an efficient way to detect changes in the filesystem without the need for polling, thereby conserving system resources.</p><h2 id="config" tabindex="-1">CONFIG <a class="header-anchor" href="#config" aria-label="Permalink to &quot;CONFIG&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COFNIG_FS_NOTIFY=y</span></span></code></pre></div><h2 id="user-space-api" tabindex="-1">User Space API <a class="header-anchor" href="#user-space-api" aria-label="Permalink to &quot;User Space API&quot;">​</a></h2><p>All inotify user interfaces are declared in the file <code>include/sys/inotify.h</code>. And the usage is consistent with the Linux version.</p><h2 id="reading-events-from-an-inotify-file-descriptor" tabindex="-1">Reading events from an inotify file descriptor <a class="header-anchor" href="#reading-events-from-an-inotify-file-descriptor" aria-label="Permalink to &quot;Reading events from an inotify file descriptor&quot;">​</a></h2><p>To determine what events have occurred, an application read from the inotify file descriptor. If no events have so far occurred, then, assuming a blocking file descriptor, read will block until at least one event occurs</p><p>Each successful read returns a buffer containing one or more of the following structures:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct inotify_event {</span></span>
<span class="line"><span>  int      wd;       /* Watch descriptor */</span></span>
<span class="line"><span>  uint32_t mask;     /* Mask describing event */</span></span>
<span class="line"><span>  uint32_t cookie;   /* Unique cookie associating related</span></span>
<span class="line"><span>                       events (for rename(2)) */</span></span>
<span class="line"><span>  uint32_t len;      /* Size of name field */</span></span>
<span class="line"><span>  char     name[];   /* Optional null-terminated name */</span></span>
<span class="line"><span>};</span></span></code></pre></div><p><strong>wd</strong> identifies the watch for which this event occurs. It is one of the watch descriptors returned by a previous call to inotify_add_watch.</p><p><strong>mask</strong> contains bits that describe the event that occurred</p><p><strong>cookie</strong> is a unique integer that connects related events. Currently, this is used only for rename events, and allows the resulting pair of IN_MOVED_FROM and IN_MOVED_TO events to be connected by the application For all other event types, cookie is set to 0.</p><p>The <strong>name</strong> field is present only when an event is returned for a file inside a watched directory; it identifies the filename within the watched directory. This filename is null-terminated, and may include further null bytes (&#39;0&#39;) to align subsequent reads to a suitable address boundary.</p><p>The <strong>len</strong> field counts all of the bytes in name, including the null bytes; the length of each inotify_event structure is thus sizeof(struct inotify_event)+len.</p><h2 id="inotify-events" tabindex="-1">inotify events <a class="header-anchor" href="#inotify-events" aria-label="Permalink to &quot;inotify events&quot;">​</a></h2><p>The <strong>inotify_add_watch</strong> mask argument and the mask field of the inotify_event structure returned when reading an inotify file descriptor are both bit masks identifying inotify events. The following bits can be specified in mask when calling inotify_add_watch and may be returned in the mask field returned by read.</p><blockquote><p><strong>IN_ACCESS</strong> :File was accessed</p><p><strong>IN_MODIFY</strong> :File was modified (<code>write()</code> or <code>truncate()</code>)</p><p><strong>IN_ATTRIB</strong> :Metadata changed</p><p><strong>IN_OPEN</strong> :File was opened</p><p><strong>IN_CLOSE_WRITE</strong> :File opened for writing was closed</p><p><strong>IN_CLOSE_NOWRITE</strong> : File not opened for writing was closed</p><p><strong>IN_MOVED_FROM</strong> :File was moved from X</p><p><strong>IN_MOVED_TO</strong> :File was moved to Y</p><p><strong>IN_CREATE</strong> :Subfile was created</p><p><strong>IN_DELETE</strong> :Subfile was deleted</p><p><strong>IN_DELETE_SELF</strong> :Self was deleted</p><p><strong>IN_MOVE_SELF</strong> :Self was moved</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>Suppose an application is watching the directory <code>dir</code> and the file <code>dir/myfile</code> for all events. The examples below show some events that will be generated for these two objects.</p><blockquote><p>fd = open(&quot;dir/myfile&quot;, O_RDWR);</p><p>: Generates <strong>IN_OPEN</strong> events for both <code>dir</code> and <code>dir/myfile</code>.</p><p>read(fd, buf, count);</p><p>: Generates <strong>IN_ACCESS</strong> events for both <code>dir</code> and <code>dir/myfile</code>.</p><p>write(fd, buf, count);</p><p>: Generates <strong>IN_MODIFY</strong> events for both <code>dir</code> and <code>dir/myfile</code>.</p><p>fchmod(fd, mode);</p><p>: Generates <strong>IN_ATTRIB</strong> events for both <code>dir</code> and <code>dir/myfile</code>.</p></blockquote><h2 id="note" tabindex="-1">NOTE <a class="header-anchor" href="#note" aria-label="Permalink to &quot;NOTE&quot;">​</a></h2><p>Inotify file descriptors can be monitored using select, poll, and epoll. When an event is available, the file descriptor indicates as readable.</p>`,23)]))}const u=t(i,[["render",o]]);export{h as __pageData,u as default};
