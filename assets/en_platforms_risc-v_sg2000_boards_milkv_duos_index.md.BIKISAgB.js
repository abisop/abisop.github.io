import{_ as t,c as a,al as s,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Milk-V Duo S","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/risc-v/sg2000/boards/milkv_duos/index.md","filePath":"en/platforms/risc-v/sg2000/boards/milkv_duos/index.md"}'),o={name:"en/platforms/risc-v/sg2000/boards/milkv_duos/index.md"};function i(r,e,p,l,d,c){return n(),a("div",null,e[0]||(e[0]=[s(`<h1 id="milk-v-duo-s" tabindex="-1">Milk-V Duo S <a class="header-anchor" href="#milk-v-duo-s" aria-label="Permalink to &quot;Milk-V Duo S&quot;">​</a></h1><p><a href="https://milkv.io/duo-s" target="_blank" rel="noreferrer">Milk-V Duo S</a> is a RISC-V Single-Board Computer based on the SOPHGO SG2000 RISC-V SoC with T-Head C906 64-bit Main Processor, 512 MB of SIP DRAM memory and 100 Mbps Ethernet.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>**System on Chip:** SOPHGO SG2000

:   -   

        **CPU:**

        :   -   64-bit T-Head C906 1.0 GHz (Main Processor)
            -   64-bit T-Head C906 700 MHz (Co-Processor)
            -   64-bit Arm Cortex-A53 1.0 GHz (Alternate Main
                Processor)
</code></pre><ul><li><p><strong>MCU:</strong> 8051 with 6 KB SRAM</p></li><li><p><strong>Memory:</strong> SIP DRAM 512 MB</p></li><li><p><strong>TPU:</strong> 0.5 TOPS INT8</p></li><li><p><strong>Storage:</strong> 1 x microSD Connector, 1 x eMMC Pad</p></li><li><p><strong>USB:</strong> 1 x Type-C for Power and Data or 1 x USB 2.0 A Port Host</p></li><li><p><strong>MIPI CSI:</strong> 1 x 16P FPC Connector (MIPI CSI 2-Lane), 1 x 15P FPC Connector (MIPI CSI 2-Lane)</p></li><li><p><strong>Sensor Support:</strong> 5M @ 30 FPS</p></li><li><p><strong>MIPI DSI:</strong> Via GPIO Header (MIPI DSI 4-Lane)</p></li><li><p><strong>Ethernet:</strong> 100 Mbps Ethernet Port (RJ45)</p></li><li><p><strong>Wireless:</strong> Optional Wi-Fi 6 / Bluetooth 5</p></li><li><p><strong>Audio:</strong> Via GPIO Pin</p></li><li><p><strong>GPIO:</strong> Up to 39 x GPIO Pin (via 2 x 26-Pin GPIO Header)</p></li><li><p><strong>Others:</strong> 1 x Boot Switch, 1 x Recovery Key, 1 x Reset Key</p></li></ul><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>A <strong>USB Serial Adapter</strong> is required to run NuttX on Milk-V Duo S, <strong>CP2102</strong> is recommended. CH340 might not work correctly with Duo S.</p><p>Connect the USB Serial Adapter to Duo S Serial Console at:</p><p>USB Serial Milk-V Duo S Pin</p><hr><p>GND Pin 6 (GND) RX Pin 8 (XGPIOA 16 / UART0 TX) TX Pin 10 (XGPIOA 17 / UART0 RX)</p><p>On the USB Serial Adapter, set the <strong>Voltage Level</strong> to 3V3.</p><p>Connect Duo S to our computer with the USB Serial Adapter. On our computer, start a Serial Terminal and connect to the USB Serial Port at <strong>115.2 kbps</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> screen /dev/ttyUSB0 115200</span></span></code></pre></div><p>NuttX will appear in the Serial Console when it boots on Duo S.</p><h2 id="risc-v-toolchain" tabindex="-1">RISC-V Toolchain <a class="header-anchor" href="#risc-v-toolchain" aria-label="Permalink to &quot;RISC-V Toolchain&quot;">​</a></h2><p>Before building NuttX for Milk-V Duo S, download the toolchain for <a href="https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases" target="_blank" rel="noreferrer">xPack GNU RISC-V Embedded GCC (riscv-none-elf)</a>.</p><p>Add the downloaded toolchain <code>xpack-riscv-none-elf-gcc-.../bin</code> to the <code>PATH</code> Environment Variable.</p><p>Check the RISC-V Toolchain:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> riscv-none-elf-gcc -v</span></span></code></pre></div><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>To build NuttX for Milk-V Duo S, [[in](\`in.md)stall the prerequisites &lt;/quickstart/install&gt;]{.title-ref} and [[clone the git repo](\`clone the git repo.md)sitories &lt;/quickstart/install&gt;]{.title-ref} for <code>nuttx</code> and <code>apps</code>.</p><p>Configure the NuttX project and build the project:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> tools/configure.sh milkv_duos:nsh</span></span>
<span class="line"><span> make</span></span></code></pre></div><p>This produces the NuttX Kernel <code>nuttx.bin</code>. Next, build the NuttX Apps Filesystem:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make export</span></span>
<span class="line"><span> pushd ../apps</span></span>
<span class="line"><span> tools/mkimport.sh -z -x ../nuttx/nuttx-export-*.tar.gz</span></span>
<span class="line"><span> make import</span></span>
<span class="line"><span> popd</span></span>
<span class="line"><span> genromfs -f initrd -d ../apps/bin -V &quot;NuttXBootVol&quot;</span></span></code></pre></div><p>This generates the Initial RAM Disk <code>initrd</code>.</p><p>Package the NuttX Kernel and Initial RAM Disk into a NuttX Image:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> head -c 65536 /dev/zero &gt;/tmp/nuttx.pad</span></span>
<span class="line"><span> cat nuttx.bin /tmp/nuttx.pad initrd &gt;Image-sg2000</span></span></code></pre></div><p>The NuttX Image <code>Image-sg2000</code> will be copied to the TFTP Server in the next step.</p><h2 id="booting" tabindex="-1">Booting <a class="header-anchor" href="#booting" aria-label="Permalink to &quot;Booting&quot;">​</a></h2><p>NuttX requires a microSD Card with U-Boot Bootloader. Prepare a <a href="https://lupyuen.github.io/articles/sg2000#download-the-linux-microsd" target="_blank" rel="noreferrer">Linux microSD Card</a> for Duo S.</p><p>To boot NuttX on Milk-V Duo S, flip the <a href="https://lupyuen.github.io/articles/sg2000#boot-without-microsd" target="_blank" rel="noreferrer">Main Processor Switch</a> to <strong>RV</strong> (RISC-V). On our computer, <a href="https://lupyuen.github.io/articles/sg2000#boot-nuttx-over-tftp" target="_blank" rel="noreferrer">install the TFTP Server</a>.</p><p>Copy the file <code>Image-sg2000</code> from the previous section to the TFTP Server, together with the Device Tree:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> wget https://github.com/lupyuen2/wip-nuttx/releases/download/sg2000-1/cv181x_milkv_duos_sd.dtb</span></span>
<span class="line"><span> scp Image-sg2000 \\</span></span>
<span class="line"><span>   tftpserver:/tftpfolder/Image-sg2000</span></span>
<span class="line"><span> scp cv181x_milkv_duos_sd.dtb \\</span></span>
<span class="line"><span>   tftpserver:/tftpfolder/cv181x_milkv_duos_sd.dtb</span></span></code></pre></div><p>Check that Duo S is connected to our computer via a USB Serial Adapter at 115.2 kbps:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> screen /dev/ttyUSB0 115200</span></span></code></pre></div><p>Insert the microSD Card into Duo S, connect the Ethernet Port and power up via the USB-C Port.</p><p>When Duo S boots, press Enter to see the U-Boot Prompt. Run these commands to <a href="https://lupyuen.github.io/articles/sg2000#boot-nuttx-over-tftp" target="_blank" rel="noreferrer">boot NuttX over TFTP</a>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Change to your TFTP Server</span></span>
<span class="line"><span> setenv tftp_server 192.168.x.x</span></span>
<span class="line"><span> saveenv</span></span>
<span class="line"><span> dhcp {kernel_addr_r} {tftp_server}:Image-sg2000</span></span>
<span class="line"><span> tftpboot {fdt_addr_r} {tftp_server}:cv181x_milkv_duos_sd.dtb</span></span>
<span class="line"><span> fdt addr {fdt_addr_r}</span></span>
<span class="line"><span> booti {kernel_addr_r} - {fdt_addr_r}</span></span></code></pre></div><p>Or configure U-Boot to <a href="https://lupyuen.github.io/articles/sg2000#boot-nuttx-over-tftp" target="_blank" rel="noreferrer">boot NuttX automatically</a>.</p><p>NuttX boots on Duo S and NuttShell (nsh) appears in the Serial Console. To see the available commands in NuttShell:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> help</span></span></code></pre></div><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic configuration that runs NuttShell (nsh). This configuration is focused on low level, command-line driver testing. Built-in applications are supported, but none are enabled. Serial Console is enabled on UART0 at 115.2 kbps.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>NuttX for Milk-V Duo S supports these peripherals:</p><p>Peripheral Support NOTES</p><hr><p>UART Yes</p>`,52)]))}const g=t(o,[["render",i]]);export{u as __pageData,g as default};
