import{_ as a,c as t,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"RaspberryPi rp2040","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/rp2040/index.md","filePath":"en/platforms/arm/rp2040/index.md"}'),i={name:"en/platforms/arm/rp2040/index.md"};function n(p,e,l,s,d,c){return r(),t("div",null,e[0]||(e[0]=[o(`<h1 id="raspberrypi-rp2040" tabindex="-1">RaspberryPi rp2040 <a class="header-anchor" href="#raspberrypi-rp2040" aria-label="Permalink to &quot;RaspberryPi rp2040&quot;">​</a></h1><p>chip:rp2040</p><p>The rp2040 is a dual core chip produced by the RaspberryPi Foundation that is based on ARM Cortex-M0+.</p><h2 id="peripheral-support" tabindex="-1">Peripheral Support <a class="header-anchor" href="#peripheral-support" aria-label="Permalink to &quot;Peripheral Support&quot;">​</a></h2><p>The following list indicates peripherals currently supported in NuttX:</p><p>Peripheral Notes</p><hr><p>GPIO See Supported Boards documentation for available pins. UART I2C SPI DMAC PWM USB GPIO 0 (UART0 TX) and GPIO 1 (UART0 RX) are used for the console. PIO IRQs DMA Clock Output RP2040 Programmable I/O ws2812 Flash ROM Boot Smart pixels (e.g. Neopixel) SRAM Boot If Pico SDK is available a nuttx.uf2 file will be created BMP180 Requires I2C0 INA219 Requires I2C0</p><p>The Pico Display Pack (ST7789 LCD) and Pico Audio Pack (PCM5100A I2S DAC) are also available.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><ol><li><p>Download Raspberry Pi Pico SDK:</p><blockquote><p>git clone -b 2.0.0 <a href="https://github.com/raspberrypi/pico-sdk.git" target="_blank" rel="noreferrer">https://github.com/raspberrypi/pico-sdk.git</a></p></blockquote></li><li><p>Set PICO_SDK_PATH environment variable:</p><pre><code>export PICO_SDK_PATH=&lt;absolute_path_to_pico-sdk_directory&gt;
</code></pre></li><li><p>Download NuttX and the companion applications. These must both be contained in the same directory:</p><pre><code>git clone https://github.com/apache/nuttx.git nuttx
git clone https://github.com/apache/nuttx-apps.git apps
</code></pre></li></ol><h2 id="building-nuttx" tabindex="-1">Building NuttX <a class="header-anchor" href="#building-nuttx" aria-label="Permalink to &quot;Building NuttX&quot;">​</a></h2><ol><li><p>Change to NuttX directory:</p><pre><code>cd nuttx
</code></pre></li><li><p>Select a configuration. The available configurations can be listed with the command:</p><pre><code>./tools/configure.sh -L
</code></pre></li><li><p>Load the selected configuration.:</p><pre><code>make distclean
./tools/configure.sh &lt;selected_configuration&gt;
</code></pre></li><li><p>Modify the configuration as needed (optional):</p><pre><code>make menuconfig
</code></pre></li><li><p>Build NuttX:</p><pre><code>make
</code></pre></li></ol><h2 id="programming" tabindex="-1">Programming <a class="header-anchor" href="#programming" aria-label="Permalink to &quot;Programming&quot;">​</a></h2><h3 id="programming-using-bootsel" tabindex="-1">Programming using BOOTSEL <a class="header-anchor" href="#programming-using-bootsel" aria-label="Permalink to &quot;Programming using BOOTSEL&quot;">​</a></h3><p>Connect board to USB port while pressing BOOTSEL. The board will be detected as USB Mass Storage Device. Then copy &quot;nuttx.uf2&quot; into the device. (Same manner as the standard Pico SDK applications installation.)</p><h3 id="programming-using-sdb" tabindex="-1">Programming using SDB <a class="header-anchor" href="#programming-using-sdb" aria-label="Permalink to &quot;Programming using SDB&quot;">​</a></h3><p>Most (but no all) RP2040 boards provide a serial (SDB) debug port. The &quot;nuttx&quot; ELF file can be uploaded with an appropriate SDB programmer module and companion software.</p><h2 id="running-nuttx" tabindex="-1">Running NuttX <a class="header-anchor" href="#running-nuttx" aria-label="Permalink to &quot;Running NuttX&quot;">​</a></h2><p>Most builds provide access to the console via UART0. To access this GPIO 0 and 1 pins must be connected to the device such as USB-serial converter.</p><p>The [usbnsh]{.title-ref} configuration provides the console access by USB CDC/ACM serial devcice. The console is available by using a terminal software on the USB host.</p><h2 id="supported-boards" tabindex="-1">Supported Boards <a class="header-anchor" href="#supported-boards" aria-label="Permalink to &quot;Supported Boards&quot;">​</a></h2><blockquote><p>boards/<em>/</em></p></blockquote>`,23)]))}const m=a(i,[["render",n]]);export{h as __pageData,m as default};
