import{_ as t,c as a,al as i,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse(`{"title":"Why can't I put my special stuff in NuttX header files?","description":"","frontmatter":{},"headers":[],"relativePath":"en/guides/specialstuff_in_nuttxheaderfiles.md","filePath":"en/guides/specialstuff_in_nuttxheaderfiles.md"}`),o={name:"en/guides/specialstuff_in_nuttxheaderfiles.md"};function s(d,e,r,l,h,c){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="why-can-t-i-put-my-special-stuff-in-nuttx-header-files" tabindex="-1">Why can&#39;t I put my special stuff in NuttX header files? <a class="header-anchor" href="#why-can-t-i-put-my-special-stuff-in-nuttx-header-files" aria-label="Permalink to &quot;Why can\\&#39;t I put my special stuff in NuttX header files?&quot;">​</a></h1><p>Warning</p><p>Migrated from: <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629466" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629466</a></p><h2 id="the-problem" tabindex="-1">The Problem <a class="header-anchor" href="#the-problem" aria-label="Permalink to &quot;The Problem&quot;">​</a></h2><p>I am very picky about what goes into NuttX header files. I don&#39;t accept non-standardized changes to go into them just to permit external code to compile; nor do I accept changes that imply something is implemented in NuttX when it is not (although there are cases like that in the header files now).</p><ul><li>But I want to use [newlib]{.title-ref} logic that depends on certain definitions on the Nuttx header files!</li><li>But I am trying to compile an application that depends on non-standard declarations in header files! Or prototypes for functions that are not provided by NuttX! Or types that are not used by NuttX!</li></ul><p>You will find that I am very stubborn on this subject and you will be wasting your time and energy if you try to get kruft included into NuttX header files for your personal purposes.</p><h2 id="a-work-around" tabindex="-1">A Work-Around <a class="header-anchor" href="#a-work-around" aria-label="Permalink to &quot;A Work-Around&quot;">​</a></h2><p>But there is a work-around for my pickiness and stubborn-ness (at least for compilers like GCC that support the GNU extensions). Let&#39;s suppose you wanted to add this definition:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define I_AM_A_NERD true</span></span></code></pre></div><p>to the standard <code>time.h</code> header file. You submitted a patch to do this and I refused it. Now what?</p><p>While I refuse to put non-standard or useless stuff in NuttX header files, there are ways to work around this. Suppose that you create a directory called <code>myincludes/</code> and in your <code>myincludes/</code> directory is a header called <code>time.h</code>. This <code>time.h</code> header file consists of:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#define I_AM_A_NERD true</span></span>
<span class="line"><span>#include_next &lt;time.h&gt;</span></span></code></pre></div><p>Then in your <code>CFLAGS</code>, you use an <code>-isystem</code> setting to include header files from <code>myincludes/</code> before any header files from the NuttX <code>include/</code> directory. Then when your application includes <code>time.h</code>, the version of <code>time.h</code> in <code>myincludes/</code> is the one that will be included. That version will define <code>I_AM_A_NERD</code> as you want and then include the next file named <code>time.h</code> in the compiler&#39;s include path. That file will be the standard <code>time.h</code> header file that is provided in the NuttX <code>include/</code> directory</p><p>In this way you an append or modify any of the NuttX header files to suit your own purposes without my having to accept changes that I do not want into the NuttX repository.</p><h2 id="when-does-it-make-sense" tabindex="-1">When Does It Make Sense? <a class="header-anchor" href="#when-does-it-make-sense" aria-label="Permalink to &quot;When Does It Make Sense?&quot;">​</a></h2><p>When does it make sense to add new definitions, types, and function prototypes to the NuttX header files? Only under the following conditions:</p><ul><li>The changes are standard and specified in OpenGroup.org</li><li>The changes are provided by a patch that includes the full, verified implementation of the feature that uses the types and implements the functions.</li></ul>`,18)]))}const f=t(o,[["render",s]]);export{u as __pageData,f as default};
