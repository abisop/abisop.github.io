import{_ as i,c as t,al as a,o as d}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"mtdrwb MTD Read-ahead and Write Buffering","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/mtdrwb/index.md","filePath":"en/applications/examples/mtdrwb/index.md"}'),r={name:"en/applications/examples/mtdrwb/index.md"};function o(c,e,n,s,l,_){return d(),t("div",null,e[0]||(e[0]=[a('<h1 id="mtdrwb-mtd-read-ahead-and-write-buffering" tabindex="-1"><code>mtdrwb</code> MTD Read-ahead and Write Buffering <a class="header-anchor" href="#mtdrwb-mtd-read-ahead-and-write-buffering" aria-label="Permalink to &quot;`mtdrwb` MTD Read-ahead and Write Buffering&quot;">â€‹</a></h1><p>This examples provides a simple test of MTD Read-Ahead/Write buffering logic.</p><ul><li><code>CONFIG_EXAMPLES_MTDRWB</code> -- Enables the MTD R/W buffering test example.</li><li><code>CONFIG_EXAMPLES_MTDRWB_ARCHINIT</code> -- The default is to use the RAM MTD device at <code>drivers/mtd/rammtd.c</code>. But an architecture-specific MTD driver can be used instead by defining <code>CONFIG_EXAMPLES_MTDRWB_ARCHINIT</code>. In this case, the initialization logic will call <code>mtdrwb_archinitialize()</code> to obtain the MTD driver instance.</li></ul><p>When <code>CONFIG_EXAMPLES_MTDRWB_ARCHINIT</code> is not defined, this test will use the RAM MTD device at <code>drivers/mtd/rammtd.c</code> to simulate FLASH. The size of the allocated RAM drive will be: <code>CONFIG_EXMPLES_RAMMTD_ERASESIZE * CONFIG_EXAMPLES_MTDRWB_NEBLOCKS</code></p><ul><li><code>CONFIG_EXAMPLES_MTDRWB_ERASESIZE</code> -- This value gives the size of one erase block in the MTD RAM device. This must exactly match the default configuration in <code>drivers/mtd/rammtd.c</code>!</li><li><code>CONFIG_EXAMPLES_MTDRWB_NEBLOCKS</code> -- This value gives the number of erase blocks in MTD RAM device.</li></ul>',5)]))}const T=i(r,[["render",o]]);export{h as __pageData,T as default};
