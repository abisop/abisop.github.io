import{_ as i,c as a,al as s,j as e,a as t,o as c}from"./chunks/framework.NFAqBSgQ.js";const f=JSON.parse('{"title":"Task Scheduling Interfaces","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/user/02_task_scheduling.md","filePath":"en/reference/user/02_task_scheduling.md"}'),n={name:"en/reference/user/02_task_scheduling.md"};function l(o,r,d,u,h,p){return c(),a("div",null,r[0]||(r[0]=[s('<h1 id="task-scheduling-interfaces" tabindex="-1">Task Scheduling Interfaces <a class="header-anchor" href="#task-scheduling-interfaces" aria-label="Permalink to &quot;Task Scheduling Interfaces&quot;">​</a></h1><p>By default, NuttX performs strict priority scheduling: Tasks of higher priority have exclusive access to the CPU until they become blocked. At that time, the CPU is available to tasks of lower priority. Tasks of equal priority are scheduled FIFO.</p><p>Optionally, a NuttX task or thread can be configured with round-robin or <em>sporadic</em> scheduler. The round-robin is similar to priority scheduling <em>except</em> that tasks with equal priority and share CPU time via <em>time-slicing</em>. The time-slice interval is a constant determined by the configuration setting <code>CONFIG_RR_INTERVAL</code> to a positive, non-zero value. Sporadic scheduling scheduling is more complex, varying the priority of a thread over a <em>replenishment</em> period. Support for sporadic scheduling is enabled by the configuration option <code>CONFIG_SCHED_SPORADIC</code>.</p><p>The OS interfaces described in the following paragraphs provide a POSIX-compliant interface to the NuttX scheduler:</p>',4),e("blockquote",null,[e("ul",null,[e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_setparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_getparam")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_setscheduler")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_getscheduler")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_yield")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_get_priority_max")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_get_priority_min")]),e("li",null,[t(":c"),e("code",{class:"interpreted-text",role:"func"},"sched_rr_get_interval")])])],-1),e("h2",{id:"functions",tabindex:"-1"},[t("Functions "),e("a",{class:"header-anchor",href:"#functions","aria-label":'Permalink to "Functions"'},"​")],-1)]))}const m=i(n,[["render",l]]);export{f as __pageData,m as default};
