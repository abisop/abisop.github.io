import{_ as c,c as o,al as r,j as t,a as i,o as s}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"Architecture-Specific Code","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/arch/index.md","filePath":"en/components/arch/index.md"}'),a={name:"en/components/arch/index.md"};function n(d,e,l,h,p,u){return s(),o("div",null,e[0]||(e[0]=[r(`<h1 id="architecture-specific-code" tabindex="-1">Architecture-Specific Code <a class="header-anchor" href="#architecture-specific-code" aria-label="Permalink to &quot;Architecture-Specific Code&quot;">​</a></h1><p>The NuttX configuration consists of:</p><ul><li><p>Processor architecture specific files. These are the files contained in the <code>arch/&lt;arch-name&gt;/</code> directory discussed in this file.</p></li><li><p>Chip/SoC specific files. Each processor architecture is embedded in chip or System-on-a-Chip (SoC) architecture. The full chip architecture includes the processor architecture plus chip-specific interrupt logic, general purpose I/O (GPIO) logic, and specialized, internal peripherals (such as UARTs, USB, etc.).</p><p>These chip-specific files are contained within chip-specific sub-directories in the <code>arch/&lt;arch-name&gt;/</code> directory and are selected via the CONFIG_ARCH_name selection</p></li><li><p>Board specific files. In order to be usable, the chip must be contained in a board environment. The board configuration defines additional properties of the board including such things as peripheral LEDs, external peripherals (such as network, USB, etc.).</p><p>These board-specific configuration files can be found in the <code>boards/&lt;arch&gt;/&lt;chip&gt;/&lt;board&gt;</code> sub-directories.</p></li></ul><p>This file will address the processor architecture specific files that are contained in the <code>arch/&lt;arch-name&gt;/</code> directory. The file include/nuttx/arch.h identifies all of the APIs that must be provided by this architecture specific logic. (It also includes <code>arch/&lt;arch-name&gt;/arch.h</code> as described below).</p><h2 id="directory-structure-in-arch" tabindex="-1">Directory Structure in <code>arch/</code> <a class="header-anchor" href="#directory-structure-in-arch" aria-label="Permalink to &quot;Directory Structure in \`arch/\`&quot;">​</a></h2><p>The <code>arch/</code> directory contains architecture-specific logic. The complete board port is defined by the architecture-specific code in this directory plus the board-specific configurations in the <code>boards/</code> directory. Each architecture must provide a subdirectory &lt;arch-name&gt; under <code>arch/</code> with the following characteristics:</p><pre><code>&lt;arch-name&gt;/
|-- include/
|   |--&lt;chip-name&gt;/
|   |  \`-- (chip-specific header files)
|   |--&lt;other-chips&gt;/
|   |-- arch.h
|   |-- irq.h
|   |-- syscall.h
|   \`-- types.h
\`-- src/
    |--&lt;chip-name&gt;/
    |  \`-- (chip-specific source files)
    |--&lt;other-chips&gt;/
    |-- Makefile
    \`-- (architecture-specific source files)
</code></pre><h2 id="summary-of-files" tabindex="-1">Summary of Files <a class="header-anchor" href="#summary-of-files" aria-label="Permalink to &quot;Summary of Files&quot;">​</a></h2><p><code>include/&lt;chip-name&gt;/</code></p><blockquote><p>This sub-directory contains chip-specific header files.</p></blockquote><p><code>include/arch.h</code></p><blockquote><p>This is a hook for any architecture specific definitions that may be needed by the system. It is included by <code>include/nuttx/arch.h</code></p></blockquote><p><code>include/types.h</code></p><blockquote><p>This provides architecture/toolchain-specific definitions for standard types. This file should typedef: <code>_int8_t</code>, <code>_uint8_t</code>, <code>_int16_t</code>, <code>_uint16_t</code>, <code>_int32_t</code>, <code>_uint32_t</code></p><p>and if the architecture supports 64-bit integers: <code>_int24_t</code>, <code>_uint24_t</code>, <code>_int64_t</code>, <code>_uint64_t</code></p><p>NOTE that these type names have a leading underscore character. This file will be included (indirectly) by <code>include/stdint.h</code> and typedef&#39;ed to the final name without the underscore character. This roundabout way of doings things allows the stdint.h to be removed from the <code>include/</code> directory in the event that the user prefers to use the definitions provided by their toolchain header files.</p></blockquote><p><code>irqstate_t</code></p><blockquote><p>Must be defined to the size required to hold the interrupt enable/disable state.</p><p>This file will be included by <code>include/sys/types.h</code> and be made available to all files.</p></blockquote><p><code>include/irq.h</code></p><blockquote><p>This file needs to define some architecture-specific functions (usually inline if the compiler supports inlining) and structures. These include:</p></blockquote><p><code>struct xcptcontext</code></p><blockquote><p>This structure represents the saved context ofa thread.</p></blockquote><p><code>irqstate_t up_irq_save(void)</code></p><blockquote><p>Used to disable all interrupts.</p></blockquote><p><code>void up_irq_restore(irqstate_t flags)</code></p><blockquote><p>Used to restore interrupt enables to the same state as before <code>up_irq_save</code> was called.</p><p>NOTE: These interfaces are not available to application code but can only be used within the operating system code. And, in general, these functions should <strong>never</strong> be called directly, not unless you know absolutely well what you are doing. Rather you should typically use the wrapper functions <code>enter_critical_section()</code> and <code>leave_critical_section()</code> as prototyped in <code>include/nuttx/irq.h</code>.</p><p>This file must also define NR_IRQS, the total number of IRQs supported by the board.</p></blockquote><ul><li><p><code>include/syscall.h</code>: This file needs to define some architecture specific functions (usually inline if the compiler supports inlining) to support software interrupts or <em>syscall</em>s that can be used all from user-mode applications into kernel-mode NuttX functions. This file must always be provided to prevent compilation errors. However, it need only contain valid function declarations if the architecture supports the <code>CONFIG_BUILD_PROTECTED</code> or <code>CONFIG_BUILD_KERNEL</code>configurations.</p><p>See [[/component](]{.title-ref}/component.md)s/syscall\` for details.</p></li></ul><p><code>src/&lt;chip-name&gt;/</code></p><blockquote><p>This sub-directory contains chip-specific source files.</p></blockquote><p><code>src/Makefile</code></p><blockquote><p>This makefile will be executed to build the targets src/libup.a and src/up_head.o. The up_head.o file holds the entry point into the system (power-on reset entry point, for example). It will be used in the final link with libup.a and other system archives to generate the final executable.</p></blockquote><h2 id="supported-architectures" tabindex="-1">Supported Architectures <a class="header-anchor" href="#supported-architectures" aria-label="Permalink to &quot;Supported Architectures&quot;">​</a></h2>`,30),t("p",null,[i("The list of supported architectures can be found in "),t("code",{class:"interpreted-text",role:"ref"},"Supported Platforms <platforms>"),i(".")],-1)]))}const m=c(a,[["render",n]]);export{b as __pageData,m as default};
