import{_ as o,c as i,al as a,j as e,a as t,o as s}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"NX","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/nxgraphics/nx.md","filePath":"en/components/nxgraphics/nx.md"}'),r={name:"en/components/nxgraphics/nx.md"};function l(d,n,c,p,h,u){return s(),i("div",null,n[0]||(n[0]=[a("",5),e("p",null,[t("The default server message queue name used by the :c"),e("code",{class:"interpreted-text",role:"macro"},"nx_run"),t(" macro:")],-1),a("",6),e("p",null,[t("These define callbacks that must be provided to :c"),e("code",{class:"interpreted-text",role:"func"},"nx_openwindow"),t(". These callbacks will be invoked as part of the processing performed by :c"),e("code",{class:"interpreted-text",role:"func"},"nx_eventhandler"),t(".")],-1),e("h2",{id:"starting-the-nx-server",tabindex:"-1"},[t("Starting the NX Server "),e("a",{class:"header-anchor",href:"#starting-the-nx-server","aria-label":'Permalink to "Starting the NX Server"'},"​")],-1),e("p",null,[t("The "),e("em",null,"NX Server"),t(" is a kernel daemon that receives and serializes graphic commands. Before you can use the NX graphics system, you must first start this daemon. There are two ways that this can be done:")],-1),e("ol",null,[e("li",null,[e("p",null,[t("The NX server may be started in your board startup logic by simply calling the function "),e("code",null,"nxmu_start()"),t(". The board startup logic usually resides the the "),e("code",null,"boards/arch/chip/board/src"),t(" directory. The board startup logic can run automatically during the early system if "),e("code",null,"CONFIG_BOARD_LATE_INITIALIZE"),t(" is defined in the configuration. Or, the board startup logic can execute under control of the application by calling :c"),e("code",{class:"interpreted-text",role:"func"},"boardctl"),t(" as:")]),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"boardctl(BOARDIOC_INIT, arg)")])])])]),e("p",null,[t("The board initialization logic will run in either case and the simple call to "),e("code",null,"nxmu_start()"),t(" will start the NX server.")])]),e("li",null,[e("p",null,"The NX server may also be started later by the application via"),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"boardctl(BOARDIOC_NX_START, arg)")])])])])])],-1),e("h2",{id:"nx-server-callbacks",tabindex:"-1"},[t("NX Server Callbacks "),e("a",{class:"header-anchor",href:"#nx-server-callbacks","aria-label":'Permalink to "NX Server Callbacks"'},"​")],-1),e("p",null,"Set the color of the background.",-1),e("p",null,"param handle",-1),e("p",null,[t(": The handle created by :c"),e("code",null,"nx_openwindow"),t('{.interpreted-text role="func"} or :c'),e("code",{class:"interpreted-text",role:"func"},"nx_requestbkgd")],-1),a("",6),e("p",null,[t(": The handle returned by :c"),e("code",null,"nx_openwindow"),t('{.interpreted-text role="func"} or :c'),e("code",{class:"interpreted-text",role:"func"},"nx_requestbkgd"),t(" that specifies the window within which the move is to be done")],-1),a("",6)]))}const v=o(r,[["render",l]]);export{m as __pageData,v as default};
