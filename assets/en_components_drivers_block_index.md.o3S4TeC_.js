import{_ as o,c,al as t,o as i}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Block Device Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/block/index.md","filePath":"en/components/drivers/block/index.md"}'),r={name:"en/components/drivers/block/index.md"};function s(d,e,n,l,a,m){return i(),c("div",null,e[0]||(e[0]=[t('<h1 id="block-device-drivers" tabindex="-1">Block Device Drivers <a class="header-anchor" href="#block-device-drivers" aria-label="Permalink to &quot;Block Device Drivers&quot;">â€‹</a></h1><blockquote><p>eeprom.rst ramdisk.rst</p></blockquote><p>Block device drivers have these properties:</p><ul><li><code>include/nuttx/fs/fs.h</code>. All structures and APIs needed to work with block drivers are provided in this header file.</li><li><code>struct block_operations</code>. Each block device driver must implement an instance of <code>struct block_operations</code>. That structure defines a call table with the following methods:</li><li><code>int register_blockdriver(const char *path, const struct block_operations *bops, mode_t mode, void *priv);</code>. Each block driver registers itself by calling <code>register_blockdriver()</code>, passing it the <code>path</code> where it will appear in the <code>pseudo file system &lt;file_system_overview&gt;</code>{.interpreted-text role=&quot;ref&quot;} and it&#39;s initialized instance of <code>struct block_operations</code>.</li><li><strong>User Access</strong>. Users do not normally access block drivers directly, rather, they access block drivers indirectly through the <code>mount()</code> API. The <code>mount()</code> API binds a block driver instance with a file system and with a mountpoint. Then the user may use the block driver to access the file system on the underlying media. <em>Example</em>: See the <code>cmd_mount()</code> implementation in <code>apps/nshlib/nsh_fscmds.c</code>.</li><li><strong>Accessing a Character Driver as a Block Device</strong>. See the loop device at <code>drivers/loop.c</code>. <em>Example</em>: See the <code>cmd_losetup()</code> implementation in <code>apps/nshlib/nsh_fscmds.c</code>.</li><li><strong>Accessing a Block Driver as Character Device</strong>. See the Block-to-Character (BCH) conversion logic in <code>drivers/bch/</code>. <em>Example</em>: See the <code>cmd_dd()</code> implementation in <code>apps/nshlib/nsh_ddcmd.c</code>.</li><li><strong>Examples</strong>. <code>drivers/loop.c</code>, <code>drivers/mmcsd/mmcsd_spi.c</code>, <code>drivers/ramdisk.c</code>, etc.</li></ul>',4)]))}const v=o(r,[["render",s]]);export{h as __pageData,v as default};
