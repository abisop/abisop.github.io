import{_ as i,c as t,al as r,o as n}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Pinctrl Device Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/pinctrl.md","filePath":"en/components/drivers/special/pinctrl.md"}'),s={name:"en/components/drivers/special/pinctrl.md"};function o(l,e,c,a,d,p){return n(),t("div",null,e[0]||(e[0]=[r('<h1 id="pinctrl-device-drivers" tabindex="-1">Pinctrl Device Drivers <a class="header-anchor" href="#pinctrl-device-drivers" aria-label="Permalink to &quot;Pinctrl Device Drivers&quot;">â€‹</a></h1><ul><li>The Pinctl driver framework allows applications and drivers to flexibly configure and manage pin parameters such as functionality, strength, driver type, and slewrate (voltage transition speed). This framework significantly enhances the flexibility and configurability of the system in terms of hardware interface control.</li><li><code>include/nuttx/pinctrl/pinctrl.h</code> All structures and APIs needed to work with pinctrl drivers are provided in this header file.</li><li><code>struct pinctrl_dev_s</code> and <code>struct pinctrl_ops_s</code>. Each pinctrl device driver must implement an instance of <code>struct pinctrl_dev_s</code>. And the <code>struct pinctrl_ops_s</code> defines a call table with the following methods: <ol><li><strong>set_function</strong>: Configures the pin&#39;s multiplexing (Mux) function, allowing it to be set as a specific hardware interface (e.g., UART, SPI, I2C) or as a general-purpose GPIO pin.</li><li><strong>set_strength</strong>: Allows the user to configure the pin&#39;s drive strength to meet the requirements of different hardware interfaces.</li><li><strong>set_driver</strong>: Controls the pin&#39;s driver type, such as push-pull output or open-drain output.</li><li><strong>set_slewrate</strong>: Enables the configuration of pin slew rate, which is crucial for high-speed digital signal transmission, optimizing signal rise and fall times.</li><li><strong>select_gpio</strong>: Configures the pin function as GPIO.</li></ol></li><li>Convenience macros are provided to map these operations directly: <code>PINCTRL_SETFUNCTION</code>,<code>PINCTRL_SETSTRENGTH</code>,<code>PINCTRL_SETDRIVER</code>,<code>PINCTRL_SETSLEWRATE</code>, <code>PINCTRL_SELECTGPIO</code>.</li><li>Application developers can configure and control pins by opening /dev/pinctrl0 nodes and using the ioctl system call. cmd: PINCTRLC_SETFUNCTION, PINCTRLC_SETSTRENGTH, PINCTRLC_SETDRIVER, PINCTRLC_SETSLEWRATE, PINCTRLC_SELECTGPIO. parameters: struct pinctrl_param_s.</li></ul>',2)]))}const h=i(s,[["render",o]]);export{u as __pageData,h as default};
