import{_ as s,c as i,al as t,j as e,a,o}from"./chunks/framework.NFAqBSgQ.js";const b=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"en/contributing/documentation.md","filePath":"en/contributing/documentation.md"}'),l={name:"en/contributing/documentation.md"};function r(p,n,c,d,h,u){return o(),i("div",null,n[0]||(n[0]=[t(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><p>The Apache NuttX Documentation is built using the <a href="https://www.sphinx-doc.org/en/master/" target="_blank" rel="noreferrer">Sphinx documentation system</a>. Documentation is written in <a href="https://docutils.sourceforge.io/rst.html" target="_blank" rel="noreferrer">ReStructured Text</a> (RST), with Sphinx-specific directives. RST is the format used for <a href="https://docs.python.org/3/" target="_blank" rel="noreferrer">Python documentation</a> and is also used in many other projects. Using Sphinx, the RST files are rendered into HTML files that can be read in your browser.</p><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>To render the Documentation locally, you should clone the NuttX main repository and navigate into it. Then,</p><blockquote><ol><li>Install Sphinx and other dependencies using pipenv. You may also find it helpful on platforms such as Windows and MacOS to use <em>pyenv</em> to manage your python installation. You can read about installing that on the project <a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="noreferrer">site</a>.</li></ol><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> pip3 install pipenv</span></span>
<span class="line"><span> cd Documentation/</span></span>
<span class="line"><span> # install the dependencies into a virtual environment</span></span>
<span class="line"><span> pipenv install</span></span>
<span class="line"><span> # activate the virtual environment</span></span>
<span class="line"><span> pipenv shell</span></span></code></pre></div></blockquote><ol start="2"><li>Build documentation:</li></ol><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make html</span></span></code></pre></div><p>The resulting HTMLs will end up under <code>_build/html</code>. You can open your browser at the root with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> xdg-open _build/html/index.html</span></span></code></pre></div></blockquote></blockquote><h3 id="live-rebuild" tabindex="-1">Live Rebuild <a class="header-anchor" href="#live-rebuild" aria-label="Permalink to &quot;Live Rebuild&quot;">​</a></h3><p>For more comfortable editing and previewing of changes (as <code>make html</code> will perform a slower full rebuild), you can install <code>sphinx-autobuild</code> which will monitor file changes and rebuild only affected files. To install it (within the virtual environment):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> pip3 install sphinx-autobuild</span></span></code></pre></div><p>To run:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make autobuild</span></span></code></pre></div><p>Which will perform an initial clean build and monitor changes from then on.</p><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><p>Contributions to documentation are appreciated. These can be as simple as fixing a typo or formatting issues to more involved changes such as documenting parts of NuttX which are not yet covered or even writing guides for other users.</p><p>The contribution workflow is the same as for the code, so check the [[/contributing/workflow]{.title-ref} to under]([/contributing/workflow]{.title-ref} to under.md)stand how your changes should be upstreamed.</p><h2 id="writing-restructure-text-with-sphinx" tabindex="-1">Writing ReStructure Text with Sphinx <a class="header-anchor" href="#writing-restructure-text-with-sphinx" aria-label="Permalink to &quot;Writing ReStructure Text with Sphinx&quot;">​</a></h2><p>The following links can be used to learn about RST syntax and about Sphinx specific directives. Note that sometimes Sphinx&#39;s approach is used over standard RST since it is more powerful (e.g. standard linking vs Sphinx <code>:ref:</code> which can be used across files, <code>code-block</code> directive vs <code>::</code> which allows specifying highlight language, etc.):</p><blockquote><ul><li><a href="https://www.sphinx-doc.org/en/master/" target="_blank" rel="noreferrer">Sphinx documentation system</a></li><li><a href="https://docutils.sourceforge.io/rst.html" target="_blank" rel="noreferrer">ReStructured Text documentation</a></li><li><a href="http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html" target="_blank" rel="noreferrer">Sphinx Guide to ReStructured Text</a></li><li><a href="https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html" target="_blank" rel="noreferrer">Restructured Text cheat sheet</a></li></ul></blockquote><h2 id="documentation-conventions" tabindex="-1">Documentation Conventions <a class="header-anchor" href="#documentation-conventions" aria-label="Permalink to &quot;Documentation Conventions&quot;">​</a></h2><p>While RST/Sphinx provide many ways to do things, it is best to follow a given convention to maintain consistency and avoid pitfalls. For this reason, documentation changes should follow the following set of conventions.</p><h3 id="indentation" tabindex="-1">Indentation <a class="header-anchor" href="#indentation" aria-label="Permalink to &quot;Indentation&quot;">​</a></h3><p>Child blocks should be indented two-spaces. This includes itemizations/enumerations.</p><h3 id="headings" tabindex="-1">Headings <a class="header-anchor" href="#headings" aria-label="Permalink to &quot;Headings&quot;">​</a></h3><p>Three levels of headings should be used in general. The style used to mark sections is based around <code>=</code> and <code>-</code>. Sections should look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=================</span></span>
<span class="line"><span>Top Level Heading</span></span>
<span class="line"><span>=================</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Subsection</span></span>
<span class="line"><span>==========</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Subsubsection</span></span>
<span class="line"><span>-------------</span></span></code></pre></div><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h3><p>Code should be documented using the <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#the-c-domain" target="_blank" rel="noreferrer">C domain</a>. This means for example that a function should be documented as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.. c:function:: bool myfunction(int arg1, int arg2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Here the function should be described</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  :param arg1: Description of arg1</span></span>
<span class="line"><span>  :param arg2: Description of arg2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  :return: Description of return value</span></span></code></pre></div><p>To document a piece of code, use a <code>code-block</code><a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-code-block" target="_blank" rel="noreferrer">directive</a>, specifying the highlight language. If the block is not of code but some verbatim piece of text, it is acceptable to use RST standard [::]{.title-ref}. This is specially useful and compact when used in the following mode:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The text file should have the following content::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Line1</span></span>
<span class="line"><span>  Line2</span></span>
<span class="line"><span>  Line3</span></span></code></pre></div><h3 id="linking" tabindex="-1">Linking <a class="header-anchor" href="#linking" aria-label="Permalink to &quot;Linking&quot;">​</a></h3><p>To generate internal links, Sphinx&#39;s <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#ref-role" target="_blank" rel="noreferrer">roles</a> should be used. So, use <code>:ref:</code> instead of standard RST syntax like <code>\`link &lt;target&gt;\`_</code> for internal links. If the target is in a different file, you can refer it with: <code>:ref:\`link text &lt;/pathtorst:Section Name&gt;</code>\`.</p><p>Linking to a specific document can be done with <code>[\`/path/to/document</code>[ (without ]{.title-ref}[.r](]{.title-ref}/path/to/document<code>\` (without</code>.r.md)st<code>extension). Notes and TODOS --------------- Use RST \`admonitions &lt;https://docutils.sourceforge.io/docs/ref/rst/directives.html#admonitions&gt;\`_ to highlight things from the text, such as a note that should be prominently displayed. In case you need to leave a TODO note in the documentation to point that something needs to be improved, use a</code>todo<code>admonition, which is available via the</code>sphinx.ext.todo<code>extension. This will let the reader of the documentation also know that the documentation is not yet finished somewhere and may further motivate a contribution. Tags ---- Use the</code>tag<code>admonition from \`sphinx-tags &lt;https://sphinx-tags.readthedocs.io/en/latest/quickstart.html#usage&gt;\`_ to tag your pages appropriately. This makes it easier for users to search and index the documentation. There are some tags which should always be included: -</code>chip:*<code>tags are for board/chip documentation, to indicate which boards use which chip -</code>experimental<code>tags for boards/features that are experimental and should not be considered stable - Tags with the names of supported peripherals can be included for boards too, like</code>wifi<code>and</code>ethernet\`\`</p><p>Include the tags directive at the top of the page, with comma separators for each tag listed.</p><h3 id="user-indications" tabindex="-1">User Indications <a class="header-anchor" href="#user-indications" aria-label="Permalink to &quot;User Indications&quot;">​</a></h3><p>To indicate a keypress, menu action or GUI button selection, use the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Go into menu :menuselection:\`File --&gt; Save As\`, click :guilabel:\`&amp;OK\` or press :kbd:\`Enter\`.</span></span></code></pre></div><p>which would render as:</p>`,37),e("p",null,[a("Go into menu "),e("code",{class:"interpreted-text",role:"menuselection"},"File --> Save As"),a(", click "),e("code",{class:"interpreted-text",role:"guilabel"},"&OK"),a(" or press "),e("code",{class:"interpreted-text",role:"kbd"},"Enter"),a(".")],-1),t(`<h3 id="tabbed-examples" tabindex="-1">Tabbed examples <a class="header-anchor" href="#tabbed-examples" aria-label="Permalink to &quot;Tabbed examples&quot;">​</a></h3><p>To indicate different instructions/examples for different scenarios (for example, different Operating Systems) use the <a href="https://github.com/executablebooks/sphinx-tabs" target="_blank" rel="noreferrer">tabs</a> extension (see link for examples).</p><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><h3 id="spacing" tabindex="-1">Spacing <a class="header-anchor" href="#spacing" aria-label="Permalink to &quot;Spacing&quot;">​</a></h3><p>If you are getting formatting errors, be sure to provide the appropriate spacing between a directive and its content. Generally, you should follow this format:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.. directive::</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  child content</span></span>
<span class="line"><span></span></span>
<span class="line"><span>non-child content which appears after previous directive</span></span></code></pre></div><p>Note the line between directive and content and the indentation.</p>`,7)]))}const m=s(l,[["render",r]]);export{b as __pageData,m as default};
