import{_ as o,c,al as d,o as t}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"tcpecho TCP Echo Server","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/tcpecho/index.md","filePath":"en/applications/examples/tcpecho/index.md"}'),a={name:"en/applications/examples/tcpecho/index.md"};function l(r,e,i,s,_,C){return t(),c("div",null,e[0]||(e[0]=[d('<h1 id="tcpecho-tcp-echo-server" tabindex="-1"><code>tcpecho</code> TCP Echo Server <a class="header-anchor" href="#tcpecho-tcp-echo-server" aria-label="Permalink to &quot;`tcpecho` TCP Echo Server&quot;">â€‹</a></h1><p>Simple single threaded, poll based TCP echo server. This example implements the TCP Echo Server from W. Richard Stevens &quot;UNIX Network Programming&quot; Book. Contributed by Max Holtberg.</p><p>See also <code>examples/nettest</code></p><ul><li><code>CONFIG_EXAMPLES_TCPECHO=y</code> -- Enables the TCP echo server.</li><li><code>CONFIG_XAMPLES_TCPECHO_PORT</code> -- Server Port, default <code>80</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_BACKLOG</code> -- Listen Backlog, default <code>8</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_NCONN</code> -- Number of Connections, default <code>8</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_DHCPC</code> -- DHCP Client, default <code>n</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_NOMAC</code> -- Use Canned MAC Address, default <code>n</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_IPADDR</code> -- Target IP address, default <code>0x0a000002</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_DRIPADDR</code> -- Default Router IP address (Gateway), default <code>0x0a000001</code>.</li><li><code>CONFIG_EXAMPLES_TCPECHO_NETMASK</code> -- Network Mask, default <code>0xffffff00</code>.</li></ul>',4)]))}const P=o(a,[["render",l]]);export{p as __pageData,P as default};
