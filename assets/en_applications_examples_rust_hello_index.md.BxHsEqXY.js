import{_ as t,c as i,al as l,o as s}from"./chunks/framework.NFAqBSgQ.js";const c=JSON.parse('{"title":"[hello]{.title-ref} Example in Rust","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/rust/hello/index.md","filePath":"en/applications/examples/rust/hello/index.md"}'),a={name:"en/applications/examples/rust/hello/index.md"};function n(r,e,o,u,p,d){return s(),i("div",null,e[0]||(e[0]=[l('<h1 id="hello-title-ref-example-in-rust" tabindex="-1">[hello]{.title-ref} Example in Rust <a class="header-anchor" href="#hello-title-ref-example-in-rust" aria-label="Permalink to &quot;[hello]{.title-ref} Example in Rust&quot;">​</a></h1><p>This example demonstrates how to use Rust&#39;s powerful features in a NuttX environment, including:</p><ul><li><strong>JSON Serialization/Deserialization</strong>: Using the popular [serde]{.title-ref} and [serde_json]{.title-ref} crates to work with JSON data</li><li><strong>Async Runtime</strong>: Demonstrates basic usage of the [tokio]{.title-ref} async runtime</li><li><strong>C Interoperability</strong>: Shows how to expose Rust functions to be called from C code</li></ul><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ol><li>JSON Handling <ul><li>Defines a [Person]{.title-ref} struct with [Serialize]{.title-ref} and [Deserialize]{.title-ref} traits</li><li>Serializes Rust structs to JSON strings</li><li>Deserializes JSON strings into Rust structs</li><li>Demonstrates pretty-printing JSON</li></ul></li><li>Async Runtime <ul><li>Initializes a single-threaded [tokio]{.title-ref} runtime</li><li>Runs a simple async task that prints a message</li></ul></li><li>C Interop <ul><li>Exports [hello_rust_cargo_main]{.title-ref} function with [#[no_mangle]]{.title-ref} for C calling</li><li>Uses [extern &quot;C&quot;]{.title-ref} to define the C ABI</li></ul></li></ol><p>The example shows how Rust&#39;s modern features can be used in embedded systems while maintaining compatibility with C-based systems.</p><p>This example serves as a foundation for building more complex Rust applications in NuttX that need to handle JSON data and async operations.</p>',7)]))}const h=t(a,[["render",n]]);export{c as __pageData,h as default};
