import{_ as a,c as t,al as s,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"Shared Memory Support","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/mm/shm.md","filePath":"en/components/mm/shm.md"}'),o={name:"en/components/mm/shm.md"};function r(n,e,d,l,h,p){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="shared-memory-support" tabindex="-1">Shared Memory Support <a class="header-anchor" href="#shared-memory-support" aria-label="Permalink to &quot;Shared Memory Support&quot;">​</a></h1><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>These features must be enabled before shared memory support can be provided:</p><ul><li><code>CONFIG_ARCH_ADDRENV=y</code> - Support for per-task address environment using a MMU.</li><li><code>CONFIG_BUILD_KERNEL=y</code> - Support for protected kernel-/user-space memory regions must be provided by the MMU.</li><li><code>CONFIG_GRAN=y</code> - The granule allocation is the allocation underlying all paged allocations.</li><li><code>CONFIG_MM_PGALLOC=y</code> - Enables the physical page allocator</li><li><code>CONFIG_MM_PGSIZE</code> - Determines the size of one page that can be mapped by the MMU.</li></ul><p>And then finally:</p><ul><li><code>CONFIG_MM_SHM=y</code> - Enables shared memory support</li><li><code>CONFIG_ARCH_SHM_VBASE</code> - The virtual address of the beginning of the shared memory region.</li><li><code>CONFIG_ARCH_SHM_MAXREGIONS</code> - The maximum number of regions that can allocated for the shared memory space. This hard-coded value permits static allocation of the shared memory data structures and serves no other purpose. Default is 1.</li><li><code>CONFIG_ARCH_SHM_NPAGES</code> - The maximum number of pages that can allocated for the shared memory region. Default is 1.</li></ul><p>The size of the virtual shared memory address space is then determined by the product of the maximum number of regions, the maximum number of pages per region, and the configured size of each page.</p><h2 id="concepts" tabindex="-1">Concepts <a class="header-anchor" href="#concepts" aria-label="Permalink to &quot;Concepts&quot;">​</a></h2><p>Each process has a task group structure, struct task_group_s, that holds information common to all threads in the group. If <code>CONFIG_MM_SHM=y</code>, then this includes data structures for the per-process shared memory virtual page allocator.</p><p>A memory region is accessed using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int shmget(key_t key, size_t size, int shmflg);</span></span></code></pre></div><p>by a lookup using internal shared memory data sets with key as the lookup match value. On success, shmget returns the shared memory identifier for the match -- in this implementation that identifier is simply the table index of the match.</p><p>If the memory region does not exist, it may also be created by shmget (if the IPC_CREAT bit is set in the shmflag). When a shared memory region is created, the following things happen:</p><ul><li>A new entry is set aside in the internal data set. The key value is assigned to the entry and the table index is the new shared memory identifier.</li><li>The requested size is rounded up to rounded up to full pages, each of size <code>CONFIG_MM_PGSIZE</code>.</li><li>A set of physical pages are allocated and the physical address of these pages is retained in the internal data set.</li></ul><p>Now the key maps to and shared memory identifier (the table index) and the table index provides access to the list of physical pages making up the shared memory region.</p><p>NOTE: An improved implementation my perform a &quot;lazy&quot; back up of the physical memory, i.e., do not allocate the physical memory until the memory is required, for example, when a page fault occurs when a application tries to allocate the memory.</p><p>A shared memory region is destroyed via:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int shmctl(int shmid, int cmd, struct shmid_ds *buf);</span></span></code></pre></div><p>In order for a process to make use of the memory region, it must be &quot;attached&quot; the process using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FAR void *shmat(int shmid, FAR const void *shmaddr, int shmflg);</span></span></code></pre></div><p><code>shmat()</code> returns the virtual address where the shared memory can be found in the user process. Attaching the shared memory region involves the following steps:</p><ul><li>Use the shmid as a table index to look up the mapping in the shared memory internal data structures.</li><li>Allocate a virtual address spaces of the same size as the physical address space using the per-process virtual shared memory virtual page allocator that can be found in the calling process&#39;s task group structure.</li><li>Use platform specific interfaces to mapy the physical memory to the selected virtual address space, and</li><li>Return the allocated virtual base address to the caller.</li></ul><p>The memory region can be detached from the user process using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int shmdt(FAR const void *shmaddr);</span></span></code></pre></div><h2 id="relevant-header-files" tabindex="-1">Relevant header files <a class="header-anchor" href="#relevant-header-files" aria-label="Permalink to &quot;Relevant header files&quot;">​</a></h2><ul><li><p><code>include/sys/shm.h</code> - Shared memory interface declarations</p></li><li><p><code>include/sys/ipc.h</code> - Provides additional definitions used by the shared memory interfaces</p></li><li><p><code>include/nuttx/addrenv.h</code> - Defines the virtual address space of the process.</p></li><li><p><code>include/nuttx/pgalloc.h</code> - Page allocator interfaces</p></li><li></li></ul><pre><code>\`mm/shm/shm.h\` - Internal shared memory definitions. This includes the

:   definitions of the internal shared memory data structures.
</code></pre>`,27)]))}const u=a(o,[["render",r]]);export{m as __pageData,u as default};
