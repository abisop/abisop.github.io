import{_ as t,c as a,al as o,o as i}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"README","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/tms570/boards/tms570ls31x-usb-kit/README.md","filePath":"en/platforms/arm/tms570/boards/tms570ls31x-usb-kit/README.md"}'),n={name:"en/platforms/arm/tms570/boards/tms570ls31x-usb-kit/README.md"};function s(l,e,r,d,u,c){return i(),a("div",null,e[0]||(e[0]=[o(`<h1 id="readme" tabindex="-1">README <a class="header-anchor" href="#readme" aria-label="Permalink to &quot;README&quot;">​</a></h1><p>This README provides some information about the port of NuttX to the TI Hercules TMS570LS31x USB Kit featuring the Hercules TMS570LS3137ZWT chip.</p><h1 id="contents" tabindex="-1">Contents <a class="header-anchor" href="#contents" aria-label="Permalink to &quot;Contents&quot;">​</a></h1><ul><li>Status</li><li>Toolchain</li><li>LEDs and Buttons</li><li>Serial Console</li><li>Debugging</li><li>Configurations</li></ul><h1 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h1><p>2017-10-18: The basic port to the TMS570 is complete. The NSH with basic commands is up and running. There is support for SCI communication and RTI.</p><h1 id="toolchain" tabindex="-1">Toolchain <a class="header-anchor" href="#toolchain" aria-label="Permalink to &quot;Toolchain&quot;">​</a></h1><h2 id="build-platform" tabindex="-1">Build Platform <a class="header-anchor" href="#build-platform" aria-label="Permalink to &quot;Build Platform&quot;">​</a></h2><p>All of these configurations are set up to build with Ubuntu.</p><h2 id="endian-ness-issues" tabindex="-1">Endian-ness Issues <a class="header-anchor" href="#endian-ness-issues" aria-label="Permalink to &quot;Endian-ness Issues&quot;">​</a></h2><p>I used a version of the NuttX buildroot toolchain that can be built like this:</p><pre><code>cd buildroot/
cp boards/cortexr4f-eabi-defconfig-4.8.5 .config
make oldconfig
make
</code></pre><p>Before building the compiler I installed the following packages which are needed for the compiler build.</p><p># install or update all apt-get dependencies sudo apt-get update sudo apt-get upgrade sudo apt-get install gcc # not cross sudo apt-get install g++ sudo apt-get install make sudo apt-get install bison sudo apt-get install flex sudo apt-get install gawk sudo apt-get install libgmp3-dev sudo apt-get install libmpfr-dev libmpfr-doc libmpfr4 libmpfr4-dbg sudo apt-get install mpc sudo apt-get install texinfo # optional sudo apt-get install libcloog-isl-dev # optional sudo apt-get install build-essential sudo apt-get install glibc-devel sudo apt-get -y install gcc-multilib libc6-i386</p><h1 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h1><p>This TMS570ls3137 has a single SCI and one combined SCI/LIN interface. The SCI_RX and TX pins are connected to the FTDI chip which provides a virtual COM port for the usb kit.</p><h1 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h1><p>I used the On Board Debugger.</p><h1 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h1><h2 id="information-common-to-all-configurations" tabindex="-1">Information Common to All Configurations <a class="header-anchor" href="#information-common-to-all-configurations" aria-label="Permalink to &quot;Information Common to All Configurations&quot;">​</a></h2><p>Each TMS570LS31X Usb Kit configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh tms570ls31x-usb-kit:&lt;subdir&gt;
</code></pre><p>Before building, make sure the PATH environment variable includes the correct path to the directory than holds your toolchain binaries.</p><p>And then build NuttX by simply typing the following. At the conclusion of the make, the nuttx binary will reside in an ELF file called, simply, nuttx.</p><pre><code>make oldconfig
make
</code></pre><p>The <code>&lt;subdir&gt;</code> that is provided above as an argument to the tools/configure.sh must be is one of the following.</p><p>NOTES:</p><ol><li>These configurations use the mconf-based configuration tool. To change any of these configurations using that tool, you should:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- --&gt;</span></span></code></pre></div><pre><code>a. Build and install the kconfig-mconf tool.  See nuttx/README.txt
   see additional README.txt files in the NuttX tools repository.

b. Execute &#39;make menuconfig&#39; in nuttx/ in order to start the
   reconfiguration process.
</code></pre><h2 id="configuration-sub-directories" tabindex="-1">Configuration sub-directories <a class="header-anchor" href="#configuration-sub-directories" aria-label="Permalink to &quot;Configuration sub-directories&quot;">​</a></h2><p>nsh:</p><pre><code>Configures the NuttShell (nsh) located at examples/nsh.
</code></pre>`,33)]))}const g=t(n,[["render",s]]);export{p as __pageData,g as default};
