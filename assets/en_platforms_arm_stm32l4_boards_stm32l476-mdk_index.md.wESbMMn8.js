import{_ as t,c as o,al as i,o as r}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"STM32L476-mdk","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/stm32l4/boards/stm32l476-mdk/index.md","filePath":"en/platforms/arm/stm32l4/boards/stm32l476-mdk/index.md"}'),a={name:"en/platforms/arm/stm32l4/boards/stm32l476-mdk/index.md"};function n(s,e,l,c,d,p){return r(),o("div",null,e[0]||(e[0]=[i(`<h1 id="stm32l476-mdk" tabindex="-1">STM32L476-mdk <a class="header-anchor" href="#stm32l476-mdk" aria-label="Permalink to &quot;STM32L476-mdk&quot;">​</a></h1><p>chip:stm32, chip:stm32l4, chip:stm32l476</p><p>This page discusses issues unique to NuttX configurations for STM32L476ME part in the Motorola MDK. This is referred to as the MuC in Motorola technical documentation.</p><p>STM32L476ME:</p><ul><li>Microprocessor: 32-bit ARM Cortex M4 at 80MHz STM32L476ME</li><li>Memory: 1024 KB Flash and 96+32 KB SRAM</li><li>ADC: 3x12-bit, 2.4 MSPS A/D converter: up to 24 channels</li><li>DMA: 16-stream DMA controllers with FIFOs and burst support</li><li>Timers:Up to 11 timers: up to eight 16-bit, two 32-bit timers, two watchdog timers, and a SysTick timer</li><li>GPIO: Up to 51 I/O ports with interrupt capability</li><li>I2C: Up to 3 x I2C interfaces</li><li>USARTs: Up to 3 USARTs, 2 UARTs, 1 LPUART</li><li>SPIs: Up to 3 SPIs</li><li>SAIs: Up to 2 dual-channel audio interfaces</li><li>CAN interface</li><li>SDIO interface (not connected)</li><li>QSPI interface (not connected)</li><li>USB: USB 2.0 full-speed device/host/OTG controller with on-chip PHY</li><li>CRC calculation unit</li><li>RTC</li></ul><h2 id="acronyms" tabindex="-1">Acronyms <a class="header-anchor" href="#acronyms" aria-label="Permalink to &quot;Acronyms&quot;">​</a></h2><p>MDK is, of course, the Motorola Development Kit. MuC is the acronym that is used to refer to the STM32L476ME on the MDK board. MHB is the acronym given to Toshiba Interface Bridge, part number T6WV7XBG. See <a href="https://toshiba.semicon-storage.com/us/product/assp/interface-bridge.html" target="_blank" rel="noreferrer">https://toshiba.semicon-storage.com/us/product/assp/interface-bridge.html</a> NuttX runs the MuC.</p><h2 id="flashing" tabindex="-1">Flashing <a class="header-anchor" href="#flashing" aria-label="Permalink to &quot;Flashing&quot;">​</a></h2><p>The MDK has a built-in FTDI to support flashing from openocd. There are a few extensions to openocd that haven&#39;t been integrated upstream yet. To flash (or debug) the MDK, you will need the code from:</p><pre><code> git clone https://github.com/MotorolaMobilityLLC/openocd
</code></pre><p>Refer to detailed OpenOCD build instructions at developer.motorola.com</p><p>After building, you can flash the STM32L476 (MuC) with the following command:</p><pre><code> openocd -f board/moto_mdk_muc.cfg -c &quot;program nuttx.bin 0x08000000 reset exit&quot;
</code></pre><p>You may need to be super-user in order access the USB device.</p><p>NOTE: In order for the debug Type C connector to power the phone, the DIP Switch B4 must be in the ON position. See the MDK User Guide at developer.motorola.com for more information on the hardware including the DIP switches.</p><p>Or you can use the GDB server. To start the GDB server:</p><pre><code> openocd -f board/moto_mdk_mu_reset.cfg &amp;
</code></pre><p>Then start GDB:</p><pre><code> arm-none-linux-gdb
(gdb) target extended-remote localhost:3333
(gdb) set can-use-hw-watchpoints 1
</code></pre><p>You can load code into FLASH like:</p><pre><code>(gdb) mon halt
(gdb) load nuttx
(gdb) file nuttx
(gdb) mon reset
</code></pre><p>NOTE: There is a special version of GDB 7.11 available with some additional, MDK-specific features. It is available in a MotorolaMobilityLLC github.com repository.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The serial console is configured on USART3 using MUC_UART3_TX (PC10) and MUC_UART_RX (PC11). This connects to the FT4232 part which supports 4 CDC/ACM serial ports. The MuC console is on port C which will probably be /dev/ttyUSB2 on your Linux host. Port A (ttyUSB0) is the MuC SWD debug interface. Ports B and D are the MHB debug and console ports, respectively.</p><p>The serial terminal that you use must be configured to use the /dev/ttyUSB2 device at 11500 baud, no parity, 8 bits of data, 1 stop bit (115200 8N1 in minicom-speak) and with no flow control. Minicom works well.</p><p>You will probably need to be super-user in order access the /dev/ttyUSB2 device:</p><pre><code> sudo minicom mdk
</code></pre><p>When mdk is the name of my saved configuration using the above serial configuration.</p><p>The Motorola documentation also mentions picocom. NSH also works well with picocom:</p><pre><code> sudo apt install picocom
 sudo picocom -b 115200 /dev/ttyUSB2
</code></pre><p>Everything else defaults correctly. Ctrl-A then Ctrl-X will terminate either the minicom or the picocom session.</p>`,31)]))}const u=t(a,[["render",n]]);export{m as __pageData,u as default};
