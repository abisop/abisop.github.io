import{_ as e,c as a,al as s,o as t}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"Python Python interpreter","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/interpreters/python/index.md","filePath":"en/applications/interpreters/python/index.md"}'),o={name:"en/applications/interpreters/python/index.md"};function i(p,n,r,l,h,c){return t(),a("div",null,n[0]||(n[0]=[s(`<h1 id="python-python-interpreter" tabindex="-1"><code>Python</code> Python interpreter <a class="header-anchor" href="#python-python-interpreter" aria-label="Permalink to &quot;\`Python\` Python interpreter&quot;">​</a></h1><p>This guide explains how to run Python on NuttX.</p><p><em>Yes, you heard it right</em>. <strong>Python on NuttX</strong>. This is a port of the <a href="https://github.com/python/cpython" target="_blank" rel="noreferrer">CPython</a> repository for NuttX. The [CPython]{.title-ref} repository is the reference implementation of the Python programming language. It is written in C and is the most widely used Python interpreter.</p><p>Warning</p><p>Python for NuttX is still in the experimental stage (thus, it requires <code>CONFIG_EXPERIMENTAL</code> to be enabled) It is not fully functional for all the architectures and configurations. Please check this <a href="https://github.com/apache/nuttx-apps/issues/2884" target="_blank" rel="noreferrer">issue</a> in the <a href="https://github.com/apache/nuttx-apps/" target="_blank" rel="noreferrer">nuttx-apps</a> repository to know the current status.</p><h2 id="how-does-it-work" tabindex="-1">How Does it Work? <a class="header-anchor" href="#how-does-it-work" aria-label="Permalink to &quot;How Does it Work?&quot;">​</a></h2><ol><li>Python for NuttX runs on RISC-V QEMU (emulated) and on Espressif&#39;s ESP32-S3.</li><li>Python modules are stored in <a href="https://docs.python.org/3/glossary.html#term-bytecode" target="_blank" rel="noreferrer">pyc</a> (byte-code format) and are loaded from a ROMFS image at startup.</li><li>The Python wrapper application on NuttX mounts the ROMFS partition which contains the Python modules and sets the required environment variables (<code>PYTHONHOME</code> and <code>PYTHON_BASIC_REPL</code>) automatically.</li></ol><h2 id="building-and-running-python-on-nuttx" tabindex="-1">Building and Running Python on NuttX <a class="header-anchor" href="#building-and-running-python-on-nuttx" aria-label="Permalink to &quot;Building and Running Python on NuttX&quot;">​</a></h2><h3 id="rv-virt-risc-v-qemu" tabindex="-1"><code>rv-virt</code> (RISC-V QEMU) <a class="header-anchor" href="#rv-virt-risc-v-qemu" aria-label="Permalink to &quot;\`rv-virt\` (RISC-V QEMU)&quot;">​</a></h3><p>Use the <code>rv-virt:python</code> config to build Python for NuttX. Note that the CMake scripts don&#39;t work for this configuration. For now, please use the makefile build instead:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh rv-virt:python</span></span>
<span class="line"><span> make -j(nproc)</span></span>
<span class="line"><span> ls -l nuttx</span></span></code></pre></div><p>This will generate a <code>nuttx</code> binary. This file can be run using the RISC-V QEMU.</p><p>Before running the RISC-V QEMU, create a raw disk image with the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> dd if=/dev/zero of=./mydisk-1gb.img bs=1M count=1024</span></span></code></pre></div><p>Then, run RISC-V QEMU with the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> qemu-system-riscv32 -semihosting -M virt,aclint=on -cpu rv32 -smp 8 \\</span></span>
<span class="line"><span>   -global virtio-mmio.force-legacy=false \\</span></span>
<span class="line"><span>   -device virtio-serial-device,bus=virtio-mmio-bus.0 \\</span></span>
<span class="line"><span>   -chardev socket,telnet=on,host=127.0.0.1,port=3450,server=on,wait=off,id=foo \\</span></span>
<span class="line"><span>   -device virtconsole,chardev=foo \\</span></span>
<span class="line"><span>   -device virtio-rng-device,bus=virtio-mmio-bus.1 \\</span></span>
<span class="line"><span>   -netdev user,id=u1,hostfwd=tcp:127.0.0.1:10023-10.0.2.15:23,hostfwd=tcp:127.0.0.1:15001-10.0.2.15:5001 \\</span></span>
<span class="line"><span>   -device virtio-net-device,netdev=u1,bus=virtio-mmio-bus.2 \\</span></span>
<span class="line"><span>   -drive file=./mydisk-1gb.img,if=none,format=raw,id=hd \\</span></span>
<span class="line"><span>   -device virtio-blk-device,bus=virtio-mmio-bus.3,drive=hd \\</span></span>
<span class="line"><span>   -bios none -kernel ./nuttx -nographic</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ABC[    0.062131] board_userled: LED 1 set to 0</span></span>
<span class="line"><span>[    0.063269] board_userled: LED 2 set to 0</span></span>
<span class="line"><span>[    0.063367] board_userled: LED 3 set to 0</span></span>
<span class="line"><span>telnetd [4:100]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NuttShell (NSH) NuttX-10.4.0</span></span>
<span class="line"><span>nsh&gt; python</span></span>
<span class="line"><span>Python 3.13.0 (main, Dec  4 2024, 17:00:42) [GCC 13.2.0] on nuttx</span></span>
<span class="line"><span>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span></span>
<span class="line"><span>&gt;&gt;&gt;</span></span></code></pre></div><h4 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-label="Permalink to &quot;Demo&quot;">​</a></h4><p>Check the following <a href="https://asciinema.org/" target="_blank" rel="noreferrer">asciinema</a> demo to see how to run Python on NuttX. You can copy and paste the commands from the demo to try it yourself.</p><p><a href="https://asciinema.org/a/bYYy1fyIOQ3hOY4lJ7L3WFcNb" target="_blank" rel="noreferrer"><img src="https://asciinema.org/a/bYYy1fyIOQ3hOY4lJ7L3WFcNb.svg" alt="image"></a></p><h3 id="esp32-s3" tabindex="-1">ESP32-S3 <a class="header-anchor" href="#esp32-s3" aria-label="Permalink to &quot;ESP32-S3&quot;">​</a></h3><p>For this example, we will use the ESP32-S3 board. Use the <code>esp32s3-devkit:python</code> config to build Python for NuttX. Note that this defconfig uses a board with the ESP32-S3-WROOM-2 module with 32MiB of flash and 8MiB of PSRAM.</p><p>Build and flash the ESP32-S3 board with the following commands:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make distclean</span></span>
<span class="line"><span> ./tools/configure.sh esp32s3-devkit:python</span></span>
<span class="line"><span> make flash ESPTOOL_BINDIR=./ ESPTOOL_PORT=/dev/ttyUSB0 -s -j(nproc)</span></span></code></pre></div><p>To run Python on ESP32-S3, just open a serial terminal and connect to the ESP32-S3 board. You will see the NuttShell (NSH) prompt. Run the following commands:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nsh&gt; python</span></span>
<span class="line"><span>Python 3.13.0 (main, Dec  4 2024, 17:00:42) [GCC 13.2.0] on nuttx</span></span>
<span class="line"><span>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span></span>
<span class="line"><span>&gt;&gt;&gt;</span></span></code></pre></div>`,25)]))}const m=e(o,[["render",i]]);export{u as __pageData,m as default};
