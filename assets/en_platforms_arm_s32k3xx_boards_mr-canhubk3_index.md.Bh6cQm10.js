import{_ as a,c as t,al as n,o}from"./chunks/framework.NFAqBSgQ.js";const p=JSON.parse('{"title":"NXP MR-CANHUBK3","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/s32k3xx/boards/mr-canhubk3/index.md","filePath":"en/platforms/arm/s32k3xx/boards/mr-canhubk3/index.md"}'),s={name:"en/platforms/arm/s32k3xx/boards/mr-canhubk3/index.md"};function r(i,e,l,d,h,c){return o(),t("div",null,e[0]||(e[0]=[n(`<h1 id="nxp-mr-canhubk3" tabindex="-1">NXP MR-CANHUBK3 <a class="header-anchor" href="#nxp-mr-canhubk3" aria-label="Permalink to &quot;NXP MR-CANHUBK3&quot;">​</a></h1><p>s a CAN Node reference design and development platform for mobile robotics applications, such as drones and rovers</p><p>NXP MR-CANHUBK3 is a reference design and development platform for redundant networking and functional safety applications in Mobile Robotics, such as drones and rovers. It features the <a href="https://www.nxp.com/products/processors-and-microcontrollers/s32-automotive-platform/s32k-general-purpose-mcus/s32k3-microcontrollers-for-general-purpose:S32K3" target="_blank" rel="noreferrer">NXP S32K344 MCU</a> based on a Arm Cortex-M7 core (Lock-Step).</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li></li></ul><pre><code>NXP FS32K344

:   -   Lock-Step Configuration
    -   160 MHz Clock (Max.)
    -   4000 Kb Flash
    -   512 Kb RAM
</code></pre><ul><li><p>NXP FS26 Safety System Basis Chip</p></li><li></li></ul><pre><code>Connectivity:

:   -   Console UART (Console @ 115,200 baud)
    -   6x CAN FD
    -   100Base-T1 Ethernet
    -   Connectors and I/O headers with GPIO, I2C, SPI, etc.
</code></pre><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>By default, the serial console will be provided on the DCD-LZ UART (available on the 7-pin DCD-LZ debug connector P6):</p><hr><p>DCD-LZ UART RX PTA8 LPUART2_RX DCD-LZ UART TX PTA9 LPUART2_TX</p><hr><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">Leds <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;Leds&quot;">​</a></h3><p>The MR-CANHUBK3 has one RGB LED:</p><hr><p>RedLED PTE14 FXIO D7 / EMIOS0 CH19 GreenLED PTA27 FXIO D5 / EMIOS1 CH10 / EMIOS2 CH10 BlueLED PTE12 FXIO D8 / EMIOS1 CH5</p><hr><p>An output of &#39;0&#39; illuminates the LED.</p><p>If CONFIG_ARCH_LEDS is not defined, then the user can control the LEDs in any way. The following definitions are used to access individual RGB components (see mr-canhubk3.h):</p><ul><li>GPIO_LED_R</li><li>GPIO_LED_G</li><li>GPIO_LED_B</li></ul><p>The RGB components could, alternatively, be controlled through PWM using the common RGB LED driver.</p><p>If CONFIG_ARCH_LEDs is defined, then NuttX will control the LEDs on board the MR-CANHUBK3. The following definitions describe how NuttX controls the LEDs:</p><p>State Description RED GREEN BLUE</p><hr><p>LED_STARTED NuttX has been started OFF OFF OFF LED_HEAPALLOCATE Heap has been allocated OFF OFF ON LED_IRQSENABLED Interrupts enabled OFF OFF ON LED_STACKCREATED LED_INIRQ LED_SIGNAL LED_ASSERTION Idle stack created In an interrupt In a signal handler An assertion failed OFF ON OFF LED_PANIC LED_IDLE The system has crashed S32K344 in sleep mode FLASH OFF OFF</p><h3 id="buttons" tabindex="-1">Buttons <a class="header-anchor" href="#buttons" aria-label="Permalink to &quot;Buttons&quot;">​</a></h3><p>The MR-CANHUBK3 supports two buttons:</p><hr><p>SW1 PTD15 EIRQ31 SW2 PTA25 EIRQ5 / WKPU34</p><hr><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each MR-CANHUBK3 configuration is maintained in a sub-directory and can be selected as follows:</p><pre><code>tools/configure.sh mr-canhubk3:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the sub-directories listed in the next paragraph.</p><p>NOTES (common for all configurations):</p><ol><li></li></ol><pre><code>This configuration uses the mconf-based configuration tool. To change this configuration using that tool, you should:

:   a.  Build and install the kconfig-mconf tool. See
        nuttx/README.txt. Also see additional README.txt files in
        the NuttX tools repository.
    b.  Execute \\&#39;make menuconfig\\&#39; in nuttx/ in order to start the
        reconfiguration process.
</code></pre><ol start="2"><li>Unless otherwise stated, the serial console used is LPUART2 at 115,200 8N1.</li></ol><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Configures the NuttShell (nsh) located at apps/examples/nsh. Support for builtin applications is enabled, but in the base configuration the only application selected is the &quot;Hello, World!&quot; example.</p><h3 id="net" tabindex="-1">net <a class="header-anchor" href="#net" aria-label="Permalink to &quot;net&quot;">​</a></h3><p>Besides the NuttShell this configuration also enables networking and (Socket)CAN support, as well as I2C and SPI support. It includes the SLCAN and can-utils applications for monitoring and debugging CAN applications.</p>`,44)]))}const f=a(s,[["render",r]]);export{p as __pageData,f as default};
