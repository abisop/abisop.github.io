import{_ as o,c as i,al as t,o as c}from"./chunks/framework.NFAqBSgQ.js";const C=JSON.parse('{"title":"composite USB Composite Device Commands","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/system/composite/index.md","filePath":"en/applications/system/composite/index.md"}'),d={name:"en/applications/system/composite/index.md"};function n(s,e,a,r,l,p){return c(),i("div",null,e[0]||(e[0]=[t('<h1 id="composite-usb-composite-device-commands" tabindex="-1"><code>composite</code> USB Composite Device Commands <a class="header-anchor" href="#composite-usb-composite-device-commands" aria-label="Permalink to &quot;`composite` USB Composite Device Commands&quot;">​</a></h1><p>This logic adds a NSH command to control a USB composite device. The only supported devices in the composite are CDC/ACM serial and a USB mass storage device. Which devices are enclosed in a composite device is configured with an array of configuration-structs, handed over to the function <code>composite_initialize()</code>.</p><p>Required overall configuration:</p><p>Enable the USB Support of your Hardware / Processor e.g. <code>SAMV7_USBDEVHS=y</code></p><ul><li><code>CONFIG_USBDEV=y</code> – USB device support.</li><li><code>CONFIG_USBDEV_COMPOSITE=y</code> – USB composite device support.</li><li><code>CONFIG_COMPOSITE_IAD=y</code> – Interface associate descriptor needed.</li><li><code>CONFIG_CDCACM=y</code> – USB CDC/ACM serial device support.</li><li><code>CONFIG_CDCACM_COMPOSITE=y</code> – USB CDC/ACM serial composite device support.</li></ul><p>The interface-, string-descriptor- and endpoint-numbers are configured via the configuration-structs as noted above. The CDC/ACM serial device needs three endpoints; one interrupt-driven and two bulk endpoints.</p><ul><li><code>CONFIG_USBMSC=y</code> – USB mass storage device support.</li><li><code>CONFIG_USBMSC_COMPOSITE=y</code> – USB mass storage composite device support.</li></ul><p>Like the configuration for the CDC/ACM, the descriptor- and endpoint-numbers are configured via the configuration struct.</p><p>Depending on the configuration struct you need to configure different vendor-and product-IDs. Each <code>VID</code>/<code>PID</code> is unique to a device and thus to a dedicated configuration.</p><p>Linux tries to detect the device types and installs default drivers if the <code>VID</code>/<code>PID</code> pair is unknown.</p><p>Windows insists on a known and installed configuration. With an Atmel hardware and Atmel-Studio or the Atmel-USB-drivers installed, you can test your configuration with Atmel Example Vendor- and Product-IDs.</p><p>If you have a USBMSC and a CDC/ACM configured in your combo, then you can try to use</p><ul><li><code>VID = 0x03EB</code> (ATMEL)</li><li><code>PID = 0x2424</code> (ASF Example with MSC and CDC)</li></ul><p>If for example you try to test a configuration with up to seven CDCs, then</p><ul><li><code>VID = 0x03EB</code> (ATMEL)</li><li><code>PID = 0x2426</code> (ASF Example with up to seven CDCs)</li></ul><p>This add-on can be built as two NSH &quot;built-in&quot; commands:</p><ul><li><code>CONFIG_NSH_BUILTIN_APPS</code> – if this option is selected: <code>conn</code> will connect the USB composite device; <code>disconn</code> will disconnect the USB composite device.</li></ul><p>Configuration options unique to this add-on:</p><ul><li><code>CONFIG_SYSTEM_COMPOSITE_DEBUGMM</code> – Enables some debug tests to check for memory usage and memory leaks.</li></ul><p>If <code>CONFIG_USBDEV_TRACE</code> is enabled (or <code>CONFIG_DEBUG_FEATURES</code> and <code>CONFIG_DEBUG_USB</code>), then the add-on code will also manage the USB trace output. The amount of trace output can be controlled using:</p><ul><li><code>CONFIG_SYSTEM_COMPOSITE_TRACEINIT</code> – Show initialization events.</li><li><code>CONFIG_SYSTEM_COMPOSITE_TRACECLASS</code> – Show class driver events.</li><li><code>CONFIG_SYSTEM_COMPOSITE_TRACETRANSFERS</code> – Show data transfer events.</li><li><code>CONFIG_SYSTEM_COMPOSITE_TRACECONTROLLER</code> – Show controller events.</li><li><code>CONFIG_SYSTEM_COMPOSITE_TRACEINTERRUPTS</code> – Show interrupt-related events.</li></ul>',21)]))}const S=o(d,[["render",n]]);export{C as __pageData,S as default};
