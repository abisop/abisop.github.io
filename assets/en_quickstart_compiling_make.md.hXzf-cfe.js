import{_ as a,c as t,al as i,o}from"./chunks/framework.NFAqBSgQ.js";const h=JSON.parse('{"title":"Compiling with Make","description":"","frontmatter":{},"headers":[],"relativePath":"en/quickstart/compiling_make.md","filePath":"en/quickstart/compiling_make.md"}'),n={name:"en/quickstart/compiling_make.md"};function s(c,e,l,p,d,u){return o(),t("div",null,e[0]||(e[0]=[i(`<h1 id="compiling-with-make" tabindex="-1">Compiling with Make <a class="header-anchor" href="#compiling-with-make" aria-label="Permalink to &quot;Compiling with Make&quot;">​</a></h1><p>Now that we&#39;ve installed Apache NuttX prerequisites and downloaded the source code, we are ready to compile the source code into an executable binary file that can be run on the embedded board.</p><h2 id="initialize-configuration" tabindex="-1">Initialize Configuration <a class="header-anchor" href="#initialize-configuration" aria-label="Permalink to &quot;Initialize Configuration&quot;">​</a></h2><p>The first step is to initialize NuttX configuration for a given board, based on a pre-existing configuration. To list all supported configurations you can do:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> ./tools/configure.sh -L | less</span></span></code></pre></div></blockquote><p>The output is in the format <code>&lt;board name&gt;:&lt;board configuration&gt;</code>. You will see that generally all boards support the <code>nsh</code> configuration which is a good starting point since it enables booting into the interactive command line [[/application](]{.title-ref}/application.md)s/nsh/index\`.</p><p>To choose a configuration you pass the <code>&lt;board name&gt;:&lt;board configuration&gt;</code> option to <code>configure.sh</code> and indicate your host platform, such as:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> ./tools/configure.sh -l stm32f4discovery:nsh</span></span></code></pre></div></blockquote><p>The <code>-l</code> tells use that we&#39;re on Linux (macOS and Windows builds are possible). Use the <code>-h</code> argument to see all available options.</p><p>You can then customize this configuration by using the menu based configuration system with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make menuconfig</span></span></code></pre></div><p>Modifying the configuration is covered in [[configuring]{.title-ref}.]([configuring]{.title-ref}..md)</p><h2 id="build-nuttx" tabindex="-1">Build NuttX <a class="header-anchor" href="#build-nuttx" aria-label="Permalink to &quot;Build NuttX&quot;">​</a></h2><p>We can now build NuttX. To do so, you can simply run:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> cd nuttx</span></span>
<span class="line"><span> make</span></span></code></pre></div></blockquote><p>The build will complete by generating the binary outputs inside <code>nuttx</code> directory. Typically this includes the <code>nuttx</code> ELF file (suitable for debugging using <code>gdb</code>) and a <code>nuttx.bin</code> file that can be flashed to the board.</p><p>To clean the build, you can do:</p><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> make clean</span></span></code></pre></div></blockquote><p>Tip</p><p>To increase build speed (or of any other target such as <code>clean</code>), you can pass the <code>-jN</code> flag to <code>make</code>, where <code>N</code> is the number of parallel jobs to start (usually, the number of processors on your machine).</p>`,20)]))}const g=a(n,[["render",s]]);export{h as __pageData,g as default};
