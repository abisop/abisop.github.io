import{_ as i,c as t,al as r,o as s}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"SDIO Device Drivers","description":"","frontmatter":{},"headers":[],"relativePath":"en/components/drivers/special/sdio.md","filePath":"en/components/drivers/special/sdio.md"}'),o={name:"en/components/drivers/special/sdio.md"};function d(a,e,n,c,l,p){return s(),t("div",null,e[0]||(e[0]=[r('<h1 id="sdio-device-drivers" tabindex="-1">SDIO Device Drivers <a class="header-anchor" href="#sdio-device-drivers" aria-label="Permalink to &quot;SDIO Device Drivers&quot;">â€‹</a></h1><ul><li><p><code>include/nuttx/sdio.h</code>. All structures and APIs needed to work with SDIO drivers are provided in this header file.</p></li><li><p><code>struct sdio_dev_s</code>. Each SDIO device driver must implement an instance of <code>struct sdio_dev_s</code>. That structure defines a call table with the following methods:</p><p>Mutual exclusion:</p><p>Initialization/setup:</p><p>Command/Status/Data Transfer:</p><p>Event/Callback support:</p><p>DMA support:</p></li><li><p><strong>Binding SDIO Drivers</strong>. SDIO drivers are not normally directly accessed by user code, but are usually bound to another, higher level device driver. In general, the binding sequence is:</p><ol><li>Get an instance of <code>struct sdio_dev_s</code> from the hardware-specific SDIO device driver, and</li><li>Provide that instance to the initialization method of the higher level device driver.</li></ol></li><li><p><strong>Examples</strong>: <code>arch/arm/src/stm32/stm32_sdio.c</code> and <code>drivers/mmcsd/mmcsd_sdio.c</code></p></li></ul>',2)]))}const m=i(o,[["render",d]]);export{u as __pageData,m as default};
