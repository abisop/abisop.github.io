import{_ as a,c as t,al as o,o as r}from"./chunks/framework.NFAqBSgQ.js";const u=JSON.parse('{"title":"nRF52840-DK","description":"","frontmatter":{},"headers":[],"relativePath":"en/platforms/arm/nrf52/boards/nrf52840-dk/index.md","filePath":"en/platforms/arm/nrf52/boards/nrf52840-dk/index.md"}'),n={name:"en/platforms/arm/nrf52/boards/nrf52840-dk/index.md"};function s(i,e,l,h,d,c){return r(),t("div",null,e[0]||(e[0]=[o(`<h1 id="nrf52840-dk" tabindex="-1">nRF52840-DK <a class="header-anchor" href="#nrf52840-dk" aria-label="Permalink to &quot;nRF52840-DK&quot;">​</a></h1><p>chip:nrf52, chip:nrf52840</p><p>The <a href="https://www.nordicsemi.com/Products/Development-hardware/nRF52840-DK" target="_blank" rel="noreferrer">NRF52840-DK (PCA10056)</a> is a development board for the nRF52840 SoC from Nordic.</p><h2 id="serial-console" tabindex="-1">Serial Console <a class="header-anchor" href="#serial-console" aria-label="Permalink to &quot;Serial Console&quot;">​</a></h2><p>The PCA10056 default console is the UART0.</p><p>The PCA10056 does not have RS-232 drivers or serial connectors on board. UART0 is connected to the virtual COM port:</p><p>Signal PIN</p><hr><p>UART0-RX P0.08 UART0-TX P0.06</p><h2 id="leds-and-buttons" tabindex="-1">LEDs and Buttons <a class="header-anchor" href="#leds-and-buttons" aria-label="Permalink to &quot;LEDs and Buttons&quot;">​</a></h2><h3 id="leds" tabindex="-1">LEDs <a class="header-anchor" href="#leds" aria-label="Permalink to &quot;LEDs&quot;">​</a></h3><p>The PCA10056 has 4 user-controllable LEDs:</p><p>LED MCU</p><hr><p>LED1 P0.13 LED2 P0.14 LED3 P0.15 LED4 P0.26</p><p>A low output illuminates the LED.</p><h3 id="pushbuttons" tabindex="-1">Pushbuttons <a class="header-anchor" href="#pushbuttons" aria-label="Permalink to &quot;Pushbuttons&quot;">​</a></h3><p>BUTTON MCU</p><hr><p>BUTTON1 P0.11 BUTTON2 P0.12 BUTTON3 P0.24 BUTTON4 P0.25</p><h2 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-label="Permalink to &quot;Configurations&quot;">​</a></h2><p>Each configuration is maintained in a sub-directory and can be selected as follow:</p><pre><code>tools/configure.sh nrf52840-dk:&lt;subdir&gt;
</code></pre><p>Where &lt;subdir&gt; is one of the following:</p><h3 id="jumbo" tabindex="-1">jumbo <a class="header-anchor" href="#jumbo" aria-label="Permalink to &quot;jumbo&quot;">​</a></h3><p>This configuration enables many Apache NuttX features. This is mostly to help provide additional code coverage in CI, but also allows for a users to see a wide range of features that are supported by the OS.</p><h3 id="cdcacm" tabindex="-1">cdcacm <a class="header-anchor" href="#cdcacm" aria-label="Permalink to &quot;cdcacm&quot;">​</a></h3><p>NuttShell configuration with support for CDC/ACM USB device driver.</p><h3 id="composite" tabindex="-1">composite <a class="header-anchor" href="#composite" aria-label="Permalink to &quot;composite&quot;">​</a></h3><p>NuttShell configuration with support for CDC/ACM with RNDIS composite driver.</p><h3 id="highpri" tabindex="-1">highpri <a class="header-anchor" href="#highpri" aria-label="Permalink to &quot;highpri&quot;">​</a></h3><p>This application demonstrates high priority interrupt feature of the NuttX.</p><h3 id="nsh" tabindex="-1">nsh <a class="header-anchor" href="#nsh" aria-label="Permalink to &quot;nsh&quot;">​</a></h3><p>Basic NuttShell configuration (console enabled in UART0, exposed via J-Link VCOM connection, at 115200 bps).</p><h3 id="ostest-tickless" tabindex="-1">ostest_tickless <a class="header-anchor" href="#ostest-tickless" aria-label="Permalink to &quot;ostest\\_tickless&quot;">​</a></h3><p>This is a NSH configuration that includes <code>apps/testing/ostest</code> as a builtin and enable support for the tick-less OS.</p><h3 id="rndis" tabindex="-1">rndis <a class="header-anchor" href="#rndis" aria-label="Permalink to &quot;rndis&quot;">​</a></h3><p>NuttShell configuration with support for RNDIS USB device driver.</p><h3 id="sdc" tabindex="-1">sdc <a class="header-anchor" href="#sdc" aria-label="Permalink to &quot;sdc&quot;">​</a></h3><p>Enables Nordic&#39;s SoftDevice controller and uses NuttX BLE stack for the host-layer. The <code>btsak</code> application is included as a builtin.</p><h3 id="sdc-nimble" tabindex="-1">sdc_nimble <a class="header-anchor" href="#sdc-nimble" aria-label="Permalink to &quot;sdc\\_nimble&quot;">​</a></h3><p>Enables Nordic&#39;s SoftDevice controller and uses nimBLE for the host-layer. The <code>nimble</code> test application can be used to enable a simple GATT server.</p><h3 id="sx127x" tabindex="-1">sx127x <a class="header-anchor" href="#sx127x" aria-label="Permalink to &quot;sx127x&quot;">​</a></h3><p>NuttShell configuration with support for sx127x chip.</p><h3 id="usbnsh" tabindex="-1">usbnsh <a class="header-anchor" href="#usbnsh" aria-label="Permalink to &quot;usbnsh&quot;">​</a></h3><p>Basic NuttShell configuration (CDCACM console enabled in USB Port, at 115200 bps).</p><h3 id="ieee802154-6lowpan" tabindex="-1">ieee802154_6lowpan <a class="header-anchor" href="#ieee802154-6lowpan" aria-label="Permalink to &quot;ieee802154\\_6lowpan&quot;">​</a></h3><p>Cheat Sheet. Here is a concise summary of all all the steps needed to run the UDP test (C=Coordinator; E=Endpoint):</p><pre><code>C: nsh&gt; i8 wpan0 startpan cd:ab
C: nsh&gt; i8 set saddr 0A:00
C: nsh&gt; i8 set ep_saddr 0B:00
C: nsh&gt; i8 acceptassoc
E: nsh&gt; i8 wpan0 assoc
C: nsh&gt; ifup wpan0
C: nsh&gt; ifconfig          &lt;-- To get the &lt;server-ip&gt;
E: nsh&gt; ifup wpan0
C: nsh&gt; udpserver &amp;
E: nsh&gt; udpclient &lt;server-ip&gt; &amp;
</code></pre>`,49)]))}const b=a(n,[["render",s]]);export{u as __pageData,b as default};
