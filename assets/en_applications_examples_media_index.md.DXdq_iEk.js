import{_ as a,c as t,al as s,o as i}from"./chunks/framework.NFAqBSgQ.js";const m=JSON.parse('{"title":"media Media test","description":"","frontmatter":{},"headers":[],"relativePath":"en/applications/examples/media/index.md","filePath":"en/applications/examples/media/index.md"}'),r={name:"en/applications/examples/media/index.md"};function d(n,e,c,l,o,p){return i(),t("div",null,e[0]||(e[0]=[s('<h1 id="media-media-test" tabindex="-1"><code>media</code> Media test <a class="header-anchor" href="#media-media-test" aria-label="Permalink to &quot;`media` Media test&quot;">â€‹</a></h1><p>The media test simply writes values onto the media hidden behind a character driver and verifies that the media can be successfully written and read. This low level test is useful in the early phases of the bringup of a new block or mtd driver because it avoids the complexity of a file system.</p><p>This test uses a character driver and cannot directly access block or mtd drivers. This test is suitable for use EEPROM character drivers (see <code>nuttx/drivers/eeprom</code>), or with block drivers wrapped as character drivers (see <code>nuttx/drivers/bch</code>)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int ret = bchdev_register(&lt;path-to-block-driver&gt;, &lt;path-to-character-driver&gt;,</span></span>\n<span class="line"><span>                          false);</span></span></code></pre></div><p>MTD drivers need an additional wrapper layer, the FTL wrapper must first be used to convert the MTD driver to a block device:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>int ret = ftl_initialize(&lt;N&gt;, mtd);</span></span>\n<span class="line"><span>ret = bchdev_register(/dev/mtdblock&lt;N&gt;, &lt;path-to-character-driver&gt;, false);</span></span></code></pre></div>',6)]))}const v=a(r,[["render",d]]);export{m as __pageData,v as default};
